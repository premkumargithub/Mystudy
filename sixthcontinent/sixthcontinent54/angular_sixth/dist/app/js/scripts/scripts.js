app.controller('CitizenAffiliatedkController',['$scope', '$http', 'AffiliatedkService', function ($scope, $http, AffiliatedkService) {
	$scope.followersLoader = true;
	$scope.resultNotFound = false;
	$scope.citizenAffiliate = [];
	$scope.affilateAllList = [];
	$scope.allRes = 1;
	$scope.totalSize = 0;
	$scope.firsttime = 1;
	$scope.getCitizenAffiliate = function() {
		var limit_start = $scope.citizenAffiliate.length;
		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.limit_start = limit_start;
		opts.limit_size = APP.affiliation.end;
		//console.log("total= "+ $scope.totalSize + "res= "+$scope.allRes + "start = "+ limit_start + " end = "+ APP.affiliation.end)
		if ((( $scope.totalSize > limit_start) || ($scope.totalSize === 0 && $scope.firsttime === 1)) && $scope.allRes === 1) {
			$scope.allRes = 0;
			$scope.followersLoader = true;
			AffiliatedkService.getCitizenAffiliates(opts, function(data) {
				$scope.allRes = 1;
				if(data.code == 101) {
					$scope.citizenAffiliate = $.merge($scope.citizenAffiliate, data.data.affiliates);
					$scope.totalSize = data.data.count;
					$scope.followersLoader = false;
					$scope.resultNotFound = true;
					$scope.firsttime = 0;
				} else {
					$scope.followersLoader = false;
					$scope.resultNotFound = true;
				}
			});
		}
	}

	$scope.getCitizenAffiliate();

    $scope.loadMore = function() {
    	$scope.getCitizenAffiliate();
    };
}]);

app.controller('ShopAffiliatedkController',['$scope', '$http', 'AffiliatedkService', function ($scope, $http, AffiliatedkService) {
	$scope.followersLoader = true;
	$scope.resultNotFound = false;
	$scope.shopAffiliate = [];
	$scope.allRes = 1;
	$scope.totalSize = 0;
	$scope.incomeTax = APP.incomeTax;
	$scope.firsttime = 1;
	$scope.getShopAffiliate = function() {
		var limit_start = $scope.shopAffiliate.length;
		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.limit_start = limit_start;
		opts.limit_size = APP.affiliation.end;
		//console.log("total= "+ $scope.totalSize + "res= "+$scope.allRes + "start = "+ limit_start + " end = "+ APP.affiliation.end)
		if ((( $scope.totalSize > limit_start) || ($scope.totalSize === 0 && $scope.firsttime) === 1) && $scope.allRes === 1) {
			$scope.allRes = 0;
			$scope.followersLoader = true;
			AffiliatedkService.getShopAffiliates(opts, function(data) {
				$scope.allRes = 1;
				if(data.code == 101) {
					$scope.shopAffiliate = $.merge($scope.shopAffiliate, data.data.affiliates);
					$scope.totalSize = data.data.count;
					$scope.followersLoader = false;
					$scope.resultNotFound = true;
					$scope.firsttime = 0;
				} else {
					$scope.followersLoader = false;
					$scope.resultNotFound = true;
				}
			});
		}
	}

	$scope.getShopAffiliate();

    $scope.loadMore = function() {
    	$scope.getShopAffiliate();
    };
}]);

app.controller('ShopAffiliatedkForBroker',['$scope', '$http', 'AffiliatedkService', function ($scope, $http, AffiliatedkService) {
	$scope.followersLoader = true;
	$scope.resultNotFound = false;
	$scope.shopAffiliate = [];
	$scope.allRes = 1;
	$scope.totalSize = 0;
	$scope.incomeTax = APP.incomeTax;
	$scope.getShopAffiliate = function() {
		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.limit_start = APP.affiliation.start;
		opts.limit_size = 50;//APP.affiliation.end;
		if ($scope.allRes == 1) {
			$scope.allRes = 0;
			$scope.followersLoader = true;
			AffiliatedkService.getShopAffiliates(opts, function(data) {
				$scope.allRes = 1;
				if(data.code == 101) {
					$scope.filterItems(data.data.affiliates, function(data) {
						$scope.shopAffiliate = data;
					});
					$scope.totalSize = data.data.count;
					$scope.followersLoader = false;
					$scope.resultNotFound = true;
				} else {
					$scope.followersLoader = false;
					$scope.resultNotFound = true;
				}
			});
		}
	};

	$scope.filterItems = function(orders, callback) {
		var filtered_list = [];
		var date = new Date();
		var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
		var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);
		for (var i = 0; i < orders.length; i++) {
			if(orders.created_at >= firstDay &&  orders.created_at <= lastDay) {
				filtered_list.push(orders[i]);
			}
		}
		callback(filtered_list);
	}

	$scope.getShopAffiliate();

}]);

app.controller('BrokerAffiliatedkController',['$scope', '$http', 'AffiliatedkService', function ($scope, $http, AffiliatedkService) {
	$scope.followersLoader = true;
	$scope.resultNotFound = false;
	$scope.brokerAffiliate = [];
	$scope.allRes = 1;
	$scope.totalSize = 0;
	$scope.getBrokerAffiliate = function() {
		var limit_start = $scope.brokerAffiliate.length;
		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.limit_start = limit_start;
		opts.limit_size = APP.affiliation.end;
		if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
			$scope.allRes = 0;
			$scope.followersLoader = true;
			AffiliatedkService.getBrokerAffiliates(opts, function(data) {
				$scope.allRes = 1;
				if(data.code == 101) {
					$scope.brokerAffiliate = $.merge($scope.brokerAffiliate, data.data.affiliates);
					$scope.totalSize = data.data.count;
					$scope.followersLoader = false;
					$scope.resultNotFound = true;
				} else {
					$scope.followersLoader = false;
					$scope.resultNotFound = true;
				}
			});
		}
	}
	$scope.getBrokerAffiliate();

    $scope.loadMore = function() {
    	$scope.getBrokerAffiliate();
    };
}]);
app.controller('AlbumController', ['$scope', '$rootScope', '$modal', '$log', 'AlbumService', '$location', '$routeParams', '$timeout', 'ProfileImageService', 'fileReader', 'FileUploader', 'ProfileService','TranslationService', 'focus', function ($scope, $rootScope, $modal, $log, AlbumService, $location, $routeParams, $timeout, ProfileImageService, fileReader, FileUploader, ProfileService, TranslationService, focus) {

    $scope.myValue = false;
    $scope.albloader = false;
    $scope.noAlbums = false;
    $scope.noPhotos = false;
    $scope.uploadloader = false;
    $scope.albumResponse = "";
    $scope.listload = false;
    $scope.listAlbum = [];
    $scope.totalSize = 0;
    $scope.allRes = 1;
    $scope.viewalbum = [];
    $scope.imagecount = 0;
    $scope.totalSizeImg = 0;
    $scope.allResImg = 1;
    $scope.albumId = $routeParams.album_id;
    $scope.albumErrResponse = false;
    $scope.storedFriend =[];
    $scope.tagged_Friends = [];
    $scope.tag = false;
    $scope.tagged_photo = [];
    $scope.Name = APP.currentUser.firstname + " " + APP.currentUser.lastname;
    $scope.albmPrivacySet = 3;
    $scope.userAlbumSubmitted = false;
    $scope.createAlbumLoader = false;
    //Create Album 
    $scope.createAlbum = function(){
        $scope.userAlbumSubmitted = true;
        if($scope.user.albumname === undefined || $scope.user.albumname === '') {
            $scope.userAlbumForm.albumname.$dirty = true;
            $scope.userAlbumForm.albumname.$invalid = true;
            $scope.userAlbumForm.albumname.$error.required = true;
            focus('albumname');
            return false;
        } else if ($scope.user.albumdesc === undefined || $scope.user.albumdesc === '') {
            $scope.userAlbumForm.albumdesc.$dirty = true;
            $scope.userAlbumForm.albumdesc.$invalid = true;
            $scope.userAlbumForm.albumdesc.$error.required = true;
            focus('albumdesc');
            return false;
        } else if ($scope.albmPrivacySet === undefined || $scope.albmPrivacySet === '') {
            $scope.userAlbumForm.albumprivacy.$dirty = true;
            $scope.userAlbumForm.albumprivacy.$invalid = true;
            $scope.userAlbumForm.albumprivacy.$error.required = true;
            focus('albumprivacy');
            return false;
        } else {
            $scope.createAlbumLoader = true;
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.album_name = $scope.user.albumname; 
            opts.album_desc = $scope.user.albumdesc;
            opts.privacy_setting = $scope.albmPrivacySet;

            AlbumService.createAlbum(opts, function(data){   
                $scope.createAlbumLoader = false; 
                $scope.userAlbumSubmitted = false;         
                if(data.code == 101) {
                    $scope.listAlbum.length = 0;
                    $scope.albloader = true; 
                    $scope.albumListing('listing');
                    $scope.user = null; 
                    $scope.myValue = !$scope.myValue;  
                    $scope.albumResponse = $scope.i18n.albums.album_created;
                    $timeout(function() {
                        $scope.albumResponse = '';
                    }, 5000);                                  
                } else {
                    $scope.albumErrorResponse = $scope.i18n.albums.gone_wrong;
                    $timeout(function() {
                        $scope.albumErrorResponse = '';
                    }, 5000);
                }
            });
        }  
    }

    $scope.editAlbumForm = false;
    $scope.updateUserAlbum = false;
    $scope.editAlbum = function(temp) {
        $scope.editAlbumData = {};
        $scope.editAlbumData.id = temp.id;
        $scope.editAlbumData.album_name = temp.album_name;
        $scope.editAlbumData.album_description = temp.album_description;
        $scope.editAlbumData.album_privacy = temp.album_privacy;
        $scope.editAlbumForm = !$scope.editAlbumForm;
    }

    $scope.closeEditForm = function() {
        $scope.editAlbumForm = !$scope.editAlbumForm;
        $scope.editAlbumData = {};
    }

    $scope.updateAlbum = function() {
        $scope.userAlbumSubmitted = true;
        if($scope.editAlbumData.album_name === undefined || $scope.editAlbumData.album_name === '') {
            $scope.albumEditForm.editalbumname.$dirty = true;
            $scope.albumEditForm.editalbumname.$invalid = true;
            $scope.albumEditForm.editalbumname.$error.required = true;
            focus('editalbumname'); 
        } else if ($scope.editAlbumData.album_description === undefined || $scope.editAlbumData.album_description === '') {
            $scope.albumEditForm.editalbumdesc.$dirty = true;
            $scope.albumEditForm.editalbumdesc.$invalid = true;
            $scope.albumEditForm.editalbumdesc.$error.required = true;
            focus('editalbumdesc');
        } else {
            $scope.updateUserAlbum = true;
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.album_id = $scope.editAlbumData.id;
            opts.album_name = $scope.editAlbumData.album_name; 
            opts.album_desc = $scope.editAlbumData.album_description;
            opts.privacy_setting = $scope.editAlbumData.album_privacy;
            opts.type = 'user';
            AlbumService.updateAlbum(opts, function(data){
                $scope.updateUserAlbum = false;
                $scope.userAlbumSubmitted = false;
                if(data.code == 101) {
                    $scope.editAlbumForm = !$scope.editAlbumForm;
                    $scope.listAlbum.length = 0;
                    $scope.albumListing('listing');
                    $scope.user = null;   
                    $scope.albumResponse = $scope.i18n.albums.album_updated;
                    $timeout(function() {
                            $scope.albumResponse = '';
                    }, 15000);   
                                                
                } else {
                    $scope.editAlbumForm = !$scope.editAlbumForm;
                    $scope.albumErrorResponse = $scope.i18n.albums.gone_wrong;
                    $timeout(function() {
                            $scope.albumErrorResponse = '';
                    }, 15000);
                }
            });
        } 
    }

    //Upload media 
    $scope.uploadmediaAlbum = function(){
        if($scope.imageToUpload == undefined || $scope.imageToUpload.length == 0){
            $scope.fileNotValid = true;
            $scope.fileNotValidMsg = $scope.i18n.albums.select_image_first;
            $timeout(function(){
                $scope.fileNotValidMsg = "";
                $scope.fileNotValid = false;
            }, 15000);
            return false;
        } 
        $scope.uploadloader = true;
        $('#addbutton').hide();
        var albumId = $routeParams.album_id;

        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.album_id = $scope.albumId;
        opts.post_type = 1;
        var filescount = $scope.imageToUpload.length;
        opts.media_id = [];
        angular.forEach($scope.imageToUpload, function(file) {
              opts.media_id.push(file.media_id);
        });
        angular.forEach($scope.imageToUpload, function(index,file) {
              // opts.media_id.push(file.media_id);
              //$scope.imagePrvSrc[index].desc = $('#text'+file.media_id).val()
        });
        $scope.fileNotValidMsg = "";
        $scope.fileNotValid = false;
        AlbumService.finalMediaAlbum(opts, function(data){ 
           if(data.code == 101) {
                $scope.uploadloader = false;
                $('#addbutton').show();
                $scope.viewalbum.length = 0;
                $scope.totalSizeImg = 0;
                $scope.allResImg = 1;
                $scope.viewAlbum('upload');
                $timeout(function() {
                    $scope.albumResponse = '';
                }, 15000);
                $("input[type='file']").val('');
                $scope.postFiles = [];
                $scope.imageToUpload = [];
                $scope.imgUpload = false;
                uploader.queue = [];
           } else {
                $scope.uploadloader = false;
                $('#addbutton').show();
                $scope.albumResponse = data.message;
                $timeout(function() {
                    $scope.albumResponse = '';
                }, 15000);
           }
        });
    }

    $scope.fileNotValid = false;
    $scope.fileNotValidMsg = '';
    $scope.tempAlbumId = '';
    $scope.albumImgLoader = [];
    $scope.imagePrvSrc = $scope.viewalbum;
    $scope.imageToUpload = [];
    
    // one by one file uploading section start
    var uploader =  $scope.uploader = new FileUploader({
          url: APP.service.uploadmediaAlbum+"?access_token="+APP.accessToken,
          headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'method': 'POST'
              /*'Accept': 'text/json'*/
          },
          data:{
              'user_id': APP.currentUser.id,
              'album_id':$scope.albumId, 
              'post_type':"0"
          },
          dataObjName:'reqObj',
          formDataName:'user_media[]'
        });
        // FILTERS
        uploader.filters.push({
            name: 'user_media[]',
            fn: function(item /*{File|FileLikeObject}*/, options) {
                var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
            }
        });

        uploader.onAfterAddingFile = function(fileItem) {
            $scope.postContentStart = true;
            var queueLen = uploader.queue.length;
            if(uploader.queue.length != 0){
                $scope.uploadBox = false;
                $scope.imgUpload = true;
            }
            $scope.albumImgLoader[queueLen] = true;
            uploader.uploadItem(fileItem);
        };

        uploader.onSuccessItem = function(fileItem, response, status, headers) {
            var index = uploader.getIndexOfItem(fileItem);
            if(response.code == 101){
                $scope.imageToUpload.push(response.data);
                // $scope.imagePrvSrc[index] = response.data;
                $scope.albumImgLoader[index] = false;
            }
        };

        uploader.onCompleteAll = function() {
            $scope.postContentStart = false;
        }

        uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
            $scope.fileNotValid = true;
            $scope.fileNotValidMsg = $scope.i18n.albums.upload_media_invalid;
            $timeout(function(){
                $scope.fileNotValidMsg = '';
            }, 4000);
        };
    

    //remove iamge from preview arra
    $scope.removeImage = function(index,type) {
        var tempImg = type==2 ? $scope.imagePrvSrc[index] : $scope.imageToUpload[index];
        type==2 ? $scope.imagePrvSrc.splice(index, 1) : $scope.imageToUpload.splice(index, 1);
        if($scope.uploader.queue[index]){
            var item = $scope.uploader.queue[index];
            item.remove();
        }
        //calling the service to delete the selected post 
        if(tempImg){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.album_id = $scope.albumId;
            opts.media_id = tempImg.media_id ? tempImg.media_id : tempImg.id;
            AlbumService.deleteMediaAlbum(opts, function(data){
                if(data.code == 101) {
                    if(!tempImg.media_id) $scope.viewalbum.splice(index, 1);
                } else {
                    type==2 ? $scope.imagePrvSrc[index] = tempImg :  $scope.imageToUpload[index] = tempImg;
                    $timeout(function(){
                        $scope.albumErrMsg = data.message;
                    }, 4000);
                }
            });
        }
    };
    
    // $scope.imageModal = function(index, photos){
    //     $scope.index = index;
    //     $scope.photos = photos;
    //     $scope.pre_visible = true;
    //     $scope.loader = false;
    //     $scope.next_visible = true;
    //     if(index === 0) $scope.pre_visible = false;
    //     if((photos.length-1)=== index) $scope.next_visible = false;
    //     var modalInstance = $modal.open({

    //         template: '<style>.modal-content img.tag-imgae{max-height: 100%;max-height: 100%;position: absolute;right: 0;left: 0;top: 0;bottom: 0;margin: auto}.modal.in .modal-dialog{max-width: 80%;margin: auto;height: 90%;left: 0;right: 0;top: 0;bottom: 0;position: absolute}.modal .modal-content{border: 5px solid #fff;height: 100%}.modal-img-inner{background: #000;height: 100%}.modal-img-tag-desc .modal-tag-frnds-input input[type="text"]{width: auto;background: none;border: 1px solid #666;color: #aaa;padding: 5px 10px;box-shadow: rgb(204, 204, 204) 0px 0px 1px 0px !important;-moz-box-shadow: rgb(204, 204, 204) 0px 0px 1px 0px !important;-webkit-box-shadow: rgb(204, 204, 204) 0px 0px 1px 0px !important;}.modal-img-tag-desc{padding: 10px; z-index: 8042;}.modal.in .modal-dialog .fancybox-wrap{position: relative}.modal-img-tag-desc{background-color: rgba(0, 0, 0, .8);width: 100%;position:absolute;bottom: 0}.modal-img-tag-desc > span{display: inline-block;vertical-align: middle}.modal-img-tag-desc span.tag-list-block .tag-friends{display: inline-block;vertical-align: middle;margin: 0 0px 0 5px;background: rgba(255, 255, 255, .2);color: #fff;padding: 4px 6px;font-size: 12px;font-weight: 400;border-radius: 3px}.modal-img-tag-desc span.tag-list-block .tag-friends b{margin-left: 5px}.modal-content .modal-img-tag{font-weight: bold;position: absolute;top: 10px;right: 10px;background: #fff;padding: 4px 8px;-webkit-border-radius: 2px;-moz-border-radius: 2px;-ms-border-radius: 2px;-o-border-radius: 2px;border-radius: 2px;box-shadow:0px 0px 2px 1px #ddd;-moz-box-shadow:0px 0px 2px 1px #ddd;-webkit-box-shadow:0px 0px 2px 1px #ddd;z-index: 8042;}.modal-content .modal-img-tag img{width: 15px;height: auto; margin: 0 0 0 4px;}</style><div class="modal-img-inner"><img src="'+photos[index].media_path+'" class="tag-imgae"><div class="slide-contros"><a data-ng-show="pre_visible" data-ng-click="pre_image(index,photos)" class="pre slide-btn" href><span></span><a/><a data-ng-click="next_image(index,photos)" data-ng-show = "next_visible" class="next slide-btn" href><span></span><a/></div><span class="sideloader" data-ng-show="loader"><img title="" alt="" src="app/assets/images/proceed.gif"></span><div data-ng-hide="loader" class="modal-img-tag" ng-click="untagg()">Untag <img title="Remove Tag" alt="Tag Friends" src="app/assets/images/tag-icon-remove.png" ></div></div>',

    //         controller: 'ModalController',
    //         size: 'lg',
    //         scope: $scope,
    //     });
    //     // $scope.tagged_Friends = []
    //     modalInstance.result.then(function (selectedItem) {
    //     }, function () {
    //         $log.info('Modal dismissed at: ' + new Date());
    //     });

    //     $scope.untagg = function(){
    //         $scope.loader = true;
    //         var opts ={};
    //         opts.user_id = APP.currentUser.id;
    //         opts.untag_user_id = APP.currentUser.id;
    //         opts.media_id = $scope.photos[$scope.index].id;

    //         AlbumService.removeTaggedPhoto(opts,function(data){
    //             if(data.code===101){
    //                 modalInstance.close();
    //                 var tempIndex = $scope.tagged_photo.indexOf($scope.photos[$scope.index])
    //                 $scope.tagged_photo.splice(tempIndex,1)
    //             }else{
    //                 $scope.loader = false;
    //             }
    //         })
    //     }
    //     $scope.pre_image = function (index, photos){
    //         modalInstance.close();
    //         $scope.imageModal(index-1, photos);
    //     }

    //     $scope.next_image = function (index, photos, leng){
    //         modalInstance.close()
    //         $scope.imageModal(index+1, photos);
    //     }
    // }

    // $scope.createModal = function(index, viewalbum, leng){
    //     $scope.index = index;
    //     $scope.viewalbum = viewalbum;
    //     $scope.leng = leng
    //     $scope.item_id = viewalbum[index].id;
    //     $scope.pre_visible = true;
    //     $scope.next_visible = true;
    //     $scope.friendTagIndex = 0;
    //     if(index === 0) $scope.pre_visible = false;
    //     if((leng-1)=== index) $scope.next_visible = false;
    //     // $scope.tagged_Friends = tagged_friends;
    //     $scope.tagged_Friends = [];
    //     angular.forEach(viewalbum[index].tagged_friends_info, function(obj){
    //         obj.user_id = obj.id;
    //         obj.user_info = {};
    //         obj.user_info.first_name = obj.first_name;
    //         obj.user_info.last_name = obj.last_name;
    //         $scope.tagged_Friends.push(obj)
    //     });
    //     $scope.storedFriend = [];

    //     angular.forEach($scope.tagged_Friends,function(obj){
    //         $scope.storedFriend.push(obj)
    //     });
    //     $scope.loader = false;
    //     var modalInstance = $modal.open({
    //         template: '<style>.modal-content img.tag-imgae{max-height: 100%;max-height: 100%;position: absolute;right: 0;left: 0;top: 0;bottom: 0;margin: auto}.modal.in .modal-dialog{max-width: 80%;margin: auto;height: 90%;left: 0;right: 0;top: 0;bottom: 0;position: absolute}.modal .modal-content{border: border: 5px solid #fff;height: 100%}.modal-img-inner{background: #000;height: 100%}.modal-img-tag-desc .modal-tag-frnds-input input[type="text"]{width: auto;background: none;border: 1px solid #666;color: #aaa;padding: 5px 10px;box-shadow: rgb(204, 204, 204) 0px 0px 1px 0px !important;-moz-box-shadow: rgb(204, 204, 204) 0px 0px 1px 0px !important;-webkit-box-shadow: rgb(204, 204, 204) 0px 0px 1px 0px !important;}.modal-img-tag-desc{padding: 10px; z-index: 8042;}.modal.in .modal-dialog .fancybox-wrap{position: relative}.modal-img-tag-desc{background-color: rgba(0, 0, 0, .8);width: 100%;position:absolute;bottom: 0}.modal-img-tag-desc > span{display: inline-block;vertical-align: middle}.modal-img-tag-desc span.tag-list-block .tag-friends{display: inline-block;vertical-align: middle;margin: 0 0px 0 5px;background: rgba(255, 255, 255, .2);color: #fff;padding: 4px 6px;font-size: 12px;font-weight: 400;border-radius: 3px}.modal-img-tag-desc span.tag-list-block .tag-friends b{margin-left: 5px}.modal-content .modal-img-tag{font-weight: bold;position: absolute;top: 10px;right: 10px;background: #fff;padding: 4px 8px;-webkit-border-radius: 2px;-moz-border-radius: 2px;-ms-border-radius: 2px;-o-border-radius: 2px;border-radius: 2px;box-shadow:0px 0px 2px 1px #ddd;-moz-box-shadow:0px 0px 2px 1px #ddd;-webkit-box-shadow:0px 0px 2px 1px #ddd;z-index: 8042;}.modal-content .modal-img-tag img{width: 15px;height: auto; margin: 0 0 0 4px;}</style><div class="modal-img-inner"><img src="'+viewalbum[index].media_path+'" class="tag-imgae"><div class="slide-contros"><a data-ng-show="pre_visible && !tag" data-ng-click="pre_image(index,viewalbum,leng)" class="pre slide-btn" href><span></span><a/><a data-ng-click="next_image(index,viewalbum,leng)" data-ng-show = "next_visible && !tag" class="next slide-btn" href><span></span><a/></div><div class="modal-img-tag" ng-click="toggle()"><a href>Tag <img title="Tag Friends" alt="Tag Friends" src="app/assets/images/tag-icon.png" ></a></div><div class="modal-img-tag-desc"><span class="modal-tag-frnds-input"><input id="searchTagFriend" data-ng-if="tag===true" type="text" data-ng-model="friendName" placeholder="Tag Your friends" ng-keyup="tagFriendSuggestion($event, friendName)" data-ng-blur="lostFocus()"/><div class="post-tag-friend-list" data-ng-show="showFriendList"><ul><li data-ng-repeat="friend in friends" data-ng-click="selectFriend(friend)" ng-mouseover="$parent.friendTagIndex=$index" ng-class="{active : friendTagIndex===$index}"><a href><img alt="" data-ng-if=friend.user_info.profile_image_thumb src={{friend.user_info.profile_image_thumb}} width="" height=""/><img alt="" data-ng-if=!friend.user_info.profile_image_thumb src= "app/assets/images/dummy32X32.jpg" width="" height=""/><span>{{friend.user_info.first_name}} {{friend.user_info.last_name}}</span></a></li></ul><span ng-show="showSearchLoader" class="ng-hide loading-icon"><img titile="" alt="" src="app/assets/images/proceed.gif"></span></div></span><span class="tag-list-block"><span class="tag-friends" data-ng-repeat="tags in storedFriend">{{tags.user_info.first_name}} {{tags.user_info.last_name}}<span data-ng-if="tag===true" class="remove-tag-btn" data-ng-click="removeTagFriend($index)"><b class="fa fa-times cross"></b></span></span><span class="sideloader" data-ng-show="loader"><img title="" alt="" src="app/assets/images/proceed.gif"></span><span class="modal-img-tag" data-ng-if="tag===true"><a href data-ng-click="taggService()">Update</a></span></span></div></div>',
    //         controller: 'ModalController',
    //         size: 'lg',
    //         scope: $scope,
    //     });
    //     // $scope.tagged_Friends = []
    //     modalInstance.result.then(function (selectedItem) {
    //     }, function () {
    //         $log.info('Modal dismissed at: ' + new Date());
    //         $scope.storedFriend = [];
    //         $scope.tagged_Friends = [];
    //         $scope.tag = false;
    //     });

    //     $scope.pre_image = function (index, viewablum, leng){
    //         modalInstance.close();
    //         $scope.createModal(index-1, viewablum, leng);
    //     }

    //     $scope.next_image = function (index, viewablum, leng){
    //         modalInstance.close()
    //         $scope.createModal(index+1, viewablum, leng);
    //     }

    //     var DELAY_TIME_BEFORE_POSTING = 300;
    //     var currentTimeout = null;
    //     $scope.friends = [];
    //     $scope.cancelFriendSearch = false;
    //     $scope.showSearchLoader = false;

    //     $scope.tagFriendSuggestion = function(event, friendname){
    //         if(event.keyCode===40){
    //             event.preventDefault();
    //             if($scope.friendTagIndex+1 !== $scope.friends.length){
    //                 $scope.friendTagIndex++;
    //             }
    //         }else if(event.keyCode===38){
    //             event.preventDefault();
    //             if($scope.friendTagIndex-1 !== -1){
    //                 $scope.friendTagIndex--;
    //             }
    //         }else if(event.keyCode===13){
    //                 $scope.selectFriend($scope.friends[$scope.friendTagIndex]);
    //         }
    //         if($('#searchTagFriend').val().trim()==="") $scope.showFriendList = false;
    //         if(!(event.keyCode>=65 && event.keyCode<=95)) return;
    //         $scope.cancelFriendSearch = false;
    //         var opts = {};
    //         opts.user_id = APP.currentUser.id;
    //         friendname ? opts.friend_name = friendname : opts.friend_name = "";
    //         opts.limit_start = 0;
    //         opts.limit_size =  APP.friend_list_pagination.end;
    //         $scope.showSearchLoader = true;

    //         ProfileService.searchFriends(opts,function(data){
    //             $scope.showSearchLoader = false;
    //             if($scope.cancelFriendSearch === false){
    //                 if(data.data.users.length>0) $scope.showFriendList = true;
    //                 else $scope.showFriendList = false;
    //                 $scope.friends = data.data.users;
    //             }
    //         })
    //     };
    //     $scope.toggle = function(){
    //         $scope.tag = !$scope.tag;
    //     }

    //     $scope.taggService = function(){
    //         var opts = {};
    //         opts.user_id = APP.currentUser.id;
    //         opts.album_id = $scope.albumId;
    //         opts.post_type = 1;
    //         opts.media_id = [$scope.item_id];
    //         var frnd_array = []
    //         angular.forEach($scope.storedFriend,function(index){
    //             frnd_array.push(index.user_id);
    //         });
    //         opts.tagged_friends = frnd_array.join(',')
    //         $scope.tag = false;
    //         $scope.loader = true;
    //         AlbumService.photoTaging(opts,function(data){
    //             if(data.code === 101){
    //                 $scope.item_id="";
    //                 // $scope.storedFriend = [];
    //                 $scope.tagged_Friends = [];
    //                 $scope.tag = false;
    //                 $scope.loader = false;
    //                 angular.forEach($scope.storedFriend,function(obj){
    //                     if(!obj.first_name) obj.first_name = obj.user_info.first_name;
    //                     if(!obj.last_name) obj.last_name = obj.user_info.last_name;
    //                 });
    //                 $scope.viewalbum[$scope.index].tagged_friends_info = $scope.storedFriend
                    
    //             }
    //         })
    //     }
    //     // Store friend 
    //     $scope.dublicate = false;

    //     $scope.selectFriend = function(friendInfo){
        
    //         $scope.dublicate = false;
    //         angular.forEach($scope.storedFriend,function(index){
    //             if(index.user_id === friendInfo.user_id){
    //                 $scope.dublicate = true;
    //             }
    //         });

    //         if($scope.dublicate === false){
    //             $scope.storedFriend.push(friendInfo);
    //             $scope.friends = [];
    //             $scope.cancelFriendSearch = true;
    //             $scope.friendTagIndex = -1;
    //             angular.element('#searchTagFriend').val("");
    //             $scope.showFriendList = false;
    //         }else{
    //             $scope.friends = [];
    //             $scope.cancelFriendSearch = true;
    //             $scope.friendTagIndex = -1;
    //             angular.element('#searchTagFriend').val("");
    //             $scope.showFriendList = false;
    //         }
    //     };

    //     // stop the service for loading more service
    //     $scope.lostFocus = function(){
    //         $timeout(function(){
    //             $scope.friends = [];
    //             $scope.cancelFriendSearch = true;
    //             $scope.friendTagIndex = -1;
    //             angular.element('#searchTagFriend').val("");
    //             $scope.showFriendList = false;
    //         },300);
    //     };
    //     // Remove selected friend
    //     $scope.removeTagFriend = function(friendIndex){
    //         //var index = $scope.storedFriend.indexOf(friendIndex);
    //         $scope.storedFriend.splice(friendIndex,1);
    //         //$scope.tagged_Friends = [];
    //     };
    // }

    //Album Listing
    $scope.albumListing = function(type){
        var limit_start = $scope.listAlbum.length;
        if(type == 'delete') {
            $scope.albloader = false;      
        } else if(type === 'listing') {
            $scope.albloader = false;
        } else {
            $scope.albloader = true;
        }
        var limit_start = $scope.listAlbum.length;         
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.friend_id = APP.currentUser.id; // for login user album
        opts.limit_start = limit_start; 
        opts.limit_size = 12;
        opts.friend_id = APP.currentUser.id; 
        if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
            $scope.listload = true;
            $scope.allRes = 0;
            AlbumService.albumListing(opts, function(data){
/*<<<<<<< HEAD
            if(data.code == 101) {
                if(type == 'create') {
                    $scope.albumResponse = $scope.i18n.albums.album_created;
                } else if(type == 'delete') {
                    $scope.albumResponse = $scope.i18n.albums.album_deleted;
                } else {
                   //$scope.albumResponse = "";
                }
                $timeout(function(){
                    $scope.albumResponse = "";
                },15000);

                $('.album-option').removeClass('album-blank');
                $scope.noAlbums = true;    
                $scope.albloader = false;  
                $scope.totalSize = data.data.size;
                $scope.allRes = 1;
                $scope.listAlbum = $scope.listAlbum.concat(data.data.albums);   
                $scope.tagged_photo_available = data.data.tagged_photo;
                if ($scope.tagged_photo_available && $scope.tagged_photo_available.album_name === "Photo Of You"){
                    var opts = {}
                    opts.user_id = APP.currentUser.id;
                    opts.limit_start = 0; 
                    opts.limit_size = 12; 
                    
                    AlbumService.getTaggedPhoto(opts,function(data){
                        $scope.tagged_photo = data.data;
                    })
=======*/
                if(data.code == 101) {
                    if(type == 'create') {
                        $scope.albumResponse = $scope.i18n.albums.album_created;
                    } else if(type == 'delete') {
                        $scope.albumResponse = $scope.i18n.albums.album_deleted;
                    } else {
                       //$scope.albumResponse = "";
                    }
                    $timeout(function(){
                        $scope.albumResponse = "";
                    },15000);

                    $('.album-option').removeClass('album-blank');
                    $scope.noAlbums = true;    
                    $scope.albloader = false;  
                    $scope.totalSize = data.data.size;
                    $scope.allRes = 1;
                    $scope.listAlbum = $scope.listAlbum.concat(data.data.albums);   
                    $scope.tagged_photo_available = data.data.tagged_photo;
                    if ($scope.tagged_photo_available && $scope.tagged_photo_available.album_name === "Photo Of You"){
                        var opts = {}
                        opts.user_id = APP.currentUser.id;
                        opts.session_id = APP.currentUser.id;
                        opts.limit_start = 0; 
                        opts.limit_size = 12; 
                        AlbumService.getTaggedPhoto(opts,function(data){
                            $scope.tagged_photo = data.data;
                        })
                    }
                    $scope.listload = false; 
                    if($scope.totalSize == 0) {

                    } else {
                        if(document.getElementById("albumname")){
                            $scope.user = {};     
                        }   
                    }
                }else {
                    $scope.albloader = false; 
                    $scope.listload = false; 
//>>>>>>> 22e8b7b0469595f15e224c6608040ebe6a6a684d
                }
            });
        }
    };

    //infinite scroll loadmore
    $scope.loadMore = function() {     
        $scope.albumListing('listing');
    };
    $scope.loadMoreImage = function() {
        if($scope.viewalbum.length < $scope.imagecount) {
            $scope.viewAlbum('listing');
        } else {
            $scope.listload = false;
        }
    };

    //Delete Album 
    $scope.delAlbmLoader = [];
    $scope.deleteAlbum = function(indx){  
        $scope.delAlbmLoader[indx] = true;
        var tempItem = $scope.listAlbum[indx];
        var opts = {};
        opts.user_id = $scope.currentUser.id;
        opts.album_id = tempItem.id;
        AlbumService.deleteAlbum(opts, function(data){
           if(data.code == 101) {
                $scope.delAlbmLoader[indx] = true;
                $scope.listAlbum.splice(indx,1);
                $timeout(function() {
                        $scope.delAlbmLoader[indx] = '';
                }, 15000);
            }
        });
    }
    //View Album 
    $scope.albumDescription = '';
    $scope.viewAlbum = function(type){
        var limit_start = $scope.viewalbum.length;
        if(type == 'delete') {
            $scope.albloader = false; 
        } else if(type === 'listing') {

            $scope.albloader = false;
        } else if(type === 'upload') {

            $scope.albloader = false;
        } else {
           $scope.albloader = true;          
        }
        var albumId = $routeParams.album_id;
        $scope.albumname = $routeParams.album_name;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.friend_id = APP.currentUser.id;
        opts.album_id = albumId;
        opts.limit_start = limit_start;
        opts.limit_size = 12;
        if ((( $scope.totalSizeImg > limit_start) || $scope.totalSizeImg == 0 ) && $scope.allResImg == 1) {
            $scope.listload = true;
            $scope.allResImg = 0;
        AlbumService.viewAlbum(opts, function(data){

            if(data.code == 101) {
                $scope.imagecount = data.data.size;
                $('.album-option').removeClass('album-blank');
                $scope.albloader = false;
                $scope.noPhotos = true;
                if(type == 'upload') {
                    $scope.albumResponse = $scope.i18n.albums.successful_upload;
                } else if(type == 'delete') {
                    $scope.albumResponse = $scope.i18n.albums.sucessful_delete;
                } else {
                   $scope.albumResponse = "";
                }

                $scope.totalSizeImg = data.data.size;
                $scope.allResImg = 1;
                $scope.viewalbum = $scope.viewalbum.concat(data.data.media);
                $scope.albumDescription =  data.data.album.description;
                $scope.albumDetails = data.data.album;
                $scope.listload = false; 
                // $scope.imagePrvSrc = $scope.imagePrvSrc.concat(data.data.media);
                var str_imagePrvSrc = JSON.stringify($scope.imagePrvSrc)
                angular.forEach(data.data.media,function(data_img){
                    if(str_imagePrvSrc.indexOf(data_img.id) === -1){
                        $scope.imagePrvSrc.push(data_img);
                    }
                })
            } else {
                $scope.albloader = false;
                $scope.noPhotos = true;
                $scope.listload = false; 
            }
        });  
    }
    }
    //Count Number of images 
    $scope.countPhoto = function(){
        var albumId = $routeParams.album_id;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.album_id = Album_id;
        AlbumService.countPhoto(opts, function(data){
            if(data.code == 101) {
           
            } else {
             
            }
        });  
    }
    //Delete Images from Album
    $scope.deleteMediaAlbum = function(m_id, index){
        //$scope.albloader = true;
        var albumId = $routeParams.album_id;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.album_id = albumId;
        opts.media_id = m_id;
        
        
        AlbumService.deleteMediaAlbum(opts, function(data){
            if(data.code == 101) {
                //$scope.albumResponse = data.message;
                $scope.viewalbum.splice(index, 1);
                //$scope.viewAlbum('delete');
                $timeout(function() {
                        $scope.albumResponse = '';
                }, 15000);
            } else {
             
            }
        }); 
        
    }

    //Set as profile image
    $scope.setuserprofileimages = function(m_id, id){
        $("#featuredloaderlink-"+id).hide();
        $("#featuredloader-"+id).show();
        $scope.featuredloader = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.media_id = m_id;
        AlbumService.setuserprofileimages(opts, function(data){
            if(data.code == 101) {
                
                $("#featuredloaderlink-"+id).show();
                $("#featuredloader-"+id).hide();
                $timeout(function() {
                        $scope.albumResponse = '';
                }, 4000);
                $scope.viewmultiprofiles();
            } else {
                $scope.albumResponse = data.message;
                $("#featuredloaderlink-"+id).show();
                $("#featuredloader-"+id).hide();
                $timeout(function() {
                        $scope.albumResponse = '';
                }, 4000);
            }
        });  
    }

    $scope.viewmultiprofiles = function(){

        $scope.albloader = true; 
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.profile_type = 4; 
        ProfileImageService.viewmultiprofiles(opts, function(data){
            if(data.code == 101) {
                $scope.albloader = false; 
                $scope.picloader = false;
                $scope.propic = true; 
                $rootScope.currentUser.basicProfile = data.data;
                $scope.albumResponse = $scope.i18n.albums.profile_pic_update;
            } else {                
                $scope.propic = true; 
                $scope.picloader = false;
                
            }
        });
    }
    //show form
    $scope.showAlbumForm = function() {
        $scope.myValue = true;
    }
    //Hide form
    $scope.closeForm = function() {
        $scope.myValue = false;
    }

    $scope.albumListing('all'); //initialization of album listing function
    $scope.viewAlbum(); //initialization of Images listing function
    // $(".fancybox").fancybox(); 
    //Image Pop Up Plugin
    //image upload Page 
    $scope.redirectUrl = function(album_id, album_name) {
        $location.path("/album/images/"+album_id+"/"+album_name);
    }

    /*function to change privacy of album
    */
    $scope.editPrivacyMsg = [];
    $scope.editPrivacyCls = [];
    $scope.updateAlbumPrivacy = [];
    $scope.changePrivacy = function(item, indx){
        var opts = {};
            opts.user_id = $scope.currentUser.id;
            opts.album_id = item.id;
            opts.album_name = item.album_name; 
            opts.album_desc = item.album_description;
            opts.privacy_setting = item.album_privacy;
            opts.type = 'user';
            AlbumService.updateAlbum(opts, function(data){
                $scope.updateAlbumPrivacy[indx] = false;
                if(data.code == 101) {
                    $scope.listAlbum[indx] = data.data;
                    $scope.user = null;  
                    $scope.editPrivacyMsg[indx] = '';
                } else {
                    $scope.editPrivacyMsg[indx] = $scope.i18n.albums.gone_wrong;
                    $timeout(function() {
                            $scope.editPrivacyMsg[indx] = '';
                    }, 15000);
                }
            });
    }

     $scope.setPrivacy = function(item, value){
        var indx = $scope.listAlbum.indexOf(item);
        var opts = {};
            opts.user_id = $scope.currentUser.id;
            opts.album_id = item.id;
            opts.album_name = item.album_name; 
            opts.album_desc = item.album_description;
            opts.privacy_setting = value;
            opts.type = 'user';
            AlbumService.updateAlbum(opts, function(data){
                $scope.updateAlbumPrivacy[indx] = false;
                if(data.code == 101) {
                    data.data.media_in_album = item.media_in_album;
                    data.data.featured_media_path = item.featured_media_path;
                    $scope.listAlbum[indx].album_privacy = data.data.album_privacy;
                    $scope.user = null;  
                    $scope.editPrivacyMsg[indx] = '';
                } else {
                    $scope.editPrivacyMsg[indx] = $scope.i18n.albums.gone_wrong;
                    $timeout(function() {
                            $scope.editPrivacyMsg[indx] = '';
                    }, 15000);
                }
            });
    }    
}]);

app.controller('AllNotiController', ['$cookieStore', '$scope', '$rootScope', '$http', '$location', '$timeout', 'UserService', 'ProfileService', 'GroupService', 'SingleMediaDetailService', '$modal', '$log', 'AlbumService', 'ShopTransactionService', 'LandURL', function($cookieStore, $scope, $rootScope, $http, $location, $timeout, UserService, ProfileService, GroupService, SingleMediaDetailService, $modal, $log, AlbumService, ShopTransactionService, LandURL) {
	$scope.NotificationFound = false;
	$scope.NotificationNotFound = false;
	$rootScope.showNotificationList = false;
	$rootScope.loadNotification = false;
	$scope.loadNotiResponse = 1;
	$scope.scopeVar = false;
	$scope.friendTagIndex = 0;
    $scope.tagged_Friends = [];
    $scope.UpdateTag      = false;
    $scope.TagLoader      = false;
    $scope.friends        = [];
    $scope.cancelFriendSearch = false;
    $scope.showSearchLoader   = false;
    $scope.dublicate = false;
    $scope.toBelong = false;
    $scope.tagged_collection = []
    $scope.untagg_friend = {}
    $scope.choose = false;
    $scope.max          = 5;
    $scope.isReadonly   = false;
    var modalInstance;

	$scope.showAllNotification = function($event) {
        if($event != undefined){
            $event.stopPropagation();
        }
		var temp=$rootScope.toggleSearch
		$rootScope.toggleSearch=null
		setTimeout(function(){
			$rootScope.toggleSearch=temp
		},100);
        $rootScope.groupNotificationList = false;
		$rootScope.showNewMessageList = false;
		$rootScope.showFriendNotificationList=false;
        $rootScope.loadGroupNotification = false;
		$rootScope.showNotificationList = !$rootScope.showNotificationList;
		$scope.scopeVar = !$scope.scopeVar;
		$scope.scopeVar1 = false;
		$scope.scopeVar2 = false;
		$scope.scopeVar3 = false;
        if($scope.scopeVar){
		  $scope.getAllNotification();
        }else{
            $rootScope.getCountOfAllTypeNotificaton();
        }
	};	
	$scope.notificationOut = function(){
		$rootScope.showNotificationList = false;
		$scope.scopeVar = false;
    };
    $scope.blockDivClick = function(even){
		if(even.target.nodeName!=='IMG'){
			var temp=$rootScope.toggleSearch
			$rootScope.toggleSearch=null
	        setTimeout(function(){
				$rootScope.toggleSearch=temp
			},100)
		}
	}
	$scope.getAllNotification = function() {
		$rootScope.loadNotification = true;		
		$scope.NotificationFound = false;
		$scope.NotificationNotFound = false;
		opts = {};
		opts.user_id = APP.currentUser.id.toString();
		opts.is_view = 1;
		opts.limit_start = 0;
		opts.limit_size = 200;
		if($scope.loadNotiResponse == 1) {
			$scope.loadNotiResponse = 0;
			ProfileService.getAllTypeNotification(opts, function(data) {
				$scope.loadNotiResponse = 1;
				if(data.code == 101) {
					$scope.allNotification = data.data.requests;
					$scope.allTotal = data.data.size;
					$scope.NotificationFound = true;
					$rootScope.loadNotification = false;
					$rootScope.getCountOfAllTypeNotificaton();
				}else {
					$scope.NotificationFound = false;
		 			$scope.allNotification = [];
		 			$scope.allTotal = 0;
		 			$rootScope.loadNotification = false;
				}
			});
		}
	};

	$scope.deleteMarkNotification = function(tag, id, notificationId) {
		$("#"+tag+"-"+ id).fadeOut(1000);
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notificationId;
		ProfileService.markAsDelete(opts, function(data) {
			if(data.code == 101) {
				$("#"+tag+"-"+ id).hide();
				$rootScope.getCountOfAllTypeNotificaton();
			} else {
				$("#"+tag+"-"+ id).show();
			}
		});
	};

	$scope.markAsRead = function(tag, id, notificationId) {
		$("#"+tag+"-"+ id).removeClass("unread-noti").addClass("read-noti");
		$scope.allNotification[id].is_read = 1;
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notificationId;
		ProfileService.markReadNotification(opts, function(data) {
			$rootScope.getCountOfAllTypeNotificaton();
		});
	};

	//TODO for service 
	$scope.markAsUnread = function(tag, id, notificationId) {
		$("#"+tag+"-"+ id).removeClass("read-noti").addClass("unread-noti");
		$scope.allNotification[id].is_read = 0;
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notificationId;
		// ProfileService.markReadNotification(opts, function(data) {
		// 	$rootScope.getCountOfAllTypeNotificaton();
		// });
	};

	$scope.viewClubDetail = function(clubId, notiId, clubType) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			$rootScope.getCountOfAllTypeNotificaton();
            LandURL.sendTo("/club/view/"+clubId+"/"+clubType);
		});
	};
	
	$scope.viewUserAlbum = function(albumId, notiId, albumTitle) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			if(data.code == 101) {
				$rootScope.getCountOfAllTypeNotificaton();
                LandURL.sendTo("/album/images/"+albumId+"/"+albumTitle);
			} else {
                LandURL.sendTo("/album/images/"+albumId+"/"+albumTitle);
			}
		});
	};

	$scope.getmediainfo = function(media_id, album_type, parent_id, ownerid, parent_type,ClubMember){
		$scope.modal_loader = true;
		$scope.pre_visible  = false;
        $scope.next_visible = false;
        $scope.showInLimit = true;

        $scope.album_type   = album_type;
        $scope.parent_type  = parent_type;
        $scope.parent_id    = parent_id;
        $scope.media_id  	= media_id;
        $scope.supportId    = ownerid;
        if(ClubMember != undefined){/*This is defined when modal is opening from club album*/
            $scope.is_member = ClubMember;
        } 
		
		modalInstance = $modal.open({
            templateUrl: "app/views/img_modal_new.html",
            controller: 'ModalController',
            size: 'lg',
            scope: $scope,
        });

        modalInstance.result.then(function (selectedItem) {
        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
            $scope.tagged_Friends = [];
            $scope.UpdateTag      = false;
        });

        $scope.showAllTaggedFriend = function (){
            $scope.showInLimit = false;
        }
        
        $scope.data = [];
        var opt = new Object();
            opt.media_id         = media_id;
            opt.album_type       = album_type;
            opt.album_id         = parent_id;
            opt.user_id          = APP.currentUser.id; 
            opt.owner_id         = ownerid; 
        
        SingleMediaDetailService.getMediaInfo(opt, function(data) {
            if(data.code == 101){
                $scope.data         = data.data;
                $scope.modal_loader = false;
            }
        });    
    };

    $scope.averageRating = function(rating){
        return new Array(Math.ceil(rating));
    };

    $scope.blankStar = function(rating){
        if((5-Math.ceil(rating)) > 0){
            return new Array(5-Math.ceil(rating));
        }else{
            return 0;
        }
    };

    $scope.viewUserProfile = function(friendId){
        if(friendId == APP.currentUser.id){
            modalInstance.dismiss('cancel');
            $location.path('profiles');
        }else{
            modalInstance.dismiss('cancel');
            $location.path('/viewfriend/'+friendId);
        }
    };

    $scope.Tagtoggle = function(){
        $scope.UpdateTag = !$scope.UpdateTag;
    }

    $scope.tagFriendSuggestion = function(event, friendname){
        if(event.keyCode===40){
            event.preventDefault();
            if($scope.friendTagIndex+1 !== $scope.friends.length){
                $scope.friendTagIndex++;
            }
        }else if(event.keyCode===38){
            event.preventDefault();
            if($scope.friendTagIndex-1 !== -1){
                $scope.friendTagIndex--;
            }
        }else if(event.keyCode===13){
               if($scope.friends.length > 0  && $scope.friendTagIndex!==-1) $scope.selectFriend($scope.friends[$scope.friendTagIndex]);
        }
        if($('#searchTagFriend').val().trim()==="") $scope.showFriendList = false;
        if(!(event.keyCode>=65 && event.keyCode<=95)) return;
        $scope.cancelFriendSearch = false;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        friendname ? opts.friend_name = friendname : opts.friend_name = "";
        opts.session_id = APP.currentUser.id;
        opts.limit_start = 0;
        opts.limit_size =  APP.friend_list_pagination.end;
        $scope.showSearchLoader = true;

        ProfileService.searchFriends(opts,function(data){
            $scope.showSearchLoader = false;
            if($scope.cancelFriendSearch === false){
                if(data.data.users.length>0) $scope.showFriendList = true;
                else $scope.showFriendList = false;
                $scope.friends = data.data.users;
            }
        })
    };

    $scope.selectFriend = function(friendInfo){
        $scope.dublicate = false;
        $scope.choose = false;  
        angular.forEach($scope.data.tagged_friends_info,function(index){
            if(index.id === friendInfo.user_id){
                $scope.dublicate = true;
            }
        });

        if($scope.dublicate === false){
            $scope.data.tagged_friends_info.push(friendInfo.user_info);
            $scope.friends = [];
            $scope.cancelFriendSearch = true;
            $scope.friendTagIndex = -1;
            angular.element('#searchTagFriend').val("");
            $scope.showFriendList = false;
        }else{
            $scope.friends = [];
            $scope.cancelFriendSearch = true;
            $scope.friendTagIndex = -1;
            angular.element('#searchTagFriend').val("");
            $scope.showFriendList = false;
        }
    };

    $scope.taggService = function(){
    	var pre_visible_status  = $scope.pre_visible;
        var next_visible_status = $scope.next_visible;
        $scope.pre_visible = false;
        $scope.next_visible = false;
        var frnd_array = [];
        angular.forEach($scope.data.tagged_friends_info,function(index){
            frnd_array.push(index.id);
        });
        var opts = {};
            opts.user_id   = APP.currentUser.id;
            opts.album_id  = $scope.parent_id;
            opts.post_type = 1;
            opts.media_id  = [$scope.media_id];
            opts.tagged_friends = frnd_array.join(',')
        $scope.UpdateTag = false;
        $scope.TagLoader = true;
    
       AlbumService.photoTaging(opts,function(data){
            if(data.code === 101){
                $scope.choose = true;
                $scope.TagLoader = false;
            }
            $scope.pre_visible  = pre_visible_status;
            $scope.next_visible = next_visible_status;
        });
    };

    $scope.removeTagFriend = function(friendIndex){
        $scope.data.tagged_friends_info.splice(friendIndex,1);
    };

    $scope.lostFocus = function(){
        $timeout(function(){
            $scope.friends = [];
            $scope.cancelFriendSearch = true;
            $scope.friendTagIndex = -1;
            angular.element('#searchTagFriend').val("");
            $scope.showFriendList = false;
        },300);
    };

    $scope.findPeopleRate = function(id, count_Vote){
        if(count_Vote === 0 ){
            return false;
        }
        var opts = {};
        $scope.ratedUsers = {};
        var modalInstance1 = $modal.open({
                    templateUrl: 'app/views/find_people.html',
                    controller: 'ModalController',
                    size: 'lg',
                    scope: $scope,
        });
        $scope.showPeopleLoader = true;
        if($scope.parent_type == 'friend_album'){
            opts.type = 'user_profile_album_photo'
        }else {
            opts.type = $scope.parent_type;
        }
        opts.type_id = id;
        opts.session_id = APP.currentUser.id;
        ProfileService.findPeople(opts,function(data){
            if(data.code == 101 && data.message == "SUCCESS"){
                $scope.showPeopleLoader = false;
                $scope.ratedUsers       = data.data.users_rated;
                if(data.data.users_rated.length == 0){
                    $scope.message = $scope.i18n.dashboard.no_vote;
                }
            }else{
                $scope.showPeopleLoader = false;
            }
        });
        modalInstance1.result.then(function (selectedItem) {
        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        });

        $scope.viewFriendProile = function(friendId){
            modalInstance1.dismiss('cancel');
            $location.path('/viewfriend/'+friendId);
        };
    };

    $scope.waitRateResponse = false;
    $scope.ratePicture = function(rating, picture_id, mediaIndex){
        var update = "";
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.type_id = picture_id;
        opts.rate    = rating;
        if($scope.parent_type == 'friend_album'){
            opts.type = 'user_profile_album_photo'
        }else {
            opts.type = $scope.parent_type;
        }
        if($scope.data.is_rated){
            update = "update";
        }else{
            update = "add";
        }
        $scope.waitRateResponse = true;
        ProfileService.rateThis(opts, update, function(data){
            if(data.code === 101 && data.message === "SUCCESS"){
                $scope.data.avg_rate    = data.data.avg_rate;
                $scope.data.no_of_votes = data.data.no_of_votes;
                $scope.data.is_rated    = true;
                $scope.data.current_user_rate = data.data.current_user_rate;
            }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                $scope.data.current_user_rate   = 0;
                $scope.data.is_rated            = true;
            }
            $scope.waitRateResponse = false;
        });
    };

    $scope.removeRating = function(pictureIndex , mediaIndex){
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.type_id = pictureIndex;
        if($scope.parent_type == 'friend_album'){
            opts.type = 'user_profile_album_photo'
        }else {
            opts.type = $scope.parent_type;
        }
        
        if($scope.waitRateResponse === false){
            $scope.waitRateResponse = true;
        }else{
            return;
        }
        ProfileService.removeRating(opts,function(data){
            if(data.code == 101 && data.message == "SUCCESS"){
                $scope.data.current_user_rate   = 0;
                $scope.data.avg_rate            = data.data.avg_rate;
                $scope.data.no_of_votes         = data.data.no_of_votes;
                $scope.data.is_rated            = false;
            }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                $scope.data.current_user_rate   = 0;
                $scope.data.is_rated            = false;
            }
            $scope.waitRateResponse = false;
        });
    };

	$scope.viewClubAlbum = function(clubId, albumName, albumId, clubType, notiId) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			if(data.code == 101) {
				$rootScope.getCountOfAllTypeNotificaton();
                LandURL.sendTo("/album/club/view/"+clubId +"/"+albumId+"/"+clubType+"/"+albumName);
            } else {
                LandURL.sendTo("/album/club/view/"+clubId +"/"+albumId+"/"+clubType+"/"+albumName);
			}
		});
	};

	$scope.viewShopAlbum = function(shopId, albumTitle, albumId, notiId) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			if(data.code == 101) {
				$rootScope.getCountOfAllTypeNotificaton();
                LandURL.sendTo("/album/shop/image/"+albumId+"/"+albumTitle+"/"+shopId);
            } else {
                LandURL.sendTo("/album/shop/image/"+albumId+"/"+albumTitle+"/"+shopId);
            }
		});
	};

	$scope.viewPost = function(postId, notiId) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			if(data.code == 101) {
				$rootScope.getCountOfAllTypeNotificaton();
                LandURL.sendTo("/post/"+postId);
			} else {
				LandURL.sendTo("/post/"+postId);
			}
		});
	};

	$scope.viewClubPost = function(postId, clubId, notiId, clubType) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			$rootScope.getCountOfAllTypeNotificaton();
            LandURL.sendTo('/club/'+clubId+'/post/'+postId+'/'+clubType);
		});
	};

	$scope.viewShopPost = function(postId, shopId, notiId) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			$rootScope.getCountOfAllTypeNotificaton();
            LandURL.sendTo('/shop/'+shopId+'/post/'+postId);
		});
	};

	$scope.viewTaggedMedia = function(photoId, notiId) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			if(data.code == 101) {
				$rootScope.getCountOfAllTypeNotificaton();
			} else {
			}
		});
	};

    $scope.viewTxnPage = function(txnId, shopId, notiId) {
        opts = {};
        opts.user_id = (APP.currentUser.id).toString();
        opts.notification_id = notiId;
        ProfileService.markReadNotification(opts, function(data) {
            if(data.code == 101) {
            var shopTransationObj = {};
            shopTransationObj.tab = 2;
            shopTransationObj.txnId = txnId;
            ShopTransactionService.setTransactionTab(shopTransationObj);
            $rootScope.getCountOfAllTypeNotificaton();
            LandURL.sendTo('/shop/transaction/'+shopId);
            } 
        });
    };

    $scope.viewShopProfile = function(shopId, notiId) {
        opts = {};
        opts.user_id = (APP.currentUser.id).toString();
        opts.notification_id = notiId;
        ProfileService.markReadNotification(opts, function(data) {
            if(data.code == 101) {
            $rootScope.getCountOfAllTypeNotificaton();
            LandURL.sendTo('/shop/view/'+shopId);
            } 
        });
    };

    $scope.viewCitizenProfile = function(userId, notiId) {
        opts = {};
        opts.user_id = (APP.currentUser.id).toString();
        opts.notification_id = notiId;
        ProfileService.markReadNotification(opts, function(data) {
            if(data.code == 101) {
            $rootScope.getCountOfAllTypeNotificaton();
                LandURL.sendTo('/wallets');
            } else {
                LandURL.sendTo('/wallets');
            }
        });
    };

    $scope.viewShopPromotions = function(shopId, notiId) {
        opts = {};
        opts.user_id = (APP.currentUser.id).toString();
        opts.notification_id = notiId;
        ProfileService.markReadNotification(opts, function(data) {
            if(data.code == 101) {
            $rootScope.getCountOfAllTypeNotificaton();
            LandURL.sendTo('/shop/promotions/'+shopId);
            }else {
                LandURL.sendTo('/shop/promotions/'+shopId);
            }
        });
    };

}]);

//Get all club request notifications in top header
app.controller('AllGroupNotiController', function($cookieStore, $scope, $rootScope, $http, $location, $timeout, UserService, ProfileService, GroupService) {
	$scope.NotificationFound = false;
	$scope.NotificationNotFound = false;
	$rootScope.groupNotificationList = false;
	$rootScope.loadGroupNotification = false;
	$scope.groupNotiResponse = 1;
	$scope.scopeVar3 = false;

	$scope.groupNotificationOut = function(){
		$rootScope.groupNotificationList = false;
		$scope.scopeVar3 = false;
	};
	$scope.blockDivClick = function(even){
		if(even.target.nodeName!=='IMG'){
			var temp=$rootScope.toggleSearch
			$rootScope.toggleSearch=null
		    setTimeout(function(){
				$rootScope.toggleSearch=temp
			},100)
		}
	}
	
	$scope.getAllGroupNotification = function($event) {
        if($event != undefined){
            $event.stopPropagation();
        }
		$scope.scopeVar = false;
		$scope.scopeVar1 = false;
		$scope.scopeVar2 = false;
		$scope.scopeVar3 = !$scope.scopeVar3;
        $rootScope.showNewMessageList = false;
        $rootScope.showNotificationList = false;
        $rootScope.showFriendNotificationList = false;
		$rootScope.groupNotificationList = !$rootScope.groupNotificationList;
		$rootScope.loadGroupNotification = !$rootScope.loadGroupNotification;		
		$scope.NotificationFound = false;
		$scope.NotificationNotFound = false;
		var opts = {};
		opts.user_id = (APP.currentUser.id).toString();;
		opts.is_view = '1';
		opts.limit_start = 0;
		opts.limit_size = 100;
        
		if($scope.groupNotiResponse == 1 && $scope.scopeVar3) {
			$scope.groupNotiResponse = 0;
			ProfileService.getAllGroupNotification(opts, function(data) {
				$scope.groupNotiResponse = 1;
				if(data.code == 101) {
					$scope.allNotification = data.data.requests;
					$scope.allTotal = data.data.size;
					$scope.NotificationFound = true;
					$rootScope.loadGroupNotification = false;
					$rootScope.getCountOfAllTypeNotificaton();
				}else {
					$scope.NotificationFound = false;
		 			$scope.allNotification = [];
		 			$scope.allTotal = 0;
		 			$rootScope.loadGroupNotification = false;
		 			$rootScope.getCountOfAllTypeNotificaton();
				}
			});
		}

        if(!$scope.scopeVar3){
            $rootScope.getCountOfAllTypeNotificaton();
        }
    };
    $scope.AcceptClubRequest = function(senderId, requestId, groupId, groupType, id, $event) {    
		$("#Groupnotification-request-" + id).fadeOut(1000);
		opts = {};
		opts.user_id = APP.currentUser.id;
        opts.request_id = requestId;
        opts.sender_id = senderId;
        opts.group_id = groupId;
		if(groupType == 1)
			opts.request_type = 'admin';
		else
			opts.request_type = 'user';
        opts.response = 1;
        GroupService.responseClubNotification(opts, function(data) {
        	if(data.code == 101) {
				$("#Groupnotification-request-" + id).hide();
				$rootScope.getCountOfAllTypeNotificaton();
				$scope.getAllGroupNotification($event);
			} else {
				$("#Groupnotification-request-" + id).show();
			}
		});
	};

    $scope.RejectClubRequest = function(senderId, requestId, groupId, groupType, id, $event) {
		$("#Groupnotification-request-" + id).fadeOut(1000);
		opts = {};
		opts.user_id = APP.currentUser.id;
        opts.request_id = requestId;
        opts.sender_id = senderId;
        opts.group_id = groupId;
		if(groupType == 1)
			opts.request_type = 'admin';
		else
			opts.request_type = 'user';
        opts.response = 2;
		GroupService.responseClubNotification(opts, function(data) {
			if(data.code == 101) {
				$("#Groupnotification-request-" + id).hide();
				$rootScope.getCountOfAllTypeNotificaton();
				// $scope.getAllGroupNotification($event);
			} else {
				$("#Groupnotification-request-" + id).hide();
			}
		});
	};

});

//Get all public notifications on a single page 
app.controller('AllNotificationView', ['$cookieStore', '$scope', '$rootScope', '$http', '$timeout', '$location', 'ProfileService', 'ShopTransactionService', function($cookieStore, $scope, $rootScope, $http, $timeout, $location, ProfileService, ShopTransactionService) {
	$scope.loadNotificationList = false;
	$scope.loadNotificationListFound = false;
	$scope.listResponse = 1;
	$scope.allNotificationList = [];
	$scope.endLimit = 12;
	$scope.allTotal = 0;

	$scope.getAllNotificationList = function() {	
		var limit_start = $scope.allNotificationList.length;
		opts = {};
		opts.user_id = APP.currentUser.id.toString();
		opts.is_view = 1;
		opts.limit_start = limit_start;
		opts.limit_size = $scope.endLimit;
		//console.log("start = "+limit_start +" end ="+$scope.endLimit + "total = "+$scope.allTotal + "res =" + $scope.listResponse);
		if ((( $scope.allTotal > limit_start) || $scope.allTotal == 0 ) && $scope.listResponse == 1) {
			$scope.loadNotificationList = true;
			$scope.listResponse = 0;
			ProfileService.getAllTypeNotification(opts, function(data) {
				$scope.listResponse = 1;
				if(data.code == 101) {
					$scope.allNotificationList = $scope.allNotificationList.concat(data.data.requests);
					$scope.allTotal = data.data.size;
					$scope.loadNotificationList = false;
					$scope.loadNotificationListFound = true;
				}else {
		 			$scope.allNotificationList = [];
		 			$scope.allTotal = 0;
		 			$scope.loadNotificationList = false;
		 			$scope.loadNotificationListFound = true;
				}
			});
		}
	};

	$scope.getAllNotificationList();

	$scope.loadMore = function() {
		$scope.getAllNotificationList();
	}

	$scope.deleteMarkNotification = function(tag, id, notificationId) {
		$("#"+tag+"-"+ id).fadeOut(1000);
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notificationId;
		ProfileService.markAsDelete(opts, function(data) {
			if(data.code == 101) {
				$("#"+tag+"-"+ id).hide();
				$rootScope.getCountOfAllTypeNotificaton();
			} else {
				$("#"+tag+"-"+ id).show();
			}
		});
	};

	$scope.markAsRead = function(tag, id, notificationId) {
		$("#"+tag+"-"+ id).removeClass("unread-noti").addClass("read-noti");
		$scope.allNotification[id].is_read = 1;
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notificationId;
		ProfileService.markReadNotification(opts, function(data) {
			$rootScope.getCountOfAllTypeNotificaton();
		});
	};

	//TODO for service 
	$scope.markAsUnread = function(tag, id, notificationId) {
		$("#"+tag+"-"+ id).removeClass("read-noti").addClass("unread-noti");
		$scope.allNotification[id].is_read = 0;
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notificationId;
		// ProfileService.markReadNotification(opts, function(data) {
		// 	$rootScope.getCountOfAllTypeNotificaton();
		// });
	};

	$scope.viewClubDetail = function(clubId, notiId, clubType) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			$rootScope.getCountOfAllTypeNotificaton();
			$location.path("/club/view/"+clubId+"/"+clubType);
		});
	};

	$scope.viewUserAlbum = function(albumId, notiId, albumTitle) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			if(data.code == 101) {
				$rootScope.getCountOfAllTypeNotificaton();
				$location.path("/album/images/"+albumId+"/"+albumTitle);
			} else {
				$location.path("/album/images/"+albumId+"/"+albumTitle);
			}
		});
	};

	$scope.viewClubAlbum = function(clubId, albumName, albumId, clubType, notiId) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			if(data.code == 101) {
				$rootScope.getCountOfAllTypeNotificaton();
				$location.path("/album/club/view/"+clubId +"/"+albumId+"/"+clubType+"/"+albumName);
			} else {
				$location.path("/album/club/view/"+clubId +"/"+albumId+"/"+clubType+"/"+albumName);
			}
		});
	};

	$scope.viewShopAlbum = function(shopId, albumTitle, albumId, notiId) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			if(data.code == 101) {
				$rootScope.getCountOfAllTypeNotificaton();
				$location.path("/album/shop/image/"+albumId+"/"+albumTitle+"/"+shopId);
			} else {
				$location.path("/album/shop/image/"+albumId+"/"+albumTitle+"/"+shopId);
			}
		});
	};
	
	$scope.viewPost = function(postId, notiId) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			if(data.code == 101) {
				$rootScope.getCountOfAllTypeNotificaton();
				$location.path("/post/"+postId);
			} else {
				$location.path("/post/"+postId);
			}
		});
	};

	$scope.viewClubPost = function(postId, clubId, notiId, clubType) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			$rootScope.getCountOfAllTypeNotificaton();
			$location.path('/club/'+clubId+'/post/'+postId+'/'+clubType);
		});
	};

	$scope.viewShopPost = function(postId, shopId, notiId) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			$rootScope.getCountOfAllTypeNotificaton();
			$location.path('/shop/'+shopId+'/post/'+postId);
		});
	};

	$scope.viewTaggedMedia = function(photoId, notiId) {
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();
		opts.notification_id = notiId;
		ProfileService.markReadNotification(opts, function(data) {
			if(data.code == 101) {
				$rootScope.getCountOfAllTypeNotificaton();
			} else {
			}
		});
	};

    $scope.viewTxnPage = function(txnId, shopId, notiId) {
        opts = {};
        opts.user_id = (APP.currentUser.id).toString();
        opts.notification_id = notiId;
        ProfileService.markReadNotification(opts, function(data) {
            if(data.code == 101) {
            var shopTransationObj = {};
            shopTransationObj.tab = 2;
            shopTransationObj.txnId = txnId;
            ShopTransactionService.setTransactionTab(shopTransationObj);
            $rootScope.getCountOfAllTypeNotificaton();
            $location.path('/shop/transaction/'+shopId);
            } else {
            }
        });
    };

    $scope.viewShopProfile = function(shopId, notiId) {
        opts = {};
        opts.user_id = (APP.currentUser.id).toString();
        opts.notification_id = notiId;
        ProfileService.markReadNotification(opts, function(data) {
            if(data.code == 101) {
            $rootScope.getCountOfAllTypeNotificaton();
            $location.path('/shop/view/'+shopId);
            } else {
            }
        });
    };

    $scope.viewCitizenProfile = function(userId, notiId) {
        opts = {};
        opts.user_id = (APP.currentUser.id).toString();
        opts.notification_id = notiId;
        ProfileService.markReadNotification(opts, function(data) {
            if(data.code == 101) {
            $rootScope.getCountOfAllTypeNotificaton();
            $location.path('/wallets');
            } else {
            }
        });
    };

    $scope.viewShopPromotions = function(shopId, notiId) {
        opts = {};
        opts.user_id = (APP.currentUser.id).toString();
        opts.notification_id = notiId;
        ProfileService.markReadNotification(opts, function(data) {
            if(data.code == 101) {
            $rootScope.getCountOfAllTypeNotificaton();
            $location.path('/shop/promotions/'+shopId);
            }
        });
    };
    
}]);

//Get all the list for club request 
app.controller('AllClubReNotificationView', ['$cookieStore', '$scope', '$rootScope', '$http', '$location', '$timeout', 'ProfileService', 'GroupService', function($cookieStore, $scope, $rootScope, $http, $location, $timeout, ProfileService, GroupService) {
	$scope.loadGroupNotificationList = false;
	$scope.groupNotificationFound = false;
	$scope.groupNotiResponse = 1;
	$scope.allGroupNotification = [];
	$scope.allTotal = 0;
	$scope.endLimit = 12;
	
	$scope.getAllGroupNotification = function() {
		var limit_start = $scope.allGroupNotification.length;
		opts = {};
		opts.user_id = (APP.currentUser.id).toString();;
		opts.is_view = '1';
		opts.limit_start = limit_start;
		opts.limit_size = $scope.endLimit;
		if ((( $scope.allTotal > limit_start) || $scope.allTotal == 0 ) && $scope.groupNotiResponse == 1) {
			$scope.loadGroupNotificationList = true;
			$scope.groupNotiResponse = 0;
			ProfileService.getAllGroupNotification(opts, function(data) {
				$scope.groupNotiResponse = 1;
				$scope.groupNotificationFound = true;
				if(data.code == 101) {
					$scope.allGroupNotification = $scope.allGroupNotification.concat(data.data.requests);
					$scope.allTotal = data.data.size;
					$scope.loadGroupNotificationList = false;
				}else {
		 			$scope.allGroupNotification = [];
		 			$scope.allTotal = 0;
		 			$scope.loadGroupNotificationList = false;
				}
			});
		}
	};
	$scope.getAllGroupNotification();

	$scope.loadMore = function() {
		$scope.getAllGroupNotification();
	}

    $scope.AcceptClubRequest = function(senderId, requestId, groupId, groupType, id) {        
		$("#notification-request-" + id).fadeOut(1000);
		opts = {};
		opts.user_id = APP.currentUser.id;
        opts.request_id = requestId;
        opts.sender_id = senderId;
        opts.group_id = groupId;
		if(groupType == 1)
			opts.request_type = 'admin';
		else
			opts.request_type = 'user';
        opts.response = 1;
        GroupService.responseClubNotification(opts, function(data) {
		       if(data.code == 101) {
				$("#notification-request-" + id).hide();
				$rootScope.getCountOfAllTypeNotificaton();
			} else {
				$("#notification-request-" + id).show();
			}
		});
	};

    $scope.RejectClubRequest = function(senderId, requestId, groupId, groupType, id) {
		$("#notification-request-" + id).fadeOut(1000);
		opts = {};
		opts.user_id = APP.currentUser.id;
        opts.request_id = requestId;
        opts.sender_id = senderId;
        opts.group_id = groupId;
		if(groupType == 1)
			opts.request_type = 'admin';
		else
			opts.request_type = 'user';
        opts.response = 2;
		GroupService.responseClubNotification(opts, function(data) {
			if(data.code == 101) {
				$("#notification-request-" + id).hide();
				$rootScope.getCountOfAllTypeNotificaton();
			} else {
				$("#notification-request-" + id).hide();
			}
		});
	};
}]);

//Club request and reject
app.controller('ClubRequestAction', ['$cookieStore', '$scope', '$rootScope', '$http', '$routeParams', '$location', 'GroupService', function($cookieStore, $scope, $rootScope, $http, $routeParams, $location, GroupService) {
	$scope.requestLoader = true;
	$scope.notAccesssible = false;
	opts = {};
	opts.user_id = APP.currentUser.id;
    opts.request_id = $routeParams.notiId;
    opts.sender_id = $routeParams.senderId;
    opts.group_id = $routeParams.clubId;
	if($routeParams.clubType == 1)
		opts.request_type = 'admin';
	else
		opts.request_type = 'user';
    opts.response = $routeParams.action;
    GroupService.responseClubNotification(opts, function(data) {
    	if(data.code == 182) {
    		$scope.requestLoader = false;
    	} else {
    		if($routeParams.clubType == 2 && $routeParams.action == 2){
    			$scope.requestLoader = false;
    			$scope.notAccesssible = true;
    		} else {
    			$location.path("/club/view/"+$routeParams.clubId+"/"+$routeParams.clubType);
    		}
    	}
	});

}]);
app.controller('AllNotiFriendController',['$cookieStore', '$scope', '$rootScope', '$http', '$location', '$timeout', '$modal', '$log', 'UserService', 'ProfileService', 'GroupService', function($cookieStore, $scope, $rootScope, $http, $location, $timeout, $modal, $log, UserService, ProfileService, GroupService) {
	$scope.NotificationFound = false;
	$scope.NotificationNotFound = false;
	$rootScope.showFriendNotificationList = false;
	$rootScope.loadNotification1 = false;
	$scope.loadNotiResponse = 1;
	$scope.scopeVar2 = false;

	 $scope.showFriendNotification = function($event) {
	 	if($event != undefined){
	 		$event.stopPropagation();
	 	}
		var temp=$rootScope.toggleSearch
		$rootScope.toggleSearch=null
		setTimeout(function(){
			$rootScope.toggleSearch=temp
		},100);
		$rootScope.groupNotificationList = false;
		$rootScope.loadGroupNotification = false;
		$rootScope.showNewMessageList = false;
		$rootScope.showNotificationList = false;
		$rootScope.showFriendNotificationList = !$rootScope.showFriendNotificationList;
		$scope.scopeVar2 = !$scope.scopeVar2;
		$scope.scopeVar1 = false;
		$scope.scopeVar = false;
		if($scope.scopeVar2){
			$rootScope.getAllFriendNotification();
		}else{
        	$rootScope.getCountOfAllTypeNotificaton();
        }
	};	
    $scope.NotificationFriendOut = function(){
		$rootScope.showFriendNotificationList = false;
		$scope.scopeVar2 = false;
    }; 
	$scope.blockDivClick = function(even){
		if(even.target.nodeName!=='IMG'){
			var temp=$rootScope.toggleSearch
			$rootScope.toggleSearch=null
	        setTimeout(function(){
				$rootScope.toggleSearch=temp
			},100)
		}
	}
	$scope.FriendRequests = [];
	$rootScope.getAllFriendNotification = function() {
		$scope.FriendRequests = [];
		$rootScope.loadNotification1 = true;
		$scope.NotificationFound = false;
		$scope.NotificationNotFound = false;
		opts = {};
		opts.user_id = APP.currentUser.id;
		opts.limit_start = 0;
		opts.limit_size = 100;
		ProfileService.getPendingFreindReq(opts, function(data) {
			if(data.code == 101) {
			    $scope.FriendRequests = data.data.requests;
			    $rootScope.allFriendTotal = data.data.size;
				$scope.NotificationFound = true;
				$rootScope.loadNotification1 = false;
			    $scope.NotificationNotFound = true;	    
            }
			 else {
				$scope.NotificationNotFound = true;
				$rootScope.loadNotification1 = false;
			}
		});
    };
       
	$scope.AcceptRequest = function(friendInfo, id) {
		$("#notification-request-friend-" + id).fadeOut(1000);
		opts = {};
		opts.user_id = APP.currentUser.id;
		opts.friend_id = friendInfo.friend_id;
		opts.action = 1;
		if(friendInfo.personal == 1){
			opts.request_type = 1; 
		}else if(friendInfo.professional == 1 ){
			opts.request_type = 2; 
		}
		ProfileService.acceptFriendRequest(opts, function(data) {
			if(data.code == 101) {
				$("#notification-request-friend-" + id).hide();
				/*$rootScope.getAllFriendNotification();*/
				$location.path('/viewfriend/'+friendInfo.friend_id);
			} else {
				$("#notification-request-friend-" + id).show();
			}
		});
	};  

	$scope.RejectRequest = function(friend, id) {
		$("#notification-request-friend-" + id).fadeOut(1000);
		opts = {};
		opts.user_id = APP.currentUser.id;
		opts.friend_id = friend.friend_id;
		opts.action = '0';
		if(friend.personal == 1){
			opts.request_type = 1; 
		}else if(friend.professional == 1 ){
			opts.request_type = 2; 
		}

		ProfileService.rejectFriendRequest(opts, function(data) {
			if(data.code == 101) {
				$("#notification-request-friend-" + id).hide();
				$rootScope.getAllFriendNotification();
			} else {
				$("#notification-request-friend-" + id).hide();
			}
		});
	};

	if(UserService.isAuthenticated()) {
		$rootScope.getAllFriendNotification();
	}

}]);
app.controller('AllSearchProfile', ['$cookieStore', '$rootScope', '$scope', '$http', '$location', '$timeout', '$routeParams', 'ProfileService', function($cookieStore, $rootScope, $scope, $http, $location, $timeout, $routeParams, ProfileService) {
	$scope.searchType 		= 1;
	$scope.searchtext 		= $routeParams.text;
	$scope.allItems 		= [];
	$scope.itemSearching 	= false;
	$scope.activeTab 		= 'user';
	$scope.totalItems 		= 0;
	$scope.searchType 		= 1;
	$scope.res 				= 1;
	$scope.itemPerPage 		= 12;
	$scope.AllSearchloader 	= true;

	$scope.searchAllProfiles = function(type) {
		var limit_start = ($scope.allItems.length).toString();
		var opts = {};
			opts.user_id 	 = APP.currentUser.id;
			opts.search_text = $scope.searchtext;
			opts.search_type = type;
			opts.limit_start = limit_start;
			opts.limit_size  = $scope.itemPerPage;
		if ((( $scope.totalItems > limit_start) || $scope.totalItems == 0 ) && $scope.res == 1) {
			$scope.res 	= 0;
			$scope.AllSearchloader 	= true;
			ProfileService.getAllsearchProfiles(opts, function(data){
				$scope.res	= 1;
				if(data.code == 101) {
					$scope.AllSearchloader 	= false;
					$scope.allItems 		= $scope.allItems.concat(data.data.results);
					$scope.totalItems 		= data.data.total_count;
				} else {
					$scope.AllSearchloader 	= false;
				}
			});		
		}
	}

	$scope.searchAllProfiles($scope.searchType);

	$scope.changeItems = function(type) {
		$scope.allItems = [];
		$scope.totalItems = 0;
		$scope.res = 1;
		$scope.searchType = type;
		switch($scope.searchType) {
			case 1:
				$scope.activeTab = 'user'; break;
			case 2:
				$scope.activeTab = 'shop'; break;
			case 3:
				$scope.activeTab = 'club'; break;	
		}
		$scope.searchAllProfiles($scope.searchType); 
	};

	$scope.loadMore = function() {
		$scope.searchAllProfiles($scope.searchType);
	};	

}]);
app.controller('BLShopsController', ['$scope', '$http', 'BLShopService', '$timeout', function ($scope, $http, BLShopService, $timeout) {  
	$scope.storeAllList = [];
        $scope.storeListObject = [];
        $scope.storeMyList = [];
        $scope.storeAllList = [];
        $scope.myRes = 1;
        $scope.totalSize = 0;
        $scope.storeLoading = true;
        $scope.notFound = false;
        $scope.allRes = 1;
        $scope.showPublicShop = function() {
        var opts = {};
        var limit_start = $scope.storeAllList.length;
    	opts.limit_start = limit_start;
        opts.limit_size = APP.store_list_pagination.end; 
        if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
            $scope.storeLoading = true;
            $scope.allRes = 0;
            BLShopService.getPublicShops(opts, function(data) {
                if(data.code == 101) {
                    $scope.allRes = 1;
                    $scope.totalSize = data.data.size;
                    $scope.storeListObject =  $scope.storeAllList = $scope.storeAllList.concat(data.data.stores);
                    $scope.storeLoading = false;
                    $scope.notFound = false;
                }
                else {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                 }
            });
        }
    };

    $scope.showPublicShop();
    $scope.loadMore = function() {     
        $scope.showPublicShop();
    }; 
        $scope.listActive = 'active'; 
        $scope.changeView = function(layout) {
         if(layout == 'grid'){
            $scope.gridActive = 'active'; 
            $scope.listActive = ''; 
        } else if(layout == 'list'){
            $scope.listActive = 'active'; 
            $scope.gridActive = '';
        }
    };
    $scope.searchTitle ='';
    var DELAY_TIME_BEFORE_POSTING = 300;
    //var element = $('#search');
    var currentTimeout = null;

    $('#shopserchbox').keypress(function() {
      var model = $scope.searchTitle;
      if(currentTimeout) {
        $timeout.cancel(currentTimeout);
      }
      currentTimeout = $timeout(function(){
        $scope.searchStore();
      }, DELAY_TIME_BEFORE_POSTING)
    });
    $scope.searchRes = 0;
    $scope.searchStore = function() {
        $scope.searchRes = 0;
        $scope.storeLoading = true;
        $scope.myStoreActive = '';
        var opts = {};
        if($scope.searchTitle.length >= 3 ){
            if(($scope.searchTitle === undefined || $scope.searchTitle === '') && $scope.searchRes == 1) {
                $scope.allRes = 1;
                $scope.storeMyList = [];
                $scope.storeAllList = [];
            }
            opts.business_name = ($scope.searchTitle === undefined ? '' : $scope.searchTitle); 
            opts.limit_start = APP.store_list_pagination.start;
            opts.limit_size = APP.store_list_pagination.end;
            BLShopService.getSearchStoreDetail(opts, function(data) {
                $scope.searchRes = 1;
                if(data.code == 101) {
                    $scope.storeListObject =  data.data;
                    $scope.storeLoading = false;
                    $scope.notFound = false;
                 }else {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                }
            });
        }
    };
}]);
     

// Controller for the show the detail of particular shop with out login //
app.controller('BLDetailShopsController', ['$route','$scope','$location', '$http', 'BLShopService', '$timeout','$routeParams', function ($route,$scope,$location, $http, BLShopService, $timeout,$routeParams) {  
	$scope.$route = $route;
        $scope.storeMainId = $routeParams.id;
        var latitudeMap = 0;
        var longitudeMap = 0;
        $scope.loadDetails = function() {
        $scope.storeLoading = true;
        $scope.updateStart = false;
        $scope.createStoreError = false;
        //$scope.createStoreErrorMgs = $scope.i18n.storealbum.album_createStoreErrorMgs;
        $scope.showEditForm = false;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $routeParams.id;
        BLShopService.getShopsDetail(opts, function(data) {
            if(data.code == 101) {
                    $scope.storeDetail = data.data;
                  // $scope.aboutStore();
                    $scope.store = $scope.storeDetail;
                    $scope.storeLoading = false;
                    latitudeMap = data.data.latitude;
                    longitudeMap = data.data.longitude;
                    if (($location.path().indexOf("/shop/edit") != -1) ||  ($location.path().indexOf("/shop/view") != -1)) {
                        $timeout(function() {
                        //  $scope.initialize();
                        },  1000); 
                       
                    } else {
                       $timeout(function() {
                         $scope.initializeMaps();
                        },  1000); 
                    }
            } else {
                $scope.storeLoading = false;
                $scope.createStoreError = true;
            }
        });
    };
    $scope.initializeMaps = function () {
        var myLatLng = new google.maps.LatLng(latitudeMap, longitudeMap);
        var mapOptions = {
           center: new google.maps.LatLng(latitudeMap, longitudeMap),
           zoom: 6
        };
       var map = new google.maps.Map(document.getElementById('map-canvas-second'),mapOptions);
       var marker = new google.maps.Marker({
           position: new google.maps.LatLng(latitudeMap, longitudeMap),
           map: map,
           title: $scope.store.map_place
        });
    };
    $scope.loadDetails();
        
        
}]);
app.controller('BLDetailCoverController', ['$route','$scope','$location', '$http', 'BLShopService', '$timeout','$routeParams', function ($route,$scope,$location, $http, BLShopService, $timeout,$routeParams) {    
	$scope.$route = $route;
        $scope.storeMainId = $routeParams.id;
        var latitudeMap = 0;
        var longitudeMap = 0;
        $scope.loadDetails = function() {
        $scope.storeLoading = true;
        $scope.updateStart = false;
        $scope.createStoreError = false;
        //$scope.createStoreErrorMgs = $scope.i18n.storealbum.album_createStoreErrorMgs;
        $scope.showEditForm = false;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $routeParams.id;
        BLShopService.getShopsDetail(opts, function(data) {
            if(data.code == 101) {
                    $scope.storeDetail = data.data;
                  // $scope.aboutStore();
                    $scope.storeLoading = false;
                    latitudeMap = data.data.latitude;
                    longitudeMap = data.data.longitude;
            } else {
                $scope.storeLoading = false;
                $scope.createStoreError = true;
            }
        });
    };
         $scope.loadDetails();
}]);
app.controller('BLDetailAlbumShopsController', ['$routeParams','$route','$scope','$location', '$http', 'BLShopService', '$timeout', function ($routeParams ,$route,$scope,$location, $http, BLShopService, $timeout) {  
	$scope.totalSize = 0;
        $scope.allRes = 1;
        $scope.listAlbum = [];
        $scope.viewalbum = [];
        $scope.albloader = false;
        $scope.noAlbums = false;
        $scope.noPhotos = false; 
        $scope.storeMainId = $routeParams.id;
        $scope.totalSizeImg = 0;
        $scope.allResImg = 1;
        $scope.$route = $route;
        $scope.listload = false;
        $scope.redirectUrl = function(album_id, album_name) {
        if(album_name == '') {
           album_name = 'Untitled';
           $location.path("/shop/home/image/"+album_id+"/"+album_name+"/"+$scope.storeMainId);
        }
        else {
           $location.path("/shop/home/image/"+album_id+"/"+album_name+"/"+$scope.storeMainId); 
        }
    };
    //Album Store Listing
   
    $scope.storepagealbumlists = function(){  
        $scope.albloader = false;
        var opts = {};
        opts.store_id = $scope.storeMainId;
        var limit_start = $scope.listAlbum.length;
        opts.limit_start = limit_start;
        opts.limit_size = 20; 
        if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
            $scope.allRes = 0;
            $scope.listload = true;
            BLShopService.getShopAlbumDetail(opts, function(data){
            if(data.code == 101) {
                $scope.totalSize = data.data.size;
                $scope.allRes = 1;
                $scope.listAlbum = $scope.listAlbum.concat(data.data.album);
                $scope.noAlbums = true;    
                $scope.albloader = false;
                $scope.listload = false;
            }else {
                $scope.albloader = false;
                $scope.listload = false;
               
            }
         });
        }
    };
    // album shop list 
      $scope.storepagealbumlists();  
      $scope.loadMore = function() {     
        $scope.storepagealbumlists();
      };
      
          //View Store Album 
    $scope.viewdetailalbums = function(){
        var limit_start = $scope.viewalbum.length;
        var albumId = $routeParams.album_id;
        $scope.albumname = $routeParams.album_name;
        var opts = {};
        opts.store_id = $routeParams.id; //todo
        opts.album_id = albumId;
        opts.limit_start = limit_start; 
        opts.limit_size = 20; 
        if ((( $scope.totalSizeImg > limit_start) || $scope.totalSizeImg == 0 ) && $scope.allResImg == 1) {
        $scope.listload = true;
        $scope.allResImg = 0;
        BLShopService.getShopPicturesDetail(opts, function(data){
              if(data.code == 101) {
                $scope.albloader = false;
                $scope.totalSizeImg = data.data.size;
                $scope.allResImg = 1;
                $scope.viewalbum = $scope.viewalbum.concat(data.data.media);   
                $scope.listload = false; 
                $scope.noPhotos = true; 
              } else {
                $scope.albloader = false;
                $scope.listload = false; 
            }
        }); 
        } ;
    };
     $scope.viewdetailalbums();
       $scope.loadMoreImage = function() {     
        $scope.viewdetailalbums();
    };
}]);
app.controller('BLDetailPostShopsController', ['$routeParams','$route','$scope', '$http', 'BLShopService', '$timeout', function ($routeParams ,$route,$scope, $http, BLShopService, $timeout) {  
	$scope.$route = $route;
        $scope.posts = [];
        $scope.myRes = 1;
        $scope.isLoading = true;
        $scope.Size = 0;
        $scope.storeMainId = $routeParams.id;
         // function to get the post and comment of the post
    $scope.getPosts = function() {
        var limit_start = $scope.posts.length;
        var opts = {};
        opts.store_id = $scope.storeMainId;
        opts.limit_start = limit_start; 
        opts.limit_size = 20; 
        if ((($scope.Size > limit_start ) || $scope.Size == 0 ) && $scope.myRes == 1) {
        // This service's function returns post
         $scope.myRes = 0; 
            
        BLShopService.getShopPostDetail(opts, function(data){
          if(data.code == 101)
            {
                $scope.posts = $scope.posts.concat(data.data);
                $scope.isLoading = false;
                $scope.myRes = 1;
                $scope.Size = data.count;
                if($scope.posts.length == 0){
                    $scope.noContent = true;
                }
            } else {
                $scope.noContent = false;
                $scope.isLoading = false;
              //  $scope.posts = [];
            }
         });
        };
    };
    // calling get post function on controller load
      $scope.getPosts();
      $scope.loadMore = function() {     
        $scope.getPosts();
    }; 
    // show the comments on post
    $scope.allCommentLoad = [];
    $scope.showComments = [];
    $scope.showAllComments = function(postIndx) {
        $scope.allCommentLoad[postIndx] = true;
        var post = $scope.posts[postIndx];
        var opts = {};
        opts.post_id = post.post_id;
        opts.user_id = $scope.currentUser.id;
        $scope.getComments(opts, postIndx);
        $scope.showComments[postIndx] = true;
    };
    //// call the serive for show the comments of post
     $scope.comments = [];
    $scope.getComments = function(opts, postIndx) {
        $scope.comments[postIndx] = [];
        
        // This service's function returns post
        BLShopService.getCommentsStoreDetail(opts, function(data){
            if(data.code == 100)
            {
                $scope.posts[postIndx].comments = data.data.comment;
                $scope.allCommentLoad[postIndx] = false;
                    if($scope.comments[postIndx].length  != 0 ) {
                        $scope.noComment = true;
                    }
            } else {
                $scope.allCommentLoad[postIndx] = true;
            }
        });
    };

}]);   


//shop Map controller
app.controller('PublicMapStoreController', ['$scope', '$http', 'BLShopService', '$timeout', function ($scope, $http, BLShopService, $timeout) {   


var mapArray = [];
var locations = [];
$scope.maploader = false;
var i;
var m ;
var n = [];
$scope.getmapstores = function(){
    $scope.maploader = true;
        var opts = {"user_id":APP.currentUser.id}; 
        BLShopService.getMapPublicDetail(opts, function(data){
            //console.log('data'+data.data);
            if(data.code == 101) {
                $scope.detail = data.data;
                var mapArray = data.data;
                for(var i=0; i<mapArray.length; i++) {
                    n.push(mapArray[i].name);
                    var mi = new Array(mapArray[i].mapplace, mapArray[i].latitude,mapArray[i].longitude, mapArray[i].thumb_path, mapArray[i].name, mapArray[i].credit_status, mapArray[i].shot_status, mapArray[i].dp_status, mapArray[i].id);
                    locations.push(mi);
                     }
                     $('.shop-map').show();
                     $scope.initialize();
                     $scope.maploader = false;
            } else {                
                $scope.maploader = false;                
            }
    });
}

$scope.getmapstores();

/*search by store name starts*/
//var n = ["Action Comics", "Detective Comics", "Superman", "Fantastic Four", "Amazing Spider-Man", "Batman Series", "Repoman Seeks", "Love Comics", "Anime Comics"];

    var containsText = function (search) {
        var gotText = false;
        for (var i in n) {
            var re = new RegExp(search, "ig");
            var s = re.test(n[i]);
            if (s) {
                $scope.itemsArr.push(n[i]);
                gotText = true;
            }
        }
        return gotText;
    };
    $scope.searchText = "";
    $scope.itemsSelectedArr = [];
    $scope.itemsArr = [];
    $scope.itemsDisplaPanel = false;
    $scope.searchMe = function (search) {
        $scope.itemsArr = [];
        $scope.itemsDisplaPanel = false;
        if (search.length > 2) {
            var foundText = containsText(search);
            $scope.itemsDisplaPanel = (foundText) ? true : false;
        }
    };

    $scope.itemSelectedData = function (str) {
        $scope.itemsDisplaPanel = false;
        $scope.searchText = str;
         $('#results').html('');
        var a = n.indexOf(str);
        $scope.markerpopup(a);

        //return (str) ? $scope.itemsSelectedArr.push(str) : false;
    };

    $scope.itemSelectedDelet = function (sel) {
        var idx = $scope.itemsSelectedArr.indexOf(sel);
        if (idx !== -1) $scope.itemsSelectedArr.splice(idx, 1);
        $scope.itemsDisplaPanel = false;
    };
/*search by store name ends*/



var arrMarker = [];
var geocoder = new google.maps.Geocoder();
var circle = null;
var gmarkers = [];
var map;
var arrMapresult = [];
var arrShotMarker = [];
var arrDpMarker = [];
var arrDpnShotMarker = [];
var arrSearchStore = [];

$scope.initialize = function () {
    document.getElementById("pac-input").value = '';
    var markers = [];
    var centerLatLng = new google.maps.LatLng(51.532315,-0.1544);
    map = new google.maps.Map(document.getElementById('map-canvas'), {
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    zoom:3,
    center: centerLatLng
});

  // Create the search box and link it to the UI element.
    var input = (document.getElementById('pac-input'));
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    var searchBox = new google.maps.places.SearchBox(
    /** @type {HTMLInputElement} */(input));

  // [START region_getplaces]
  // Listen for the event fired when the user selects an item from the
  // pick list. Retrieve the matching places for that item.
    google.maps.event.addListener(searchBox, 'places_changed', function() {
    document.getElementById("shotfilter").checked = false;
    document.getElementById("dpfilter").checked = false;
    var address = document.getElementById('pac-input').value;
    var radius = parseInt(50, 10)*1000;
    geocoder.geocode( { 'address': address}, function(results, status) {

    if (status == google.maps.GeocoderStatus.OK) {
        var latitude = results[0].geometry.location.lat();

        var longitude = results[0].geometry.location.lng();
        var latlng = new google.maps.LatLng(latitude, longitude);
        
        var marker = new google.maps.Marker({
        map: map,
        position: results[0].geometry.location
    });
    marker.setMap(null);
    if (circle) circle.setMap(null);
    circle = new google.maps.Circle({center:marker.getPosition(),
                                     radius: radius,
                                     fillOpacity: 0.35,
                                     fillColor: "#FF0000",
                                     map: map});

    var bounds = new google.maps.LatLngBounds();
    $('#results').html('');
    arrMapresult.length = 0;
    for (var i=0; i<gmarkers.length;i++) {
    if (google.maps.geometry.spherical.computeDistanceBetween(gmarkers[i].getPosition(),marker.getPosition()) < radius) {
        bounds.extend(gmarkers[i].getPosition())
        gmarkers[i].setMap(map);
        arrMapresult.push(gmarkers[i].getPosition());
        var infowindow = new google.maps.InfoWindow();

        var marker, i;
        var pin = {
            url: 'app/assets/images/silver-pin.png'
        };
        gmarkers[i].getPosition();
        google.maps.event.addListener(marker, 'click', (function(marker, i) {
          return function() {
          //infowindow.setContent("<div>"+locations[i][4]+"</div><div>"+locations[i][0]+"</div>");
        if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div></div></div>");
        } else {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div></div></div>");   
        }
          infowindow.open(map, marker);
        }
        })(marker, i));
    } else {
          gmarkers[i].setMap(null);
        
    }
    }

    if(arrMapresult.length == 0) {
        bounds.extend(results[0].geometry.location);
        $('#results').html('<span>No Result Found</span>');
    } else {
        $('#results').html('<span>'+arrMapresult.length+' result found</span>');
    }
    map.fitBounds(bounds);
    map.setZoom(9);
    } else {
      alert('Geocode was not successful for the following reason: ' + status);
    }
  });
});
  // [END region_getplaces]

  // Bias the SearchBox results towards places that are within the bounds of the
  // current map's viewport.
    google.maps.event.addListener(map, 'bounds_changed', function() {
        var bounds = map.getBounds();
        searchBox.setBounds(bounds);
    });

  //pin
  /*  var locations = [
      ['Bondi Beach', -33.890542, 151.274856],
      ['Coogee Beach', -33.923036, 151.259052],
      ['Cronulla Beach', -34.028249, 151.157507],
      ['Manly Beach', -33.80010128657071, 151.28747820854187],
      ['Maroubra Beach', -33.950198, 151.259302]
    ];
    */
    var infowindow = new google.maps.InfoWindow();

    var marker, i;
    var pin = {
        url: 'app/assets/images/green-pin.png'
    };

    var pin2 = {
        url: 'app/assets/images/silver-pin.png'
    };

    for (i = 0; i < locations.length; i++) {
        if(locations[i][5] == 0){
            marker = new google.maps.Marker({
            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
            map: map,
            icon :pin
            });
        } else {
            marker = new google.maps.Marker({
            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
            map: map,
            icon :pin2
            });
        }
       

      google.maps.event.addListener(marker, 'click', (function(marker, i) {
        return function() {
          //infowindow.setContent("<div>Name : "+locations[i][4]+"</div><div>Buisiness Name : "+locations[i][3]+"</div><div>Address : "+locations[i][0]+"</div>");
           if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div></div></div>");
        } else {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div></div></div>");   
        }
          infowindow.open(map, marker);
        }
      })(marker, i));
       arrMarker.push(marker);
       gmarkers.push(marker);

    }
}

$scope.markerpopup = function(index) {
    document.getElementById("shotfilter").checked = false;
    document.getElementById("dpfilter").checked = false;
    $scope.setAllShotMap(null);
        $scope.setAllMap(map);
        $scope.setDpMarker(null);
        $scope.setDpShotMarker(null);
    if(circle != null) {
        circle.setMap(null);
    }
    //circle.setMap(null);
    var infowindow = new google.maps.InfoWindow();

    var marker, i;
    var pin = {
        url: 'app/assets/images/green-pin.png'
    };

    var pin2 = {
        url: 'app/assets/images/silver-pin.png'
    };

    for (i = 0; i < locations.length; i++) {  
        if(locations[i][5] == ''){
            marker = new google.maps.Marker({
            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
            map: map,
            icon :pin
            });
        } else {
            marker = new google.maps.Marker({
            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
            map: map,
            icon :pin2
            });
        }

        

        google.maps.event.addListener(marker, 'click', (function(marker, i) {
        return function() {
          //infowindow.setContent("<div>Name : "+locations[i][4]+"</div><div>Buisiness Name : "+locations[i][3]+"</div><div>Address : "+locations[i][0]+"</div>");
           if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div></div></div>");
        } else {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div></div></div>");   
        }
          infowindow.open(map, marker);
        }
      })(marker, i));
        arrSearchStore.push(marker);
    }

    google.maps.event.trigger(arrMarker[index], 'click');
}

$scope.setAllMap = function(map) {
    for (var i = 0; i < arrMarker.length; i++) {
        arrMarker[i].setMap(map);
        gmarkers[i].setMap(map);
    }
}

$scope.setRemoveAllMap = function(map) {
    for (var i = 0; i < arrSearchStore.length; i++) {
        arrSearchStore[i].setMap(map);
    }
}

$scope.setAllShotMap = function(map) {
    for (var i = 0; i < arrShotMarker.length; i++) {
        arrShotMarker[i].setMap(map);
    }
}

$scope.setDpMarker = function(map) {
    for (var i = 0; i < arrDpMarker.length; i++) {
        arrDpMarker[i].setMap(map);
    }
}
$scope.setDpShotMarker = function(map) {
    for (var i = 0; i < arrDpnShotMarker.length; i++) {
        arrDpnShotMarker[i].setMap(map);
    }
}

$scope.mapfilter = function() {
    var chk = document.getElementById("shotfilter").checked;
    var dpchk = document.getElementById("dpfilter").checked;
    if((chk == true) && (dpchk == false)){
        $scope.setRemoveAllMap(null);
        $scope.setDpMarker(null);
        $scope.setAllMap(null);
        $scope.setDpShotMarker(null);
         var infowindow = new google.maps.InfoWindow();

    var marker, i;
    var pin = {
        url: 'app/assets/images/green-pin.png'
    };

    var pin2 = {
        url: 'app/assets/images/silver-pin.png'
    };

    for (i = 0; i < locations.length; i++) {
        if(locations[i][6] == 1){
            if(locations[i][5] == 1) {
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon :pin
                });
            } else {
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon :pin2
                });
            }
            

            google.maps.event.addListener(marker, 'click', (function(marker, i) {
            return function() {
                //infowindow.setContent("<div>Name : "+locations[i][4]+"</div><div>Buisiness Name : "+locations[i][3]+"</div><div>Address : "+locations[i][0]+"</div>");
                 if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div></div></div>");
        } else {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div></div></div>");   
        }
                infowindow.open(map, marker);
            }
        })(marker, i));
        arrShotMarker.push(marker);
        }      
    }
    } else if((dpchk == true) && (chk == false)){
        $scope.setRemoveAllMap(null);
        $scope.setDpShotMarker(null);
        $scope.setAllMap(null);
        $scope.setAllShotMap(null);
        var infowindow = new google.maps.InfoWindow();

    var marker, i;
    var pin = {
        url: 'app/assets/images/green-pin.png'
    };

    var pin2 = {
        url: 'app/assets/images/silver-pin.png'
    };

    for (i = 0; i < locations.length; i++) {
        if(locations[i][7] == 1){
            if(locations[i][6] == 1) {
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon :pin
                });
            } else {
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon :pin2
                });
            }
            

            google.maps.event.addListener(marker, 'click', (function(marker, i) {
            return function() {
                //infowindow.setContent("<div>Name : "+locations[i][4]+"</div><div>Buisiness Name : "+locations[i][3]+"</div><div>Address : "+locations[i][0]+"</div>");
                 if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div></div></div>");
        } else {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div></div></div>");   
        }
                infowindow.open(map, marker);
            }
        })(marker, i));
        arrDpMarker.push(marker);
        }      
    }
    } else if((chk == true) && (dpchk == true)){
        $scope.setDpShotMarker(null);
        $scope.setAllMap(null);
        $scope.setAllShotMap(null);
        var infowindow = new google.maps.InfoWindow();

    var marker, i;
    var pin = {
        url: 'app/assets/images/silver-pin.png'
    };

    for (i = 0; i < locations.length; i++) {
        if((locations[i][7] == 1) || (locations[i][6] == 1)){
          
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon :pin
                });           

            google.maps.event.addListener(marker, 'click', (function(marker, i) {
            return function() {
                //infowindow.setContent("<div>Name : "+locations[i][4]+"</div><div>Buisiness Name : "+locations[i][3]+"</div><div>Address : "+locations[i][0]+"</div>");
                 if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div></div></div>");
        } else {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div></div></div>");   
        }
                infowindow.open(map, marker);
            }
        })(marker, i));
        arrDpnShotMarker.push(marker);
        }      
    }
    } else {
        $scope.setAllShotMap(null);
        $scope.setAllMap(map);
        $scope.setDpMarker(null);
        $scope.setDpShotMarker(null);
        $scope.setRemoveAllMap(null);
    }
  
}

}]);
app.controller('StoreController', function ($scope, $http, StoreService, $timeout) {  
    $scope.storeListObject = [];
    $scope.storeMyList = [];
    $scope.storeAllList = [];
    $scope.totalSize = 0;
    $scope.myTotalSize = 0;
    $scope.storeLoading = true;
    $scope.viewAllActive = 'current';
    $scope.myStoreActive = '';
    $scope.tab = 'viewAll';
    $scope.notFound = false;
    $scope.allRes = 1;
    $scope.myRes = 1;
    $scope.firstPage = APP.store_list_pagination.end;
    $scope.itemsPerPage = APP.store_list_pagination.end;
    $scope.currentPage = 1;
    $scope.range = [];
    $scope.pagevalue = '';
    $scope.changePageMore = function(pageNo) {
        $scope.currentPage = pageNo;
        $scope.loadMore();
    };

    $scope.prevPage = function() {
        if ($scope.currentPage > 1) {
            $scope.currentPage--;
        }
        $scope.loadMore();
    };

    $scope.prevPageDisabled = function() {
        return $scope.currentPage === 1 ? "disabled" : "";
    };

    $scope.nextPage = function() {
        if ($scope.currentPage < $scope.totalItems) {
            $scope.currentPage++;
        }
       $scope.loadMore();
    };

    $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.totalItems ? "disabled" : "";
    };

    $scope.setPage = function(number) {
        $scope.itemsPerPage = number;
        $scope.currentPage = 1;
        $scope.loadMore();
    };
    $scope.showStoreList = function(tab, itemsPerPage) {
        $scope.pagevalue = 'storeAll';
        $scope.searchText = '';
        $scope.storeMyList = [];
        $scope.tab = tab;
        $scope.viewAllActive = 'current';
        $scope.myStoreActive = '';
        var opts = {};
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        opts.user_id = APP.currentUser.id;
        opts.store_type = 1; 
        opts.limit_start = limit_start;
        opts.limit_size = itemsPerPage; 
        if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
            $scope.storeLoading = true
            $scope.allRes = 0;
            StoreService.getStore(opts, function(data) {
                if(data.code == 101) {
                    $scope.allRes = 1;
                    $scope.totalSize = data.data.size;
                    $scope.storeListObject = data.data.stores;
                    $scope.totalItems = Math.ceil(data.data.size/itemsPerPage); 
                    $scope.range = [];  
                    for (var i=1; i<=$scope.totalItems; i++) {
                        $scope.range.push(i);
                    }             
                    $scope.storeLoading = false;
                    $scope.notFound = false;
                } else if(data.code == 121) {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                    $scope.myRes = 1; 
                }
                else {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                    $scope.myRes = 1; 
                }
            });
        }
    };


    $scope.myStoreList = function(tab, itemsPerPage) {
        $scope.pagevalue = 'storeMy';
        $scope.searchText = '';
        $scope.storeAllList = [];
        $scope.tab = tab; 
        $scope.viewAllActive = '';
        $scope.myStoreActive = 'current';
        var opts = {};
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        opts.user_id = APP.currentUser.id;
        opts.store_type = 2; 
        opts.limit_start = limit_start;
        opts.limit_size = itemsPerPage;
        if ((($scope.myTotalSize > limit_start) || $scope.myTotalSize == 0 ) && $scope.myRes == 1) {
            $scope.storeLoading = true;
            $scope.myRes = 0; 
            StoreService.getStore(opts, function(data) {
                $scope.range = []; 
                if(data.code == 101) {
                    $scope.myTotalSize = data.data.size;
                    $scope.myRes = 1; 
                    $scope.storeListObject = $scope.storeMyList = data.data.stores;
                    $scope.totalItems = Math.ceil(data.data.size/itemsPerPage);  
                    for (var i=1; i<=$scope.totalItems; i++) {
                        $scope.range.push(i);
                    }  
                    $scope.storeLoading = false;
                } else if(data.code == 121) {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                    $scope.myRes = 1; 
                } else {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                    $scope.myRes = 1; 
                    
                }
            });
        }
    };

    $scope.addressFilter = '';
    $scope.showStoreList($scope.tab, $scope.itemsPerPage);
    $scope.loadMore = function() {
        var textVal = $scope.searchText ;
        var addressVal = $scope.addressFilter;
        if($scope.pagevalue == '' ){
            $scope.showStoreList($scope.tab, $scope.itemsPerPage);     
        } else if($scope.pagevalue == 'storeAll'){
            $scope.showStoreList($scope.tab, $scope.itemsPerPage); 
        } else if($scope.pagevalue == 'storeMy'){
            $scope.myStoreList($scope.tab,  $scope.itemsPerPage);
        } else if($scope.pagevalue == 'storeNameSearch'){
            $scope.searchStore('viewAll',  $scope.itemsPerPage);
        } else if($scope.pagevalue == 'storeAddSearch'){
            $scope.searchAddressShop($scope.storeIdArray);
        }
    };

    $scope.listActive = 'active';
    $scope.changeView = function(layout) {
        if(layout == 'grid'){
            $scope.gridActive = 'active'; 
            $scope.listActive = ''; 
        } else if(layout == 'list'){
            $scope.listActive = 'active'; 
            $scope.gridActive = '';
        }
    };

    

    /*$scope.loadMore = function() {
        var chk = document.getElementById("shotfilter").checked;
        var dpchk = document.getElementById("dpfilter").checked;
        var mapAddSearch = $scope.addressFilter;
        if($scope.searchText === '' && mapAddSearch === '' && chk===false && dpchk ===false ) {         
            if($scope.tab == 'myStore') {
                $scope.storeAllList = [];
                $scope.myStoreList($scope.tab);
            } else {
                $scope.storeMyList = [];
                $scope.showStoreList($scope.tab);
            }
        } 
        if (mapAddSearch != ''){
            $scope.searchAddressShop($scope.storeIdArray);
        }
        
    };
    */
     /* function to cancel the service when accept new request
    * 
    */
    $scope.searchText ='';
    var DELAY_TIME_BEFORE_POSTING = 300;
    //var element = $('#search');
    var currentTimeout = null;

    $('#shopserchbox').keypress(function() {
    
      var model = $scope.searchText;
      //var poster = model($scope);
      if(currentTimeout) {
        $timeout.cancel(currentTimeout);
      }
      currentTimeout = $timeout(function(){
        if($scope.searchText.length == 0) {
        $scope.searchStore();
        }
      }, DELAY_TIME_BEFORE_POSTING)
    });

    $scope.searchRes = 0;
    $scope.searchTotalSize = 0;
    $scope.searchStore = function(tab, itemsPerPage) {
        $scope.pagevalue = 'storeNameSearch';
        $scope.searchRes = 0;
        $scope.storeLoading = true;
        $scope.viewAllActive = 'current';
        $scope.myStoreActive = '';
        var opts = {};
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        opts.user_id = APP.currentUser.id;
        $scope.tab = 'viewAll';
        if($scope.searchText.length >= 3 ){
            if(($scope.searchText === undefined || $scope.searchText === '') && $scope.searchRes == 1) {
                $scope.allRes = 1;
                $scope.storeMyList = [];
                $scope.storeAllList = [];
                $scope.showStoreList($scope.tab);
            }
            opts.business_name = ($scope.searchText === undefined ? '' : $scope.searchText); 
            opts.limit_start = limit_start;
            opts.limit_size = itemsPerPage;
            if($scope.searchTotalSize > limit_start || $scope.searchTotalSize == 0) {
                StoreService.searchStore(opts, function(data) {
                    $scope.searchRes = 1;
                    if(data.code == 101) {
                        $scope.storeListObject =  data.data;
                        $scope.searchTotalSize = data.size;
                        $scope.totalItems = Math.ceil(data.size/itemsPerPage); 
                        $scope.range = []; 
                        for (var i=1; i<=$scope.totalItems; i++) {
                            $scope.range.push(i);
                        } 
                        $scope.storeLoading = false;
                        $scope.notFound = false;
                    } else if(data.code == 121) {
                        $scope.storeListObject =  [];
                        $scope.notFound = true;
                        $scope.storeLoading = false;
                    }
                    else {
                        $scope.storeListObject =  [];
                        $scope.notFound = true;
                        $scope.storeLoading = false;
                    }
                });
            }
        }
    };


    $scope.deleteStore = function(id, parentId) { 
        $("#store" + id).hide();
        $("#storedelete" + id).show();
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = id;
        //opts.store_type = (parentId) ? 2 : 1; condition changed on 14 jan
        opts.store_type = 1; // store type 1 for parent store delete
        StoreService.deleteStore(opts, function(data) {
            if(data.code == 101) {
                $(".storecoverid" + id).hide();
            } else {
                $("#store" + id).show();
                $("#storedelete" + id).hide();
            }
        });
    };

    $scope.deleteStoreGrid = function(id, parentId) { 
        $("#store" + id).hide();
        $("#storedelete" + id).show();
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = id;
       //opts.store_type = (parentId) ? 2 : 1; condition changed on 14 jan
        opts.store_type = 1; // store type 1 for parent store delete
        StoreService.deleteStore(opts, function(data) {
            if(data.code == 101) {
                /*var index = 0;
                angular.forEach($scope.storeListObject, function(idx) {
                    if(idx.id != id){
                        index = index + 1;
                    }else{
                        $scope.storeListObject.splice(index, 1);
                    }
                });*/
                $(".storecoverid" + id).hide();
                //$scope.storeListObject.splice(id, 1);
            } else {
                $("#store" + id).show();
                $("#storedelete" + id).hide();
            }
        });
    };

//format euro currency
$scope.format1 = function(n, currency) {
     n = Number(n);
    return currency + "" + n.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
}

//map functionality starts
var mapArray = [];
var locations = [];
$scope.maploader = false;
var i;
var m ;
var n = [];
$scope.getmapstores = function(){
    $scope.maploader = true;
        var opts = {"user_id":APP.currentUser.id}; 
        StoreService.getmapstores(opts, function(data){
            //console.log('data'+data.data);
            if(data.code == 101) {
                $scope.detail = data.data;
                var mapArray = data.data;
                for(var i=0; i<mapArray.length; i++) {
                    n.push(mapArray[i].name);
                    var mi = new Array(mapArray[i].mapplace, mapArray[i].latitude,mapArray[i].longitude, mapArray[i].thumb_path, mapArray[i].name, mapArray[i].credit_status, mapArray[i].shot_status, mapArray[i].dp_status, mapArray[i].id, mapArray[i].credit_available );
                        locations.push(mi);
                    }
                    $('.shop-map').show();
                    $scope.initialize();
                    $scope.maploader = false;
            } else {                
                $scope.maploader = false;                
            }
    });
}

$scope.getmapstores();

var res = 1;
$scope.searchTot = 0;
//call service
$scope.searchshoponmaps = function(arrCollection, req, itemSize){        
        //var opts = {"user_id":APP.currentUser.id,"shops":arrCollection};
        var opts = req;
        if(res==1){
        StoreService.searchshoponmaps(opts, function(data){
        res=0;
        if(data.code == 101) {
            $scope.storeLoading = false;
            $scope.storeListObject = data.data.stores; 
            if($scope.storeListObject.length < 1) {
                $scope.notFound = true;   
            } else {
                $scope.notFound = false;   
            }
            res=1;
            $scope.searchTot = itemSize;
            $scope.totalItems = Math.ceil(itemSize/$scope.itemsPerPage); 
            $scope.range = [];  
            for (var i=1; i<=$scope.totalItems; i++) {
                $scope.range.push(i);
            }    
        } else {    
            $scope.storeListObject = [];            
            $scope.notFound = true;   
            $scope.storeLoading = false;           
        }
    }); 
    }
}

var limit_starts = 0;
var limit_end = 12;
var idCollection = [];
$scope.searchAddressShop = function(arrCollection) {
    $scope.pagevalue = 'storeAddSearch';
    limit_starts = ($scope.currentPage-1)*$scope.itemsPerPage;
    limit_end = limit_starts + $scope.itemsPerPage;
    if($scope.searchTot > limit_starts || $scope.searchTot == 0 ) {
        $scope.storeLoading = true;
        idCollection = arrCollection;
        var tempArray = idCollection.slice(limit_starts,limit_end);
        var req = {"user_id":APP.currentUser.id,"shops":tempArray};
        $scope.searchshoponmaps(arrCollection, req, arrCollection.length); 
    } 
}
/*search by store name starts*/
//var n = ["Action Comics", "Detective Comics", "Superman", "Fantastic Four", "Amazing Spider-Man", "Batman Series", "Repoman Seeks", "Love Comics", "Anime Comics"];


    var containsText = function (search) {
        var gotText = false;
        for (var i in n) {
            var re = new RegExp(search, "ig");
            var s = re.test(n[i]);
            if (s) {                
                if($scope.itemsArr.indexOf(n[i]) == -1)
                {
                    $scope.itemsArr.push(n[i])
                }
                gotText = true;
            }
        }
        return gotText;
    };
    $scope.searchText = "";
    $scope.itemsSelectedArr = [];
    $scope.itemsArr = [];
    $scope.itemsDisplaPanel = false;
    $scope.searchMe = function (search) {
        $scope.itemsArr = [];
        $scope.itemsDisplaPanel = false;
        if (search.length > 2) {
            var foundText = containsText(search);
            $scope.itemsDisplaPanel = (foundText) ? true : false;
        }
    };

    $('#pac-input').focus(function() {
       $scope.itemsDisplaPanel = false;
    });

    $('body').click(function() {
       $scope.itemsDisplaPanel = false;
    });
    
    $scope.itemSelectedData = function (str) {
        $scope.itemsDisplaPanel = false;
        $scope.searchText = str;
         $('#results').html('');
        var a = n.indexOf(str);
        $scope.markerpopup(a);
        $scope.searchText;
        var model = $scope.searchText;
        //var poster = model($scope);
        if(currentTimeout) {
            $timeout.cancel(currentTimeout);
        }
          currentTimeout = $timeout(function(){
            $scope.searchStore('viewAll', $scope.itemsPerPage);
          }, DELAY_TIME_BEFORE_POSTING)
            //return (str) ? $scope.itemsSelectedArr.push(str) : false;
        };

    $scope.itemSelectedDelet = function (sel) {
        var idx = $scope.itemsSelectedArr.indexOf(sel);
        if (idx !== -1) $scope.itemsSelectedArr.splice(idx, 1);
        $scope.itemsDisplaPanel = false;
    };

/*search by store name ends*/
var arrId = [];
var arrMarker = [];
var geocoder = new google.maps.Geocoder();
var circle = null;
var gmarkers = [];
var map;
var arrMapresult = [];
var arrShotMarker = [];
var arrDpMarker = [];
var arrDpnShotMarker = [];
var arrSearchStore = [];
var markerClusterer = null;
$scope.storeIdArray = '';
$scope.initialize = function () {
    document.getElementById("pac-input").value = '';
    var markers = [];
    var centerLatLng = new google.maps.LatLng(41.9000,12.4833);
    map = new google.maps.Map(document.getElementById('map-canvas'), {
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        zoom:6,
        center: centerLatLng
    });

  // Create the search box and link it to the UI element.
    var input = (document.getElementById('pac-input'));
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    var searchBox = new google.maps.places.SearchBox(
    /** @type {HTMLInputElement} */(input));

    // [START region_getplaces]
    // Listen for the event fired when the user selects an item from the
    // pick list. Retrieve the matching places for that item.
    google.maps.event.addListener(searchBox, 'places_changed', function() {
    // markerClusterer.clearMarkers();
    $scope.storeListObject = [];
    $scope.viewAllActive = 'current';
    $scope.myStoreActive = '';
    $scope.searchText = '';
    markerClusterer.setMap(null);
    document.getElementById("shotfilter").checked = false;
    document.getElementById("dpfilter").checked = false;
    var address = document.getElementById('pac-input').value;
    var radius = parseInt(50, 10)*1000;
    geocoder.geocode( { 'address': address}, function(results, status) {

    if (status == google.maps.GeocoderStatus.OK) {
        var latitude = results[0].geometry.location.lat();

        var longitude = results[0].geometry.location.lng();
        var latlng = new google.maps.LatLng(latitude, longitude);
        
        var marker = new google.maps.Marker({
        map: map,
        position: results[0].geometry.location
    });
    marker.setMap(null);
    if (circle) circle.setMap(null);
    circle = new google.maps.Circle({center:marker.getPosition(),
                                     //radius: radius,
                                     //fillOpacity: 0.35,
                                    // fillColor: "#FF0000",
                                     strokeWeight: 0,
                                     map: map});

    var bounds = new google.maps.LatLngBounds();
    $('#results').html('');
    arrMapresult.length = 0;
    var arrId = [];
    for (var i=0; i<gmarkers.length;i++) {
    if (google.maps.geometry.spherical.computeDistanceBetween(gmarkers[i].getPosition(),marker.getPosition()) < radius) { 
        arrId.push(locations[i][8]);
        bounds.extend(gmarkers[i].getPosition())
        gmarkers[i].setMap(map);
        arrMapresult.push(gmarkers[i].getPosition());
        var infowindow = new google.maps.InfoWindow();
        var marker, i;
        var pin = {
            url: 'app/assets/images/silver-pin.png'
        };
        gmarkers[i].getPosition();
        google.maps.event.addListener(marker, 'click', (function(marker, i) {
          return function() {
        if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div><div class='category-dec'><strong>Category</strong> : Not Available</div><div class='lower-cont'><div class='vote-count'><ul><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li></ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
        } else {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div><div class='category-dec'><strong>Category</strong> : Not Available</div><div class='lower-cont'><div class='vote-count'><ul><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li></ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
        }
          infowindow.open(map, marker);
        }
        })(marker, i));
    } else {
          gmarkers[i].setMap(null);        
    }
    }    
    limit_starts = 0;
    limit_end = 12;
    $scope.storeIdArray = arrId;
    $scope.searchAddressShop(arrId);

    if(arrMapresult.length == 0) {
        bounds.extend(results[0].geometry.location);
        $('#results').html('<span>'+$scope.i18n.store.result_not_found+'</span>');
    } else {
        $('#results').html('<span>'+arrMapresult.length+' '+$scope.i18n.store.result_found+'</span>');
    }
    map.fitBounds(bounds);
    map.setZoom(9);
    } else {
      alert('Geocode was not successful for the following reason: ' + status);
    }
  });
});
  // [END region_getplaces]
  // Bias the SearchBox results towards places that are within the bounds of the
  // current map's viewport.
    google.maps.event.addListener(map, 'bounds_changed', function() {
        var bounds = map.getBounds();
        searchBox.setBounds(bounds);
    });

    if (markerClusterer) {
          markerClusterer.clearMarkers();
        }
    var infowindow = new google.maps.InfoWindow();

    var marker, i;
    var pin = {
        url: 'app/assets/images/green-pin.png'
    };

    var pin2 = {
        url: 'app/assets/images/silver-pin.png'
    };

    for (i = 0; i < locations.length; i++) {
        if(locations[i][5] == 0){
            marker = new google.maps.Marker({
            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
            map: map,
            icon :pin
            });
        } else {
            marker = new google.maps.Marker({
            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
            map: map,
            icon :pin2
            });
        };

      google.maps.event.addListener(marker, 'click', (function(marker, i) {
        return function() {
        if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div><div class='category-dec'><strong>Category</strong> : Not Available</div><div class='lower-cont'><div class='vote-count'><ul><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li></ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
        } else {
            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div><div class='category-dec'><strong>Category</strong> : Not Available</div><div class='lower-cont'><div class='vote-count'><ul><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li></ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
        }
          
          infowindow.open(map, marker);
        }
      })(marker, i));
       arrMarker.push(marker);
       gmarkers.push(marker);

    }
     markerClusterer = new MarkerClusterer(map, arrMarker, {
          //maxZoom: zoom,
         // gridSize: size
         // styles: styles[style]
    });
    google.maps.event.addListener(map, 'zoom_changed', function() {
    var zoomLevel = map.getZoom();    
    if(zoomLevel < 5) {
        document.getElementById("shotfilter").checked = false;
        document.getElementById("dpfilter").checked = false;
        $scope.addressFilter = '';
        $scope.searchText = '';
        if(circle != null) {
            circle.setMap(null);
        }
        $('#results').html('');
        markerClusterer.setMap(null);
        $scope.setDpShotMarker(null);
        $scope.setDpMarker(null);
        $scope.setAllMap(null);
        $scope.setAllShotMap(null);
        $scope.setAllMap(map);
        markerClusterer.setMap(map);
    }
  });
}

$scope.markerpopup = function(index) {
    document.getElementById("shotfilter").checked = false;
    document.getElementById("dpfilter").checked = false;
    markerClusterer.setMap(null);
    $scope.setAllShotMap(null);
    $scope.setAllMap(null);
    $scope.setAllMap(map);
    $scope.setDpMarker(null);
    $scope.setDpShotMarker(null);
    if(circle != null) {
        circle.setMap(null);
    }
    $scope.addressFilter = '';
    google.maps.event.trigger(arrMarker[index], 'click');
    map.setZoom(10);
}

$scope.setAllMap = function(map) {
    for (var i = 0; i < arrMarker.length; i++) {
        arrMarker[i].setMap(map);
        gmarkers[i].setMap(map);
    }
}

$scope.setRemoveAllMap = function(map) {
    for (var i = 0; i < arrSearchStore.length; i++) {
        arrSearchStore[i].setMap(map);
    }
}

$scope.setAllShotMap = function(map) {
    for (var i = 0; i < arrShotMarker.length; i++) {
        arrShotMarker[i].setMap(map);
    }
}

$scope.setDpMarker = function(map) {
    for (var i = 0; i < arrDpMarker.length; i++) {
        arrDpMarker[i].setMap(map);
    }
}
$scope.setDpShotMarker = function(map) {
    for (var i = 0; i < arrDpnShotMarker.length; i++) {
        arrDpnShotMarker[i].setMap(map);
    }
}

$scope.mapfilter = function() {
    $scope.storeListObject = [];
    var filterArray = [];
    var chk = document.getElementById("shotfilter").checked;
    var dpchk = document.getElementById("dpfilter").checked;
    if((chk == true) && (dpchk == false)){
        $scope.searchText = '';
        markerClusterer.setMap(null);
        $scope.setRemoveAllMap(null);
        $scope.setDpMarker(null);
        $scope.setAllMap(null);
        $scope.setDpShotMarker(null);
        var infowindow = new google.maps.InfoWindow();

    var marker, i;
    var pin = {
        url: 'app/assets/images/green-pin.png'
    };

    var pin2 = {
        url: 'app/assets/images/silver-pin.png'
    };

    for (i = 0; i < locations.length; i++) {
        if(locations[i][6] == 1){
            if(locations[i][5] == 1) {
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon :pin2
                });
            } else {
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon :pin
                });
            }
            
            filterArray.push(locations[i][8]);
            google.maps.event.addListener(marker, 'click', (function(marker, i) {
            return function() {
               // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
            if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div><div class='category-dec'><strong>Category</strong> : Not Available</div><div class='lower-cont'><div class='vote-count'><ul><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li></ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
            } else {
                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div><div class='category-dec'><strong>Category</strong> : Not Available</div><div class='lower-cont'><div class='vote-count'><ul><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li></ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
            }
                infowindow.open(map, marker);
            }
        })(marker, i));
        arrShotMarker.push(marker);
        
        }      
    }
    //$scope.searchshoponmaps(filterArray);
    limit_starts = 0;
    limit_end = 12;
    $scope.storeIdArray = filterArray;
    $scope.searchAddressShop(filterArray);
    //markerClusterer.clearMarkers();
   /* markerClusterer = new MarkerClusterer(map, arrShotMarker, {
          //maxZoom: zoom,
         // gridSize: size
         // styles: styles[style]
        });
*/
    } else if((dpchk == true) && (chk == false)){
        markerClusterer.setMap(null);
        $scope.setRemoveAllMap(null);
        $scope.setDpShotMarker(null);
        $scope.setAllMap(null);
        $scope.setAllShotMap(null);
        var infowindow = new google.maps.InfoWindow();

    var marker, i;
    var pin = {
        url: 'app/assets/images/green-pin.png'
    };

    var pin2 = {
        url: 'app/assets/images/silver-pin.png'
    };

    for (i = 0; i < locations.length; i++) {
        if(locations[i][7] == 1){
            if(locations[i][5] == 1) {
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon :pin2
                });
            } else {
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon :pin
                });
            }
            
            filterArray.push(locations[i][8]);
        google.maps.event.addListener(marker, 'click', (function(marker, i) {
            return function() {
               // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
            if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div><div class='category-dec'><strong>Category</strong> : Not Available</div><div class='lower-cont'><div class='vote-count'><ul><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li></ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
            } else {
                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div><div class='category-dec'><strong>Category</strong> : Not Available</div><div class='lower-cont'><div class='vote-count'><ul><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li></ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
            }
                infowindow.open(map, marker);
            }
        })(marker, i));
        arrDpMarker.push(marker);
        
        }  
        //markerClusterer.clearMarkers();
        /*
        markerClusterer = new MarkerClusterer(map, arrDpMarker, {
          //maxZoom: zoom,
         // gridSize: size
         // styles: styles[style]
        }); */   
    }
    //$scope.searchshoponmaps(filterArray);
    limit_starts = 0;
    limit_end = 12;
    $scope.storeIdArray = filterArray;
    $scope.searchAddressShop(filterArray);
    } else if((chk == true) && (dpchk == true)){
        $scope.searchText = '';
        markerClusterer.setMap(null);
        $scope.setDpShotMarker(null);
        $scope.setAllMap(null);
        $scope.setAllShotMap(null);
    var infowindow = new google.maps.InfoWindow();

    var marker, i;
    var pin = {
        url: 'app/assets/images/silver-pin.png'
    };

    var pin2 = {
        url: 'app/assets/images/silver-pin.png'
    };

    for (i = 0; i < locations.length; i++) {
        if((locations[i][7] == 1) || (locations[i][6] == 1)){

            if(locations[i][5] == 1) {
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon :pin
                });
            } else {
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon :pin2
                });
            }
                      
            filterArray.push(locations[i][8]);               

            google.maps.event.addListener(marker, 'click', (function(marker, i) {
            return function() {
                //infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
            if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div><div class='category-dec'><strong>Category</strong> : Not Available</div><div class='lower-cont'><div class='vote-count'><ul><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li></ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
            } else {
                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div><div class='category-dec'><strong>Category</strong> : Not Available</div><div class='lower-cont'><div class='vote-count'><ul><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li><li><img src='app/assets/images/star-blank.png'></li></ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
            }
                infowindow.open(map, marker);
            }
        })(marker, i));
        arrDpnShotMarker.push(marker);
        } 
        //markerClusterer.clearMarkers();
        /*
        markerClusterer = new MarkerClusterer(map, arrDpnShotMarker, {
          //maxZoom: zoom,
         // gridSize: size
         // styles: styles[style]
        }); */
    }
    //$scope.searchshoponmaps(filterArray);
    limit_starts = 0;
    limit_end = 12;
    $scope.storeIdArray = filterArray;
    $scope.searchAddressShop(filterArray);

    } else {
        if(circle != null) {
            circle.setMap(null);
        }
        $('#results').html('');
        $scope.addressFilter = '';
        $scope.searchText = '';
        markerClusterer.setMap(null);
        $scope.setDpMarker(null);
        $scope.setDpShotMarker(null);
        $scope.setRemoveAllMap(null);
        $scope.setAllShotMap(null);
        $scope.setAllMap(map);
        if($scope.searchText === '' && $scope.addressFilter === '') {
            markerClusterer.setMap(map);  
        }
                
        $scope.showStoreList($scope.tab, $scope.itemsPerPage);
        $scope.notFound = false;  
        $scope.viewAllActive = 'current';
        $scope.myStoreActive = '';
        //markerClusterer.clearMarkers();
        /*
        markerClusterer = new MarkerClusterer(map, arrMarker, {
          //maxZoom: zoom,
         // gridSize: size
         // styles: styles[style]
        });*/
    }
  
}
//Map functionality ends
});

//Create Store controller here
app.controller('CreateStoreController', function ($scope, $http, $location, $timeout, StoreService, $rootScope, $cookieStore) {
    $scope.createStoreLoader = false;
    $scope.createStoreError = false;
    $scope.createStoreErrorMgs = "";  //$scope.i18n.storealbum.album_ErrorMgs
    $scope.store = {};

    var opts1 = {};
    StoreService.getCountryList(opts1, function(data) {
        if(data.code == 101) {
            $scope.countryList = data.data;
        }
    });
    //function to create the Store
    $scope.createStore = function() {
        // $scope.store.business_country
        $scope.createStoreLoader = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;

        if($scope.store.name == undefined || $scope.store.name == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_name;
            alert( $scope.createStoreErrorMgs );
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            return false;
        }else if($scope.store.business_name == undefined || $scope.store.business_name == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storename;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.legal_status == undefined || $scope.store.legal_status == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storestatus;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.business_type == undefined || $scope.store.business_type == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storetype;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.phone == undefined || $scope.store.phone == '' || isNaN($scope.store.phone) == true ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storenumber;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.email == undefined || $scope.store.email == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeemail;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.business_country == undefined || $scope.store.business_country == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storecountry;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.business_region == undefined || $scope.store.business_region == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeregion;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.business_city == undefined || $scope.store.business_city == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storecity;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.business_address == undefined || $scope.store.business_address == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeaddress;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.zip == '' || $scope.store.zip == undefined) {
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storezip;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.province == '' || $scope.store.province == undefined) {
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeprovince;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        } else if($scope.store.province.length < 2 || $scope.store.province.length > 2 ){
            $scope.createStoreErrorMgs = $scope.i18n.validation.province_length;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.vat_number == undefined || $scope.store.vat_number == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storevat;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.iban == undefined || $scope.store.iban == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeiban;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.description == undefined || $scope.store.description == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storedesc;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        // }else if($scope.store.terms == '' || $scope.store.terms == undefined || $scope.store.terms == false) {
        //     $scope.createStoreErrorMgs = $scope.i18n.store.terms_condition_agree;
        //     $scope.createGroupError = true;
        //     $scope.createStoreLoader = false;
        //     return false;
        }else if((document.getElementById("latitude").value) == undefined || (document.getElementById("latitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storelat;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if((document.getElementById("longitude").value) == undefined || (document.getElementById("longitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storelog;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if((document.getElementById("mapplace").value) == undefined || (document.getElementById("mapplace").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storemap;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        } else if($scope.store.referral_id != '' && $scope.store.referral_id != undefined) {
            if(isNaN($scope.store.referral_id)){
                $scope.createStoreErrorMgs = $scope.i18n.store.valid_ref_id;
                $scope.createStoreError = true;
                $scope.createStoreLoader = false;
                $timeout(function(){
                    $scope.createStoreErrorMgs = '';
                }, 15000);
                return false;
            }
        }    
        opts.name = $scope.store.name;
        opts.business_name = $scope.store.business_name;
        opts.legal_status = $scope.store.legal_status;
        opts.business_type = $scope.store.business_type;
        opts.phone = $scope.store.phone;
        opts.email = $scope.store.email;
        opts.business_country = $scope.store.business_country;
        opts.business_region = $scope.store.business_region;
        opts.business_city = $scope.store.business_city;
        opts.business_address = $scope.store.business_address;
        opts.zip = $scope.store.zip;
        opts.province = $scope.store.province;
        opts.vat_number = $scope.store.vat_number;
        opts.iban = $scope.store.iban;
        opts.description = $scope.store.description;
        opts.terms = $scope.store.terms;
        opts.referral_id = $scope.store.referral_id;
        opts.map_place = document.getElementById("mapplace").value;
        opts.latitude = document.getElementById("latitude").value; 
        opts.longitude = document.getElementById("longitude").value;
        opts.broker_id = $scope.store.broker_id;
        $scope.createStoreErrorMgs = '';
        StoreService.createStore(opts, function(data) {
            if(data.code == 101) {
                $scope.createStoreLoader = true;
                $rootScope.tempStoreId = data.data.store_id;
                // Put store id in cookie
                $cookieStore.put('tempStoreId',data.data.store_id);
                // now it will redirect to terms and condition $location.path("/myshops");
                $location.path("/shop/payment/2");
            } else if (data.code == 154) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.citizen_not_exists;
                $scope.createStoreError = true;
            }else if (data.code == 100) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.missed_param;
                $scope.createStoreError = true;
            }else if (data.code == 116) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.enter_businessname;
                $scope.createStoreError = true;
            }else if (data.code == 138) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.vat_exists;
                $scope.createStoreError = true;
            } else if (data.code == 85) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.account_inactive;
                $scope.createStoreError = true;
            } else if (data.code == 165) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.vat_valid;
                $scope.createStoreError = true;
            } else if (data.code == 166) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.iban_valid;
                $scope.createStoreError = true;
            } else {
                $scope.createStoreLoader = false;
                $scope.createStoreError = true;
            }

            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
        });
    };

    $scope.resetStoreObject = function() {
        document.getElementById("mapplace").value = '';
        document.getElementById("latitude").value = ''; 
        document.getElementById("longitude").value = '';
        $scope.store = {};
    };

    $scope.loadMap = function() {
        $scope.map = {center: {latitude: 40.1451, longitude: -99.6680 }, zoom: 4 }
        $scope.options = {scrollwheel: false};
        $scope.marker = {
            id:0,
            coords: {
                latitude: 40.1451,
                longitude: -99.6680
            },
            options: { draggable: true },
            events: {
                dragend: function (marker, eventName, args) {
                    document.getElementById("latitude").value = marker.getPosition().lat();
                    document.getElementById("longitude").value = marker.getPosition().lng();
                    $scope.mapLocation(marker.getPosition().lat(), marker.getPosition().lng());
                }
            }
        }
    }

    $scope.mapLocation = function(mapLatitude, mapLogitude) {
        var geocoder;
        geocoder = new google.maps.Geocoder();
        var latlng = new google.maps.LatLng(parseFloat(mapLatitude), parseFloat(mapLogitude));
        geocoder.geocode({'latLng': latlng}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
                $('#mapplace').val(results[1].formatted_address);
            } else {
                alert($scope.i18n.storealbum.album_alert_msg);
            }
        } else {
            alert($scope.i18n.storealbum.album_alert_failed + status);
        }
        });
    };
    $scope.loadMap();

        $scope.initialize = function () {
        var mapOptions = {
            center: new google.maps.LatLng(-33.8688, 151.2195),
            zoom: 13
        };
        var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

        var input = (document.getElementById('pac-input'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        google.maps.event.addListener(autocomplete, 'place_changed', function() {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                return;
            }
            var countryPlace = autocomplete.getPlace();
            document.getElementById("latitude").value = countryPlace.geometry.location.k;
            document.getElementById("longitude").value = countryPlace.geometry.location.D;
            document.getElementById("mapplace").value = countryPlace.formatted_address;

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  
            }
            marker.setIcon(({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
        });

        function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);
    }
    $timeout(function(){
        $scope.initialize();
    }, 1000);
});

//Create Store controller here
app.controller('DeatilStoreController', function ($route, $scope, $http, $sce, $routeParams, $location, $timeout, StoreService, fileReader) {
    $scope.$route = $route;
    $scope.storeMainId = $routeParams.id;
    var latitudeMap = 0;
    var longitudeMap = 0;
    $scope.mobileAppUrl = '<li> Fits true to size. Take your normal size\r</li>';
    $scope.loadDetails = function() {
        $scope.storeLoading = true;
        $scope.updateStart = false;
        $scope.createStoreError = false;
        $scope.createStoreErrorMgs = ''; //$scope.i18n.storealbum.album_createStoreErrorMgs;
        $scope.showEditForm = false;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $routeParams.id;
        StoreService.getStoreDetail(opts, function(data) {
            if(data.code == 101) {
                //if(data.data.owner_id == APP.currentUser.id && data.data.payment_status == 0) {
                //$location.path("/shop/payment/1");
                // close for future use, condition changed for currently previously reg card was mandatory
                // if(data.data.owner_id == APP.currentUser.id && data.data.credit_card_status == 0) {
                //     $location.path("/shop/card/addcard/"+data.data.id+"/2");
                // } else if(data.data.payment_status == 0 && data.data.shop_status == 0 && data.data.owner_id == APP.currentUser.id){
                //     $location.path("/shop/pending/payment/"+data.data.id);
                // } else if(data.data.shop_status == 0 && data.data.owner_id == APP.currentUser.id){
                //     $location.path("/shop/pending/payment"+data.data.id);
                // } 
                if(data.data.owner_id == APP.currentUser.id && data.data.shop_status == false && data.data.is_active == 0){
                    $location.path("/shop/pending/payment"+data.data.id);
                } else {
                    $scope.storeDetail = data.data;
                    $scope.store = $scope.storeDetail;
                    $scope.aboutStore();
                    $scope.storeLoading = false;
                    latitudeMap = data.data.latitude;
                    longitudeMap = data.data.longitude;
                    angular.element('#pac-input').val(data.data.map_place);
                    if (($location.path().indexOf("/shop/edit") != -1) ||  ($location.path().indexOf("/shop/view") != -1)) {
                        $timeout(function() {
                          $scope.initialize();
                        },  1000); 
                       
                    } else {
                       $timeout(function() {
                          // $scope.initializeMaps();
                        },  1000); 
                    }
                    var storeData = {};
                    storeData.storeId = $scope.storeDetail.owner_id;
                    //call service to get mobile app
                    var mopts = {};
                    mopts.store_id = $scope.storeDetail.id;
                    StoreService.getMobileAppUrl(mopts, function(data) {
                        if(data.code == 101) {
                            $scope.store.mobileAppUrl =  data.data.url;
                        } else {
                            $scope.store.mobileAppUrl = '';
                        }
                    });
                    //mobile app get url end here

                    StoreService.setStoreOwnerId(storeData, function(data) {            
                    });
                }
            } else {
                $scope.storeLoading = false;
                $scope.createStoreError = true;
            }
        });
    }
    $scope.loadDetails();
    $scope.editStore = function() {
        $scope.createStoreLoader = false;
        $scope.store = $scope.storeDetail;
        $scope.showEditForm = true;
        $scope.timelineActive = false;
        $scope.timelineActive1 = false;
        var opts = {};
        StoreService.getCountryList(opts, function(data) {
            if(data.code == 101) {
                $scope.countryList = data.data;

            }
        });
    };

    $scope.aboutStore = function() {
        $scope.store = $scope.storeDetail;
        var opts = {};
        StoreService.getCountryList(opts, function(data) {
            if(data.code == 101) {
                $scope.countryList = data.data;

            }
        });
    };
    $scope.updateEditStore = function() {
        $scope.updateStart = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $scope.store.id;
        if($scope.store.name == undefined || $scope.store.name == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_storename;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.business_name == undefined || $scope.store.business_name == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessname;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.business_type == undefined || $scope.store.business_type == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesstype;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.legal_status == undefined || $scope.store.legal_status == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesstatus;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.phone == undefined || $scope.store.phone == '' || isNaN($scope.store.phone) == true){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessnumber;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.email == undefined || $scope.store.email == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessemail;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.business_country == undefined || $scope.store.business_country == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesscountry;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.business_region == undefined || $scope.store.business_region == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessregion;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.business_city == undefined || $scope.store.business_city == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesscity;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.business_address == undefined || $scope.store.business_address == ''){
            $scope.createStoreErrorMgs = $scope.i18n.validation.enter_businessaddress;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.zip == undefined || $scope.store.zip == '' || $scope.store.zip.length < 5 || $scope.store.zip.length > 5 ){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesszip;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.province == undefined || $scope.store.province == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessprovince;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.province.length < 2 || $scope.store.province.length > 2 ){
            $scope.createStoreErrorMgs = $scope.i18n.validation.province_length;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.vat_number == undefined || $scope.store.vat_number == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessvat;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.iban == undefined || $scope.store.iban == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessiban;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.description == undefined || $scope.store.description == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessdesc;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } //else if($scope.store.referral_info == '' || $scope.store.referral_info == undefined || $scope.store.referral_info.id == undefined || $scope.store.referral_info.id == ''){
            //$scope.createStoreErrorMgs = $scope.i18n.store.enter_broker_id;
         //   $scope.createGroupError = true;
         //   $scope.updateStart = false;
         //   $timeout(function(){
          //         $scope.createStoreErrorMgs = ''; 
           //     }, 4000);
         //   return false;
        //}
         else if((document.getElementById("latitude").value) == undefined || (document.getElementById("latitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesslat;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if((document.getElementById("longitude").value )== undefined || (document.getElementById("longitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesslog;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if((document.getElementById("mapplace").value) == undefined || (document.getElementById("mapplace").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessmap;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } 
        opts.name = $scope.store.name;
        opts.business_name = $scope.store.business_name;
        opts.parent_store_id = $scope.store.parent_store_id;
        opts.legal_status = $scope.store.legal_status;
        opts.business_type = $scope.store.business_type;
        opts.phone = $scope.store.phone;
        opts.email = $scope.store.email;
        opts.business_country = $scope.store.business_country;
        opts.business_region = $scope.store.business_region;
        opts.business_city = $scope.store.business_city;
        opts.business_address = $scope.store.business_address;
        opts.zip = $scope.store.zip;
        opts.province = $scope.store.province;
        opts.vat_number = $scope.store.vat_number;
        opts.iban = $scope.store.iban;
        opts.description = $scope.store.description;
        opts.referral_id = $scope.store.referral_info.id;
        opts.map_place = document.getElementById("mapplace").value;
        opts.latitude = document.getElementById("latitude").value; 
        opts.longitude = document.getElementById("longitude").value; 
        opts.allow_access = $scope.store.is_allowed;
        $scope.createStoreErrorMgs = ''; 
        StoreService.updateStore(opts, function(data) {
            if(data.code == 101) {
                $scope.updateStart = false;
                $scope.showEditForm = false;
                $scope.createStoreLoader = false;
                $scope.createGroupSuccess = true;
                $scope.createStoreSuccessMgs = $scope.i18n.albums.update_sucess;
                $timeout(function(){
                   $scope.createStoreSuccessMgs = ''; 
                }, 15000);
                $location.path("/shop/edit/"+$scope.store.id);
            } else if(data.code == 137){   
                $scope.createStoreErrorMgs = $scope.i18n.validation.broker_not_exists;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.createStoreError = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 100){
                $scope.createStoreErrorMgs = $scope.i18n.validation.missed_param;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 90){    
                $scope.createStoreErrorMgs = $scope.i18n.validation.account_inactive;
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 91){
                $scope.createStoreErrorMgs = $scope.i18n.validation.vat_exists;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 126){
                $scope.createStoreErrorMgs = $scope.i18n.validation.invalid_store_forum_type;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 500){
                $scope.createStoreErrorMgs = $scope.i18n.validation.permission_denied;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 89){
                $scope.createStoreErrorMgs = $scope.i18n.validation.error_occured;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 165){
                $scope.createStoreErrorMgs = $scope.i18n.validation.vat_valid;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 166){
                $scope.createStoreErrorMgs = $scope.i18n.validation.iban_valid;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else {
                $scope.createStoreErrorMgs = data.message;  
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.createStoreError = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            }
        });
    };

    $scope.initializeMaps = function () {
        var myLatLng = new google.maps.LatLng(latitudeMap, longitudeMap);
        var mapOptions = {
           center: new google.maps.LatLng(latitudeMap, longitudeMap),
           zoom: 6
        };
       var map = new google.maps.Map(document.getElementById('map-canvas-second'),mapOptions);
       var marker = new google.maps.Marker({
           position: new google.maps.LatLng(latitudeMap, longitudeMap),
           map: map,
           title: $scope.store.map_place
        });
    };


    $('.member-store').click(function() {
        $(this).addClass('active');
        $('.store-invitations li').removeClass('active');
    });

    $scope.cancelEditStore = function() {
        $scope.showEditForm = false;
        $location.path("/shop/about/"+$scope.store.id);
        //$scope.store = {};
    };

    $scope.loadEditMap = function() { 
        $scope.map = {center: {latitude: 40.1451, longitude: -99.6680 }, zoom: 4 }
        $scope.options = {scrollwheel: false};
        $scope.marker = {
            id:0,
            coords: {
                latitude: 40.1451,
                longitude: -99.6680
            },
            options: { draggable: true },
            events: {
                dragend: function (marker, eventName, args) {
                    document.getElementById("latitude").value = marker.getPosition().lat();
                    document.getElementById("longitude").value = marker.getPosition().lng();
                    $scope.mapLocation(marker.getPosition().lat(), marker.getPosition().lng());
                }
            }
        }
    }
    $scope.loadEditMap();
    /*$scope.mapLocation = function(mapLatitude, mapLogitude) {
        var geocoder;
        geocoder = new google.maps.Geocoder();
        var latlng = new google.maps.LatLng(parseFloat(mapLatitude), parseFloat(mapLogitude));
        geocoder.geocode({'latLng': latlng}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
                $('#mapplace').val(results[1].formatted_address);
            } else {
                alert('No results found');
            }
        } else {
            alert('Geocoder failed due to: ' + status);
        }
        });
    };*/
    $scope.initialize = function () {
        var mapOptions = {
            center: new google.maps.LatLng(latitudeMap, longitudeMap),
            zoom: 8
        };
        var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

        var input = (document.getElementById('pac-input'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        google.maps.event.addListener(autocomplete, 'place_changed', function() {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                return;
            }
            var countryPlace = autocomplete.getPlace();
            document.getElementById("latitude").value = countryPlace.geometry.location.k;
            document.getElementById("longitude").value = countryPlace.geometry.location.D;
            document.getElementById("mapplace").value = countryPlace.formatted_address;

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  
            }
            marker.setIcon(({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
        });

        function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);
    }
    $scope.initializeWait = function(){
        $timeout(function() {
           // $scope.initialize();
        }, 1000);
    }

    $scope.showInvite = false;
    $scope.timelineActive = false;
    $scope.toggleInvite = function(){
       
        $scope.timelineActive = !$scope.timelineActive;
        $scope.uploadProfileImage = false;
        $scope.showInvite = !$scope.showInvite;
        $scope.timelineActive1 = false;
        $scope.showEditForm=false;
        //alert(timelineActive);
        
    }

    $scope.uploadProfileImage = false;
    $scope.toggleUploadImage = function() {
        $scope.showInvite = false;
        $scope.uploadProfileImage = !$scope.uploadProfileImage;
    };

    $scope.uploadStoreProfile = false;
    $scope.uploadProfileerror = false;
    $scope.uploadStoreProfileImage = function() { 
        $scope.uploadStoreProfile = true;
        var imageType = $scope.myFile['name'].substring($scope.myFile['name'].lastIndexOf(".") + 1);
        // Checking Extension
        if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
            $scope.uploadProfileErrorMsg = $scope.i18n.storealbum.album_uploadProfileErrorMsg;
            $scope.uploadStoreProfile = false;
            $scope.uploadProfileerror = true;
        } else {
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.store_id = $scope.storeDetail.id;
            StoreService.uploadStoreProfileimage(opts, $scope.myFile, function(data) {
                if(data.code == 101) {
                    $scope.uploadProfileImage = false;
                    $scope.uploadStoreProfile = false;
                    $scope.storeDetail.cover_image_path = data.data.cover_image_path;
                    $scope.storeDetail.profile_image_original = data.data.original_image_path;
                    //$scope.loadDetails();
                } else {
                    $scope.uploadStoreProfile = false;
                }

            });
        }

    };

    $scope.myFile = '';
    $scope.imageSrc = '';
    $scope.invalidCoverImage = false;
    $scope.invalidCoverImageMgs = $scope.i18n.storealbum.album_invalidCoverImageMgs;
    $scope.getFile = function () {
        $scope.progress = 0;
        fileReader.readAsDataUrl($scope.file, $scope)
        .then(function(result) {
            $scope.myFile = $scope.file;
            $scope.imageSrc = result;
            var imageType = $scope.myFile['name'].substring($scope.myFile['name'].lastIndexOf(".") + 1);
            if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
                $scope.uploadProfileErrorMsg = $scope.i18n.storealbum.album_uploadProfileErrorMsg;
                $scope.uploadStoreProfile = false;
                $scope.uploadProfileerror = true;
            } else {
                $scope.uploadStoreProfile = false;
                $scope.uploadProfileerror = false;

                $scope.readImage($scope.myFile, function(data){
                if(data.length != 0 && data.width >= 400 && data.height >= 200){
                    $scope.uploadStoreProfileImage();
                }
                else { 
                    $("#invalidCoverImage").show();
                    $timeout(function(){
                        $("#invalidCoverImage").hide();
                    }, 4000);
                }
            });
            }
        });
    };

    //function to check upload image dimenstions
    $scope.readImage = function(file, callback) {
    var reader = new FileReader();
    var image  = new Image();
    reader.readAsDataURL(file);  
    reader.onload = function(_file) {
        var filedata = {};
        image.src    = _file.target.result;
        image.onload = function() {
            var w = this.width,
                h = this.height,
                t = file.type,                     
                n = file.name,
                s = ~~(file.size/1024) +'KB';
                filedata['width'] = w;
                filedata['height'] = h;
                callback(filedata);
        };
        image.onerror= function() {
            callback(filedata);
        };      
    };
}
    $scope.timelineActive1=false;
    $scope.showAllStoreMember = false;
    $scope.showAllMembers = function() {
        $scope.showAllStoreMember = !$scope.showAllStoreMember;
        $scope.timelineActive1 = !$scope.timelineActive1;
        $scope.timelineActive = false;
        $scope.showEditForm=false;
    }; 

}).filter('unsafe', function($sce) {
    return function(val) {
        return $sce.trustAsHtml(val);
    };
});

//Create Store controller here
app.controller('CreateChildStore', function ($scope, $http, $routeParams, $location, $timeout, StoreService) {
    $scope.createStoreLoader = false;
    $scope.createStoreError = false;
    $scope.createStoreErrorMgs = "";
    $scope.store = {};

    var opts1 = {};
    StoreService.getCountryList(opts1, function(data) {
        if(data.code == 101) {
            $scope.countryList = data.data;
        }
    });
    $scope.createChildStore = function() { 
        var storeParentId = $routeParams.id;
        if($scope.store.phone == undefined || $scope.store.phone == ''){
            $scope.createStoreError = true;
            $scope.createStoreErrorMgs = $scope.i18n.storealbum.album_ErrorMgsphone;
            return false;
        }else if($scope.store.zip == undefined || $scope.store.zip == ''){
            $scope.createStoreError = true;
            $scope.createStoreErrorMgs = $scope.i18n.storealbum.album_ErrorMgszip;
            return false;
        }
        $scope.createStoreLoader = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.business_name = $scope.store.business_name;
        opts.parent_store_id = storeParentId;
        opts.legal_status = $scope.store.legal_status;
        opts.business_type = $scope.store.business_type;
        opts.phone = $scope.store.phone;
        opts.email = $scope.store.email;
        opts.business_country = $scope.store.business_country;
        opts.business_region = $scope.store.business_region;
        opts.business_city = $scope.store.business_city;
        opts.business_address = $scope.store.business_address;
        opts.zip = $scope.store.zip;
        opts.province = $scope.store.province;
        opts.vat_number = $scope.store.vat_number;
        opts.iban = $scope.store.iban;
        opts.description = $scope.store.description;
        opts.map_place = document.getElementById("mapplace").value;
        opts.latitude = document.getElementById("latitude").value; 
        opts.longitude = document.getElementById("longitude").value;
        
        StoreService.createChildStore(opts, function(data) {
            if(data.code == 101) {
                $scope.createStoreLoader = true;
                $location.path("/shop/view/"+storeParentId);
            } else {    
                $scope.createStoreLoader = false;
                $scope.createStoreError = true;
                $scope.createStoreErrorMgs = $scope.i18n.storealbum.album_ErrorMgs;

            }
        });
    };

    $scope.resetStoreObject = function() { 
        document.getElementById("mapplace").value = '';
        document.getElementById("latitude").value = ''; 
        document.getElementById("longitude").value = '';
        $scope.store = {};
    };

    $scope.updateChildStore = function() {
        //alert("update for call")
    };

    $scope.cancelChildStore = function() {
        $scope.showEditForm = false;
        $scope.editStoreObject = {};
    };
    /*$scope.loadMap = function() {
        $scope.map = {center: {latitude: 40.1451, longitude: -99.6680 }, zoom: 4 }
        $scope.options = {scrollwheel: false};
        $scope.marker = {
            id:0,
            coords: {
                latitude: 40.1451,
                longitude: -99.6680
            },
            options: { draggable: true },
            events: {
                dragend: function (marker, eventName, args) {
                    document.getElementById("latitude").value = marker.getPosition().lat();
                    document.getElementById("longitude").value = marker.getPosition().lng();
                    $scope.mapLocation(marker.getPosition().lat(), marker.getPosition().lng());
                }
            }
        }
    };

    $scope.mapLocation = function(mapLatitude, mapLogitude) {
        var geocoder;
        geocoder = new google.maps.Geocoder();
        var latlng = new google.maps.LatLng(parseFloat(mapLatitude), parseFloat(mapLogitude));
        geocoder.geocode({'latLng': latlng}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
                $('#mapplace').val(results[1].formatted_address);
            } else {
                alert('No results found');
            }
        } else {
            alert('Geocoder failed due to: ' + status);
        }
        });
    };

    $scope.loadMap();*/

    $scope.initialize = function () {
        var mapOptions = {
            center: new google.maps.LatLng(-33.8688, 151.2195),
            zoom: 8
        };
        var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

        var input = (document.getElementById('pac-input'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        google.maps.event.addListener(autocomplete, 'place_changed', function() {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                return;
            }
            var countryPlace = autocomplete.getPlace();
            document.getElementById("latitude").value = countryPlace.geometry.location.k;
            document.getElementById("longitude").value = countryPlace.geometry.location.D;
            document.getElementById("mapplace").value = countryPlace.formatted_address;

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  
            }
            marker.setIcon(({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
        });

        function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);
    }
    
    if(JSON.stringify(APP.currentUser) != "{}"){
        $timeout(function(){
            $scope.initialize();
        }, 1000);
    }
});

app.controller('StoreLeftController', function ($scope, $http, StoreService) {
        $scope.showLeftPanel = false;
        $scope.storeNotFound = false;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_type = 2;
        opts.limit_start = '';
        opts.limit_size = '';
        StoreService.getAllStoreWithChild(opts, function(data) {  
            if(data.code == 101) {
                if(data.data.stores.length != 0 ) {
                    $scope.storeLeftList =  data.data.stores;
                    $scope.storeNotFound = false;
                }
                else {
                    $scope.storeNotFound = true;
                    $scope.storeLeftList =  data.data.stores; 
                }
            } else if(data.code == 100) { 
                $scope.storeNotFound = true;
            } else {
                $scope.storeNotFound = true;
            }
            $scope.showLeftPanel = true;
        });
});

//Controller to handle the store notiication
app.controller('StoreNotificationController', function ($scope, $http, StoreService) {
    $scope.getStoreNotification = function() {
        $scope.NotificationFound = false;
        $scope.NotificationNotFound = false;
        opts = {};
        opts.user_id = APP.currentUser.id;
        StoreService.getStoreNotifications(opts, function(data) {
            if(data.code == 101) {
                if(data.data.length != 0) {
                    $scope.storeNotification = data.data;
                    $scope.NotificationFound = true;
                } else {
                    $scope.NotificationNotFound = true;
                }
            } else {
                $scope.NotificationNotFound = true;
            }
        });
    };

    $scope.getStoreNotification();
    $scope.AcceptRequest = function(storeId, requestId, id) {
        $("#noti-"+id).fadeOut(1000);
        opts = {};
        opts.user_id = APP.currentUser.id;
        opts.request_id = requestId;
        opts.store_id = storeId;
        opts.response = 1;
        StoreService.acceptDenyToStoreNotification(opts, function(data) {
            if(data.code == 101) {
                $scope.getStoreNotification();
            } else {

            }
        });
    };

    $scope.rejectRequest = function(storeId, requestId, id) { 
        $("#noti-"+id).fadeOut(1000);
        opts = {};
        opts.user_id = APP.currentUser.id;
        opts.request_id = requestId;
        opts.store_id = storeId;
        opts.response = 2;
        StoreService.acceptDenyToStoreNotification(opts, function(data) {
            if(data.code == 101) {
                $scope.getStoreNotification();
            } else {

            }
        });
    }; 

});

/**
* Controller for autocomplete functionality
*
*/
app.controller('AutocompleteController', function ($scope, $http, $timeout, StoreService) {
    $scope.searchLoading = false;
    $scope.msgAfterInvite = '';
    $scope.searchedUsers = [];
    $scope.searchUsers = function() {
        $scope.msgAfterInvite = '';
        $scope.searchLoading = true;
        if($scope.selectedCountries !== '') {
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.friend_name = ($scope.selectedCountries === undefined ? '' : $scope.selectedCountries);
            opts.limit_start = APP.user_list_pagination.start;
            opts.limit_size = APP.user_list_pagination.end;
            StoreService.searchUser(opts, function(data) {
                $scope.searchLoading = false;
                $scope.searchedUsers = [];
                if(data.code == 101) {
                    var response = data.data.users;
                    for(var i = 0; i < data.data.users.length; i++) {
                        var user = {};
                        user.capital = response[i].user_id;
                        user.country = response[i].user_name;
                        $scope.searchedUsers.push(user);
                    }
                } else {
                    $scope.searchedUsers = [];
                }
            });
        }
    }

    $scope.InviteSendButton = false;
    $scope.onSelectPart = function() {
        $scope.InviteSendButton = true;
    };
    $scope.onSelectPartCancel = function() {
        $scope.InviteSendButton = false;
        $scope.selectedCountries = '';
    };

    $scope.SentInviteFromStore = function() {
        $scope.searchLoading = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $scope.storeDetail.id;
        opts.friend_id = $scope.selectedCountries.capital;
        StoreService.inviteUserOnStore(opts, function(data) {
            $scope.searchLoading = false;
            $scope.InviteSendButton = false;
            $scope.selectedCountries = '';
            if(data.code = 101) {
                $scope.msgAfterInvite = $scope.i18n.storealbum.album_msgAfterInvite;
                $timeout(function(){
                    $scope.msgAfterInvite = '';
                }, 2000);
            } else if(data.code == 118) {
                $scope.msgAfterInvite = data.message;
                $timeout(function(){
                    $scope.msgAfterInvite = '';
                }, 2000);
            } else {
                $scope.msgAfterInvite = data.message;
                $timeout(function(){
                    $scope.msgAfterInvite = '';
                }, 2000);
            }
        });
    };

});

app.controller('MyShopController', function ($scope, $http, $timeout, StoreService, $location) {
    $scope.storeListObject = [];
    $scope.storeMyList = [];
    $scope.storeAllList = [];
    $scope.totalSize = 0;
    $scope.myTotalSize = 0;
    $scope.storeLoading = true;
    $scope.viewAllActive = 'current';
    $scope.myStoreActive = '';
    $scope.tab = 'viewAll';
    $scope.notFound = false;
    $scope.allRes = 1;
    $scope.myRes = 1;
    $scope.listActive = 'active';
    $scope.gridActive = '';
    $scope.firstPage = APP.store_list_pagination.end;
    $scope.itemsPerPage = APP.store_list_pagination.end;
    $scope.currentPage = 1;
    $scope.range = [];
    $scope.affilateShop = false;

    $scope.changePageMore = function(pageNo) {
        $scope.currentPage = pageNo;

        if($scope.searchText === '') {
            $scope.showStoreList($scope.tab, $scope.itemsPerPage);
        } else {
            $scope.searchStore('viewAll',  $scope.itemsPerPage);
        }
    };

    $scope.prevPage = function() {
        if ($scope.currentPage > 1) {
            $scope.currentPage--;
        }
        $scope.loadMore();
    };

    $scope.prevPageDisabled = function() {
        return $scope.currentPage === 1 ? "disabled" : "";
    };

    $scope.nextPage = function() {
        if ($scope.currentPage < $scope.totalItems) {
            $scope.currentPage++;
        }
        $('ul.pagination li.active:gt(3)').hide();
       $scope.loadMore();
    };

    $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.totalItems ? "disabled" : "";
    };

    $scope.setPage = function(number) {
        $scope.itemsPerPage = number;
        $scope.currentPage = 1;
        
        if($scope.searchText === '') {
            $scope.showStoreList($scope.tab, $scope.itemsPerPage);
        } else {
                $scope.searchStore('viewAll',  $scope.itemsPerPage);
        }
    };

    $scope.changeView = function(layout) {
        if(layout == 'grid'){
            $scope.gridActive = 'active'; 
            $scope.listActive = ''; 
        } else if(layout == 'list'){
            $scope.listActive = 'active'; 
            $scope.gridActive = '';
        }
    };

    $scope.showStoreList = function(tab, itemsPerPage) {
        $scope.searchText = '';
        $scope.storeMyList = [];
        $scope.tab = tab;
        $scope.viewAllActive = 'current';
        $scope.myStoreActive = '';
        var opts = {};
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        opts.user_id = APP.currentUser.id;
        opts.store_type = 1; 
        opts.limit_start = limit_start;
        opts.limit_size = itemsPerPage; 
        if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
            $scope.storeLoading = true
            $scope.allRes = 0;
            StoreService.getStore(opts, function(data) {
                $scope.affilateShop = true;
                if(data.code == 101) {
                    $scope.allRes = 1;
                    $scope.totalSize = data.data.size;
                    $scope.storeListObject =  $scope.storeAllList = data.data.stores;
                    $scope.totalItems = Math.ceil(data.data.size/itemsPerPage); 
                    $scope.range = [];  
                    for (var i=1; i<=$scope.totalItems; i++) {
                        $scope.range.push(i);
                    }             
                    $scope.storeLoading = false;
                    $scope.notFound = false;
                } else if(data.code == 121) {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                    $scope.myRes = 1; 
                }
                else {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                    $scope.myRes = 1; 
                }
            });
        }
    };

    

    $scope.myStoreList = function(tab, itemsPerPage) {
        $scope.searchText = '';
        $scope.storeAllList = [];
        $scope.tab = tab; 
        $scope.viewAllActive = '';
        $scope.myStoreActive = 'current';
        var opts = {};
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        opts.user_id = APP.currentUser.id;
        opts.store_type = 2; 
        opts.limit_start = limit_start;
        opts.limit_size = itemsPerPage;
        if ((($scope.myTotalSize > limit_start) || $scope.myTotalSize == 0 ) && $scope.myRes == 1) {
            $scope.storeLoading = true;
            $scope.myRes = 0; 
            StoreService.getStore(opts, function(data) {
                $scope.affilateShop = true;
                $scope.range = []; 
                if(data.code == 101) {
                    $scope.myTotalSize = data.data.size;
                    $scope.myRes = 1; 
                    $scope.storeListObject = $scope.storeMyList = data.data.stores;
                    $scope.totalItems = Math.ceil(data.data.size/itemsPerPage);  
                    for (var i=1; i<=$scope.totalItems; i++) {
                        $scope.range.push(i);
                    }  
                    $scope.storeLoading = false;
                } else if(data.code == 121) {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                    $scope.myRes = 1; 
                } else {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                    $scope.myRes = 1; 
                    
                }
            });
        }
    };
    $scope.showStoreList($scope.tab, $scope.itemsPerPage);
    $scope.loadMore = function() {
        if($scope.searchText === '') {
            if($scope.tab == 'myStore') {
                $scope.storeAllList = [];
                $scope.myStoreList($scope.tab,  $scope.itemsPerPage);
            } 
            else {
                $scope.storeMyList = [];
                $scope.showStoreList($scope.tab, $scope.itemsPerPage);
            }
        } else {
                $scope.searchStore('viewAll',  $scope.itemsPerPage);
        }
    };

    $scope.deleteStore = function(id, parentId, index) { 
        $("#store" + id).hide();
        $("#storedelete" + id).show();
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = id;
        //opts.store_type = (parentId) ? 2 : 1; condition changed on 14 jan
        opts.store_type = 1; // store type 1 for parent store delete
     
       StoreService.deleteStore(opts, function(data) {
            if(data.code == 101) {
                $(".storecoverid" + id).hide();
                $scope.storeListObject.splice(index, 1);
            } else {
                $("#store" + id).show();
                $("#storedelete" + id).hide();
            }
        });
    };

    $scope.deleteStoreGrid = function(id, parentId) { 
        $("#store" + id).hide();
        $("#storedelete" + id).show();
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = id;
        //opts.store_type = (parentId) ? 2 : 1; condition changed on 14 jan
        opts.store_type = 1; // store type 1 for parent store delete
        StoreService.deleteStore(opts, function(data) {
            if(data.code == 101) {
                $(".storecoverid" + id).hide();
            } else {
                $("#store" + id).show();
                $("#storedelete" + id).hide();
            }
        });
    };

    $scope.searchText ='';
    var DELAY_TIME_BEFORE_POSTING = 300;
    //var element = $('#search');
    var currentTimeout = null;

    $('#shopserchbox').keypress(function() {
    
      var model = $scope.searchText;
      //var poster = model($scope);
      if(currentTimeout) {
        $timeout.cancel(currentTimeout);
      }
      currentTimeout = $timeout(function(){
        if(model.length >= 2) {
            $scope.searchStore('viewAll', $scope.itemsPerPage);
        }
      }, DELAY_TIME_BEFORE_POSTING)
    });

    $scope.searchRes = 0;
    $scope.searchTotalSize = 0;
    $scope.searchStore = function(tab, itemsPerPage) {
        $scope.searchRes = 0;
        $scope.storeLoading = true;
        $scope.viewAllActive = 'current';
        $scope.myStoreActive = '';
        var opts = {};
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        opts.user_id = APP.currentUser.id;
        $scope.tab = 'viewAll';
        if($scope.searchText.length >= 3 ){
            if(($scope.searchText === undefined || $scope.searchText === '') && $scope.searchRes == 1) {
                $scope.allRes = 1;
                $scope.storeMyList = [];
                $scope.storeAllList = [];
                $scope.storeLoading = false;
                $scope.showStoreList($scope.tab, itemsPerPage);
            }
            opts.business_name = ($scope.searchText === undefined ? '' : $scope.searchText); 
            opts.limit_start = limit_start;
            opts.limit_size = itemsPerPage;
            if($scope.searchTotalSize > limit_start || $scope.searchTotalSize == 0) {
                StoreService.searchStore(opts, function(data) {
                    $scope.searchRes = 1;
                    $scope.storeLoading = false;
                    if(data.code == 101) {
                        $scope.storeListObject =  data.data;
                        $scope.searchTotalSize = data.size;
                        $scope.totalItems = Math.ceil(data.size/itemsPerPage); 
                        $scope.range = []; 
                        for (var i=1; i<=$scope.totalItems; i++) {
                            $scope.range.push(i);
                        } 
                        $scope.storeLoading = false;
                        $scope.notFound = false;
                    } else if(data.code == 121) {
                        $scope.storeListObject =  [];
                        $scope.notFound = true;
                        $scope.storeLoading = false;
                    }
                    else {
                        $scope.storeListObject =  [];
                        $scope.notFound = true;
                        $scope.storeLoading = false;
                    }
                });
            }
        } else {
            $scope.storeLoading = false;
        }
    };

});

app.controller('DetailStoreCoverController', function ($route, $scope, $http, $sce, $routeParams, $location, $timeout, StoreService, fileReader,ProfileService) {
    $scope.$route = $route;
    $scope.storeMainId = $routeParams.id;
    var latitudeMap = 0;
    var longitudeMap = 0;
    $scope.mobileAppUrl = '<li> Fits true to size. Take your normal size\r</li>';

    //Broadcast from storealbum controller
    $scope.$on('updateProfileCover', function(event, imgData) { 
        $scope.storeDetail.cover_image_path = imgData.cover_image_path;
        $scope.storeDetail.profile_image_original = imgData.original_image_path;
     });

    $scope.loadDetails = function() {
        $scope.storeLoading = true;
        $scope.updateStart = false;
        $scope.createStoreError = false;
        $scope.createStoreErrorMgs = ''; //$scope.i18n.storealbum.album_createStoreErrorMgs;
        $scope.showEditForm = false;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $routeParams.id;
        StoreService.getStoreDetail(opts, function(data) {
            if(data.code == 101) {
                    $scope.storeDetail = data.data;
                    $scope.store = $scope.storeDetail;
                    $scope.aboutStore();
                    $scope.storeLoading = false;
                    latitudeMap = data.data.latitude;
                    longitudeMap = data.data.longitude;
                    if (($location.path().indexOf("/shop/edit") != -1) ||  ($location.path().indexOf("/shop/view") != -1) ) {
                        $timeout(function() {
                          // $scope.initialize();
                        },  1000); 
                       
                    } else {
                       $timeout(function() {
                          $scope.initializeMaps();
                        },  1000); 
                    }
                    $scope.getShopCategory();
                    $scope.getShopSubCategory();
                    var storeData = {};
                    storeData.storeId = $scope.storeDetail.owner_id;
                    //call service to get mobile app
                    var mopts = {};
                    mopts.store_id = $scope.storeDetail.id;
                    StoreService.getMobileAppUrl(mopts, function(data) {
                        if(data.code == 101) {
                            $scope.store.mobileAppUrl =  data.data.url;
                        } else {
                            $scope.store.mobileAppUrl = '';
                        }
                    });
                    //mobile app get url end here

                    StoreService.setStoreOwnerId(storeData, function(data) {            
                    });
            } else {
                $scope.storeLoading = false;
                $scope.createStoreError = true;
            }
        });
    }
    $scope.loadDetails();
    $scope.getShopCategory = function() {
        $scope.store.sale_catid = $scope.store.sale_catid;
      if($scope.store.sale_catid != '' && $scope.store.sale_catid != undefined){
        var catopts= {};
        catopts.lang_code = $scope.currentLanguage;
        catopts.cat_id = $scope.store.sale_catid;
        catopts.type = "show";
        catopts.session_id = APP.currentUser.id;
        ProfileService.getCategories(catopts, function(data) {
                        if(data.code == 101) {
                            $scope.store.categoryName =  data.data.category_name;
                        } else {
                            $scope.store.categoryName = '';
                        }
                    });

     } else {
        $scope.store.categoryName = '';
      }
    };
    $scope.getShopSubCategory = function() {
      $scope.store.sale_subcatid = $scope.store.sale_subcatid;  
      if($scope.store.sale_subcatid != '' && $scope.store.sale_subcatid != undefined){
        var subopts= {};
        subopts.lang_code = $scope.currentLanguage;
        subopts.cat_id = $scope.store.sale_subcatid;
        subopts.type = "show";
        subopts.session_id = APP.currentUser.id;
        ProfileService.getCategories(subopts, function(data) {
                        if(data.code == 101) {
                            $scope.store.categorySubName =  data.data.category_name;
                        } else {
                            $scope.store.categorySubName = '';
                        }
                    });
      } else {
        $scope.store.categorySubName = '';
      }
    };
    $scope.editStore = function() {
        $scope.createStoreLoader = false;
        $scope.store = $scope.storeDetail;
        $scope.showEditForm = true;
        $scope.timelineActive = false;
        $scope.timelineActive1 = false;
        var opts = {};
        StoreService.getCountryList(opts, function(data) {
            if(data.code == 101) {
                $scope.countryList = data.data;

            }
        });
    };

    $scope.aboutStore = function() {
        $scope.store = $scope.storeDetail;
        var opts = {};
        StoreService.getCountryList(opts, function(data) {
            if(data.code == 101) {
                $scope.countryList = data.data;

            }
        });
    };
    $scope.updateStore = function() {
        $scope.updateStart = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $scope.store.id;
        if($scope.store.name == undefined || $scope.store.name == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_storename;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.business_name == undefined || $scope.store.business_name == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessname;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.business_type == undefined || $scope.store.business_type == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesstype;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.legal_status == undefined || $scope.store.legal_status == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesstatus;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.phone == undefined || $scope.store.phone == '' || isNaN($scope.store.phone) == true){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessnumber;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.email == undefined || $scope.store.email == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessemail;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.business_country == undefined || $scope.store.business_country.id == undefined || $scope.store.business_country.id == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesscountry;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.business_region == undefined || $scope.store.business_region == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessregion;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.business_city == undefined || $scope.store.business_city == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesscity;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.business_address == undefined || $scope.store.business_address == ''){
            $scope.createStoreErrorMgs = $scope.i18n.validation.enter_businessaddress;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.zip == undefined || $scope.store.zip == '' || $scope.store.zip.length < 2 || $scope.store.zip.length > 2 ){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesszip;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.province == undefined || $scope.store.province == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessprovince;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.province.length < 2 || $scope.store.province.length > 2 ){
            $scope.createStoreErrorMgs = $scope.i18n.validation.province_length;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.vat_number == undefined || $scope.store.vat_number == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessvat;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.iban == undefined || $scope.store.iban == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessiban;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.description == undefined || $scope.store.description == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessdesc;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.referral_info == '' || $scope.store.referral_info == undefined || $scope.store.referral_info.id == undefined || $scope.store.referral_info.id == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_broker_id;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if((document.getElementById("latitude").value) == undefined || (document.getElementById("latitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesslat;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if((document.getElementById("longitude").value )== undefined || (document.getElementById("longitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesslog;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if((document.getElementById("mapplace").value) == undefined || (document.getElementById("mapplace").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessmap;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } 
        opts.name = $scope.store.name;
        opts.business_name = $scope.store.business_name;
        opts.parent_store_id = $scope.store.parent_store_id;
        opts.legal_status = $scope.store.legal_status;
        opts.business_type = $scope.store.business_type;
        opts.phone = $scope.store.phone;
        opts.email = $scope.store.email;
        opts.business_country = $scope.store.business_country;
        opts.business_region = $scope.store.business_region;
        opts.business_city = $scope.store.business_city;
        opts.business_address = $scope.store.business_address;
        opts.zip = $scope.store.zip;
        opts.province = $scope.store.province;
        opts.vat_number = $scope.store.vat_number;
        opts.iban = $scope.store.iban;
        opts.description = $scope.store.description;
        opts.referral_id = $scope.store.referral_info.id;
        opts.map_place = document.getElementById("mapplace").value;
        opts.latitude = document.getElementById("latitude").value; 
        opts.longitude = document.getElementById("longitude").value; 
        opts.allow_access = $scope.store.is_allowed; 
        StoreService.updateStore(opts, function(data) {
            if(data.code == 101) {
                $scope.updateStart = false;
                $scope.showEditForm = false;
                $scope.createStoreLoader = false;
                $location.path("/shop/edit/"+$scope.store.id);
            } else if(data.code == 137){   
                $scope.createStoreErrorMgs = $scope.i18n.validation.broker_not_exists;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.createStoreError = false;
            } else if(data.code == 100){
                $scope.createStoreErrorMgs = $scope.i18n.validation.missed_param;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
            } else if(data.code == 90){    
                $scope.createStoreErrorMgs = $scope.i18n.validation.account_inactive;
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
            } else if(data.code == 91){
                $scope.createStoreErrorMgs = $scope.i18n.validation.vat_exists;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
            } else if(data.code == 126){
                $scope.createStoreErrorMgs = $scope.i18n.validation.invalid_store_forum_type;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
            } else if(data.code == 500){
                $scope.createStoreErrorMgs = $scope.i18n.validation.permission_denied;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
            } else if(data.code == 89){
                $scope.createStoreErrorMgs = $scope.i18n.validation.error_occured;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
            } else {
                $scope.createStoreErrorMgs = data.message;    
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.createStoreError = false;
            }
        });
    };

    $scope.initializeMaps = function () {
        var myLatLng = new google.maps.LatLng(latitudeMap, longitudeMap);
        var mapOptions = {
           center: new google.maps.LatLng(latitudeMap, longitudeMap),
           zoom: 6
        };
       var map = new google.maps.Map(document.getElementById('map-canvas-second'),mapOptions);
       var marker = new google.maps.Marker({
           position: new google.maps.LatLng(latitudeMap, longitudeMap),
           map: map,
           title: $scope.store.map_place
        });
    };


    $('.member-store').click(function() {
        $(this).addClass('active');
        $('.store-invitations li').removeClass('active');
    });

    $scope.cancelEdit = function() {
        $scope.showEditForm = false;
        $scope.store = {};
    };

    $scope.loadEditMap = function() { 
        $scope.map = {center: {latitude: 40.1451, longitude: -99.6680 }, zoom: 4 }
        $scope.options = {scrollwheel: false};
        $scope.marker = {
            id:0,
            coords: {
                latitude: 40.1451,
                longitude: -99.6680
            },
            options: { draggable: true },
            events: {
                dragend: function (marker, eventName, args) {
                    document.getElementById("latitude").value = marker.getPosition().lat();
                    document.getElementById("longitude").value = marker.getPosition().lng();
                    $scope.mapLocation(marker.getPosition().lat(), marker.getPosition().lng());
                }
            }
        }
    }
    $scope.loadEditMap();
    /*$scope.mapLocation = function(mapLatitude, mapLogitude) {
        var geocoder;
        geocoder = new google.maps.Geocoder();
        var latlng = new google.maps.LatLng(parseFloat(mapLatitude), parseFloat(mapLogitude));
        geocoder.geocode({'latLng': latlng}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
                $('#mapplace').val(results[1].formatted_address);
            } else {
                alert('No results found');
            }
        } else {
            alert('Geocoder failed due to: ' + status);
        }
        });
    };*/
    /*$scope.initialize = function () {
        var mapOptions = {
            center: new google.maps.LatLng(latitudeMap, longitudeMap),
            zoom: 8
        };
        var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

        var input = (document.getElementById('pac-input'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        google.maps.event.addListener(autocomplete, 'place_changed', function() {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                return;
            }
            var countryPlace = autocomplete.getPlace();
            document.getElementById("latitude").value = countryPlace.geometry.location.k;
            document.getElementById("longitude").value = countryPlace.geometry.location.B;
            document.getElementById("mapplace").value = countryPlace.formatted_address;

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  
            }
            marker.setIcon(({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
        });

        function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);
    }
    $scope.initializeWait = function(){
        $timeout(function() {
            $scope.initialize();
        }, 1000);
    }*/

    $scope.showInvite = false;
    $scope.timelineActive = false;
    $scope.toggleInvite = function(){
       
        $scope.timelineActive = !$scope.timelineActive;
        $scope.uploadProfileImage = false;
        $scope.showInvite = !$scope.showInvite;
        $scope.timelineActive1 = false;
        $scope.showEditForm=false;
     //   alert(timelineActive);
        
    }

    $scope.uploadProfileImage = false;
    $scope.toggleUploadImage = function() {
        $scope.showInvite = false;
        $scope.uploadProfileImage = !$scope.uploadProfileImage;
    };

    $scope.uploadStoreProfile = false;
    $scope.uploadProfileerror = false;
    $scope.uploadStoreProfileImage = function() { 
        $scope.uploadStoreProfile = true;
        var imageType = $scope.myFile['name'].substring($scope.myFile['name'].lastIndexOf(".") + 1);
        // Checking Extension
        if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
            $scope.uploadProfileErrorMsg = $scope.i18n.storealbum.album_uploadProfileErrorMsg;
            $scope.uploadStoreProfile = false;
            $scope.uploadProfileerror = true;
        } else {
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.store_id = $scope.storeDetail.id;
            StoreService.uploadStoreProfileimage(opts, $scope.myFile, function(data) {
                if(data.code == 101) {
                    $scope.uploadProfileImage = false;
                    $scope.uploadStoreProfile = false;
                    $scope.storeDetail.cover_image_path = data.data.cover_image_path;
                    $scope.storeDetail.profile_image_original = data.data.original_image_path;
                    //$scope.loadDetails();
                } else {
                    $scope.uploadStoreProfile = false;
                }

            });
        }

    };

    $scope.myFile = '';
    $scope.imageSrc = '';
    $scope.invalidCoverImage = false;
    $scope.invalidCoverImageMgs = $scope.i18n.storealbum.album_invalidCoverImageMgs;
    $scope.getFile = function () {
        $scope.progress = 0;
        fileReader.readAsDataUrl($scope.file, $scope)
        .then(function(result) {
            $scope.myFile = $scope.file;
            $scope.imageSrc = result;
            var imageType = $scope.myFile['name'].substring($scope.myFile['name'].lastIndexOf(".") + 1);
            if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
                $scope.uploadProfileErrorMsg = $scope.i18n.storealbum.album_uploadProfileErrorMsg;
                $scope.uploadStoreProfile = false;
                $scope.uploadProfileerror = true;
            } else {
                $scope.uploadStoreProfile = false;
                $scope.uploadProfileerror = false;

                $scope.readImage($scope.myFile, function(data){
                if(data.length != 0 && data.width >= 400 && data.height >= 200){
                    $scope.uploadStoreProfileImage();
                }
                else { 
                    $("#invalidCoverImage").show();
                    $timeout(function(){
                        $("#invalidCoverImage").hide();
                    }, 4000);
                }
            });
            }
        });
    };

    //function to check upload image dimenstions
    $scope.readImage = function(file, callback) {
    var reader = new FileReader();
    var image  = new Image();
    reader.readAsDataURL(file);  
    reader.onload = function(_file) {
        var filedata = {};
        image.src    = _file.target.result;
        image.onload = function() {
            var w = this.width,
                h = this.height,
                t = file.type,                     
                n = file.name,
                s = ~~(file.size/1024) +'KB';
                filedata['width'] = w;
                filedata['height'] = h;
                callback(filedata);
        };
        image.onerror= function() {
            callback(filedata);
        };      
    };
}
    $scope.timelineActive1=false;
    $scope.showAllStoreMember = false;
    $scope.showAllMembers = function() {
        $scope.showAllStoreMember = !$scope.showAllStoreMember;
        $scope.timelineActive1 = !$scope.timelineActive1;
        $scope.timelineActive = false;
        $scope.showEditForm=false;
    }; 

}).filter('unsafe', function($sce) {
    return function(val) {
        return $sce.trustAsHtml(val);
    };
});

app.controller('HistoryStoreController', function ($scope, $http, $routeParams, $location, $timeout, StoreService) {
   // $scope.$route = $route;
    $scope.storeAllList = [];
    $scope.storeHistoryDetail = [];
    $scope.totalSize = 0;
    $scope.notFound = false;
    $scope.allRes = 1;
    $scope.noHistory = false;
    $scope.storeMainId = $routeParams.id;
    $scope.storeLoading = true;
    $scope.showHistory = function() {
        var opts = {};
        var limit_start = $scope.storeAllList.length;
        opts.limit_start = limit_start;
        opts.limit_size = APP.store_list_pagination.end;
        opts.user_id = APP.currentUser.id;
        opts.shop_id = $scope.storeMainId;
      if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
          $scope.storeLoading = true;
          $scope.allRes = 0;
         StoreService.getStoreHistory(opts, function(data) {
            if(data.code == 101) {
                $scope.allRes = 1;
                $scope.totalSize = data.data.total;
                $scope.storeLoading = false;
                $scope.storeHistoryDetail =  $scope.storeAllList = $scope.storeAllList.concat(data.data.transactions);
                $scope.notFound = false;
                $scope.noHistory = true;
            } else {
                $scope.storeHistoryDetail =  [];
                $scope.storeLoading = false;
                $scope.notFound = true;
            } 
        });
     }  
    };
    $scope.showHistory();
    $scope.loadMore = function() {     
        $scope.showHistory();
      };
});
app.controller('BrokerProfileController',['$scope', 'BrokerProfileService', '$location', function ($scope, BrokerProfileService, $location) {

    $scope.countries = APP.countries;
    //Registration Broker Multiprofile 
    $scope.brokerMultiprofile = function(){
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.phone = $scope.user.albumname; 
        opts.vat_number = $scope.user.albumdesc; 
        opts.fiscal_code = APP.currentUser.id;
        opts.iban = $scope.user.albumname; 
        opts.type = APP.profileType.brokerProfile; 
        BrokerProfileService.brokerMultiprofile(opts, function(data){
            if(data.code == 101) {
               
            } else {
                
            }
        });
    }
   
}]);

app.controller('businessAppController', ['$scope', 'StoreService', '$cookieStore', function ($scope, StoreService, $cookieStore) {  
    
    $scope.currentLanguage = $cookieStore.get("activeLanguage");
    $scope.businessApp     = [];
    
    $scope.myStoreList = function() {
        var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.store_type  = 2; 
            opts.limit_start = 0;
            opts.limit_size  = 50;
            opts.lang_code   = $scope.currentLanguage;
            opts.filter_type = 1;
       
            StoreService.getStore(opts, function(data) {
                if(data.code === 101) {
                    $scope.businessApp = data.data.stores;
                }
            });
        };
        $scope.myStoreList();
}]);
app.controller('ClubAlbumController', ['$scope', '$http', '$timeout', 'GroupService', 'AlbumService', '$routeParams', '$location','ProfileService' ,'$modal', '$log', 'focus', function($scope, $http, $timeout, GroupService, AlbumService, $routeParams, $location ,ProfileService,$modal, $log, focus) {
    $scope.createAlbumForm = false;
	$scope.clubAlbumLoading = true;
	$scope.clubAlbumFound = false;
	$scope.CreateAlbumStart = false;
	$scope.createSuccess = false;
	$scope.createError = false;
    $scope.clubphoto = true;
    $scope.aboutsection=false;
    $scope.listload = false;
    $scope.clubAlbumData = [];
    $scope.totalSize = 0;
    $scope.allRes = 1;
    $scope.clubAlbumSubmitted = false;
        
	$scope.groupId = $routeParams.clubId;
	$scope.groupType = $routeParams.clubType;
	//alert("club id"+$scope.groupId + " type="+$scope.groupType);
	$scope.listOfAlbums = function(type) { 
		var limit_start = $scope.clubAlbumData.length;
		var opts = {};
		opts.group_id = $scope.groupId;
		opts.user_id =  APP.currentUser.id;
        opts.session_id = APP.currentUser.id;
		opts.limit_start = limit_start;
		opts.limit_size = 12;
		if ((($scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
		//console.log('entered');
		$scope.listload = true;
        $scope.allRes = 0;
		GroupService.getClubAlbum(opts, function(data) {
			if(data.code == 101) {
				$scope.clubAlbumLoading = false;
				$scope.clubAlbumFound = true;
				$scope.totalSize = data.data[0].size;
                $scope.allRes = 1;
                $scope.clubAlbumData = $scope.clubAlbumData.concat(data.data[0].media);   
                $scope.listload = false;   
                $('.album-option').removeClass('album-blank');

			} else {
				$scope.clubAlbumLoading = false;
				$scope.clubAlbumFound = false;
				$scope.listload = false;   
				$('.album-option').removeClass('album-blank');

			}
		});
	}
	}

	//infinite scroll loadmore
	$scope.loadMore = function() {     
        $scope.listOfAlbums('listing');
    };

	$scope.listOfAlbums('listing');

	$scope.showAlbumForm = function() {
		$scope.errorMessage = '';
		$scope.createError = false;
		$scope.createAlbumForm = !$scope.createAlbumForm;
		$scope.CreateAlbum = {};
	}

	$scope.createClubAlbum = function() {
        $scope.clubAlbumSubmitted = true;
		var opts = {};
		opts.group_id = $routeParams.clubId;
        opts.session_id = APP.currentUser.id;
		if($scope.CreateAlbum.albumName === undefined || $scope.CreateAlbum.albumName === '') {
            focus('clubalbumname');
            return false;
		} else if($scope.CreateAlbum.description === undefined || $scope.CreateAlbum.description === '') {
            focus('clubalbumdesc');
            return false;
		} else {
            $scope.CreateAlbumStart = true;
    		opts.album_name = $scope.CreateAlbum.albumName;
    		opts.album_desc = $scope.CreateAlbum.description;
    		GroupService.createClubAlbum(opts, function(data) {
    			
    			if(data.code == 101) {
    				$scope.createSuccess = true;
                    $scope.CreateAlbumStart = false;
    				$scope.successMessage = $scope.i18n.albums.album_sucessful_created;
    				$timeout(function(){
    					$scope.createSuccess = false;
    					$scope.successMessage = '';
    					$scope.showAlbumForm();
    					$scope.clubAlbumData.length = 0;
    					$scope.listOfAlbums('listing');
    				}, 2000);
    			} else {
    				$scope.createError = true;
    				$scope.errorMessage = $scope.i18n.albums.creation_gone_wrong;
    				$scope.CreateAlbumStart = false;
    				$timeout(function(){
    					$scope.createError = false;
    					$scope.errorMessage ='';
    				}, 2000);
    			}
    		});
        }
	};

	$scope.editAlbumForm = false;
    $scope.updateUserAlbum = false;
    $scope.editAlbum = function(albumdata) {
        $scope.editAlbumData = {};
        $scope.editAlbumData.id = albumdata.id;
        $scope.editAlbumData.albumName = albumdata.album_name;
        $scope.editAlbumData.albumDescription = albumdata.album_description;
        $scope.editAlbumForm = !$scope.editAlbumForm;
    }

    $scope.closeEditForm = function() {
        $scope.editAlbumForm = !$scope.editAlbumForm;
        $scope.editAlbumData = {};
    }

    $scope.updateAlbum = function() {
        $scope.clubAlbumSubmitted = true;
        if($scope.editAlbumData.albumName === undefined || $scope.editAlbumData.albumName === '') {
            focus('editalbumname');
            return false;
        } else if ($scope.editAlbumData.albumDescription === undefined || $scope.editAlbumData.albumDescription === '') {
            focus('editalbumdesc');
            return false; 
        } else {
            $scope.updateUserAlbum = true;
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.album_id = $scope.editAlbumData.id;
            opts.album_name = $scope.editAlbumData.albumName; 
            opts.album_desc = $scope.editAlbumData.albumDescription;
            opts.type = 'club';
            AlbumService.updateAlbum(opts, function(data){
            	$scope.updateUserAlbum = false;
                $scope.clubAlbumSubmitted = false;
                if(data.code == 101) {
                	$scope.editAlbumForm = !$scope.editAlbumForm;
                    $scope.clubAlbumData = [];
                    $scope.listOfAlbums('listing');
                    $scope.user = null;   
                    $scope.albumResponse = $scope.i18n.albums.album_updated;
                    $timeout(function() {
                            $scope.albumResponse = '';
                    }, 5000);   
                                                
                } else {
                	$scope.editAlbumForm = !$scope.editAlbumForm;
                    $scope.albumErrorResponse = $scope.i18n.albums.gone_wrong;
                    $timeout(function() {
                            $scope.albumErrorResponse = '';
                    }, 5000);
                }
            });
        } 
    }

	$scope.deleteClubAlbum = function(albumId, id) {
		//$("#deleteStart-"+id).hide();
		//$("#deleteStartLoader-"+id).show();
		var opts = {};
		opts.group_id = $scope.groupId;
		opts.album_id = albumId;
        opts.session_id = APP.currentUser.id;
		GroupService.deleteClubAlbum(opts, function(data) {
			if(data.code == 101) {
				//$("#deleteStart-"+id).show();
				//$("#deleteStartLoader-"+id).hide();
				$scope.clubAlbumData.length = 0;
				$scope.listOfAlbums('listing');
			} else {

			}
		});
	};
	//// start code for club album /////
     //calling function to load postlist
        //$scope.showUserPostList();
        $scope.averageVoting = 0;
        $scope.vote_count = 0;
        $scope.waitRateResponse = false;
        $scope.ratePost = function(rating, id, index){
            var update = "";
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "club_album";
            opts.type_id = id;
            opts.rate = rating;
            $scope.waitRateResponse = true;
            if($scope.clubAlbumData[index].is_rated){
                update = "update";
            }else{
                update = "add";
            }
            waitRequest = ProfileService.rateThis(opts, update, function(data){
                if(data.code === 101 && data.message === "SUCCESS"){
                    $scope.clubAlbumData[index].avg_rate = data.data.avg_rate;
                    $scope.clubAlbumData[index].no_of_votes = data.data.no_of_votes;
                    $scope.clubAlbumData[index].is_rated = true;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    //$scope.userPostList[index].avg_rate = 0;
                    //$scope.userPostList[index].no_of_votes = 0;
                    $scope.clubAlbumData[index].is_rated = false;
                    $scope.clubAlbumData[index].current_user_rate = 0;
                }
                $scope.waitRateResponse = false;
            });
        };

        $scope.WaitDeleteResponse = false;
        $scope.removeRating = function(id, index){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "club_album";
            opts.type_id = id;
            if($scope.WaitDeleteResponse === false){
                $scope.WaitDeleteResponse = true;
                $scope.waitRateResponse = true;
            }else{
                return;
            }
            ProfileService.removeRating(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.clubAlbumData[index].current_user_rate = 0;
                    $scope.clubAlbumData[index].is_rated = false;
                    $scope.clubAlbumData[index].no_of_votes = data.data.no_of_votes;
                    $scope.clubAlbumData[index].avg_rate =  data.data.avg_rate;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    $scope.clubAlbumData[index].current_user_rate = 0;
                    $scope.clubAlbumData[index].is_rated = false;
                    //$scope.userPostList[postIndx].no_of_votes =0;
                    //$scope.userPostList[postIndx].avg_rate =  0;
                }
                $scope.WaitDeleteResponse = false;
                $scope.waitRateResponse = false;
            });
        };


        $scope.stars = [];

        $scope.averageRating = function(rating){
            return new Array(Math.ceil(rating));
        };

        $scope.blankStar = function(rating){
            if((5-Math.ceil(rating)) > 0){
                return new Array(5-Math.ceil(rating));
            }else{
                return 0;
            }
        };

        $scope.max = 5;
        $scope.isReadonly = false;

        $scope.rateThis = function(value, id, index){
        	$scope.ratePost(value, id, index);
        };

        $scope.hoveringOver = function(value) {
            $scope.overStar = value;
            $scope.percent = 100 * (value / $scope.max);
        };

        $scope.ratingStates = [
            {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
        ];

        $scope.showPeopleLoader = false;
        $scope.findPeople = function(id, type, count_Vote){
            if(count_Vote === 0 ){
                return false;
            }
            var opts = {};
            $scope.ratedUsers = {};
            $scope.showPeopleLoader = true;

            var modalInstance = $modal.open({
                        template: '<style>.modal-body.tag-frnd-modal ul li{padding:8px 130px 8px 0}.modal-content .modal-body ul.rmv-tag{position:absolute;right:0;top:10px}.modal-content .modal-body ul.rmv-tag li{padding:0;display:inline-block;vertical-align:middle;border:0}.modal-content .modal-body ul.rmv-tag li span.votes-avg{width:23px;height:21px;margin-left:2px;background:url(app/assets/images/rating-star.png) no-repeat;display:block}.modal-content .modal-body ul.rmv-tag li span.votes-blank{width:23px;height:21px;margin-left:2px;background:url(app/assets/images/rating-star.png) 0 -21px no-repeat;display:block}.modal.in .modal-dialog{margin:auto;top:0;bottom:0;left:0;right:0;position:absolute}.modal-body.tag-frnd-modal{height:360px;overflow-y:auto;overflow-x:hidden;padding:0 10px}.modal .modal-content{margin:auto;height:400px;top:0;bottom:0;left:0;right:0;position:absolute;overflow:visible}@media screen and (max-width:479px){.modal.in .modal-dialog{margin:auto 20px}.modal-body.tag-frnd-modal ul li{padding:8px 70px 8px 0}.modal-content .modal-body ul.rmv-tag li span.votes-avg{width:12px;height:10px;margin-left:1px;background:url(app/assets/images/rating-star.png) 0 0/12px no-repeat}.modal-content .modal-body ul.rmv-tag li span.votes-blank{width:12px;height:10px;margin-left:1px;background:url(app/assets/images/rating-star.png) 0 -11px/12px no-repeat}}</style><div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3><div class="modal-popup-close" ng-click="closeModal()"></div></div><div class="modal-body tag-frnd-modal"><ul ng-hide="showPeopleLoader"><li data-ng-repeat="friend in ratedUsers"><span class="tag-img"><img title="" style="width:30px;height:30px" alt="No image available" data-ng-src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a ng-href="#/viewfriend/{{friend.id}}">{{friend.first_name}} {{friend.last_name}}</a><span class="frnd-details"><a href>{{friend.about_me}}</a></span></span><ul class="rmv-tag"><li data-ng-repeat="avgRate in averageRating(friend.rate) track by $index"><span ng-class="friend.rate % 1 == 0 ?\'votes-avg\': ($last ? \'half-avg\':\'votes-avg\')" /></li><li ng-repeat="blank in blankStar(friend.rate) track by $index"><span class="votes-blank"/> </li></ul></li></ul> <div ng-show="showPeopleLoader"><img titile="" alt="" src="app/assets/images/proceed.gif"></div></div><div class="modal-footer"></div>',
                        controller: 'ModalController',
                        size: 'lg',
                        scope: $scope,
            });
            opts.type = type;
            opts.type_id = id;
            opts.session_id = APP.currentUser.id;
            ProfileService.findPeople(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.showPeopleLoader = false;
                    $scope.ratedUsers = data.data.users_rated;
                    if(data.data.users_rated.length == 0){
                        $scope.message = $scope.i18n.dashboard.no_vote;
                    }
                }else{
                    $scope.showPeopleLoader = false;
                }
            });
            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };
    ///  end code for club rating  /////

	$scope.redirectUrl = function(albumId, name) {
		$location.path("/album/club/view/"+$scope.groupId+"/"+albumId+"/"+$scope.groupType+"/"+name);
	};

}]);

/**
* Controller for Club Album all photos
*
*/
app.controller('ClubAlbumPhotoController',['$scope', '$http', '$timeout', 'GroupService', '$routeParams', 'FileUploader' ,'ProfileService' ,'$modal', '$log', function($scope, $http, $timeout, GroupService, $routeParams, FileUploader , ProfileService,$modal, $log) {
    $scope.createAlbumForm = false;
	$scope.clubAlbumLoading = true;
	$scope.imageUploadStart = false;
	$scope.uploadSuccess = false;
	$scope.uploadError = false;
	$scope.listload = false;
	$scope.deleteMediaStart = false;
	$scope.viewalbum = [];
    $scope.totalSizeImg = 0;
    $scope.allResImg = 1;
	$scope.groupId = $routeParams.clubId;
	$scope.albumId = $routeParams.albumId;
	$scope.clubType = $routeParams.clubType;
	$scope.albumName = $routeParams.name;

	$scope.viewClubAlbumPhotos = function(type) {
        
		 if(type == 'listing') {
            $scope.clubAlbumLoading = false;
        } else {
        	$scope.clubAlbumLoading = true;
        }

		var limit_start = $scope.viewalbum.length; 		
		var opts = {};
		opts.group_id = $scope.groupId;
		opts.user_id =  APP.currentUser.id;
		opts.album_id = $scope.albumId;
        opts.session_id = APP.currentUser.id;
		opts.limit_start = limit_start;
		opts.limit_size = 12;
		if ((( $scope.totalSizeImg > limit_start) || $scope.totalSizeImg == 0 ) && $scope.allResImg == 1) {
		$scope.listload = true;
        $scope.allResImg = 0;
		GroupService.viewClubAlbum(opts, function(data) {
			if(data.code == 101) {
                $scope.clubAlbumLoading = false;
				$scope.totalSizeImg = data.data[0].size;
                $scope.allResImg = 1;
                $scope.viewalbum = $scope.viewalbum.concat(data.data[0].media);
                $scope.albumDescription = data.data[0].album.description; 
                $scope.albumDetails = data.data[0].album;
                $scope.listload = false;
                $('.album-option').removeClass('album-blank');
			} else {
				$scope.listload = false;
				$('.album-option').removeClass('album-blank');
			}
		});
	}
	};

	$scope.loadMoreImage = function() {     
        $scope.viewClubAlbumPhotos('listing');
    };
	$scope.viewClubAlbumPhotos('listing');
	$scope.UploadMediaInAlbum = function() {
		if($scope.imagePrvSrc == undefined || $scope.imagePrvSrc.length == 0){
			$scope.uploadError = true;
			$scope.uploadErrorMsg = $scope.i18n.albums.select_first;
			$timeout(function(){
					$scope.uploadErrorMsg = "";
					$scope.uploadError = false;
			}, 4000);
			return false;
		}
		$scope.imageUploadStart = true;
		var opts = {};
		opts.group_id = $scope.groupId;
		opts.album_id = $scope.albumId;
        opts.session_id = APP.currentUser.id;
		opts.group_media = $scope.postFiles;
		opts.post_type = 1;
        var filescount = $scope.imagePrvSrc.length;
        opts.media_id = [];
        angular.forEach($scope.imagePrvSrc, function(file) {
              opts.media_id.push(file.media_id);
        });

		GroupService.uploadMediaInClubAlbumFinal(opts, function(data) {
			$scope.postFiles = [];
			$scope.imagePrvSrc = [];
			if(data.code == 101) {
				$scope.viewalbum.length = 0;
				$scope.imageUploadStart = false;
				$scope.uploadSuccess = true;
				$scope.imgUpload = false;
				$scope.uploadSuccessMsg = $scope.i18n.albums.upload_sucess;
				$("input[type='file']").val('');
				$timeout(function(){
					$scope.uploadSuccessMsg = "";
					$scope.viewClubAlbumPhotos('listing');
				}, 5000);
				$scope.postFiles = [];
                $scope.imagePrvSrc = [];
                uploader.queue = [];
			} else {
				$("input[type='file']").val('');
				$scope.imageUploadStart = false;
				$scope.imgUpload = false;
				$scope.uploadError = true;
				$scope.uploadErrorMsg = $scope.i18n.albums.upload_error;
				$timeout(function(){
					$scope.$scope.uploadErrorMsg = "";
					$scope.viewClubAlbumPhotos();
				}, 15000);
				$("input[type='file']").val('');
			}
		});
	};

    $scope.fileNotValid = false;
    $scope.fileNotValidMsg = '';
    $scope.tempAlbumId = '';
    $scope.albumImgLoader = [];
    $scope.imagePrvSrc = [];
    
    
    var uploader =  $scope.uploader = new FileUploader({
          url: APP.service.uploadMediaInClubAlbum+"?access_token="+APP.accessToken,
          headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'method': 'POST'
              /*'Accept': 'text/json'*/
          },
          data:{
              'user_id': APP.currentUser.id,
              'album_id':$scope.albumId, 
              'group_id':$scope.groupId, 
              'post_type':"0",
              'session_id':APP.currentUser.id
          },
          dataObjName:'reqObj',
          formDataName:'group_media[]'
        });
        // FILTERS
        uploader.filters.push({
            name: 'group_media[]',
            fn: function(item /*{File|FileLikeObject}*/, options) {
                var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
            }
        });

        uploader.onAfterAddingFile = function(fileItem) {
            $scope.postContentStart = true;
            var queueLen = uploader.queue.length;
            if(uploader.queue.length != 0){
                $scope.uploadBox = false;
                $scope.imgUpload = true;
            }
            $scope.albumImgLoader[queueLen] = true;
            uploader.uploadItem(fileItem);
        };

        uploader.onSuccessItem = function(fileItem, response, status, headers) {
            var index = uploader.getIndexOfItem(fileItem);
            if(response.code == 101){
                $scope.imagePrvSrc[index] = response.data;
                $scope.albumImgLoader[index] = false;
            }
        };

        uploader.onCompleteAll = function() {
            $scope.postContentStart = false;
        }

        uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
            $scope.fileNotValid = true;
            $scope.fileNotValidMsg = $scope.i18n.albums.upload_media_invalid;
            $timeout(function(){
                $scope.fileNotValidMsg = '';
            }, 4000);
        };
        
   
    //remove iamge from preview array
    $scope.removeImage = function(index) {
    	var tempImg = $scope.imagePrvSrc[index];
        $scope.imagePrvSrc.splice(index, 1);
        var item = $scope.uploader.queue[index];
        item.remove();
        var opts = {};
        opts.group_id = $scope.groupId;
        opts.album_id = $scope.albumId;
        opts.media_id = tempImg.media_id;
        opts.session_id = APP.currentUser.id;
        //calling the service to delete the selected post 
        GroupService.deleteClubAlbumMedia(opts, function(data){
            if(data.code == 101) {

            } else {
                $scope.imagePrvSrc[index] = tempImg;
                $timeout(function(){
                    $scope.albumErrMsg = data.message;
                }, 4000);
            }
        });
    };

	$scope.deleteClubAlbumMedia = function(mediaId, id) { 
		//$scope.deleteMediaStart = true;
		var opts = {};
		opts.group_id = $scope.groupId;
		opts.album_id = $scope.albumId;
		opts.media_id = mediaId;
        opts.session_id = APP.currentUser.id;
		GroupService.deleteClubAlbumMedia(opts, function(data) {
			if(data.code == 101) {
				//$scope.deleteMediaStart = false;
				$scope.viewalbum.splice(id, 1);
			} else {
				$scope.deleteMediaStart = false;
			}
		});
	};

	//Set as profile image
    $scope.setClubProfileImage = function(m_id, id){
        $("#featuredloaderlink-"+id).hide();
        $("#featuredloader-"+id).show();
        $scope.featuredloader = true;
        var opts = {};
        opts.group_id = $scope.groupId;
        opts.session_id = APP.currentUser.id;
        opts.media_id = m_id;
        GroupService.setClubProfileImage(opts, function(data){
            if(data.code == 101) {
            	$scope.uploadSuccess = true;
                $scope.uploadSuccessMsg = $scope.i18n.albums.update_sucess;
                $("#featuredloaderlink-"+id).show();
                $("#featuredloader-"+id).hide();
                $timeout(function() {
                        $scope.uploadSuccessMsg = '';
                }, 2000);
                var imageData = data.data;
                $scope.$broadcast('updateClubProfileCover', imageData);
            } else {
            	$scope.uploadError = true;
            	$scope.uploadSuccessMsg = $scope.i18n.albums.not_success_update;
                $("#featuredloaderlink-"+id).show();
                $("#featuredloader-"+id).hide();
                $timeout(function() {
                        $scope.uploadSuccessMsg = "";
                }, 2000);
            }
        });  
    }
    //// start code for club album /////
     //calling function to load postlist
        //$scope.showUserPostList();
        $scope.averageVoting = 0;
        $scope.vote_count = 0;
        $scope.waitRateResponse = false;
        $scope.ratePost = function(rating, id, index){
            var update = "";
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "club_album_photo";
            opts.type_id = id;
            opts.rate = rating;
            $scope.waitRateResponse = true;
            if($scope.viewalbum[index].is_rated){
                update = "update";
            }else{
                update = "add";
            }
            waitRequest = ProfileService.rateThis(opts, update, function(data){
                if(data.code === 101 && data.message === "SUCCESS"){
                    $scope.viewalbum[index].avg_rate = data.data.avg_rate;
                    $scope.viewalbum[index].no_of_votes = data.data.no_of_votes;
                    $scope.viewalbum[index].is_rated = true;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    //$scope.userPostList[index].avg_rate = 0;
                    //$scope.userPostList[index].no_of_votes = 0;
                    $scope.viewalbum[index].is_rated = false;
                    $scope.viewalbum[index].current_user_rate = 0;
                }
                $scope.waitRateResponse = false;
            });
        };

        $scope.WaitDeleteResponse = false;
        $scope.removeRating = function(id, index){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "club_album_photo";
            opts.type_id = id;
            if($scope.WaitDeleteResponse === false){
                $scope.WaitDeleteResponse = true;
                $scope.waitRateResponse = true;
            }else{
                return;
            }
            ProfileService.removeRating(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.viewalbum[index].current_user_rate = 0;
                    $scope.viewalbum[index].is_rated = false;
                    $scope.viewalbum[index].no_of_votes = data.data.no_of_votes;
                    $scope.viewalbum[index].avg_rate =  data.data.avg_rate;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    $scope.viewalbum[index].current_user_rate = 0;
                    $scope.viewalbum[index].is_rated = false;
                    //$scope.userPostList[postIndx].no_of_votes =0;
                    //$scope.userPostList[postIndx].avg_rate =  0;
                }
                $scope.WaitDeleteResponse = false;
                $scope.waitRateResponse = false;
            });
        };


        $scope.stars = [];

        $scope.averageRating = function(rating){
            return new Array(Math.ceil(rating));
        };

        $scope.blankStar = function(rating){
            if((5-Math.ceil(rating)) > 0){
                return new Array(5-Math.ceil(rating));
            }else{
                return 0;
            }
        };

        $scope.max = 5;
        $scope.isReadonly = false;

        $scope.rateThis = function(value, id, index){
        	$scope.ratePost(value, id, index);
        };

        $scope.hoveringOver = function(value) {
            $scope.overStar = value;
            $scope.percent = 100 * (value / $scope.max);
        };

        $scope.ratingStates = [
            {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
        ];

        $scope.showPeopleLoader = false;
        $scope.findPeople = function(id, type, count_Vote){
            if(count_Vote === 0 ){
                return false;
            }
            var opts = {};
            $scope.ratedUsers = {};
            $scope.showPeopleLoader = true;

            var modalInstance = $modal.open({
                        template: '<style>.modal-body.tag-frnd-modal ul li{padding:8px 130px 8px 0}.modal-content .modal-body ul.rmv-tag{position:absolute;right:0;top:10px}.modal-content .modal-body ul.rmv-tag li{padding:0;display:inline-block;vertical-align:middle;border:0}.modal-content .modal-body ul.rmv-tag li span.votes-avg{width:23px;height:21px;margin-left:2px;background:url(app/assets/images/rating-star.png) no-repeat;display:block}.modal-content .modal-body ul.rmv-tag li span.votes-blank{width:23px;height:21px;margin-left:2px;background:url(app/assets/images/rating-star.png) 0 -21px no-repeat;display:block}.modal.in .modal-dialog{margin:auto;top:0;bottom:0;left:0;right:0;position:absolute}.modal-body.tag-frnd-modal{height:360px;overflow-y:auto;overflow-x:hidden;padding:0 10px}.modal .modal-content{margin:auto;height:400px;top:0;bottom:0;left:0;right:0;position:absolute;overflow:visible}@media screen and (max-width:479px){.modal.in .modal-dialog{margin:auto 20px}.modal-body.tag-frnd-modal ul li{padding:8px 70px 8px 0}.modal-content .modal-body ul.rmv-tag li span.votes-avg{width:12px;height:10px;margin-left:1px;background:url(app/assets/images/rating-star.png) 0 0/12px no-repeat}.modal-content .modal-body ul.rmv-tag li span.votes-blank{width:12px;height:10px;margin-left:1px;background:url(app/assets/images/rating-star.png) 0 -11px/12px no-repeat}}</style><div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3><div class="modal-popup-close" ng-click="closeModal()"></div></div><div class="modal-body tag-frnd-modal"><ul ng-hide="showPeopleLoader"><li data-ng-repeat="friend in ratedUsers"><span class="tag-img"><img title="" style="width:30px;height:30px" alt="No image available" data-ng-src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a ng-href="#/viewfriend/{{friend.id}}">{{friend.first_name}} {{friend.last_name}}</a><span class="frnd-details"><a href>{{friend.about_me}}</a></span></span><ul class="rmv-tag"><li data-ng-repeat="avgRate in averageRating(friend.rate) track by $index"><span ng-class="friend.rate % 1 == 0 ?\'votes-avg\': ($last ? \'half-avg\':\'votes-avg\')" /></li><li ng-repeat="blank in blankStar(friend.rate) track by $index"><span class="votes-blank"/> </li></ul></li></ul> <div ng-show="showPeopleLoader"><img titile="" alt="" src="app/assets/images/proceed.gif"></div></div><div class="modal-footer"></div>',
                        controller: 'ModalController',
                        size: 'lg',
                        scope: $scope,
            });
            opts.type = type;
            opts.type_id = id;
            opts.session_id = APP.currentUser.id;
            ProfileService.findPeople(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.showPeopleLoader = false;
                    $scope.ratedUsers = data.data.users_rated;
                    if(data.data.users_rated.length == 0){
                        $scope.message = $scope.i18n.dashboard.no_vote;
                    }
                }else{
                    $scope.showPeopleLoader = false;
                }
            });
            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };
    ///  end code for club rating  /////


}]);

app.controller('PromotionController', ['$scope', '$http', '$rootScope' ,'$routeParams', '$location', '$timeout', 'CommerialService' ,'StoreService', function ($scope, $http,$rootScope, $routeParams, $location, $timeout, CommerialService ,StoreService) {
  
  $rootScope.tabActive = 'coupon';
  $scope.awards = false;
  $scope.shopping1 =false;
  $scope.shopping2 =false;
  $scope.commerce = false;
  $scope.report =false;
  $scope.coupon = true;
  $scope.tabShopping = false;
  $scope.routeId = $routeParams.id;

  $scope.ShowDetail = function(parameter){
    switch(parameter) {
      case 'coupon' : 
        $scope.coupon = true; 
        $scope.awards = false;
        $scope.shopping1 =false;
        $scope.shopping2 =false;
        $scope.commerce = false;
        $scope.report =false;
        $scope.tabShopping = false;
        $rootScope.tabActive = 'coupon'; break;
      case 'awards' : 
        $scope.awards = true;
        $scope.coupon = false; 
        $scope.shopping1 =false;
        $scope.shopping2 =false;
        $scope.commerce = false;
        $scope.report =false;
        $scope.tabShopping = false;
        $rootScope.tabActive = 'awards'; break;
      case 'card' :  
        $scope.shopping1 = true; 
        $scope.tabShopping = true;
        $scope.awards = false;
        $scope.coupon = false; 
        $scope.shopping2 =false;
        $scope.commerce = false;
        $scope.report =false;
        $rootScope.tabActive = 'card'; 
        $rootScope.tabinActive = 'shopping1'; 
        //$rootScope.tabActive = 'shopping1';
        break;
      case 'commerce' :
        $scope.commerce = true; 
        $scope.shopping1 = false; 
        $scope.awards = false;
        $scope.coupon = false; 
        $scope.shopping2 =false; 
        $scope.report =false;
        $scope.tabShopping = false;
        $rootScope.tabActive = 'commerce'; break;
      case 'report' : 
        $scope.report = true;
        $scope.commerce = false; 
        $scope.shopping1 = false; 
        $scope.awards = false;
        $scope.coupon = false; 
        $scope.shopping2 =false;  
        $scope.tabShopping = false;
        $rootScope.tabActive = 'report'; break;
      case 'shopping1' :  
        $scope.shopping1 = true;
        $scope.tabShopping = true; 
        $scope.report = false;
        $scope.commerce = false; 
        $scope.awards = false;
        $scope.coupon = false; 
        $scope.shopping2 =false;
        $rootScope.tabActive = 'card';
        $rootScope.tabinActive = 'shopping1'; break;
      case 'shopping2' :  
        $scope.shopping2 = true;
        $scope.tabShopping = true;
        $scope.report = false;
        $scope.commerce = false; 
        $scope.awards = false;
        $scope.coupon = false; 
        $scope.shopping1 =false; 
        $rootScope.tabActive = 'card'; 
        $rootScope.tabinActive = 'shopping2'; break;
      default : 
        $rootScope.tabActive = 'coupon';
        $scope.coupon = true;
    }
   };
    $scope.$on("update_parent", function(event, storeDetail){
        $scope.storeDetail = storeDetail;
        $scope.storeId = $scope.storeDetail.id;
        $scope.storeName = $scope.storeDetail.name;
        $scope.is_paypal_added = $scope.storeDetail.is_paypal_added;
        $scope.is_subscribed = $scope.storeDetail.is_subscribed;
       
    });
    $scope.success = false;
    $scope.subscribeError = false; 
    $scope.is_paypal_added = StoreService.getStoreData().is_paypal_added;
    $scope.is_subscribed = StoreService.getStoreData().is_subscribed;

    
    if($location.search().codTrans){
        $scope.codTrans = $location.search().codTrans;
        $scope.amount = $location.search().importo;
        $scope.uniform = $location.search().divisa;
        $scope.outcome = $location.search().esito;
        $scope.descrizione = $location.search().descrizione;
        $scope.pan = $location.search().pan;
        $scope.profileId = $rootScope.tempStoreId;

        if($scope.outcome == 'OK'){
            $scope.coupon = false;
            $scope.shopping1 = true; 
            $scope.tabShopping = true;
            $scope.is_subscribed = 1;
            // code for service
            $scope.tranId = $location.search().txn_id;
            var formData = {};
            formData.user_id = APP.currentUser.id;
            formData.txn_id = $scope.tranId;
            formData.status = "PENDING";
            CommerialService.returnPaymentCancel(formData, function(data) { 
            });    
            $rootScope.tabActive = 'card';
            $rootScope.tabinActive = 'shopping1';
            $scope.success = true;
            $timeout(function(){
               $scope.success = false;
               $location.search({});
            },10000);
        }else{
            $scope.coupon = false;
            $scope.is_subscribed = 2;
            $scope.shopping1 = true; 
            $scope.tabShopping = true;
            $rootScope.tabActive = 'card';
            $rootScope.tabinActive = 'shopping1';
            $scope.subscribeError = true; 
        }
    }

}]);
app.controller('DateController', ['$scope', function ($scope) {
  $scope.today = function() {
    $scope.dt = new Date();
  };
    //$scope.today();
  $scope.clear = function () {
    $scope.dt = null;
  };
    // Disable weekend selection
  $scope.disabled = function(date, mode) {
    return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
  };
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date();
  };
  $scope.toggleMin();
  $scope.open = function($event ,parameter) {
    $event.preventDefault();
    $event.stopPropagation();
    if(parameter == 1){
    $scope.opened1 = true;
    $scope.opened2 = false;
  }
  if(parameter == 2){
    $scope.opened2 = true;
    $scope.opened1 = false;
  }     
  };
  $scope.dateOptions = {
    formatYear: 'yy',
    startingDay: 1
  };
  $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate' ,'dd-MM-yyyy'];
  $scope.format = $scope.formats[4];
}]);

app.controller('CouponController', ['$scope', '$http', '$rootScope', '$routeParams', '$location', '$timeout', 'focus', 'CommerialService' , 'ProfileService', 'OfferService' , 'DateToMongoDate' , function ($scope, $http,$rootScope, $routeParams, $location, $timeout, focus, CommerialService, ProfileService, OfferService ,DateToMongoDate) {
    $scope.formSubmitted = false;
    var DELAY_TIME_BEFORE_POSTING = 300;
    $scope.startDate = $scope.i18n.coupon.start_date;
    $scope.endDate = $scope.i18n.coupon.end_date;
    //$scope.man = "i18n.coupon.man";
    $scope.sex= [{
            "dbvalue": "Male",
            "value": $scope.i18n.coupon.man
        }, {
            "dbvalue": "Female",
            "value": $scope.i18n.coupon.women
        }];

    $scope.checkedSex = [];
    $scope.toggleCheck = function (dbvalue) {
        if ($scope.checkedSex.indexOf(dbvalue) === -1) {
            $scope.checkedSex.push(dbvalue);
        } else {
            $scope.checkedSex.splice($scope.checkedSex.indexOf(dbvalue), 1);
        }
    };
    
    var currentTimeout = null;
    angular.element('#searchTagFriend').keypress(function(event) {
        var model = $scope.searchText;
        if(currentTimeout) {
        $timeout.cancel(currentTimeout);
        }
        currentTimeout = $timeout(function(){
            if(event.which != 13){ 
              $scope.tagFriendSuggestion();
            }
        }, DELAY_TIME_BEFORE_POSTING)
    });
    $scope.friends = [];
    $scope.cancelFriendSearch = false;
    $scope.showSearchLoader = false;
    $scope.showFrom = false;
    $scope.tagFriendSuggestion = function(){
        $scope.cancelFriendSearch = false;
        $scope.showFriendList = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.friend_name = $scope.friendName;
        opts.session_id = APP.currentUser.id;
        opts.limit_start = 0;
        opts.limit_size =  APP.friend_list_pagination.end;
        $scope.showSearchLoader = true;
        ProfileService.searchFriends(opts,function(data){
            $scope.showSearchLoader = false;
            if($scope.cancelFriendSearch === false){
              $scope.friends = data.data.users;
                if($scope.friends.length == 0){
                 
                }
            }
        })
    };
    // Store friend 
    $scope.storedFriend = [];
    $scope.dublicate = false;
    $scope.selectFriend = function(friendInfo){
        if(friendInfo === undefined){
            return;
        }else{
            $scope.dublicate = false;
            angular.forEach($scope.storedFriend,function(index){
                if(index.user_id === friendInfo.user_id){
                    $scope.dublicate = true;
                }
            });

            if($scope.dublicate === false){
                $scope.storedFriend.push(friendInfo);
                $scope.friends = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTaggIndex = -1;
                angular.element('#searchTagFriend').val("");
                $scope.showFriendList = false;
            }else{
                $scope.friends = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTaggIndex = -1;
                angular.element('#searchTagFriend').val("");
                $scope.showFriendList = false;
            }
        }
    };
    $scope.removeTagFriend = function(friendIndex){
        //var index = $scope.storedFriend.indexOf(friendIndex);
        $scope.storedFriend.splice(friendIndex,1);
    };
    // stop the service for loading more service
    $scope.lostFormFocus = function(){
        $timeout(function(){
            $scope.friends = [];
            $scope.cancelFriendSearch = true;
            $scope.friendTaggIndex = -1;
            angular.element('#searchTagFriend').val("");
            $scope.showFriendList = false;
        },300);
    };
    $scope.friendTaggIndex = -1;
    $scope.keyUpDownControl = function(event){
        if(event.keyCode===40){
            event.preventDefault();
            if($scope.friendTaggIndex+1 !== $scope.friends.length){
                $scope.friendTaggIndex++;
            }
        }else if(event.keyCode===38){
            event.preventDefault();
            if($scope.friendTaggIndex-1 !== -1){
                $scope.friendTaggIndex--;
            }
        }else if(event.keyCode===13){
                $scope.selectFriend($scope.friends[$scope.friendTaggIndex]);
        }
    };
    /// tagging in keywords //
    $('#categoryKeyword').keypress(function(event) {
    if(currentTimeout) {
        $timeout.cancel(currentTimeout);
    }
    currentTimeout = $timeout(function(){
        if(event.which != 13){ 
            $scope.searchKeyword();
        }
    }, DELAY_TIME_BEFORE_POSTING)
});

    $scope.keywords = [];
    $scope.searchKeyword = function(){
        var opts = {};
        //opts.category_id = $scope.store.storecategory.id.toString();
        opts.keyword = $scope.tagkeywords;
        opts.session_id = APP.currentUser.id;
        $scope.cancelKeywordRequest = false;
        $scope.showCatKeyLoading = true;
        ProfileService.searchCatagoryKeyword(opts,function(data){
            $scope.showCatKeyLoading = false;
            if(data.code === 101 && data.message === "SUCCESS"){
                if($scope.cancelKeywordRequest === false){
                    $scope.keywords =  data.data.keyword;
                }
            }
        });
    };
    $scope.keywordIndex = -1;
    $scope.keywordKeyDown=function(event){
        if(event.keyCode===40){
            event.preventDefault();
            if($scope.keywordIndex+1 !== $scope.keywords.length){
                $scope.keywordIndex++;
            }
        }
        else if(event.keyCode===38){
            event.preventDefault();
            if($scope.keywordIndex-1 !== -1){
                $scope.keywordIndex--;
            }
        }
        else if(event.keyCode===13){
           if($scope.keywords[$scope.keywordIndex] === undefined ){
                if($scope.tagkeywords.trim() !== ''){
                   var opts = {};
                        opts.user_id = APP.currentUser.id;
                        opts.keyword = $scope.tagkeywords;

                    ProfileService.addKeywords(opts,function(data){
                         if(data.code === 101 && data.message === 'SUCCESS'){
                            $scope.keywords =  data.data.keyword;
                            $scope.storeKeyword($scope.keywords);
                        }
                    });
               }
           }else{
               $scope.storeKeyword($scope.keywords[$scope.keywordIndex]);
           }
        }
    };
    // Clear keyword List
    $scope.cancelKeywordRequest = false;
    $scope.clearKeyList = function(){
        $scope.cancelKeywordRequest = true;
        $timeout(function(){
            $scope.keywords = [];
        },500);
    }

    // Store Keyword
    $scope.tagkeywords = "";
    $scope.keywordList = [];
    $scope.storeKeyword = function(index){
        $scope.keywords = [];
        $scope.keywordIndex = -1;
        $scope.seen = true;
        $scope.tagkeywords = "";
        if( typeof(index) === 'object'){
            /* if($scope.keywordList.indexOf(index.name) === -1){
                $scope.keywordList.push(index);
            }*/
            for (var i = 0; i<$scope.keywordList.length; i++){
                if($scope.keywordList[i].name == index.name)
                {
                   $scope.seen = false;
                }
            } 
            if($scope.seen == true)
            {   
                $scope.keywordList.push(index);
            }
        }else{
            if(index === '' || index === undefined ){
                return false;
            }else{
                if($scope.keywordList.indexOf(index) === -1){
                    $scope.keywordList.push(index);
                }
            }
        }
    };
    $scope.removeKeyword = function(index){
        var keyIndex = $scope.keywordList.indexOf(index);
        $scope.keywordList.splice(index,1);
    };

    $scope.coupon = {};
    $scope.errorMesg = false;
    $scope.showMesge = false;
    $scope.showLoader  = false;
    $scope.dateDiff = false;
    $scope.todayDiff = false;
    var today = new Date();
    var stoday = today.toISOString();
    $scope.todayDate = stoday;
    $scope.compareDate = function() {
        /*if(($scope.dt).toISOString() < ($scope.dtt).toISOString()) 
            $scope.dateDiff = false;*/
        if(($scope.dt).toISOString() > ($scope.dtt).toISOString()) 
            {$scope.dateDiff = true;}
        else { $scope.dateDiff = false;}  
        if(($scope.dtt).toISOString() < ($scope.todayDate)) 
            {$scope.todayDiff = true;}
        else { $scope.todayDiff = false;}    
    }
    $scope.compareDateStart = function(){
        if($scope.dtt){
           if(($scope.dt).toISOString() > ($scope.dtt).toISOString()) 
            {$scope.dateDiff = true;}
        else { $scope.dateDiff = false;}   
        }
    }

    $scope.createCoupon = function(){
        
        var newSDate = $scope.dt;
        var dd = newSDate.getDate();
        var mm = newSDate.getMonth()+1; 
        var yyyy = newSDate.getFullYear();
        if(dd<10){
            dd='0'+dd
        } 
        if(mm<10){
            mm='0'+mm
        } 
        var newSDate = yyyy+'-'+mm+'-'+dd;
        
        var newEDate = $scope.dtt;
        var dd = newEDate.getDate();
        var mm = newEDate.getMonth()+1; 
        var yyyy = newEDate.getFullYear();
        if(dd<10){
            dd='0'+dd
        } 
        if(mm<10){
            mm='0'+mm
        } 
        var newEDate = yyyy+'-'+mm+'-'+dd;

        //console.log(":get month" + newSDate);
       // console.log(":get month" + newEDate);
        $scope.formSubmitted = true;
        $scope.showErrorDp = false;
        var startdate = $scope.dt;
        var enddate = $scope.dtt;
        if($scope.coupon.couponValue == undefined || $scope.coupon.couponValue == ''){
            focus('radio1');
            return false;
        } else if($scope.coupon.couponQuantity == undefined || $scope.coupon.couponQuantity == ''){
            focus('radio7');
            return false;
        } else if($scope.dt == undefined || $scope.dt == ''){
            focus('dt');
            return false;
        } else if($scope.dtt === undefined || $scope.dtt === ''){
            focus('dtt');
            return false;
        } else if(($scope.dt).toISOString() > ($scope.dtt).toISOString())  {
            $scope.dateDiff = true;
            focus('dtt');
            $timeout(function() {
                $scope.dateDiff = false;
            }, 15000);
            return false;
        } else if(($scope.dtt).toISOString() < ($scope.todayDate)){
            $scope.todayDiff = true;
            focus('dtt');
            $timeout(function() {
                $scope.todayDiff = false;
            }, 5000);
            return false;
        }else if($scope.coupon.discountValue == undefined || $scope.coupon.discountValue == ''){
            focus('chk1');
            return false;
        } 

        $scope.showLoader  = true;
        $scope.hideButton  = true;
        /*$scope.displayStartDate = startdate.toISOString(); 
        $scope.displayEndDate = enddate.toISOString();*/
        var url   = APP.service.addUpdateApplaneData + "?access_token=" + APP.accessToken + "&session_id=" + APP.currentUser.id;
        var parameters = new Object();
        var main =[];
        $scope.offer_type = "551ce49e2aa8f00f20d9328f";
        var option = new Object();
        option["code"] = '';
        option["description"] = '';
        option["discount"] = parseInt($scope.coupon.discountValue);
       // option["end_date"] = $scope.displayEndDate;
       option["end_date"] = newEDate;
        var keywordtagged = [];
        if($scope.keywordList.length > 0){
         for (var i = 0; i < $scope.keywordList.length; i++) 
            {   
               keywordtagged.push(' ' + $scope.keywordList[i].name + ' ');
            }
        }
        var keyword = keywordtagged.join();
        option["keywords"] = keyword;
        option["name"] = '';
        var type = new Object;
        type["_id"] = $scope.offer_type;
        option["offer_type"] = type;
        var shopdetail = new Object;
        shopdetail["_id"] = $scope.storeId;
        shopdetail['name'] = $scope.storeName;
        option["shop_id"] = shopdetail;
        //option["start_date"] = $scope.displayStartDate;
        option["start_date"] = newSDate;
        var tagged = [];
        var taggfriend= {};
        if($scope.storedFriend.length > 0){
            for (var i = 0; i < $scope.storedFriend.length; i++) 
            {
                taggfriend._id = $scope.storedFriend[i].user_info.id.toString();
                taggfriend.name = $scope.storedFriend[i].user_info.first_name + $scope.storedFriend[i].user_info.last_name ;
                tagged.push(taggfriend) ;
            }
        }
        
        
        var friends = new Object;
        friends["$insert"] = tagged;
        option["tag_friends"] = friends;
        option["title"] ='';
        option["to_avail"] = parseInt($scope.coupon.couponQuantity);
        option["value"] = parseInt($scope.coupon.couponValue);
        option["sex"] = $scope.checkedSex;
        var array = [];
        array.push(option);
        parameters["$insert"] = array;
        parameters["$collection"] = "sixc_offers";
        main.push(parameters);
       

         OfferService.addUpdateApplaneData(main, function(data){
            if(data.status === "ok" && data.code === 200){
               $scope.showLoader  = false;
               $scope.hideButton  = false;
               $scope.showMesge = true;
               $scope.dt = '';
               $scope.dtt = '';
               $scope.coupon = {};
               $scope.storedFriend.length = 0;
               $scope.keywordList.length = 0;
               $scope.couponValue =' ';
               $scope.checkedSex.length =0;
                $timeout(function(){
                    $scope.showMesge = false;
                }, 15000);
               $scope.formSubmitted = false;
               $scope.getlistingData();
            } else if(data.status === "error" && data.message == 1){
                    $scope.showErrorDp = true;
                    $scope.showLoader = false;
                    $scope.ShowErrorResponse = data.response;
                    $scope.dt = '';
                    $scope.dtt = '';
                    $scope.coupon = {};
                    $scope.storedFriend.length = 0;
                    $scope.keywordList.length = 0;
                    $scope.couponValue =' ';
                    $scope.checkedSex.length =0;
                    $scope.hideButton  = false;
                    $scope.formSubmitted = false;
                    $timeout(function(){
                    $scope.showErrorDp = false;
                },110000);
            }
            else{
               $scope.showLoader  = false;
               $scope.hideButton  = false;
               $scope.errorMesg = true;
               $scope.formSubmitted = false;
               $timeout(function(){
                    $scope.errorMesg = false;
                }, 15000);
            }
        });

    };
    $scope.getlistingData = function(){
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth()+1; 
        var yyyy = today.getFullYear();
        if(dd<10){
            dd='0'+dd
        } 
        if(mm<10){
            mm='0'+mm
        } 
        var today = yyyy+'-'+mm+'-'+dd;
        //$scope.todaySDate = DateToMongoDate.dateToIso(today);
        $scope.todaySDate = today;
        $scope.offerlistingObject = [];
        $scope.noResult = false;
        $scope.showCouponListMsg = false;
        $scope.couponListingLoader = true;
        $scope.showList = false;
        $scope.offer_id    = "551ce49e2aa8f00f20d9328f";
        var option  = new Object();
            option["$collection"] = "sixc_offers";
            var getlisting = new Object();
            getlisting["value"] =1;
            getlisting["start_date"] =1;
            getlisting["end_date"] = 1;
            getlisting["discount"] =1;
            getlisting["to_avail"] =1;
            option["$fields"] = getlisting;
            var filters = new Object(); 
            var start = new Object();
            start["$lte"] = today;
            var end = new Object();
            end["$gte"] = "$$CurrentDate";
            filters["start_date"] = start;
            filters["end_date"] = end;
            filters["offer_type"] = $scope.offer_id;
            filters["shop_id"] = $scope.routeId;
            option["$filter"] = filters;
            var history = new Object();
            history["__history.__createdOn"] = -1;
            option["$sort"] = history;
            option["$limit"] = 15;
            option["$skip"] = 0;
           
            $scope.noResult = false;
            OfferService.getApplaneData(option, function(data){
                 if(data.status === "ok" && data.code === 200){
                    $scope.couponListingLoader = false;
                    $scope.showList = true;
                    $scope.offerlistingObject = data.response.result;
                    if($scope.offerlistingObject.length == 0){
                        $scope.showCouponListMsg = true;
                    }

                } else {
                    $scope.couponListingLoader = false;
                    
                 }

            });     
    };
    $scope.getlistingData();
}]);  

// dp controller
app.controller('AwardsController', ['$scope', '$http', '$rootScope', '$routeParams', '$location', '$timeout', 'focus', 'CommerialService' , 'ProfileService', 'OfferService' , function ($scope, $http,$rootScope, $routeParams, $location, $timeout, focus, CommerialService, ProfileService, OfferService) {
 
    $scope.errorMesg = false;
    $scope.showValue = false;
    var today = new Date();
    var stoday = today.toISOString();
    $scope.todayDate = stoday;
    $scope.deleteLoader = false;
    $scope.deleteDP = function(index , value){
        $scope.deleteLoader = true;
        var option  = new Object();
        var insert = new Object();
        insert["_id"] = value;
        var inner = new Object();
        inner["status"] = "Closed";
        inner["balance"] = 0;
        inner["end_date"] = $scope.todayDate;
        insert["$set"] = inner;
        var array = [];
        array.push(insert);
        option["$update"] = array;
        option["$collection"] = "sixc_shopdp";
        var param = new Object();
        param["status"] = 1;
        option["$fields"] = param;
        var main =[];
        main.push(option);
        OfferService.addUpdateApplaneData(main, function(data){
           if(data.status === "ok" && data.code === 200){
            $scope.deleteLoader = false;
            $scope.offerlistingObject.splice(index,1);
            $scope.getlistingData();
           }else {
            $scope.deleteLoader = false;
           }
        });

    }
   // $scope.deleteDP();
    $scope.showOther = function(){
      $scope.showValue = true;
      $scope.confirm = false;
    };
     $scope.showHideOther = function(){
      $scope.showValue = false;
      if($scope.confirm = true){
        $scope.confirm = false;
      }
    };
    /*$scope.sex = ['man', 'women'];
    $scope.checkedSex = [];
    $scope.toggleCheck = function (sex) {
        if ($scope.checkedSex.indexOf(sex) === -1) {
            $scope.checkedSex.push(sex);
            console.log($scope.checkedSex);
        } else {
            $scope.checkedSex.splice($scope.checkedSex.indexOf(sex), 1);
            console.log($scope.checkedSex);
        }
    };*/
    $scope.sex= [{
            "dbvalue": "Male",
            "value": $scope.i18n.coupon.man
        }, {
            "dbvalue": "Female",
            "value": $scope.i18n.coupon.women
        }];
    $scope.checkedSex = [];
    $scope.toggleCheck = function (dbvalue) {
        if ($scope.checkedSex.indexOf(dbvalue) === -1) {
            $scope.checkedSex.push(dbvalue);
        } else {
            $scope.checkedSex.splice($scope.checkedSex.indexOf(dbvalue), 1);
        }
    };
    $scope.discountSubmitted = false;
    $scope.showLoader = false;
    var DELAY_TIME_BEFORE_POSTING = 300;
    var currentTimeout = null;
    angular.element('#searchTagFriend').keypress(function(event) {
        var model = $scope.searchText;
        if(currentTimeout) {
        $timeout.cancel(currentTimeout);
        }
        currentTimeout = $timeout(function(){
            if(event.which != 13){ 
              $scope.tagFriendSuggestion();
            }
        }, DELAY_TIME_BEFORE_POSTING)
    });
    $scope.friends = [];
    $scope.cancelFriendSearch = false;
    $scope.showSearchLoader = false;
    $scope.showFrom = false;
    $scope.tagFriendSuggestion = function(){
        $scope.cancelFriendSearch = false;
        $scope.showFriendList = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.friend_name = $scope.friendName;
        opts.session_id = APP.currentUser.id;
        opts.limit_start = 0;
        opts.limit_size =  APP.friend_list_pagination.end;
        $scope.showSearchLoader = true;
        ProfileService.searchFriends(opts,function(data){
            $scope.showSearchLoader = false;
            if($scope.cancelFriendSearch === false){
                $scope.friends = data.data.users;
                if($scope.friends.length == 0){
                }
            }
        })
    };
    // Store friend 
    $scope.storedFriend = [];
    $scope.dublicate = false;
    $scope.selectFriend = function(friendInfo){
        if(friendInfo === undefined){
            return;
        }else{
            $scope.dublicate = false;
            angular.forEach($scope.storedFriend,function(index){
                if(index.user_id === friendInfo.user_id){
                    $scope.dublicate = true;
                }
            });

            if($scope.dublicate === false){
                $scope.storedFriend.push(friendInfo);
                $scope.friends = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTaggIndex = -1;
                angular.element('#searchTagFriend').val("");
                $scope.showFriendList = false;
            }else{
                $scope.friends = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTaggIndex = -1;
                angular.element('#searchTagFriend').val("");
                $scope.showFriendList = false;
            }
        }
    };
    $scope.removeTagFriend = function(friendIndex){
        //var index = $scope.storedFriend.indexOf(friendIndex);
        $scope.storedFriend.splice(friendIndex,1);
    };
    // stop the service for loading more service
    $scope.lostFormFocus = function(){
        $timeout(function(){
            $scope.friends = [];
            $scope.cancelFriendSearch = true;
            $scope.friendTaggIndex = -1;
            angular.element('#searchTagFriend').val("");
            $scope.showFriendList = false;
        },300);
    };
    $scope.friendTaggIndex = -1;
    $scope.keyUpDownControl = function(event){
        if(event.keyCode===40){
            event.preventDefault();
            if($scope.friendTaggIndex+1 !== $scope.friends.length){
                $scope.friendTaggIndex++;
            }
        }else if(event.keyCode===38){
            event.preventDefault();
            if($scope.friendTaggIndex-1 !== -1){
                $scope.friendTaggIndex--;
            }
        }else if(event.keyCode===13){
                $scope.selectFriend($scope.friends[$scope.friendTaggIndex]);
        }
    };
    /// tagging in keywords //
    $('#categoryKeyword').keypress(function(event) {
    if(currentTimeout) {
        $timeout.cancel(currentTimeout);
    }
    currentTimeout = $timeout(function(){
        if(event.which != 13){ 
            $scope.searchKeyword();
        }

    }, DELAY_TIME_BEFORE_POSTING)
});

    $scope.keywords = [];
    $scope.searchKeyword = function(){
        var opts = {};
        //opts.category_id = $scope.store.storecategory.id.toString();
        opts.keyword = $scope.tagkeywords;
        opts.session_id = APP.currentUser.id;
        $scope.cancelKeywordRequest = false;
        $scope.showCatKeyLoading = true;
        ProfileService.searchCatagoryKeyword(opts,function(data){
            $scope.showCatKeyLoading = false;
            if(data.code === 101 && data.message === "SUCCESS"){
                if($scope.cancelKeywordRequest === false){
                    $scope.keywords =  data.data.keyword;
                }
            }
        });
    };
    $scope.keywordIndex = -1;
    $scope.keywordKeyDown=function(event){
        if(event.keyCode===40){
            event.preventDefault();
            if($scope.keywordIndex+1 !== $scope.keywords.length){
                $scope.keywordIndex++;
            }
        }
        else if(event.keyCode===38){
            event.preventDefault();
            if($scope.keywordIndex-1 !== -1){
                $scope.keywordIndex--;
            }
        }
        else if(event.keyCode===13){
           if($scope.keywords[$scope.keywordIndex] === undefined ){
                if($scope.tagkeywords.trim() !== ''){
                   var opts = {};
                        opts.user_id = APP.currentUser.id;
                        opts.keyword = $scope.tagkeywords;

                    ProfileService.addKeywords(opts,function(data){
                         if(data.code === 101 && data.message === 'SUCCESS'){
                            $scope.keywords =  data.data.keyword;
                            $scope.storeKeyword($scope.keywords);
                        }
                    });
               }
           }else{
               $scope.storeKeyword($scope.keywords[$scope.keywordIndex]);
           }
        }
    };
    // Clear keyword List
    $scope.cancelKeywordRequest = false;
    $scope.clearKeyList = function(){
        $scope.cancelKeywordRequest = true;
        $timeout(function(){
            $scope.keywords = [];
        },500);
    }

    // Store Keyword
    $scope.tagkeywords = "";
    $scope.keywordList = [];
    $scope.storeKeyword = function(index){
        $scope.keywords = [];
        $scope.keywordIndex = -1;
        $scope.seen = true;
        $scope.tagkeywords = "";
        if( typeof(index) === 'object'){
            /* if($scope.keywordList.indexOf(index.name) === -1){
                $scope.keywordList.push(index);
            }*/
            for (var i = 0; i<$scope.keywordList.length; i++){
                if($scope.keywordList[i].name == index.name)
                {
                   $scope.seen = false;
                }
            } 
            if($scope.seen == true)
            {   
                $scope.keywordList.push(index);
            }
        }else{
            if(index === '' || index === undefined ){
                return false;
            }else{
                if($scope.keywordList.indexOf(index) === -1){
                    $scope.keywordList.push(index);
                }
            }
        }
    };
    $scope.removeKeyword = function(index){
        var keyIndex = $scope.keywordList.indexOf(index);
        $scope.keywordList.splice(index,1);
    }; 
    $scope.dp= {};
    $scope.confirm = false;
    var today = new Date();
    var stoday = today.toISOString();
    $scope.todayDate = stoday;
    $scope.showMesge = false;
    $scope.errorMesg = false;
    $scope.confirmAwards = function(){
        if($scope.dp.discountPosition === undefined || $scope.dp.discountPosition == ''){
            focus('radio1');
            return false;
        }
        $scope.confirm = true;
        $scope.valueDp = $scope.dp.discountPosition;
        $scope.conMsg = true;
        $timeout(function(){
            $scope.conMsg = false;
        },5000);
    };
    $scope.createDp = function(){
        $scope.discountSubmitted = true;
        if(!$scope.confirm){
           focus('radio1');
            return false;
        } else if($scope.dp.discountPosition == undefined || $scope.dp.discountPosition == ''){
            focus('radio1');
            return false;
        }
        $scope.showLoader = true;
        $scope.hideButton  = true;
        var url    = APP.service.getApplaneData + "?access_token=" + APP.accessToken + "&session_id=" + APP.currentUser.id;
        var param = new Object;
        var option = new Object();
        var keywordtagged = [];
        if($scope.keywordList.length > 0){
         for (var i = 0; i < $scope.keywordList.length; i++) 
            {   
               keywordtagged.push(' ' + $scope.keywordList[i].name + ' ');
            }
        }
        var keyword = keywordtagged.join();
        option["keywords"] = keyword;
        option["sex"] = $scope.checkedSex;
        var tagged = [];
        var taggfriend= {};
        if($scope.storedFriend.length > 0){
            for (var i = 0; i < $scope.storedFriend.length; i++) 
            {
                taggfriend._id = $scope.storedFriend[i].user_info.id.toString();
                taggfriend.name = $scope.storedFriend[i].user_info.first_name + $scope.storedFriend[i].user_info.last_name ;
                tagged.push(taggfriend) ;
            }
        }
        //taggfriend._id = '551d03d348619e4e34b7f060';
        //taggfriend.name = 'kapil';
        //tagged.push(taggfriend) ;
        var friends = new Object;
        friends["$insert"] = tagged;
        option["tag_friends"] = friends;
        var shopdetail = new Object;
        shopdetail["_id"] = $scope.routeId;
        option["shop_id"] = shopdetail;
        option["credit"] = $scope.dp.discountPosition;
        option["start_date"] = $scope.todayDate;
        var array = [];
        array.push(option);
        param["$insert"] = array;
        param["$collection"] = "sixc_shopdp";
        var main =[];
        main.push(param);
        $scope.showErrorDp = false;
        OfferService.addUpdateApplaneData(main, function(data){
            if(data.status === "ok" && data.code === 200){
                $scope.showLoader = false;
                $scope.showMesge = true;
                $scope.hideButton  = false;
                $scope.dp = {};
                $scope.storedFriend.length = 0;
                $scope.keywordList.length = 0;
                $scope.checkedSex.length =0;
                $scope.valueDp = '';
                $timeout(function() {
                    $scope.showMesge =  false;
                },15000);
                $scope.discountSubmitted = false;
                $scope.getlistingData();
            } else if(data.status === "error" && data.message == 1){
                    $scope.showErrorDp = true;
                    $scope.showLoader = false;
                    $scope.ShowErrorResponse = data.response;
                    $scope.dp = {};
                    $scope.storedFriend.length = 0;
                    $scope.keywordList.length = 0;
                    $scope.checkedSex.length =0;
                    $scope.valueDp ='';
                    $scope.hideButton  = false;
                    $scope.discountSubmitted = false;
                    $timeout(function(){
                    $scope.showErrorDp = false;
                },110000);
            }else{
                $scope.showLoader = false;
                $scope.errorMesg = true;
                $scope.hideButton  = false;
                $scope.discountSubmitted = false;
                $timeout(function(){
                    $scope.errorMesg = false;
                },15000);
            }
        });
    };
    $scope.getlistingData = function(){
        $scope.offerlistingObject = [];
        $scope.showCouponListMsg = false;
        $scope.couponListingLoader = true;
        var option  = new Object();
            option["$collection"] = "sixc_shopdp";
            var getlisting = new Object();
            getlisting["value"] =1;
            getlisting["start_date"] =1;
            getlisting["end_date"] = 1;
            getlisting["credit"] =1;
            getlisting["debit"] =1;
            getlisting["balance"] = 1;
            option["$fields"] = getlisting;
            var filters = new Object(); 
            var bal = new Object();
            bal["$gt"] = 0;
            filters["shop_id"] = $scope.routeId;
            filters["balance"] = bal;
            option["$filter"] = filters;
            var history = new Object();
            history["__history.__createdOn"] = -1;
            option["$sort"] = history;
            option["$limit"] = 5;
            option["$skip"] = 0;
            $scope.noResult = false;
            OfferService.getApplaneData(option, function(data){
                 if(data.status === "ok" && data.code === 200){
                    $scope.couponListingLoader = false;
                    $scope.offerlistingObject = data.response.result;
                    $scope.dpLength = 0;
                    if($scope.offerlistingObject.length == 0){
                        $scope.showCouponListMsg = true;
                    }
                 } else {
                    $scope.couponListingLoader = false;
                    
                 }

            });     
    };
    $scope.getlistingData();

}]);
app.controller('CreateCampaignController', ['$scope', '$http', '$rootScope', '$routeParams', '$location', '$timeout', 'focus', 'CommerialService' , 'ProfileService', 'OfferService' , 'fileReader', 'FileUploader', 'DateToMongoDate', function ($scope, $http,$rootScope, $routeParams, $location, $timeout, focus, CommerialService, ProfileService, OfferService , fileReader, FileUploader, DateToMongoDate) {
    $scope.formSubmitted = false;
    $scope.showSucessMesge = false;
    $scope.startDate = $scope.i18n.coupon.start_date;
    $scope.endDate = $scope.i18n.coupon.end_date;
   $scope.sex= [{
            "dbvalue": "Male",
            "value": $scope.i18n.coupon.man
        }, {
            "dbvalue": "Female",
            "value": $scope.i18n.coupon.women
        }];
    $scope.checkedSex = [];
    $scope.toggleCheck = function (dbvalue) {
        if ($scope.checkedSex.indexOf(dbvalue) === -1) {
            $scope.checkedSex.push(dbvalue);
            
        } else {
            $scope.checkedSex.splice($scope.checkedSex.indexOf(dbvalue), 1);
            
        }
    };

    var DELAY_TIME_BEFORE_POSTING = 300;
    var currentTimeout = null;
    angular.element('#searchTagFriend').keypress(function(event) {
        var model = $scope.searchText;
        if(currentTimeout) {
        $timeout.cancel(currentTimeout);
        }
        currentTimeout = $timeout(function(){
            if(event.which != 13){ 
              $scope.tagFriendSuggestion();
            }
        }, DELAY_TIME_BEFORE_POSTING)
    });
    $scope.friends = [];
    $scope.cancelFriendSearch = false;
    $scope.showSearchLoader = false;
    $scope.showFrom = false;
    $scope.tagFriendSuggestion = function(){
        $scope.cancelFriendSearch = false;
        $scope.showFriendList = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.friend_name = $scope.friendName;
        opts.session_id = APP.currentUser.id;
        opts.limit_start = 0;
        opts.limit_size =  APP.friend_list_pagination.end;
        $scope.showSearchLoader = true;
        ProfileService.searchFriends(opts,function(data){
            $scope.showSearchLoader = false;
            if($scope.cancelFriendSearch === false){
                $scope.friends = data.data.users;
                if($scope.friends.length == 0){
                  
                }
            }
        })
    };
    // Store friend 
    $scope.storedFriend = [];
    $scope.dublicate = false;
    $scope.selectFriend = function(friendInfo){
        if(friendInfo === undefined){
            return;
        }else{
            $scope.dublicate = false;
            angular.forEach($scope.storedFriend,function(index){
                if(index.user_id === friendInfo.user_id){
                    $scope.dublicate = true;
                }
            });

            if($scope.dublicate === false){
                $scope.storedFriend.push(friendInfo);
                $scope.friends = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTaggIndex = -1;
                angular.element('#searchTagFriend').val("");
                $scope.showFriendList = false;
            }else{
                $scope.friends = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTaggIndex = -1;
                angular.element('#searchTagFriend').val("");
                $scope.showFriendList = false;
            }
        }
    };
    $scope.removeTagFriend = function(friendIndex){
        //var index = $scope.storedFriend.indexOf(friendIndex);
        $scope.storedFriend.splice(friendIndex,1);
    };
    // stop the service for loading more service
    $scope.lostFormFocus = function(){
        $timeout(function(){
            $scope.friends = [];
            $scope.cancelFriendSearch = true;
            $scope.friendTaggIndex = -1;
            angular.element('#searchTagFriend').val("");
            $scope.showFriendList = false;
        },300);
    };
    $scope.friendTaggIndex = -1;
    $scope.keyUpDownControl = function(event){
        if(event.keyCode===40){
            event.preventDefault();
            if($scope.friendTaggIndex+1 !== $scope.friends.length){
                $scope.friendTaggIndex++;
            }
        }else if(event.keyCode===38){
            event.preventDefault();
            if($scope.friendTaggIndex-1 !== -1){
                $scope.friendTaggIndex--;
            }
        }else if(event.keyCode===13){
                $scope.selectFriend($scope.friends[$scope.friendTaggIndex]);
        }
    };
    /// tagging in keywords //
    $('#categoryKeyword').keypress(function(event) {
    if(currentTimeout) {
        $timeout.cancel(currentTimeout);
    }
    currentTimeout = $timeout(function(){
        if(event.which != 13){ 
            $scope.searchKeyword();
        }
    }, DELAY_TIME_BEFORE_POSTING)
});

    $scope.keywords = [];
    $scope.searchKeyword = function(){
        var opts = {};
        //opts.category_id = $scope.store.storecategory.id.toString();
        opts.keyword = $scope.tagkeywords;
        opts.session_id = APP.currentUser.id;
        $scope.cancelKeywordRequest = false;
        $scope.showCatKeyLoading = true;
        ProfileService.searchCatagoryKeyword(opts,function(data){
            $scope.showCatKeyLoading = false;
            if(data.code === 101 && data.message === "SUCCESS"){
                if($scope.cancelKeywordRequest === false){
                    $scope.keywords =  data.data.keyword;
                }
            }
        });
    };
    $scope.keywordIndex = -1;
    $scope.keywordKeyDown=function(event){
        if(event.keyCode===40){
            event.preventDefault();
            if($scope.keywordIndex+1 !== $scope.keywords.length){
                $scope.keywordIndex++;
            }
        }
        else if(event.keyCode===38){
            event.preventDefault();
            if($scope.keywordIndex-1 !== -1){
                $scope.keywordIndex--;
            }
        }
        else if(event.keyCode===13){
           if($scope.keywords[$scope.keywordIndex] === undefined ){
                if($scope.tagkeywords.trim() !== ''){
                   var opts = {};
                        opts.user_id = APP.currentUser.id;
                        opts.keyword = $scope.tagkeywords;

                    ProfileService.addKeywords(opts,function(data){
                         if(data.code === 101 && data.message === 'SUCCESS'){
                            $scope.keywords =  data.data.keyword;
                            $scope.storeKeyword($scope.keywords);
                        }
                    });
               }
           }else{
               $scope.storeKeyword($scope.keywords[$scope.keywordIndex]);
           }
        }
    };
    // Clear keyword List
    $scope.cancelKeywordRequest = false;
    $scope.clearKeyList = function(){
        $scope.cancelKeywordRequest = true;
        $timeout(function(){
            $scope.keywords = [];
        },500);
    }

    // Store Keyword
    $scope.tagkeywords = "";
    $scope.keywordList = [];
    $scope.storeKeyword = function(index){
        $scope.keywords = [];
        $scope.keywordIndex = -1;
        $scope.seen = true;
        $scope.tagkeywords = "";
        if( typeof(index) === 'object'){
            /* if($scope.keywordList.indexOf(index.name) === -1){
                $scope.keywordList.push(index);
            }*/
            for (var i = 0; i<$scope.keywordList.length; i++){
                if($scope.keywordList[i].name == index.name)
                {
                   $scope.seen = false;
                }
            } 
            if($scope.seen == true)
            {   
                $scope.keywordList.push(index);
            }
        }else{
            if(index === '' || index === undefined ){
                return false;
            }else{
                if($scope.keywordList.indexOf(index) === -1){
                    $scope.keywordList.push(index);
                }
            }
        }
    };
    $scope.removeKeyword = function(index){
        var keyIndex = $scope.keywordList.indexOf(index);
        $scope.keywordList.splice(index,1);
    }; 
    $scope.campaign = {};
    $scope.campaign.cardValue= 20; 
    $scope.dateDiff = false;
    $scope.errorMesg = false;
    $scope.showMesge = false;
    $scope.showLoader  = false;
    $scope.todayDiff = false;
    var today = new Date();
    var stoday = today.toISOString();
    $scope.todayDate = stoday;
    $scope.compareDate = function() {
        if(($scope.dt).toISOString() > ($scope.dtt).toISOString()) 
            {$scope.dateDiff = true;}
        else { $scope.dateDiff = false;}
        if(($scope.dtt).toISOString() < ($scope.todayDate)) 
            {$scope.todayDiff = true;}
        else { $scope.todayDiff = false;}  
    }

    $scope.compareDateStart = function(){
        if($scope.dtt){
           if(($scope.dt).toISOString() > ($scope.dtt).toISOString()) 
            {$scope.dateDiff = true;}
        else { $scope.dateDiff = false;}   
        }
    }
    $scope.createCampaign = function(){
        var newSDate = $scope.dt;
        var dd = newSDate.getDate();
        var mm = newSDate.getMonth()+1; 
        var yyyy = newSDate.getFullYear();
        if(dd<10){
            dd='0'+dd
        } 
        if(mm<10){
            mm='0'+mm
        } 
        var newSDate = yyyy+'-'+mm+'-'+dd;
        
        var newEDate = $scope.dtt;
        var dd = newEDate.getDate();
        var mm = newEDate.getMonth()+1; 
        var yyyy = newEDate.getFullYear();
        if(dd<10){
            dd='0'+dd
        } 
        if(mm<10){
            mm='0'+mm
        } 
        var newEDate = yyyy+'-'+mm+'-'+dd;
        $scope.fileNotValid = false;
        $scope.showErrorCard = false;
        $scope.formSubmitted = true;
        var startdate = $scope.dt;
        var enddate = $scope.dtt;
        if($scope.campaign.cardValue == undefined || $scope.campaign.cardValue == ''){
            focus('checkboxG1');
            return false;
        } else if($scope.campaign.discount == undefined || $scope.campaign.discount == ''){
            focus('radio1');
            return false;
        } else if($scope.campaign.quantity == undefined || $scope.campaign.quantity == ''){
            focus('radio4');
            return false;
        } else if($scope.dt == undefined || $scope.dt == ''){
            focus('dt');
            return false;
        } else if($scope.dtt == undefined || $scope.dtt == ''){
            focus('dtt');
            return false;
        } else if(($scope.dt).toISOString() > ($scope.dtt).toISOString()) {
            $scope.dateDiff = true;
            focus('dtt');
            $timeout(function() {
                $scope.dateDiff = false;
            }, 5000);
            return false;
        } else if(($scope.dtt).toISOString() < ($scope.todayDate)){
            $scope.todayDiff = true;
            focus('dtt');
            $timeout(function() {
                $scope.todayDiff = false;
            }, 5000);
            return false;
        }  else if(!$scope.campaign.descriptionCard || $scope.campaign.descriptionCard == ''){
            focus('description');
            return false;
        } else if(!$scope.imageToUpload  || $scope.imageToUpload.length == 0){
            focus('uploadpic');
            return false;
        }
       /* $scope.displayStartDate = startdate.toISOString(); 
        $scope.displayEndDate = enddate.toISOString();*/
        $scope.showLoader = true;
        $scope.hideButton  = true;
        
        var url    = APP.service.addUpdateApplaneData + "?access_token=" + APP.accessToken + "&session_id=" + APP.currentUser.id;
        var parameters = new Object();
        var main =[];
        $scope.offer_type = "551ce49e2aa8f00f20d93295";
        var option = new Object();
        option["code"] = '';
        option["description"] = $scope.campaign.descriptionCard;
        option["discount"] = parseInt($scope.campaign.discount);
        option["end_date"] = newEDate;
        var keywordtagged = [];
        if($scope.keywordList.length > 0){
         for (var i = 0; i < $scope.keywordList.length; i++) 
            {   
               keywordtagged.push(' ' + $scope.keywordList[i].name + ' ');
            }
        }
        var keyword = keywordtagged.join();
        option["keywords"] = keyword;
        option["name"] = '';
        var type = new Object;
        type["_id"] = $scope.offer_type;
        option["offer_type"] = type;
        var shopdetail = new Object;
        shopdetail["_id"] = $scope.storeId;
        shopdetail['name'] = $scope.storeName;
        option["shop_id"] = shopdetail;
        option["start_date"] = newSDate;
        var tagged = [];
        var taggfriend= {};
        if($scope.storedFriend.length > 0){
            for (var i = 0; i < $scope.storedFriend.length; i++) 
            {
                taggfriend._id = $scope.storedFriend[i].user_info.id.toString();
                taggfriend.name = $scope.storedFriend[i].user_info.first_name + $scope.storedFriend[i].user_info.last_name ;
                tagged.push(taggfriend) ;
            }
        }
        var friends = new Object;
        friends["$insert"] = tagged;
        option["tag_friends"] = friends;
        option["title"] ='';
        option["to_avail"] = parseInt($scope.campaign.quantity);
        option["value"] = parseInt($scope.campaign.cardValue);
        var media_link = [];
        angular.forEach($scope.imageToUpload, function(file) {
              media_link.push(file.media_link);
        });
        var imageurls = media_link.join();
        option["imageurl"] = imageurls;
        option["sex"] = $scope.checkedSex;
        var array = [];
        array.push(option);
        parameters["$insert"] = array;
        parameters["$collection"] = "sixc_offers";
        main.push(parameters);
       
         OfferService.addUpdateApplaneData(main, function(data){
            if(data.status === "ok" && data.code === 200){
                $scope.showLoader = false;
                $scope.showMesge = true;
                $scope.hideButton  = false;
                $scope.campaign = {};
                $scope.dt = '';
                $scope.dtt = '';
                $scope.storedFriend.length = 0;
                $scope.keywordList.length = 0;
                $scope.imageToUpload = [];
                uploader.queue = [];
                $scope.checkedSex.length = 0;
                $scope.campaign.cardValue= 20; 
                $timeout(function() {
                    $scope.showMesge =  false;
                },15000);
                $scope.formSubmitted = false;
                $scope.getlistingData();
            } else if(data.status === "error" && data.message == 1){
                    $scope.showErrorCard = true;
                    $scope.showLoader = false;
                    $scope.ShowErrorResponse = data.response;
                    $scope.campaign = {};
                    $scope.dt = '';
                    $scope.dtt = '';
                    $scope.storedFriend.length = 0;
                    $scope.keywordList.length = 0;
                    $scope.imageToUpload = [];
                    uploader.queue = [];
                    $scope.checkedSex.length = 0;
                    $scope.campaign.cardValue= 20; 
                    $scope.hideButton  = false;
                    $scope.formSubmitted = false;
                    $timeout(function(){
                      $scope.showErrorCard = false;
                    },30000);
            }else{
               $scope.showLoader = false;
                $scope.errorMesg = true;
                $scope.hideButton  = false;
                $scope.formSubmitted = false;
                $timeout(function(){
                    $scope.errorMesg = false;
                },15000);
            }
        });
    };
     //uploader.queue = [];
    $scope.fileNotValid = false;
    $scope.fileNotValidMsg = '';
    $scope.tempAlbumId = '';
    $scope.albumImgLoader = [];
   //uploader.queue = []; 
   $scope.imagePrvSrc = [];
    $scope.imageToUpload = [];
     var uploader =  $scope.uploader = new FileUploader({
          url: APP.service.uploadstoreofferimages+"?access_token="+APP.accessToken,
          headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'method': 'POST'
              /*'Accept': 'text/json'*/
          },
          data:{
              'shop_id': $scope.routeId ,
              'session_id' : APP.currentUser.id
          },
          dataObjName:'reqObj',
          formDataName:'shop_offer_media[]'
        });
    // FILTERS
        uploader.filters.push({
            name: 'user_media[]',
            fn: function(item /*{File|FileLikeObject}*/, options) {
                var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
            }
        }); 
        uploader.onAfterAddingFile = function(fileItem) {
            $scope.postContentStart = true;
            var queueLen = uploader.queue.length;
            if(uploader.queue.length != 0){
                $scope.uploadBox = false;
                $scope.imgUpload = true;
            }
            $scope.albumImgLoader[queueLen] = true;
            uploader.uploadItem(fileItem);
        };

        uploader.onSuccessItem = function(fileItem, response, status, headers) {
            var index = uploader.getIndexOfItem(fileItem);
            if(response.code == 101){
                $scope.imageToUpload[index] = response.data;
                $scope.imagePrvSrc[index] = response.data;
                $scope.albumImgLoader[index] = false;
            }
        };
         uploader.onCompleteAll = function() {
            $scope.postContentStart = false;
        }

        uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
            $scope.fileNotValid = true;
            $scope.fileNotValidMsg = $scope.i18n.albums.upload_media_invalid;
            $timeout(function(){
                $scope.fileNotValidMsg = '';
            }, 4000);
        };
            //remove iamge from preview array
            $scope.removeError = false;
        $scope.removeImage = function(index) {
            var tempImg = $scope.imagePrvSrc[index];
            $scope.imagePrvSrc.splice(index, 1);
            var item = $scope.uploader.queue[index];
            item.remove();
            var opts = {};
            opts.session_id = APP.currentUser.id; 
            opts.media_path = tempImg.media_link;
            //calling the service to delete the selected post 
            OfferService.deleteShopOfferMedias(opts, function(data){
                if(data.code == 101) {
                } else {
                    $scope.removeError = true;
                    $scope.imagePrvSrc[index] = tempImg;
                    $timeout(function(){
                        $scope.removeErrMsg = $scope.i18n.Campaign_work.remove_errormsg;
                    }, 4000);
                }
            });
        };
        $scope.getlistingData = function(){
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth()+1; 
            var yyyy = today.getFullYear();
            if(dd<10){
                dd='0'+dd
            } 
            if(mm<10){
                mm='0'+mm
            } 
            var today = yyyy+'-'+mm+'-'+dd;
            //$scope.todaySDate = DateToMongoDate.dateToIso(today);
            $scope.offerlistingObject = [];
            $scope.showCardListMsg = false;
            $scope.cardListingLoader = true;
            $scope.offer_id    = "551ce49e2aa8f00f20d93295";
                var option  = new Object();
                option["$collection"] = "sixc_offers";
                var getlisting = new Object();
                getlisting["value"] =1;
                getlisting["start_date"] =1;
                getlisting["end_date"] = 1;
                getlisting["discount"] =1;
                getlisting["to_avail"] =1;
                option["$fields"] = getlisting;
                var filters = new Object(); 
                var start = new Object();
                start["$lte"] = today;
                var end = new Object();
                end["$gte"] = "$$CurrentDate";
                filters["start_date"] = start;
                filters["end_date"] = end;
                filters["offer_type"] = $scope.offer_id;
                filters["shop_id"] = $scope.routeId;
                option["$filter"] = filters;
                var history = new Object();
                history["__history.__createdOn"] = -1;
                option["$sort"] = history;
                option["$limit"] = 15;
                option["$skip"] = 0;
                $scope.noResult = false;
                OfferService.getApplaneData(option, function(data){
                     if(data.status === "ok" && data.code === 200){
                        $scope.cardListingLoader = false;
                        $scope.offerlistingObject = data.response.result;
                        if($scope.offerlistingObject.length == 0){
                            $scope.showCardListMsg = true;
                        }
                        
                     } else {
                        $scope.cardListingLoader = false;
                        
                     }

                });     
    };
    $scope.getlistingData();

}]);


app.controller('WorkCampaignController', ['$scope', '$http', '$rootScope', '$routeParams', '$location', '$timeout', 'focus', 'CommerialService' , 'ProfileService', 'OfferService' ,'StoreService' ,'$window', function ($scope, $http,$rootScope, $routeParams, $location, $timeout, focus, CommerialService, ProfileService, OfferService, StoreService ,$window) {
        $scope.grid = false;
        $scope.isOpenBottomForm = false;
        $scope.isOpenTopForm = false;
        $scope.showMessage = false;
        $scope.is_paypal_added = 0;
        $scope.is_paypal_added = StoreService.getStoreData().is_paypal_added;

        $scope.showGrid  = function(){
            $scope.grid = !$scope.grid;
        }
        //function to open bottom pay pal form
        $scope.openBottomForm  = function(){
            $scope.paypalErrCls = '';
            $scope.paypalErrMsg = '';
            $scope.paypal = {};
            $scope.isOpenTopForm = false;
            $scope.isOpenBottomForm = true;
            $scope.isOpenBottomFormMsg = true;
            $scope.paypalForm.$setPristine();
            
            
        }

         //function to open top pay pal form
        $scope.openTopForm  = function(){
            $scope.paypalErrCls = '';
            $scope.paypalErrMsg = '';
            $scope.isOpenBottomForm = false;
            $scope.isOpenTopForm = true;
            $scope.isOpenBottomFormMsg = false;
            $scope.paypal = {};
            $scope.paypalForm.$setPristine();
        }

        //function to close pay pal form
        $scope.closeForm  = function(){
            $scope.paypal = {};
            $scope.paypalForm.$setPristine();
            $scope.isOpenBottomForm = false;
            $scope.isOpenTopForm = false;
        }
        
        $scope.getSubscription = function(){
           
            var formData = {};
            formData.shop_id = $scope.routeId;
            formData.user_id = APP.currentUser.id;
            formData.return_url = APP.payment.siteDomain + '#/shop/promotions/'+ $scope.routeId; 
            formData.cancel_url = APP.payment.siteDomain + '#/shop/view/' + $scope.routeId;
            
            CommerialService.getSubscription(formData, function(data) { 
                if(data.code == 101) {
                    if(data.data.url != '' ) {
                        $window.location.href = data.data.url;
                    } else { 
                        $scope.getPaymentUrl = '';
                    } 
                } else { 
                    $scope.getPaymentUrl = '';
                }
            });    
        }
        $scope.unsubscribe = function(){
            
            $scope.subLoader = true;
           // $scope.subscribeButton = true;
            var formData = {};
            formData.shop_id = $scope.routeId;
            formData.user_id = APP.currentUser.id;
            CommerialService.unSubscribes(formData, function(data) { 
                if(data.code == 101){
                    $scope.subLoader = false;
                    $scope.subButtonHide = true;
                    $scope.is_subscribed = 0;
                    $scope.subMsg = true;
                    $timeout(function(){
                        $scope.subMsg = false;
                        $location.path("/shop/view/" + $scope.routeId);
                    }, 4000);
                }else{
                    $scope.subLoader = false;
                   // $scope.subscribeButton = false;
                    $scope.subButtonHide = false;
                    $scope.subMsgError = true;
                    $timeout(function(){
                        $scope.subMsgError = false;
                    }, 8000);
                }
            });
       }
}]);

app.controller('ShopReviewController',['$scope', '$http', '$location', '$routeParams' ,'$cookieStore', 'StoreService','StoreCommentService','ProfileService','$modal', '$timeout', function ($scope, $http, $location, $routeParams, $cookieStore, StoreService, StoreCommentService, ProfileService, $modal, $timeout) {  
	$scope.storeMainId = $routeParams.id;
    $scope.delCommentErrMsg = [];
        $scope.delCommentErrCls = [];
        $scope.editCommentText = [];
        $scope.activeCommentEdit = [];
        $scope.isEditComment = [];
        $scope.commentErrorMsg = [];
        $scope.commentErrorCls = [];
        $scope.commentInProcess = [];
        $scope.showComments = [];
        $scope.frndId = '';
        $scope.textLimit = APP.post_charecter_limit;
        $scope.storeData = '';

    // function to get the post and comment of the post
    $scope.getPosts = function() {
        var limit_start = $scope.posts.length;
        var opts = {};
        opts.store_id = $scope.storeMainId;
        opts.user_id = APP.currentUser.id;
        opts.limit_start = limit_start;
        opts.limit_size = 5;
        if($scope.frndId != ''){
            opts.friends_ids = $scope.frndId;   
        }
        if ((($scope.totalSize > limit_start ) || $scope.totalSize == 0 ) && $scope.myRes == 1) {
            $scope.myRes = 0;
            $scope.isLoading = true;
            // This service's function returns post
            StoreService.listcustomersreviews(opts, function(data){
                $scope.isLoading = false;
                if(data.code == 101)
                {
                    $scope.isLoading = false;
                    var items = data.data;
                    $scope.storeData = StoreService.getStoreData();
                    //console.log();
                    if(items != undefined){
                        $scope.posts = $scope.posts.concat(items);    
                    }
                    //alert(JSON.stringify($scope.posts));
                    $scope.totalSize = data.count;
                } 
                //alert($scope.posts.length);
                if ($scope.posts.length == 0){
                    $scope.noContent = true; 
                } 
                $scope.myRes = 1;
            });
        } 
    };
    
    //function to call initial loading
    $scope.showShopPostList = function(){
        $scope.posts = [];
        $scope.totalSize = 0;
        $scope.myRes = 1;
        $scope.noContent = false; 
        $scope.getPosts();
    };

    // calling get post function on controller load
    $scope.showShopPostList();

    //check screen for mobile devicess to show corresponding layou
        $scope.loadMoreFunc = 'loadMore()';
        $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
            $scope.windowHeight = newValue.h;
            $scope.windowWidth = newValue.w;
            if($scope.windowWidth <= '768'){
                $scope.isSmallScreen =  true; //declare in main controller
                $scope.loadMoreFunc = '';
            } else {
                $scope.isSmallScreen =  false; //declare in main controller
                $scope.loadMoreFunc = 'loadMore()';
            }
        }, true);

    $scope.loadMore = function() {
    if($scope.posts.length > 0){
      $scope.getPosts();
    }
    };

    //Get friend count on store
    $scope.frindBoughtCount = function() {       
        var opts = {};
        opts = {"function":"UtilityService.friendsShoppingCount", "parameters":[{"asArray":true,"shop_id":[$scope.storeMainId],"citizen_id":String(APP.currentUser.id)}]}
        //calling the comment service to delete the selected comment 
        StoreService.frindboughtcount(opts, function(data){
            if(data.response === undefined || data.response === ''){
                $scope.frcount = 0;   
            } else {
                $scope.frcount = data.response[0].count;   
            }
        });
    };
    $scope.frindBoughtCount();
    //funciton to delete single comment
    $scope.friendsId = [];
    $scope.searchFriend = function() {  
         $scope.friendsId = [];         
        var formData = {};
        formData.user_id = $scope.currentUser.id;
        formData.shop_id = $scope.storeMainId;
        //calling the comment service to delete the selected comment 
        StoreService.getfriendboughtonstores(formData, function(data){
            if(data.code == 101) {
                //data.data.friends = 
                $scope.friendlist = data.data.friends;
                if($scope.friendlist !== undefined){
                    for(var i=0; i<$scope.friendlist.length; i++){
                        $scope.friendsId.push(String(data.data.friends[i].id));
                    }
                }    
                //console.log($scope.friendsId);
            } else {
                
            }
        });
    };
    $scope.singleArray = [];
    $scope.frndVal = function() {
        $scope.singleArray = [];
        if($scope.friends != null && $scope.friends != 'all'){
            $scope.singleArray.push(String($scope.friends));
            $scope.frndId = $scope.singleArray; 
        } else if($scope.friends == 'all'){
            $scope.frndId = $scope.friendsId;
        } else {
            $scope.frndId = '';
        }
       $scope.showShopPostList();
    }

    $scope.searchFriend();

      //funciton to delete single comment        
        $scope.deleteComment = function(postIndx, indx) {
            var indx = indx;
            var commentData = $scope.posts[postIndx].comments[indx];
            var comments = [];
            $scope.deleteCommentIndx = commentData.id;
            var post = $scope.posts[postIndx];

            var formData = {};
            formData.user_id = $scope.currentUser.id;
            formData.comment_id = commentData.id;

            //calling the comment service to delete the selected comment 
            StoreCommentService.deleteComment(formData, function(data){
                if(data.code == 101) {
                    $scope.delCommentErrMsg[commentData.id] = '';
                    $scope.delCommentErrCls[commentData.id] = '';
                    $scope.deleteCommentIndx = -1;
                    var opts = {};
                    opts.post_id = post.post_id;
                    opts.user_id = $scope.currentUser.id;
                    $scope.posts[postIndx].comments.splice(indx,1);
                }
                else {
                    $scope.delCommentErrMsg[commentData.id] = $scope.i18n.dashboard.postcomment.delete_comment_fail;
                    $scope.delCommentErrCls[commentData.id] = 'text-red';
                    $scope.deleteCommentIndx = -1;
                    $scope.posts;
                }
                $timeout(function(){
                    $scope.delCommentErrCls[commentData.id] = '';
                    $scope.delCommentErrMsg[commentData.id] = '';
                }, 15000);
            });
        };
        //funciton to delete single comment
        $scope.deleteMediaComment = function(comment, postIndx, mediaIndx) {
            //TODO:: media index need to be come dynamic for multiple medias
            var commentData = comment;
            var post = $scope.posts[postIndx];
            $scope.deleteCommentIndx = commentData.id;
            
            var formData = {};
            formData.user_id = $scope.currentUser.id;
            formData.comment_id = commentData.id;
            formData.comment_media_id = commentData.comment_media_info[0].id;

            //calling the comment service to delete the selected comment 
            StoreCommentService.deleteMediaComment(formData, function(data){
                if(data.code == 101) {
                    $scope.deleteCommentIndx = -1;
                    var opts = {};
                    opts.post_id = post.post_id;
                    opts.user_id = $scope.currentUser.id;
                    $scope.getComments(opts, postIndx);
                }
                else {
                    $scope.deleteCommentIndx = -1;
                    $scope.posts;
                }
            });
        };

        //funtion to open form to update comment
    $scope.updateComment = function(postIndx, indx) {
        $("#commentBoxId-"+postIndx).hide();
        $scope.commentInProcess[postIndx] = true;
        $scope.commentErrorMsg[postIndx] = '';
        $scope.commentErrorCls[postIndx]= '';
        var comment = $scope.posts[postIndx].comments[indx];
        var indx = indx;
        $scope.activeCommentEdit[postIndx]= comment.id;
        $scope.isEditComment[postIndx] = false;
        $scope.editCommentText[postIndx]=comment.comment_text;
    }

        //function to edit a comment
        $scope.editComment = function(postIndx, indx) {
            var opts = {};
            var post = $scope.posts[postIndx];
            var comment = $scope.posts[postIndx].comments[indx];
            var newText = $scope.editCommentText[postIndx];
            var indx = indx;
            $scope.isEditComment[postIndx] = true;
            $scope.commentErrorMsg[postIndx]= '';
            
            if(newText == undefined || newText == '') {
                $scope.isEditComment[postIndx]= false;
                $scope.commentErrorCls[postIndx] = 'text-red';
                $scope.commentErrorMsg[postIndx] = $scope.i18n.editprofile.no_empty_comment;
                $timeout(function(){
                    $scope.commentErrorCls[postIndx] = '';
                    $scope.commentErrorMsg[postIndx] = '';
                }, 15000);
                return false;
            } 

            opts.user_id = $scope.currentUser.id;
            opts.post_id = post.post_id;
            opts.comment_id = comment.id;
            opts.comment_author = comment.comment_user_info.id;
            opts.youtube_url = comment.youtube_url;
            opts.comment_text = newText;
            
            StoreCommentService.updateComment(opts, function(data){
                if(data.code == 101) {
                    $scope.posts[postIndx].comments[indx].comment_text = newText;
                    $scope.activeCommentEdit[postIndx] = '';
                    $scope.commentErrorCls[postIndx] = '';
                    $scope.commentErrorMsg[postIndx] = '';
                    $scope.commentInProcess[postIndx] = false;
                    $scope.editCommentText[postIndx] = '';
                    $("#commentBoxId-"+postIndx).show();
                    $scope.isEditComment[postIndx] = false;
                } else {
                    $scope.commentInProcess[postIndx] = false;
                    $scope.isEditComment[postIndx] = false;
                    $scope.commentErrorCls[postIndx] = 'text-red';
                    $scope.commentErrorMsg[postIndx]= $scope.i18n.editprofile.not_posted;
                    $("#commentBoxId-"+postIndx).show();
                }
                $timeout(function(){
                        $scope.commentErrorCls[postIndx] = '';
                        $scope.commentErrorMsg[postIndx] = '';
                    }, 15000);
            });
        };

        //funtion to close the edit form to cancel comment
        $scope.cancelEditComment = function(postIndx, indx) {
            $scope.commentInProcess = [];
            $scope.commentInProcess[postIndx] = false;
            $scope.activeCommentEdit[postIndx] = [];
            $scope.activeCommentEdit[postIndx][indx] = -1;
            $scope.editCommentText[postIndx]='';
            $scope.commentErrorCls[postIndx] = '';
            $scope.commentErrorMsg[postIndx] = '';
            $("#commentBoxId-"+postIndx).show();
        };

        $scope.allCommentLoad = [];
        $scope.showAllComments = function(postIndx) {
            $scope.allCommentLoad[postIndx] = true;
            var post = $scope.posts[postIndx];
            var opts = {};
            opts.post_id = post.post_id;
            opts.user_id = $scope.currentUser.id;
            $scope.getComments(opts, postIndx);
            $scope.showComments[postIndx] = true;
        };
        // function to get the post and comment of the post
        $scope.comments = [];
        $scope.getComments = function(opts, postIndx) {
            $scope.comments[postIndx] = [];
            
            // This service's function returns post
            StoreCommentService.listComment(opts, function(data){
                if(data.code == 100)
                {
                    $scope.posts[postIndx].comments = data.data.comment;
                    $scope.allCommentLoad[postIndx] = false;
                        if($scope.comments[postIndx].length  != 0 ) {
                            $scope.noComment = true;
                        }
                } else {
                    $scope.allCommentLoad[postIndx] = true;
                }
            });
        };

        $scope.showAllFriend = function(post_id, creater_info, allTagFriend){
            $scope.allTagFriends = allTagFriend;
            $scope.post_id = post_id;
            $scope.creater = creater_info;
            var modalInstance = $modal.open({
                template: '<div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3><div class="modal-popup-close" ng-click="closeModal()"></div> </div><div class="modal-body tag-frnd-modal"><ul><li data-ng-repeat="friend in allTagFriends"><span class="tag-img"><img title="" style="width:30px;height:30px" alt="No image available" data-ng-src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a href ng-click="viewFriendProile(friend.id)">{{friend.first_name}} {{friend.last_name}}</a></span></li></ul></div><div class="modal-footer"></div>',
                controller: 'ModalController',
                size: 'lg',
                scope: $scope,
            });

            modalInstance.result.then(function (selectedItem) {
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
        };


}]);

app.controller('FollowersController',['$cookieStore', '$rootScope', '$scope', '$http', '$location', '$timeout', '$routeParams', 'ProfileService', function($cookieStore, $rootScope, $scope, $http, $location, $timeout, $routeParams, ProfileService) {
	$scope.resultNotFound = false;
	$scope.followerObject = [];
	$scope.followerAllList = [];
	$scope.allRes = 1;
	$scope.totalSize = 0
	$scope.getFollowersList = function() {		
		var opts = {};
		var limit_start = $scope.followerAllList.length;
		opts.user_id = APP.currentUser.id;
		opts.limit_start = limit_start;
		opts.limit_size = APP.friend_list_pagination.end;
		if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
			$scope.followersLoader = true;
			$scope.allRes = 0;
			ProfileService.getFollowers(opts, function(data) {
				$scope.allRes = 1;
	        	if(data.code == '101') {
	                $scope.totalSize = data.data.size;
	        		$scope.followersLoader = false;
	                $scope.followerObject =  $scope.followerAllList = $scope.followerAllList.concat(data.data.followers);
	            } else {
	                $scope.followersLoader = false;
	                $scope.resultNotFound = true;
	            }
			});
		}
    }

    $scope.getFollowersList();

    $scope.loadMore = function() {
        $scope.getFollowersList();
    };
}]);


app.controller('FollowingsController',['$cookieStore', '$rootScope', '$scope', '$http', '$location', '$timeout', '$routeParams', 'ProfileService', function($cookieStore, $rootScope, $scope, $http, $location, $timeout, $routeParams, ProfileService) {
	$scope.resultNotFound = false;
	$scope.followingsObject = [];
	$scope.followerAllList = [];
	$scope.allRes = 1;
	$scope.totalSize = 0
	$scope.getFollowingsList = function() {		
		var opts = {};
		var limit_start = $scope.followerAllList.length;
		opts.user_id = APP.currentUser.id;
		opts.limit_start = limit_start;
		opts.limit_size = APP.friend_list_pagination.end;
		if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
			$scope.followersLoader = true;
			$scope.allRes = 0;
			ProfileService.getFollowings(opts, function(data) {
				$scope.allRes = 1;
	        	if(data.code == '101') {
	                $scope.totalSize = data.data.size;
	        		$scope.followersLoader = false;
	                $scope.followingsObject =  $scope.followerAllList = $scope.followerAllList.concat(data.data.followers);
	            } else {
	                $scope.followersLoader = false;
	                $scope.resultNotFound = true;
	            }
			});
		}
    }

    $scope.getFollowingsList();

    $scope.loadMore = function() {
        $scope.getFollowingsList();
    };
}]);

//Shop followers controllers section
app.controller('ShopFollowersController',['$scope', '$http', '$routeParams', '$location', '$timeout', 'StoreService', function ($scope, $http, $routeParams, $location, $timeout, StoreService) {
   // $scope.$route = $route;
    $scope.storeAllList = [];
    $scope.storeFollowersDetail = [];
    $scope.totalSize = 0;
    $scope.notFound = false;
    $scope.allRes = 1;
    $scope.nofollow = false;
    $scope.storeMainId = $routeParams.id;
    $scope.storeLoading = true;
    $scope.shopFollowers = function() {
        var opts = {};
        var limit_start = $scope.storeAllList.length;
        opts.limit_start = limit_start;
        opts.limit_size = APP.store_list_pagination.end;
        opts.user_id = APP.currentUser.id;
        opts.shop_id = $scope.storeMainId;
      if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
          $scope.storeLoading = true;
          $scope.allRes = 0;
         StoreService.userfollowingshops(opts, function(data) {
            if(data.code == 101) {
                $scope.allRes = 1;
                $scope.totalSize = data.data.total;
                $scope.storeLoading = false;
                $scope.storeFollowersDetail =  $scope.storeAllList = $scope.storeAllList.concat(data.data.user_info);
                $scope.notFound = false;
                $scope.nofollow = true;
            } else {
                $scope.storeFollowersDetail =  [];
                $scope.storeLoading = false;
                $scope.notFound = true;
            } 
        });
     }  
    };
    $scope.shopFollowers();
    $scope.loadMore = function() {     
        $scope.shopFollowers();
    };
}]);
app.controller('FriendController', ['$cookieStore', '$rootScope', '$scope', '$http', '$location', '$timeout', '$routeParams', 'MessageService', 'ProfileService', 'fileReader', function($cookieStore, $rootScope, $scope, $http, $location, $timeout, $routeParams, MessageService, ProfileService, fileReader) {
	$scope.frieandListObject = [];    
	$scope.friendAllList = [];
    $scope.totalSize = 0;
    $scope.allRes = 1;
    $scope.albloader = false;
	$scope.friendListLoader = false;
    $scope.resultNotFound = false;
    $scope.getAllFriend = function() {
        var opts = {};
        var limit_start = $scope.friendAllList.length;
        opts.friend_name = ($scope.friendName === undefined) ? '' : ($scope.friendName);
        opts.user_id = APP.currentUser.id;
        opts.session_id = APP.currentUser.id; 
        opts.limit_start = limit_start;
        opts.limit_size =  APP.friend_list_pagination.end;
        if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
            $scope.friendListLoader = true;
            $scope.allRes = 0;
            MessageService.searchFriends(opts, function(data) {
                $scope.allRes = 1;
            	if(data.code == '101') {
                    $scope.totalSize = data.data.count;
            		$scope.friendListLoader = false;
                    $scope.frieandListObject =  $scope.friendAllList = $scope.friendAllList.concat(data.data.users);
                } else {
                    $scope.friendListLoader = false;
                    $scope.resultNotFound = true;
                }
            });
        }
    }

    $scope.getAllFriend();

    $scope.allList = function() {
        $scope.frieandListObject = [];
        $scope.friendAllList = [];
        $scope.friendName = '';
        $scope.getAllFriend();
    };

    $scope.loadMore = function() {
        $scope.getAllFriend();
    };

    var key_count_global = 0;
    $scope.searchFriend = function(e) {
        if(e.keyCode == 8){
            $timeout(function(){
                $scope.lookup(key_count_global);
            },500, false);
        }else{
            $scope.frieandListObject = [];
            $scope.friendAllList = [];
            $scope.getAllFriend();
        }
    };

    $scope.lookup = function(keycount){
        if(key_count_global == keycount){
            $scope.frieandListObject = [];
            $scope.friendAllList = [];
            $scope.getAllFriend();
        }
    };
    /*$scope.focusOnInput = function(){
        $('html').keyup(function(e){
            if(e.keyCode == 8 && $scope.friendName.trim() == ''){
                $scope.frieandListObject = [];
                $scope.friendAllList = [];
                $scope.getAllFriend();
            }    
        });
    };*/
}]);

//Frined cover page controller
app.controller('FriendCoverProfileController', ['$cookieStore', '$rootScope', '$scope', '$route', '$http', '$location', '$timeout', '$interval', '$routeParams', 'fileReader', 'ProfileService', 'saveFriendDate' ,'UserService', function($cookieStore, $rootScope, $scope, $route, $http, $location, $timeout, $interval, $routeParams, fileReader, ProfileService, saveFriendDate, UserService) {
    
   $scope.RespontToRequest_personal = function(){
        $("#RespontToRequest_personal").click(function(e){
            e.stopPropagation();
            $(".request-links-professional").hide();
            $(".request-links-personal").slideToggle('slow');
        });
   };

   $scope.RespontToRequest_professional = function(){
        $("#RespontToRequest_professional").click(function(e){
            e.stopPropagation();
            $(".request-links-personal").hide();
            $(".request-links-professional").slideToggle('slow');
        });
   };
   $(document).click(function(){
         $(".request-links-personal").hide();
         $(".request-links-professional").hide();
   });


    $rootScope.friendlineActive = 'about';
    var str = $location.path().replace("/", "");
    if(str.split('/', 1)[0] != 'viewfriend') {
        $scope.friendDetailId = str.split('/', 1)[0];
    }else {
        $scope.friendDetailId = str.split('/', 2)[1];
    }

    var activeUrl = str.substring(str.lastIndexOf('/')+1);
    if (str.indexOf("friend/images") != -1) { 
        activeUrl = 'pictures';
    }
    switch(activeUrl) {
        case 'friends' :  
        $rootScope.friendlineActive = 'friends'; break;
        case 'album' :  
        $rootScope.friendlineActive = 'album'; break;
        case 'clubs' :  
        $rootScope.friendlineActive = 'club'; break;
        case 'shope' :  
        $rootScope.friendlineActive = 'shope'; break;
        case 'about' :  
        $rootScope.friendlineActive = 'about'; break;
        case 'pictures' :  
        $rootScope.friendlineActive = 'pictures'; break;
        default : 
        $rootScope.friendlineActive = 'timeline';
    }

    $scope.friendViewLoader = true;
    $scope.sendFriendRequestLoader = false;
    $scope.showRequestButton = false;
    $scope.addFriend_personal    = false;
    $scope.requestSent_personal  = false;
    $scope.IsFriend_personal     = false;
    $scope.respond_personal      = false;
    $scope.addFriend_professional    = false;
    $scope.requestSent_professional  = false;
    $scope.IsFriend_professional     = false;
    $scope.respond_professional      = false;
    $scope.sendPersonalRequestLoader = false;
    $scope.sendProfessionalRequestLoader = false;
    
    $scope.RejectRequest = function(request_type) {
        if(request_type === 1){
            $scope.sendPersonalRequestLoader = true;
        }else if(request_type === 2){
            $scope.sendProfessionalRequestLoader = true;
        }
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.friend_id = $scope.friendDetailId;
        opts.action = '0';
        opts.request_type = request_type; 
        ProfileService.rejectFriendRequest(opts, function(data) {
            if(data.code == 101) {
                if(request_type === 2){
                    $scope.addFriend_professional   = true;
                    $scope.respond_professional = false;
                    $scope.sendProfessionalRequestLoader = false;
                }else if(request_type === 1){
                    $scope.addFriend_personal   = true;
                    $scope.respond_personal = false;
                    $scope.sendPersonalRequestLoader = false;
                }
                //$rootScope.getCountOfAllTypeNotificaton();
                $rootScope.getAllFriendNotification();
            } else {
                
            }
        });
    };
    
    $scope.AcceptRequest = function(request_type) {
        if(request_type === 1){
            $scope.sendPersonalRequestLoader = true;
        }else if(request_type === 2){
            $scope.sendProfessionalRequestLoader = true;
        }
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.friend_id = $scope.friendDetailId;
        opts.action = "1";
        opts.request_type = request_type; 
        ProfileService.acceptFriendRequest(opts, function(data) {
            if(data.code == 101) {
                if(request_type === 2){
                    $scope.IsFriend_professional   = true;
                    $scope.respond_professional = false;
                    $scope.sendProfessionalRequestLoader = false;
                }else if(request_type === 1){
                    $scope.IsFriend_personal   = true;
                    $scope.respond_personal = false;
                    $scope.sendPersonalRequestLoader = false;
                }
                //$rootScope.getCountOfAllTypeNotificaton();
                $rootScope.getAllFriendNotification();
            } else {
                
            }
        });
    };

    $scope.addFriend = function(type){
        var friendType;
        var opts = {};
            opts.user_id    = APP.currentUser.id;
            opts.friend_id  = $scope.friendDetailId
            opts.msg        = "Friend Request";
        
        if(type ===  1){
            opts.request_type = 1;
            $scope.sendPersonalRequestLoader = true;
        }else if(type ===  2){
            opts.request_type = 2;
            $scope.sendProfessionalRequestLoader = true;
        }
        ProfileService.sendFriendRequests(opts, function(data) {
            if(data.code == 101 || (data.code == 100 && data.message === "FRIEND_REQUEST_HAS_ALREADY_RECEIVED")){
                $scope.friendProfile.is_friend = 2;
                $scope.sendFriendRequestLoader = false;
                if(type === 2){
                    $scope.friendProfile.user_info.professional_pending = 1;
                    $scope.addFriend_professional   = false;
                    $scope.requestSent_professional   = true;
                    $scope.sendProfessionalRequestLoader = false;
                }else if(type === 1){
                    $scope.friendProfile.user_info.personal_pending = 1;
                    $scope.addFriend_personal   = false;
                    $scope.requestSent_personal   = true;
                    $scope.sendPersonalRequestLoader = false;
                }
            }else if(data.code == 109){
                $scope.friendProfile.is_friend = 2;
                $scope.sendFriendRequestLoader = false;
                $scope.friendProfile.is_sent = 1;
                $scope.sendProfessionalRequestLoader = false;
                $scope.sendPersonalRequestLoader = false;
            }
        });
    };

    $scope.removeFriend = function(friendDetail,type) { 
        $scope.sendFriendRequestLoader = true;
        var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.friend_id = friendDetail.user_id;
            opts.action = "0";
            opts.request_type = type;
        if(type === 1){
            $scope.sendPersonalRequestLoader = true;
        }else if(type === 2){
            $scope.sendProfessionalRequestLoader = true;
        }
        ProfileService.rejectFriendRequest(opts, function(data) {
            if(data.code == 101 || (data.code == 113 && data.message === "FRIEND_REQUEST_HAS_ALREADY_REMOVED")) {
                $scope.sendFriendRequestLoader = false;
                if(type === 2){
                    $scope.friendProfile.user_info.friend_type = $scope.friendProfile.user_info.friend_type - 2;
                    $scope.sendProfessionalRequestLoader = false;
                    $scope.addFriend_professional = true;
                    $scope.IsFriend_professional =false;
                }else if(type === 1){
                    $scope.friendProfile.user_info.friend_type = $scope.friendProfile.user_info.friend_type - 1;
                    $scope.sendPersonalRequestLoader = false;
                    $scope.addFriend_personal = true;
                    $scope.IsFriend_personal=false;
                }
                if($scope.friendProfile.user_info.friend_type === 0){
                    $scope.friendProfile.is_friend =  0;
                }
            } else {
                $scope.friendProfile.is_friend = 0;
                $scope.sendFriendRequestLoader = false;
            }
        });
    };
    
    $scope.friendRequestStatus = function (){
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.friend_id = $scope.friendDetailId
        ProfileService.friendRequestStatus(opts, function(data) {
            if(data.code == 101) {
                if(data.data.personal.is_friend == 0 && data.data.personal.is_sent == 0 && data.data.personal.is_respond == 0){
                    $scope.addFriend_personal   = true;
                }
                if(data.data.professional.is_friend == 0 && data.data.professional.is_sent == 0 && data.data.professional.is_respond == 0){
                    $scope.addFriend_professional   = true;
                }
                if(data.data.personal.is_sent == 1){
                    $scope.requestSent_personal   = true;
                }
                if(data.data.professional.is_sent == 1){
                    $scope.requestSent_professional   = true;
                }
                if(data.data.personal.is_friend == 1){
                    $scope.IsFriend_personal   = true;
                }
                if(data.data.professional.is_friend == 1){
                    $scope.IsFriend_professional   = true;
                }
                if(data.data.personal.is_respond == 1){
                    $scope.respond_personal   = true;
                }
                if(data.data.professional.is_respond == 1){
                    $scope.respond_professional   = true;
                }

            }
        });    
    };
    $scope.friendRequestStatus(); 
    $scope.skillobj = [];
    $scope.viewFriendProfile = function() {
        $scope.searchFrind = '';
        $('#search').val('');
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.friend_id = $scope.friendDetailId
        ProfileService.friendProfileView(opts, function(data) {
            $scope.showRequestButton = true;
            if(data.code == 101) {
                $scope.getTotalIncome();
                if(data.data.user_id == APP.currentUser.id) {
                    $location.path('timeline/'+data.data.user_id);
                }
                $scope.friendProfile = data.data;
                if($rootScope.mobileView == true){
                    $scope.changeCordinatevalue();
                }
                for(var i =0; i<=11 ; i++){
                    if(data.data.user_info.date_of_birth != null) {
                        if(data.data.user_info.date_of_birth.date.substring(5,7) == i){     
                            $scope.birthmonth = $scope.months[i-1].name; 
                        }
                    }else{
                        $scope.birthmonth = '';
                        $scope.comma = '';
                    }
                }
                if(data.data.user_info.skills !== null && data.data.user_info.skills.length > 0){
                    $scope.tempskills = data.data.user_info.skills.split(',');
                }
                if(data.data.user_info.skills !== null && data.data.user_info.skills.length > 0){     
                    for(var i=0;i<$scope.tempskills.length;i++) {
                        $scope.tempobj={"name":$scope.tempskills[i] };
                        $scope.skillobj.push($scope.tempobj);
                    }
                }
                $scope.personaledu = false;
                $scope.professionedu = false;
                $scope.personaljob = false;
                $scope.professionjob = false;
                if($scope.friendProfile.user_info.educationDetail != null && $scope.friendProfile.user_info.educationDetail != "" && $scope.friendProfile.user_info.educationDetail != undefined){
                    for(var i=0; i<$scope.friendProfile.user_info.educationDetail.length; i++){
                        if($scope.friendProfile.user_info.educationDetail[i].visibility_type == 1 || $scope.friendProfile.user_info.educationDetail[i].visibility_type == 3){
                            $scope.personaledu = true;
                        }
                        if($scope.friendProfile.user_info.educationDetail[i].visibility_type == 2 || $scope.friendProfile.user_info.educationDetail[i].visibility_type == 3){
                            $scope.professionedu = true;
                        }
                    }
                }
                if($scope.friendProfile.user_info.jobDetails != null && $scope.friendProfile.user_info.jobDetails != "" && $scope.friendProfile.user_info.jobDetails != undefined){
                    for(var i=0; i<$scope.friendProfile.user_info.jobDetails.length; i++){
                        if($scope.friendProfile.user_info.jobDetails[i].visibility_type == 1 || $scope.friendProfile.user_info.jobDetails[i].visibility_type == 3){
                            $scope.personaljob = true;
                        }
                        if($scope.friendProfile.user_info.jobDetails[i].visibility_type == 2 || $scope.friendProfile.user_info.jobDetails[i].visibility_type == 3){
                            $scope.professionjob = true;
                        }
                    }
                }
                var opts1 = {};
                opts1.sender_id = APP.currentUser.id;
                opts1.to_id = $scope.friendProfile.user_id;
                opts1.session_id = APP.currentUser.id;
                ProfileService.checkfollowUser(opts1, function(data1) {
                    if(data1.code == 151 || data1.is_follow == 1) {
                        $scope.followUser = false;
                    } 
                    if(data1.code == 152 || data1.is_follow == 0) {
                        $scope.followUser = true;
                    } 
                });

                //friend profile all details 
                var copts = {};
                var connectedProfile = {};
                copts.user_id = $scope.friendDetailId;
                copts.session_id = APP.currentUser.id; 
                ProfileService.getConnectedProfil(copts, function(data) {
                    if(data.code = 101)
                        $scope.friendProfile.connectedProfile = data.data;
                    $scope.friendViewLoader = false;
                });
            }else {
                $scope.friendViewLoader = false;
            }
        });
    };
    $scope.showButton = false;
    $scope.pause = false
    $('body').click(function(){
        if($scope.showButton == true && $scope.pause == false && $rootScope.mobileView == true){
            $scope.showButton = false;
        }
    })

    $scope.toogleImage = function(){
        if($scope.showButton === false){
            $scope.showButton = true;
            $scope.pause = true;
            setTimeout(function() {$scope.pause = false}, 100);
        }else{
            $scope.showButton = false;
        }
    }

    $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
        $scope.windowHeight = newValue.h;
        $scope.windowWidth = newValue.w;
        if($scope.windowWidth <= '600'){
            if($rootScope.mobileView == true){
                $timeout(function(){
                    $scope.changeCordinatevalue(); 
                },1000);
            };
            $rootScope.mobileView = true; //declare in main controller
        } else {
            $rootScope.mobileView = false; //declare in main controller
        }
        if($scope.windowWidth <= 768){
            $scope.showButton = false;
        }else{
            $scope.showButton = true;
        }
    }, true);
    var img = new Image();
    $scope.changeCordinatevalue = function(){
        if($scope.friendProfile != undefined){
            img = null;
            img = new Image();
            img.src = $scope.friendProfile.user_info.cover_image_thumb;
            img.onload = function(){
                if($scope.windowWidth <= '400'){
                    if(img.width <= 910){
                        if( $scope.friendProfile.user_info.y_cord != ""){
                            if( $scope.friendProfile.user_info.y_cord > 100){
                                $rootScope.friendMobileY_Cord = $scope.friendProfile.user_info.y_cord / 3;
                            }else{
                                $rootScope.friendMobileY_Cord = $scope.friendProfile.user_info.y_cord / 4;
                            }
                            $rootScope.friendMobileX_Cord = 0;
                        }else{
                            $scope.friendProfile.user_info.x_cord = 0;
                            $scope.friendProfile.user_info.y_cord = 0;
                            $rootScope.friendMobileX_Cord = 0;
                            $rootScope.friendMobileY_Cord = 0;
                        }
                    }else  if(img.width > 910 && img.width <= 1300){
                        if( $scope.friendProfile.user_info.cover_image_thumb.x_cord != ""){
                            if(  $scope.friendProfile.x_cord > 100){
                                $rootScope.friendMobileX_Cord =  $scope.friendProfile.user_info.x_cord / 4;
                            }else{
                                $rootScope.friendMobileX_Cord =  $scope.friendProfile.user_info.x_cord / 5;
                            }
                            $rootScope.friendMobileY_Cord = 0;
                        }else{
                            $scope.friendProfile.user_info.x_cord = 0;
                             $scope.friendProfile.user_info.y_cord = 0;
                            $rootScope.friendMobileX_Cord = 0;
                            $rootScope.friendMobileY_Cord = 0;
                        }
                    }else if(img.width > 1300 ){
                        if( $scope.friendProfile.user_info.cover_image_thumb.x_cord != ""){
                            if(  $scope.friendProfile.x_cord > 100){
                                $rootScope.friendMobileX_Cord =  $scope.friendProfile.user_info.x_cord / 5;
                            }else{
                                $rootScope.friendMobileX_Cord =  $scope.friendProfile.user_info.x_cord / 6;
                            }
                            $rootScope.friendMobileY_Cord = 0;
                        }else{
                            $scope.friendProfile.user_info.x_cord = 0;
                             $scope.friendProfile.user_info.y_cord = 0;
                            $rootScope.friendMobileX_Cord = 0;
                            $rootScope.friendMobileY_Cord = 0;
                        }
                    }
                }else if($scope.windowWidth > '400' && $scope.windowWidth <='600'){
                        if(img.width <= 910){
                        if(  $scope.friendProfile.user_info.y_cord != ""){
                            if(  $scope.friendProfile.user_info.y_cord > 100){
                                $rootScope.friendMobileY_Cord =  $scope.friendProfile.user_info.y_cord / 1.8;
                            }else{
                                $rootScope.friendMobileY_Cord =  $scope.friendProfile.user_info.y_cord / 2;
                            }
                            $rootScope.friendMobileX_Cord = 0;
                        }else{
                            $scope.friendProfile.user_info.x_cord = 0;
                            $scope.friendProfile.user_info.y_cord = 0;
                            $rootScope.friendMobileX_Cord = 0;
                            $rootScope.friendMobileY_Cord = 0;
                        }
                    }else if(img.width > 910 && img.width <= 1300){
                        if(  $scope.friendProfile.user_info.x_cord != ""){
                            if(  $scope.friendProfile.user_info.x_cord > 100){
                                $rootScope.friendMobileX_Cord = $scope.friendProfile.user_info.x_cord / 2.0;
                            }else{
                                $rootScope.friendMobileX_Cord = $scope.friendProfile.user_info.x_cord / 2.20;
                            }
                            $rootScope.friendMobileY_Cord = 0;
                        }else{
                            $scope.friendProfile.user_info.x_cord = 0;
                            $scope.friendProfile.user_info.y_cord = 0;
                            $rootScope.friendMobileX_Cord = 0;
                            $rootScope.friendMobileY_Cord = 0;
                        }
                    }else if(img.width > 1300){
                        if(  $scope.friendProfile.user_info.x_cord != ""){
                            if(  $scope.friendProfile.user_info.x_cord > 100){
                                $rootScope.friendMobileX_Cord = $scope.friendProfile.user_info.x_cord / 2.80;
                            }else{
                                $rootScope.friendMobileX_Cord = $scope.friendProfile.user_info.x_cord / 3.00;
                            }
                            $rootScope.friendMobileY_Cord = 0;
                        }else{
                            $scope.friendProfile.user_info.x_cord = 0;
                            $scope.friendProfile.user_info.y_cord = 0;
                            $rootScope.friendMobileX_Cord = 0;
                            $rootScope.friendMobileY_Cord = 0;
                        }
                    }
                }
            }
        }
    };
     $scope.getTotalIncome = function() {
        //get users credit and the total income 
            var opts4 = {};
            opts4.idcard = $scope.friendDetailId;
            UserService.getCreditAndIncome(opts4, function(data) {
                var currentCredit = {};
                if(data.code == 101) {
                    currentCredit.totalCredit = (data.data.saldoc/1000000) ;
                    currentCredit.totCreditMicro = (data.data.saldorm) + (data.data.saldorc) ;
                    currentCredit.totalIncome = data.data.tot_income;
                    currentCredit.totalIncomeShow = data.data.tot_income;
                    //currentCredit.totalIncome = ((data.data.saldorc+data.data.saldorm)/1000000);
                    $scope.creditAndIncome = currentCredit;
                }
                else{
                    $scope.creditAndIncome = data.data;
                }
            });
     };   
    $scope.followRequestLoader = false;
    $scope.followFriend = function(friendId) {
        $scope.followRequestLoader = true;
        var opts = {};
        opts.sender_id = APP.currentUser.id;
        opts.to_id = friendId;
        ProfileService.followUser(opts, function(data) {
            if(data.code == 101) {
                $scope.friendProfile.is_follow = 1;
                $scope.followUser = false;
                $scope.followRequestLoader = false;
            } 
        });
    };

    $scope.unFollowFriend = function(friendId) {
        $scope.followRequestLoader = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.friend_id = friendId;
        ProfileService.unFollowUser(opts, function(data) {
            if(data.code == 101) {
                $scope.friendProfile.is_follow = 0;
                $scope.followUser = true;
                $scope.followRequestLoader = false;
            }
        });
    };
    $scope.viewFriendProfile();

    $scope.storeFriendDate = function(detail){
        saveFriendDate.saveFriendObject(detail);
        $location.path('/message/'+ detail.user_info.id);
    };

}]);

//Frined cover page controller
app.controller('FriendFriendController', ['$cookieStore', '$rootScope', '$scope', '$route', '$http', '$location', '$timeout', '$interval', '$routeParams', 'MessageService', function($cookieStore, $rootScope, $scope, $route, $http, $location, $timeout, $interval, $routeParams, MessageService) {
    $scope.frieandListObject = [];    
    $scope.friendAllList = [];
    $scope.totalSize = 0;
    $scope.allRes = 1;
    $scope.friendListLoader = false;
    $scope.resultNotFound = false;
    $scope.getAllFriend = function() {
        var opts = {};
        var limit_start = $scope.friendAllList.length;
        opts.friend_name = ($scope.friendName === undefined) ? '' : ($scope.friendName);
        opts.user_id = $routeParams.id;
        opts.session_id = APP.currentUser.id;
        opts.limit_start = limit_start;
        opts.limit_size =  APP.friend_list_pagination.end;
        //console.log("Total= "+ $scope.totalSize + "start= "+ limit_start + "response= "+ $scope.allRes);
        if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
            $scope.friendListLoader = true;
            $scope.allRes = 0;
            MessageService.searchFriends(opts, function(data) {
                $scope.allRes = 1;
                if(data.code == '101') {
                    $scope.totalSize = data.data.count;
                    $scope.friendListLoader = false;
                    $scope.frieandListObject =  $scope.friendAllList = $scope.friendAllList.concat(data.data.users);
                } else {
                    $scope.friendListLoader = false;
                    $scope.resultNotFound = true;
                }
            });
        }
    }

    $scope.getAllFriend();
    

    $scope.allList = function() {
        $scope.frieandListObject = [];
        $scope.friendAllList = [];
        $scope.friendName = '';
        $scope.getAllFriend();
    };

    $scope.loadMore = function() {
        $scope.getAllFriend();
    };

    var key_count_global = 0;
    $scope.searchFriend = function(e) {
        if(e.keyCode == 8){
            $timeout(function(){
                $scope.lookup(key_count_global);
            },500, false);
        }else{
            $scope.frieandListObject = [];
            $scope.friendAllList = [];
            $scope.getAllFriend();
        }
    };

    $scope.lookup = function(keycount){
        if(key_count_global == keycount){
            $scope.frieandListObject = [];
            $scope.friendAllList = [];
            $scope.getAllFriend();
        }
    };

    /*$scope.focusOnInput = function(){
        $('html').keyup(function(e){
            if(e.keyCode == 8 && $scope.friendName.trim() == ''){
                $scope.frieandListObject = [];
                $scope.friendAllList = [];
                $scope.getAllFriend();
            }    
        });
    };*/
}]);

//To display the friends clubs 
app.controller('FriendClubController', ['$scope', '$http', 'GroupService', '$routeParams', function ($scope, $http, GroupService, $routeParams) {
    $scope.createGroupData = {};
    $scope.clubMyList = [];
    $scope.userGroupList = [];
    $scope.myFrndRes = 1;
    $scope.totalSize = 0;
    $scope.myTotalSize = 0;
    $scope.noContent = false; 
    $scope.groupPublicActive = 'current';
    $scope.groupMyClubActive = '';
    $scope.isLoading = true;
    $scope.limitCheck = 65;
    $scope.firstPage = APP.group_pagination.end;
    $scope.itemsPerPage = APP.group_pagination.end;
    $scope.currentPage = 1;
    $scope.range = [];

    $scope.changePageMore = function(pageNo) {
        $scope.currentPage = pageNo;
        $scope.loadMore();
    };

    $scope.prevPage = function() {
        if ($scope.currentPage > 1) {
            $scope.currentPage--;
        }
        $scope.loadMore();
    };

    $scope.prevPageDisabled = function() {
        return $scope.currentPage === 1 ? "disabled" : "";
    };

    $scope.nextPage = function() {
        if ($scope.currentPage < $scope.totalItems) {
            $scope.currentPage++;
        }
       $scope.loadMore();
    };

    $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.totalItems ? "disabled" : "";
    };

    $scope.setPage = function(number) {
        $scope.itemsPerPage = number;
        $scope.currentPage = 1;
        $scope.getFriendGroup($scope.tab, $scope.itemsPerPage);
    };

    $scope.clubcheck = 0;
    $scope.getFriendGroup = function(tab, itemsPerPage){
        $scope.tab = tab;
        $scope.clubMyList = [];
        $scope.groupMyClubActive = 'current';
        $scope.groupPublicActive = '';
        var opts = {};
        
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        opts.user_id = APP.currentUser.id;
        opts.friend_id = $routeParams.id;
        opts.limit_start = limit_start;
        opts.limit_size = itemsPerPage;
        //calling the services to get the group list
        if ((($scope.myTotalSize > limit_start) || $scope.myTotalSize == 0 ) && $scope.myFrndRes == 1) {
            $scope.isLoading = true;
            $scope.myFrndRes = 0;
            GroupService.getUserFriendGroups(opts, function(data){
                if(data.code == 101) {
                    $scope.totalItems = data.data.size;
                    $scope.myTotalSize = data.data.size;
                    $scope.myFrndRes = 1; 
                    $scope.userGroupList =  $scope.clubMyList = data.data.groups;
                    $scope.totalItems = Math.ceil(data.data.size/itemsPerPage);
                    $scope.range = [];  
                    for (var i=1; i<=$scope.totalItems; i++) {
                        $scope.range.push(i);
                    }              
                    $scope.isLoading = false;
                    if ($scope.userGroupList.length == 0){
                        $scope.noContent = true; 
                    } 
                }
                else {
                    $scope.totalItems = 0;
                    $scope.myFrndRes = 1; 
                    $scope.isLoading = false;
                }
                
            });
        }; 
    };

    $scope.loadMore = function() { 
        if($scope.tab == 'myclub') {
            $scope.clubMyList = [];
            $scope.getFriendGroup($scope.tab, $scope.itemsPerPage);
        } else {
            $scope.clubMyList = [];
            $scope.getFriendGroup($scope.tab, $scope.itemsPerPage);
        }
    }

     $scope.getFriendGroup('myclub',$scope.itemsPerPage);

     //function to show two layout listing for the group
    $scope.listActive = 'active';
    $scope.changeView = function(layout){
        if(layout == 'grid'){
            $scope.gridActive = 'active'; 
            $scope.listActive = ''; 
        } else if(layout == 'list'){
            $scope.listActive = 'active'; 
            $scope.gridActive = '';
        }
    };

    $scope.joinPublicGroups =function(groupId){
        $("#groupjoing"+groupId).hide();
        $("#joinloader"+groupId).show();
        $scope.requestMessage = "";
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.group_id = groupId;
        GroupService.joinPublicGroup(opts, function(data){
            if(data.code == 101) {
                $("#requestsent"+groupId).show();
                $("#joinloader"+groupId).hide();
            } else if(data.code == 118){
                $("#requestpending"+groupId).show();
                $("#joinloader"+groupId).hide();
            }else {
                $("#groupjoing"+groupId).show();
                $("#joinloader"+groupId).hide();
            }
        });
    }

}]);

//To display the friends clubs 
app.controller('FriendShopController', ['$scope', '$http', 'GroupService', '$routeParams', function ($scope, $http, GroupService, $routeParams) {
    console.log("friend shope controller")
}]);

app.controller('FriendAlbumController', ['$scope', '$http', '$modal', 'AlbumService', '$routeParams', '$location', function($scope, $http, $modal, AlbumService, $routeParams ,$location) {
    $scope.listAlbum = [];
    $scope.totalSize = 0;
    $scope.allRes = 1;
    $scope.listload = false;
    $scope.tagged_photo = [];
    //Album Listing
    $scope.albumListing = function(type){
  
        $scope.noAlbums = false;
        if(type === 'listing') {
            $scope.albloader = false;
        } else {
            $scope.albloader = true;
        }

        var limit_start = $scope.listAlbum.length;
        $scope.user_id = $routeParams.id; 
        var opts = {};
            opts.user_id = $scope.currentUser.id;
            opts.friend_id = $scope.user_id;
            opts.limit_start = limit_start; 
            opts.limit_size = 12; 
            opts.friend_id = $routeParams.id;
            //console.log("limit"+limit_start+"total"+$scope.totalSizetotalSize+"all res"+$scope.totalSizeallRes);
         if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
                 $scope.listload = true;
                 $scope.allRes = 0;
                 AlbumService.albumListing(opts, function(data){
               if(data.code == 101) {
                    $scope.noAlbums = true;
                    $scope.albloader = false;
                    $scope.allRes = 1;
                    $scope.listAlbum = $scope.listAlbum.concat(data.data.albums); 
                    $scope.tagged_photo_available = data.data.tagged_photo;
                    if ($scope.tagged_photo_available && $scope.tagged_photo_available.album_name === "Photo Of You"){
                        var opts = {}
                        opts.user_id = $routeParams.id;
                        opts.session_id = APP.currentUser.id;
                        opts.limit_start = 0; 
                        opts.limit_size = 12; 
                        AlbumService.getTaggedPhoto(opts,function(data){
                            $scope.tagged_photo = data.data;
                        })
                    }
                    $scope.totalSize = data.data.size;
                    $scope.listload = false; 
                }else {
                    $scope.albloader = false;
                    $scope.listload = false;  
                }
            });
        }
    }

    $scope.imageModal = function(index, photos){
        $scope.index = index;
        $scope.photos = photos;
        $scope.pre_visible = true;
        $scope.loader = false;
        $scope.next_visible = true;
        if(index === 0) $scope.pre_visible = false;
        if((photos.length-1)=== index) $scope.next_visible = false;
        var modalInstance = $modal.open({
            template: '<style>.modal-content img.tag-imgae{max-height: 100%;max-height: 100%;position: absolute;right: 0;left: 0;top: 0;bottom: 0;margin: auto}.modal.in .modal-dialog{max-width: 80%;margin: auto;height: 90%;left: 0;right: 0;top: 0;bottom: 0;position: absolute}.modal .modal-content{border: none;height: 100%}.modal-img-inner{background: #000;height: 100%}.modal-img-tag-desc .modal-tag-frnds-input input[type="text"]{width: auto;background: none;border: 1px solid #666;color: #aaa;padding: 5px 10px;box-shadow: rgb(204, 204, 204) 0px 0px 1px 0px !important;-moz-box-shadow: rgb(204, 204, 204) 0px 0px 1px 0px !important;-webkit-box-shadow: rgb(204, 204, 204) 0px 0px 1px 0px !important;}.modal-img-tag-desc{padding: 10px; z-index: 8042;}.modal.in .modal-dialog .fancybox-wrap{position: relative}.modal-img-tag-desc{background-color: rgba(0, 0, 0, .8);width: 100%;position:absolute;bottom: 0}.modal-img-tag-desc > span{display: inline-block;vertical-align: middle}.modal-img-tag-desc span.tag-list-block .tag-friends{display: inline-block;vertical-align: middle;margin: 0 0px 0 5px;background: rgba(255, 255, 255, .2);color: #fff;padding: 4px 6px;font-size: 12px;font-weight: 400;border-radius: 3px}.modal-img-tag-desc span.tag-list-block .tag-friends b{margin-left: 5px}.modal-content .modal-img-tag{font-weight: bold;position: absolute;top: 10px;right: 10px;background: #fff;padding: 4px 8px;-webkit-border-radius: 2px;-moz-border-radius: 2px;-ms-border-radius: 2px;-o-border-radius: 2px;border-radius: 2px;box-shadow:0px 0px 2px 1px #ddd;-moz-box-shadow:0px 0px 2px 1px #ddd;-webkit-box-shadow:0px 0px 2px 1px #ddd;z-index: 8042;}.modal-content .modal-img-tag img{width: 15px;height: auto; margin: 0 0 0 5px;}</style><div class="modal-img-inner"><img src="'+photos[index].media_path+'" class="tag-imgae"><div class="slide-contros"><a data-ng-show="pre_visible" data-ng-click="pre_image(index,photos)" class="pre slide-btn" href><span></span><a/><a data-ng-click="next_image(index,photos)" data-ng-show = "next_visible" class="next slide-btn" href><span></span><a/></div><span class="sideloader" data-ng-show="loader"><img title="" alt="" src="app/assets/images/ajax-loader.gif"></span><div data-ng-hide="loader" data-ng-if="photos[index].creater_id==='+APP.currentUser.id+'" class="modal-img-tag" ng-click="untagg()">Untag <img titile="" alt="Tag Friends" src="app/assets/images/tag-icon-remove.png" ></div></div>',
            controller: 'ModalController',
            size: 'lg',
            scope: $scope,
        });
        // $scope.tagged_Friends = []
        modalInstance.result.then(function (selectedItem) {
        }, function () {

        });

        $scope.untagg = function(){
            $scope.loader = true;
            var opts ={};
            opts.user_id = APP.currentUser.id;
            opts.untag_user_id = $routeParams.id;
            opts.media_id = $scope.photos[$scope.index].id;
            console.log('friend.js---',opts)

            AlbumService.removeTaggedPhoto(opts,function(data){
                console.log(data);
                if(data.code===101){
                    modalInstance.close();
                    var tempIndex = $scope.tagged_photo.indexOf($scope.photos[$scope.index])
                    $scope.tagged_photo.splice(tempIndex,1)
                }else{
                    $scope.loader = false;
                    // modalInstance.close();
                    // var tempIndex = $scope.tagged_photo.indexOf($scope.photos[$scope.index])
                    // $scope.tagged_photo.splice(tempIndex,1)
                }
            })
        }
        $scope.pre_image = function (index, photos){
            modalInstance.close();
            $scope.imageModal(index-1, photos);
        }

        $scope.next_image = function (index, photos, leng){
            modalInstance.close()
            $scope.imageModal(index+1, photos);
        }
    }

    $scope.albumListing('listing');
    //infinite scroll loadmore
    $scope.loadMore = function() {     
        $scope.albumListing('listing');
    };
      $scope.redirectUrl = function(album_id, album_name ,id) {
       if(album_name == '') {
           album_name = 'Untitled';
           $location.path(id +"/friend/images/"+album_id+"/"+album_name);
        }
        else {
           $location.path(id+ "/friend/images/"+ album_id+"/"+album_name); 
        }
    }
}]);

app.controller('FriendViewController', ['$scope', '$http', 'AlbumService', '$routeParams', '$location', function($scope, $http, AlbumService, $routeParams ,$location) {
    //$scope.viewalbum = [];
    $scope.totalSizeImg = 0;
    $scope.allResImg = 1;
    $scope.noPhotos = false;
    $scope.imageCount = 0
    $scope.viewalbum = [];
    $scope.friendId = $routeParams.id;
    $scope.viewAlbum = function(type){
        if(type === 'listing') {
            $scope.albloader = false;
        } else {
           $scope.albloader = true;          
        }
        var limit_start = $scope.viewalbum.length;
        var albumId = $routeParams.album_id;
        $scope.albumId = $routeParams.album_id;
        $scope.user_id = $routeParams.id;
        $scope.albumname = $routeParams.album_name;
            var opts = {};
            //opts.user_id = $scope.user_id;
            opts.user_id = APP.currentUser.id;
            opts.friend_id = $routeParams.id;
            opts.album_id = albumId;
            opts.limit_start = limit_start;
            opts.limit_size = 12;
         if ((( $scope.totalSizeImg > limit_start) || $scope.totalSizeImg == 0 ) && $scope.allResImg == 1) {
                    $scope.listload = true;
                    $scope.allResImg = 0;
                AlbumService.viewAlbum(opts, function(data){
                   if(data.code == 101) {
                        $scope.imageCount = data.data.size;
                        $scope.albloader = false;
                        $scope.noPhotos = true;
                        $scope.allResImg = 1;
                        $scope.totalSizeImg = data.data.size; 
                        $scope.viewalbum = $scope.viewalbum.concat(data.data.media);
                        $scope.albumDetails = data.data.album;
                        $scope.listload = false;   
                     }else {
                        $scope.albloader = false; 
                        $scope.noPhotos = true;
                        $scope.listload = false; 
                     }
                });
        }
    }

    $scope.loadMoreImage = function() {    
        if($scope.viewalbum.length < $scope.imageCount) $scope.viewAlbum('listing');
    };
    $scope.viewAlbum('listing');
    
}]);

app.controller('FriendRequestView', ['$cookieStore', '$scope', '$rootScope', '$http', '$timeout', 'ProfileService', function($cookieStore, $scope, $rootScope, $http, $timeout, ProfileService) {
	$scope.friendRequestLoading = false;
	$scope.frientreqResponse = 1;
	$scope.FriendRequests = [];
	$scope.endLimit = 12;
	$scope.allTotal = 0;

	$scope.getFriendReqNotification = function() {
		var limit_start = $scope.FriendRequests.length;
		opts = {};
		opts.user_id = APP.currentUser.id;
		opts.limit_start = limit_start;
		opts.limit_size = $scope.endLimit;
		if ((( $scope.allTotal > limit_start) || $scope.allTotal == 0 ) && $scope.frientreqResponse == 1) {
			$scope.friendRequestLoading = true;
			$scope.frientreqResponse = 0;
			ProfileService.getPendingFreindReq(opts, function(data) {
				$scope.frientreqResponse = 1;
				if(data.code == 101) {
					$scope.FriendRequests = $scope.FriendRequests.concat(data.data.requests);
					$scope.allTotal = data.data.size;
					$scope.friendRequestLoading = false;				    
	            }
				 else {
					$scope.friendRequestLoading = false;
				}
			});
		}
    };
       
    $scope.getFriendReqNotification();

    $scope.loadMore = function() {
    	$scope.getFriendReqNotification();
    }

	$scope.AcceptRequest = function(friendInfo, id) {
		$("#notification-request-friend-" + id).fadeOut(1000);
		opts = {};
		opts.user_id = APP.currentUser.id;
		opts.friend_id = friendInfo.friend_id;
		opts.action = 1;
		if(friendInfo.personal == 1){
			opts.request_type = 1; 
		}else if(friendInfo.professional == 1 ){
			opts.request_type = 2; 
		}
		ProfileService.acceptFriendRequest(opts, function(data) {
			if(data.code == 101) {
				$("#notification-request-friend-" + id).hide();
				$rootScope.getAllFriendNotification();
				$scope.getFriendReqNotification();
			} else {
				$("#notification-request-friend-" + id).show();
				$scope.getFriendReqNotification();
			}
		});
	};  

	$scope.RejectRequest = function(friend, id) {
		$("#notification-request-friend-" + id).fadeOut(1000);
		opts = {};
		opts.user_id = APP.currentUser.id;
		opts.friend_id = friend.friend_id;
		opts.action = '0';
		if(friend.personal == 1){
			opts.request_type = 1; 
		}else if(friend.professional == 1 ){
			opts.request_type = 2; 
		}

		ProfileService.rejectFriendRequest(opts, function(data) {
			if(data.code == 101) {
				$("#notification-request-friend-" + id).hide();
				$rootScope.getAllFriendNotification();
				$scope.getFriendReqNotification();
			} else {
				$("#notification-request-friend-" + id).hide();
				$scope.getFriendReqNotification();
			}
		});
	};
}]);

/**
* This is for open the single page for media 
*/
app.controller('MediaSingleController', ['$cookieStore', '$scope', '$rootScope', '$http', '$timeout', '$routeParams', '$modal', '$log', 'ProfileService', 'SingleMediaDetailService', 'AlbumService', function($cookieStore, $scope, $rootScope, $http, $timeout, $routeParams, $modal, $log, ProfileService, SingleMediaDetailService, AlbumService) {
	$scope.postPageLoader = true;
	$scope.postPageNotFound = false;
	$scope.data = [];
	var opts = {};
	opts.media_id = $routeParams.mediaId;
	opts.album_type = $routeParams.albumType;
	opts.album_id = $routeParams.parentId;
	opts.user_id  = APP.currentUser.id; 
	opts.owner_id = $routeParams.supportId;

    //Intanciated some value for below uses 
    $scope.parent_id = $routeParams.parentId;
    $scope.media_id = $routeParams.mediaId;
    $scope.max          = 5;
    $scope.isReadonly   = false;
    $scope.media_index = 0;

	if($routeParams.albumType == 'user') {
		$scope.parent_type = 'user_profile_album_photo';
	} else if($routeParams.albumType == 'club') {
        $scope.parent_type = 'club_album_photo';
    }else if($routeParams.albumType == 'shop') {
        $scope.parent_type = 'store_media';
    } else {
        $scope.parent_type = 'user_profile_album_photo';
    }

	$scope.mediaType = $routeParams.albumType;
	SingleMediaDetailService.getMediaInfo(opts, function(data) {
		if(data.code == 101) {
			$scope.data = data.data;
			$scope.postPageLoader = false;
		} else {
			$scope.data = [];
			$scope.postPageLoader = false;
			$scope.postPageNotFound = true;
		}
	}); 

	$scope.UpdateTag = false;	
    $scope.Tagtoggle = function(){
        $scope.UpdateTag = !$scope.UpdateTag;
    }

    $scope.tagFriendSuggestion = function(event, friendname){
        if(event.keyCode===40){
            event.preventDefault();
            if($scope.friendTagIndex+1 !== $scope.friends.length){
                $scope.friendTagIndex++;
            }
        }else if(event.keyCode===38){
            event.preventDefault();
            if($scope.friendTagIndex-1 !== -1){
                $scope.friendTagIndex--;
            }
        }else if(event.keyCode===13){
               if($scope.friends.length > 0  && $scope.friendTagIndex!==-1) $scope.selectFriend($scope.friends[$scope.friendTagIndex]);
        }
        if($('#searchTagFriend').val().trim()==="") $scope.showFriendList = false;
        if(!(event.keyCode>=65 && event.keyCode<=95)) return;
        $scope.cancelFriendSearch = false;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        friendname ? opts.friend_name = friendname : opts.friend_name = "";
        opts.session_id = APP.currentUser.id;
        opts.limit_start = 0;
        opts.limit_size =  APP.friend_list_pagination.end;
        $scope.showSearchLoader = true;

        ProfileService.searchFriends(opts,function(data){
            $scope.showSearchLoader = false;
            if($scope.cancelFriendSearch === false){
                if(data.data.users.length>0) $scope.showFriendList = true;
                else $scope.showFriendList = false;
                $scope.friends = data.data.users;
            }
        })
    };

    $scope.selectFriend = function(friendInfo){
        $scope.dublicate = false;
        $scope.choose = false;  
        angular.forEach($scope.data.tagged_friends_info,function(index){
            if(index.id === friendInfo.user_id){
                $scope.dublicate = true;
            }
        });

        if($scope.dublicate === false){
            $scope.data.tagged_friends_info.push(friendInfo.user_info);
            $scope.friends = [];
            $scope.cancelFriendSearch = true;
            $scope.friendTagIndex = -1;
            angular.element('#searchTagFriend').val("");
            $scope.showFriendList = false;
        }else{
            $scope.friends = [];
            $scope.cancelFriendSearch = true;
            $scope.friendTagIndex = -1;
            angular.element('#searchTagFriend').val("");
            $scope.showFriendList = false;
        }
    };

    $scope.taggService = function(){
        var pre_visible_status  = $scope.pre_visible;
        var next_visible_status = $scope.next_visible;
        $scope.pre_visible = false;
        $scope.next_visible = false;
        var frnd_array = [];
        angular.forEach($scope.data.tagged_friends_info,function(index){
            frnd_array.push(index.id);
        });
        var opts = {};
        opts.user_id   = APP.currentUser.id;
        opts.album_id  = $scope.parent_id;
        opts.post_type = 1;
        opts.media_id  = [$scope.media_id];
        opts.tagged_friends = frnd_array.join(',')
        $scope.UpdateTag = false;
        $scope.TagLoader = true;
    
       AlbumService.photoTaging(opts,function(data){
            if(data.code === 101){
                $scope.choose = true;
                $scope.TagLoader = false;
            }
            $scope.pre_visible  = pre_visible_status;
            $scope.next_visible = next_visible_status;
        });
    };

    $scope.removeTagFriend = function(friendIndex){
        $scope.data.tagged_friends_info.splice(friendIndex,1);
    };

    $scope.lostFocus = function(){
        $timeout(function(){
            $scope.friends = [];
            $scope.cancelFriendSearch = true;
            $scope.friendTagIndex = -1;
            angular.element('#searchTagFriend').val("");
            $scope.showFriendList = false;
        },300);
    };

    $scope.waitRateResponse = false;
    $scope.ratePicture = function(rating, picture_id, mediaIndex){
        var update = "";
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.type_id = picture_id;
        opts.rate    = rating;
        if($scope.parent_type == 'friend_album'){
            opts.type = 'user_profile_album_photo'
        }else {
            opts.type = $scope.parent_type;
        }
        if($scope.data.is_rated){
            update = "update";
        }else{
            update = "add";
        }
        $scope.waitRateResponse = true;
        ProfileService.rateThis(opts, update, function(data){
            if(data.code === 101 && data.message === "SUCCESS"){
                $scope.data.avg_rate    = data.data.avg_rate;
                $scope.data.no_of_votes = data.data.no_of_votes;
                $scope.data.is_rated    = true;
                $scope.data.current_user_rate = data.data.current_user_rate;
            }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                $scope.data.current_user_rate   = 0;
                $scope.data.is_rated            = true;
            }
            $scope.waitRateResponse = false;
        });
    };

    $scope.removeRating = function(pictureIndex , mediaIndex){
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.type_id = pictureIndex;
        if($scope.parent_type == 'friend_album'){
            opts.type = 'user_profile_album_photo'
        }else {
            opts.type = $scope.parent_type;
        }
        
        if($scope.waitRateResponse === false){
            $scope.waitRateResponse = true;
        }else{
            return;
        }
        ProfileService.removeRating(opts,function(data){
            if(data.code == 101 && data.message == "SUCCESS"){
                $scope.data.current_user_rate   = 0;
                $scope.data.avg_rate            = data.data.avg_rate;
                $scope.data.no_of_votes         = data.data.no_of_votes;
                $scope.data.is_rated            = false;
            }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                $scope.data.current_user_rate   = 0;
                $scope.data.is_rated            = false;
            }
            $scope.waitRateResponse = false;
        });
    };

    $scope.averageRating = function(rating){
        if(rating != undefined)
        return new Array(Math.ceil(rating));
    };

    $scope.blankStar = function(rating){
        if((5-Math.ceil(rating)) > 0){
            return new Array(5-Math.ceil(rating));
        }else{
            return 0;
        }
    };

    $scope.findPeopleRate = function(id, count_Vote){
        if(count_Vote === 0 ){
            return false;
        }
        var opts = {};
        $scope.ratedUsers = {};
        var modalInstance = $modal.open({
                    templateUrl: 'app/views/find_people.html',
                    controller: 'ModalController',
                    size: 'lg',
                    scope: $scope,
        });
        $scope.showPeopleLoader = true;
        if($scope.parent_type == 'friend_album'){
            opts.type = 'user_profile_album_photo'
        }else {
            opts.type = $scope.parent_type;
        }
        opts.type_id = id;
        opts.session_id = APP.currentUser.id;
        ProfileService.findPeople(opts,function(data){
            if(data.code == 101 && data.message == "SUCCESS"){
                $scope.showPeopleLoader = false;
                $scope.ratedUsers       = data.data.users_rated;
                if(data.data.users_rated.length == 0){
                    $scope.message = $scope.i18n.dashboard.no_vote;
                }
            }else{
                $scope.showPeopleLoader = false;
            }
        });
        modalInstance.result.then(function (selectedItem) {
        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        });

        $scope.viewFriendProile = function(friendId){
            modalInstance.dismiss('cancel');
            $location.path('/viewfriend/'+friendId);
        };
    };

}]);
app.controller('GroupController', ['$scope', '$http', '$location', 'GroupService', 'fileReader', '$timeout','ProfileService' ,'$modal', '$log', 'focus', function($scope, $http, $location, GroupService, fileReader, $timeout ,ProfileService ,$modal, $log, focus) {
    $scope.groupTypes = APP.groupTypes;
    $scope.createGroupData = {};
    $scope.removeImage = false;
    $scope.noContent = false; 
    $scope.groupPublicActive = 'current';
    $scope.groupMyClubActive = '';
    $scope.groupInvitActive = '';
    $scope.isLoading = true;
    $scope.reqRes = 1;
    $scope.myGrpRes = 1;
    $scope.inviteGrpRes = 1;
    $scope.inviteCLub = 0;
    $scope.userGroupList = [];
    $scope.clubAllList = [];
    $scope.inviteGroupList = [];
    $scope.inviteClubList = [];
    $scope.totalSize = 0;
    $scope.totalMyClub = 0;
    $scope.totalinviteClub = 0;
    $scope.limitCheck = 120;
    $scope.firstPage = APP.group_pagination.end;
    $scope.itemsPerPage = APP.group_pagination.end;
    $scope.currentPage = 1;
    $scope.range = [];
    $scope.hidepagi = false;

    $scope.changePageMore = function(pageNo) {
        $scope.currentPage = pageNo;
        $scope.loadMore();
    };

    $scope.prevPage = function() {
        if ($scope.currentPage > 1) {
            $scope.currentPage--;
        }
        $scope.loadMore();
    };

    $scope.prevPageDisabled = function() {
        return $scope.currentPage === 1 ? "disabled" : "";
    };

    $scope.nextPage = function() {
        if ($scope.currentPage < $scope.totalItems) {
            $scope.currentPage++;
        }
       $scope.loadMore();
    };

    $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.totalItems ? "disabled" : "";
    };

    $scope.setPage = function(number) {
        $scope.itemsPerPage = number;
        $scope.currentPage = 1;
        $scope.searchPublicGroup($scope.tab, $scope.itemsPerPage);
    };
   
    $scope.myGroup = function(tab, itemsPerPage) {
        $scope.inviteCLub = 0;
        $scope.tab = tab;
        $scope.clubAllList = [];
        $scope.groupMyClubActive = 'current';
        $scope.groupPublicActive = '';
        $scope.groupInvitActive = '';
        var formData = {};
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        formData.user_id = APP.currentUser.id;
        formData.group_owner_id = APP.currentUser.id;
        formData.limit_start = limit_start;
        formData.limit_size = itemsPerPage;
        //calling the services to get the group list
        if((($scope.totalMyClub > limit_start)  || $scope.totalMyClub == 0 ) && $scope.myGrpRes == 1){
            $scope.myGrpRes = 0;
            $scope.isLoading = true;
            GroupService.getUserGroups(formData, function(data){
                if(data.code == 101) {
                    $scope.userGroupList = $scope.clubMyList = data.data.groups; //$scope.clubMyList.concat(data.data.groups);
                    $scope.isLoading = false;
                    $scope.myGrpRes = 1;
                    $scope.totalMyClub = data.data.size;
                    if($scope.totalMyClub != 0){ 
                        $scope.hidepagi = true;}
                        else { $scope.hidepagi = false;}
                    $scope.totalItems = data.data.size;
                    $scope.totalItems = Math.ceil(data.data.size/itemsPerPage); 
                    $scope.range = [];  
                    for (var i=1; i<=$scope.totalItems; i++) {
                        $scope.range.push(i);
                    } 
                    if($scope.userGroupList.length == 0){
                        $scope.noContent = true;
                    }
                } else {
                    $scope.myGrpRes = 1;
                    $scope.isLoading = false;
                    $scope.totalItems = 0;
                } 
            });
        }
        
    };

    $scope.clubcheck = 0;
    $scope.searchPublicGroup = function(tab, itemsPerPage) {
        $scope.inviteCLub = 0;
        $scope.tab = tab;
        $scope.clubMyList = [];
        $scope.groupPublicActive = 'current';
        $scope.groupMyClubActive = '';
        $scope.groupInvitActive = '';
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        var formData = {};
        formData.user_id = APP.currentUser.id;
        formData.group_name = ($scope.clubTitle === undefined ? '' :$scope.clubTitle);
        formData.limit_start = limit_start;
        formData.limit_size = itemsPerPage;
        if((($scope.totalSize > limit_start)  || $scope.totalSize == 0 ) && $scope.reqRes == 1){
            //calling the services to get the group list
            $scope.reqRes = 0;
            $scope.isLoading = true;
            GroupService.searchGroup(formData, function(data) {
                if (data.code == 101) {
                    $scope.clubcheck = data.data.my_group;
                    $scope.userGroupList = $scope.clubAllList = data.data.groups; //$scope.clubAllList.concat(data.data.groups);
                    $scope.isLoading = false
                    $scope.totalSize = data.data.size;  
                    if($scope.totalSize != 0){ $scope.hidepagi = true;}
                    else { $scope.hidepagi = false;}
                    $scope.totalItems = Math.ceil(data.data.size/itemsPerPage); 
                    $scope.range = [];  
                    for (var i=1; i<=$scope.totalItems; i++) {
                        $scope.range.push(i);
                    }              
                    $scope.reqRes = 1;
                    $scope.searchReqRes = 1;
                    if($scope.userGroupList.length == 0){
                        $scope.noContent = true;
                    }
                } else { 
                    $scope.totalItems = 0;
                    $scope.reqRes = 1;
                    $scope.searchReqRes = 1;
                    $scope.isLoading = false;
                }
            });
        }
    }
    
    $scope.searchPublicGroup('allclub', $scope.itemsPerPage);
    // code for rating in listing of club
        $scope.averageRating = function(rating){
            return new Array(Math.ceil(rating));
        };

        $scope.blankStar = function(rating){
            if((5-Math.ceil(rating)) > 0){
                return new Array(5-Math.ceil(rating));
            }else{
                return 0;
            }
        };
        $scope.findPeople = function(id, type, count_Vote){
            if(count_Vote === 0 ){
                return false;
            }
            var opts = {};
            $scope.ratedUsers = {};
            $scope.showPeopleLoader = true;

            var modalInstance = $modal.open({
                        templateUrl: 'app/views/find_people.html',
                        controller: 'ModalController',
                        size: 'lg',
                        scope: $scope,
            });
            opts.type = type;
            opts.type_id = id;
            opts.session_id = APP.currentUser.id;
            ProfileService.findPeople(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.showPeopleLoader = false;
                    $scope.ratedUsers = data.data.users_rated;
                    if(data.data.users_rated.length == 0){
                        $scope.message = $scope.i18n.dashboard.no_vote;
                    }
                }else{
                    $scope.showPeopleLoader = false;
                }
            });
            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
        };   
    // Code end for rating in listing of club

    $scope.tabChange = function(tab) {
        $scope.currentPage = 1;
        $scope.userGroupList = [];
        $scope.clubAllList = [];
        $scope.clubMyList = [];
        $scope.inviteClubList = [];
        $scope.tab = tab;
        $scope.isLoading = false;
        if(tab == 'allclub'){
            $scope.inviteCLub = 0;
            $scope.searchPublicGroup(tab, $scope.itemsPerPage);
        } else if(tab == 'myclub'){
            $scope.inviteCLub = 0;
            $scope.myGroup(tab, $scope.itemsPerPage);
        } else if(tab == 'inviteclub'){
            $scope.inviteCLub = 1;
            $scope.InvitedClub(tab, $scope.itemsPerPage);
        }
    } 

    $scope.InvitedClub = function(tab, itemsPerPage){
        $scope.tab = tab;
        $scope.clubAllList = [];
        $scope.clubMyList = [];
        $scope.groupInvitActive = 'current';
        $scope.groupMyClubActive = '';
        $scope.groupPublicActive = '';
        var formData = {};
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        formData.user_id = APP.currentUser.id;
        formData.limit_start = limit_start;
        formData.limit_size = itemsPerPage;;
        //calling the services to get the group list inviteClubList
        if((($scope.totalinviteClub > limit_start)  || $scope.totalinviteClub == 0 ) && $scope.inviteGrpRes == 1){
            $scope.inviteGrpRes = 0;
            $scope.isLoading = true;
            GroupService.getInviteGroups(formData, function(data){
                if(data.code == 101) {
                    $scope.inviteGroupList = $scope.inviteClubList = data.data; //$scope.inviteClubList.concat(data.data);
                    $scope.isLoading = false;
                    $scope.inviteGrpRes = 1;
                    $scope.totalinviteClub = data.size;
                    $scope.hidepagi = true;
                    $scope.totalItems = Math.ceil(data.size/itemsPerPage); 
                    $scope.range = [];  
                    for (var i=1; i<=$scope.totalItems; i++) {
                        $scope.range.push(i);
                    } 
                    if($scope.inviteGroupList.length == 0){
                        $scope.noContent = true;
                    }
                } else {
                    $scope.totalItems = 0;
                    $scope.inviteGrpRes = 1;
                    $scope.isLoading = false;
                    if($scope.totalinviteClub != 0){ $scope.hidepagi = true;}
                    else { $scope.hidepagi = false;}
                    
                } 
            });
        }
    };

    /* function to cancel the service when accept new request
    * 
    */
    $scope.clubTitle ='';
    var DELAY_TIME_BEFORE_POSTING = 300;
    //var element = $('#search');
    var currentTimeout = null;

    $('#clubserchbox').keypress(function() {
    
      var model = $scope.clubTitle;
      //var poster = model($scope);
      if(currentTimeout) {
        $timeout.cancel(currentTimeout);
      }
      currentTimeout = $timeout(function(){
        $scope.searchClub('allclub');
      }, DELAY_TIME_BEFORE_POSTING)
    });

    $scope.searchReqRes = 0;
    $scope.searchClub = function(tab) {
        $scope.searchReqRes = 0;
        if($scope.clubTitle.length >= 3){
            $scope.clubMyList = [];
            $scope.clubAllList = [];
            $scope.userGroupList = [];
            $scope.tab = tab;
            $scope.groupPublicActive = 'current';
            $scope.searchPublicGroup('allclub', $scope.itemsPerPage);
        } else {
            $scope.clubAllList = [];
            $scope.userGroupList.slice();
        }
    } 

    $scope.loadMore = function() {
        var a = $scope.itemsPerPage;
        var tempTab = $scope.tab;
        if(tempTab == 'allclub'){
            $scope.inviteCLub = 0;
            $scope.searchPublicGroup(tempTab, a);
        } else if(tempTab == 'myclub'){
            $scope.inviteCLub = 0;
            $scope.myGroup(tempTab, a);
        } else if(tempTab == 'inviteclub'){
            $scope.inviteCLub = 1;
            $scope.InvitedClub(tempTab, a);
        }
    } 
    
    $scope.createGroupToggleTag = true;
    $scope.createGroupStart = false;
    $scope.createGroupToggle = function() {
        $scope.createGroupData.groupTypeID = 0;
        $scope.createGroupToggleTag = $scope.createGroupToggleTag === false ? true : false; 
    };

    $scope.cancelCreateGroupToggle = function() {
        $scope.createGroupData = {};
        $scope.files = '';
        $scope.myFile = '';
        $scope.imageSrc = '';
        $scope.createGroupToggle();
    };

    $scope.clubFormSubmitted = false;
    $scope.createGroup = function() {
        $scope.clubFormSubmitted = true;
        var opts = {};
        $scope.createGroupError = false;
        var groupStatusIdx = $scope.createGroupData.groupTypeID;
        var groupStatusData = $scope.groupTypes[groupStatusIdx];
        opts.user_id = APP.currentUser.id;
        opts.group_name = $scope.createGroupData.name;
        opts.group_status = groupStatusData.groupTypeID;
        
        if($scope.createGroupData.name === undefined || $scope.createGroupData.name === '') {
            $scope.createClub.clubname.$dirty = true;
            $scope.createClub.clubname.$invalid = true;
            $scope.createClub.clubname.$error.required = true;
            focus('clubname');
            return false;
        }else if($scope.createGroupData.groupTypeID === 0 || $scope.createGroupData.groupTypeID === '') {
            $scope.createClub.clubstatus.$dirty = true;
            $scope.createClub.clubstatus.$invalid = true;
            $scope.createClub.clubstatus.$error.required = true;
            focus('clubstatus');
            return false;
        } else if($scope.createGroupData.description === undefined || $scope.createGroupData.description === '') {
            $scope.createGroupStart = false;
            $scope.createGroupError = true;
            $scope.createClub.clubdescription.$dirty = true;
            $scope.createClub.clubdescription.$invalid = true;
            $scope.createClub.clubdescription.$error.required = true;
            focus('clubdescription');
            return false;
        } else {
            $scope.createGroupStart = true;
            opts.group_description = $scope.createGroupData.description;
            opts.group_media = '';

            //to make by default public group
            if(opts.group_status == 0) {
                opts.group_status = 1;
            }
            
            GroupService.createGroup(opts, $scope.myFile, function(data){
                if(data.code == 101) {
                    $location.path('/club/view/' + data.data.group_id + '/' + data.data.group_status);
                    // $scope.createGroupStart = false;
                    // $scope.createGroupData = {};
                    // $scope.createGroupToggleTag = true;
                    // $scope.searchPublicGroup($scope.tab);
                    // $scope.removeImage = false;
                    // window.reload();
                    
                } else {
                    $scope.createGroupStart = false;
                    $scope.createGroupError = true;
                }
            });  
        }    
    };

    $scope.myFile = '';
    $scope.imageSrc = '';
    $scope.getFile = function () {
        $scope.progress = 0;
        fileReader.readAsDataUrl($scope.file, $scope)
        .then(function(result) {
            $scope.myFile = $scope.file;
            $scope.imageSrc = result;
            $scope.removeImage = true;
        });
    };

    $scope.removeClubDp = function(){
        $scope.myFile = "";
        $scope.imageSrc = "";
        $scope.imageSrc = false;
        $scope.removeImage = false;
    }

    //function to show two layout listing for the group
    $scope.listActive = 'active';
    $scope.changeView = function(layout){
        if(layout == 'grid'){
            $scope.gridActive = 'active'; 
            $scope.listActive = ''; 
        } else if(layout == 'list'){
            $scope.listActive = 'active'; 
            $scope.gridActive = '';
        }
    };

    //function to cancel the  invitation in invitations in club
    $scope.cancelGroup = function(idx){ 
        var formData = {};
        $scope.isLoading = true;
        var groupData = $scope.inviteGroupList[idx];
        formData.user_id = groupData.sender_info.id;
        formData.request_id = groupData.request_id;
        // calling the services to delete the group
        GroupService.cancelGroup(formData, function(data){
            if(data.code == 101) {
                $scope.message = $scope.i18n.clubs.invitation_cancel;
                $timeout(function(){
                       $scope.message ='';
                 }, 15000);
                $timeout(function(){
                    $scope.commentErrMsg = '';
                }, 15000);
                $scope.inviteGroupList.splice(idx, 1);
                $scope.isLoading = false;
            } else {
                $scope.message = $scope.i18n.clubs.invitation_cancel_failed;
                $timeout(function(){
                    $scope.commentErrMsg = '';
                }, 15000);
                $scope.isLoading = false;
            }
        });
    }


    $scope.requestMessage = "";
    $scope.showMessage = true;
    $scope.joinPublicGroups =function(groupId){
        console.log("asadsadsadadadddadad");
        $("#groupjoing"+groupId).hide();
        $("#groupjoinglist"+groupId).hide();
        $("#joinloader"+groupId).show();
        $("#joinloaderlist"+groupId).show();
        $scope.requestMessage = "";
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.group_id = groupId;
        GroupService.joinPublicGroup(opts, function(data){
            if(data.code == 101) {
                console.log("aaaaaaaadadadddadad");
                $("#requestsent"+groupId).show();
                $("#requestsentlist"+groupId).show();
                $("#joinloader"+groupId).hide();
                $("#joinloaderlist"+groupId).hide();
            } else if(data.code == 118){
                $("#requestpending"+groupId).show();
                $("#requestpendinglist"+groupId).show();
                $("#joinloader"+groupId).hide();
                $("#joinloaderlist"+groupId).hide();
            }else {
                $("#groupjoing"+groupId).show();
                $("#groupjoinglist"+groupId).show();
                $("#joinloader"+groupId).hide();
                $("#joinloaderlist"+groupId).hide();
            }
        });
    }
    //function to delete a user group
    $scope.deleteGroup = function(idx){ 
        var formData = {};
        $scope.isLoading = true;
        var groupData = $scope.userGroupList[idx];
        formData.user_id = APP.currentUser.id;
        formData.group_owner_id = groupData.owner_id;
        formData.group_id = groupData.group_id;
        // calling the services to delete the group
        GroupService.deleteGroup(formData, function(data){
            if(data.code == 101) {
                $scope.message = $scope.i18n.clubs.delete_success;
                $scope.userGroupList.splice(idx, 1);
                $timeout(function(){
                $scope.message ='';
                 }, 15000);
                $scope.isLoading = false;
            } else {
                $scope.message = $scope.i18n.clubs.delete_fail;
                $scope.isLoading = false;
            }
        });
    }

}]);

app.controller('ClubNotificationController', ['$scope', '$http', 'GroupService', function($scope, $http, GroupService) {
    $scope.getClubNotification = function() {
        $scope.NotificationFound = false;
        $scope.NotificationNotFound = false;
        opts = {};
        opts.user_id = APP.currentUser.id;
        GroupService.getAllClubNotifications(opts, function(data) {
            if(data.code == 101) {
                if(data.data.length != 0) {
                    $scope.notifications = data.data;
                    $scope.NotificationFound = true;
                } else {
                    $scope.NotificationNotFound = true;
                }
            } else {
                $scope.NotificationNotFound = true;
            }
        });
    };
    $scope.getClubNotification();
    $scope.acceptRequest = function(senderId, requestId, groupId, groupType, id) {
        $("#noti-"+id).fadeOut(1000);
        opts = {};
        opts.user_id = APP.currentUser.id;
        opts.request_id = requestId;
        opts.sender_id = senderId;
        opts.group_id = groupId;
        if(groupType == 1)
            opts.request_type = 'admin';
        else
            opts.request_type = 'user';
        opts.response = 1;
        GroupService.responseClubNotification(opts, function(data) {
            if(data.code == 101) { 
                $scope.getClubNotification();
            } else {

            }
        });
    };

    $scope.rejectRequest = function(senderId, requestId, groupId, groupType, id) { 
        $("#noti-"+id).fadeOut(1000);
        opts = {};
        opts.user_id = APP.currentUser.id;
        opts.request_id = requestId;
        opts.sender_id = senderId;
        opts.group_id = groupId;
        if(groupType == 1)
            opts.request_type = 'admin';
        else
            opts.request_type = 'user';
        opts.response = 2;
        GroupService.responseClubNotification(opts, function(data) {
            if(data.code == 101) { 
                $scope.getClubNotification();
            } else {

            }
        });
    };
}]);

app.controller('ClubSpecificationNotification', ['$scope', '$http', '$routeParams', 'GroupService', function($scope, $http, $routeParams, GroupService) {
    $scope.getClubNotification = function() { 
        $scope.NotificationFound = false;
        $scope.NotificationNotFound = false;
        opts = {};
        opts.user_id = APP.currentUser.id;
        opts.group_id = $routeParams.clubId;
        GroupService.getGroupNotifications(opts, function(data) {
            if(data.code == 101) {
                if(data.data.length != 0) {
                    $scope.notifications = data.data;
                    $scope.NotificationFound = true;
                } else {
                    $scope.NotificationNotFound = true;
                }
            } 
            else if(data.code == 500) {
                $scope.NotificationNotFound = true;
            }
            else {
                $scope.NotificationNotFound = true;
            }
        });
    };

    $scope.getClubNotification();
    $scope.acceptRequest = function(senderId, requestId, groupId, groupType, id) {
        $("#noti-"+id).fadeOut(1000);
        opts = {};
        opts.user_id = APP.currentUser.id;
        opts.request_id = requestId;
        opts.sender_id = senderId;
        opts.group_id = groupId;
        if(groupType == 1)
            opts.request_type = 'admin';
        else
            opts.request_type = 'user';
        opts.response = 1;
        GroupService.responseClubNotification(opts, function(data) {
            if(data.code == 101) { 
                $scope.getClubNotification();
            } else {

            }
        });
    };

    $scope.rejectRequest = function(senderId, requestId, groupId, groupType, id) { 
        $("#noti-"+id).fadeOut(1000);
        opts = {};
        opts.user_id = APP.currentUser.id;
        opts.request_id = requestId;
        opts.sender_id = senderId;
        opts.group_id = groupId;
        if(groupType == 1)
            opts.request_type = 'admin';
        else
            opts.request_type = 'user';
        opts.response = 2;
        GroupService.responseClubNotification(opts, function(data) {
            if(data.code == 101) { 
                $scope.getClubNotification();
            } else {

            }
        });
    };
}]);

app.controller('MyClubController', ['$scope', '$http', 'GroupService', '$location', '$timeout', 'ProfileService' ,'$modal', '$log', 'focus', function($scope, $http, GroupService ,$location ,$timeout ,ProfileService ,$modal, $log, focus) {
    $scope.groupTypes = APP.groupTypes;
    $scope.createGroupData = {};
    $scope.userGroupList = [];
    $scope.noContent = false; 
    $scope.groupMyClubActive = 'current';
    $scope.groupInvitActive = '';
    $scope.isLoading = true;
    $scope.myFile = [];
    $scope.myReqRes = 1;
    $scope.totalSize = 0;
    $scope.myClubList = [];
    $scope.getMyClub = function(){
        $scope.groupMyClubActive = 'current';
        $scope.groupPublicActive = '';
        var formData = {};
        var limit_start = $scope.userGroupList.length;
        formData.user_id = APP.currentUser.id;
        formData.group_owner_id = APP.currentUser.id;
        formData.limit_start = limit_start;
        formData.limit_size = APP.group_pagination.end;
        //$scope.myClubList = [];
        //calling the services to get the group list
        if((($scope.totalSize > limit_start)  || $scope.totalSize == 0 ) && $scope.myReqRes == 1){
            $scope.myReqRes = 0;
            $scope.isLoading = true;
            GroupService.getUserGroups(formData, function(data){
                if(data.code == 101) {
                    $scope.userGroupList = $scope.myClubList = $scope.myClubList.concat(data.data.groups);
                    $scope.isLoading = false;
                    $scope.myReqRes = 1;
                    $scope.totalSize = data.data.size;
                    if($scope.userGroupList.length == 0){
                        $scope.noContent = true;
                    }
                } else {
                    $scope.myReqRes = 1;
                    $scope.isLoading = false;
                } 
            });
        }
    };

    $scope.loadMore = function() {
        $scope.getMyClub();
    } 

    $scope.clubFormSubmitted = false;
    $scope.createGroup = function() {
        $scope.clubFormSubmitted = true;
        var opts = {};
        $scope.createGroupError = false;
        $scope.createGroupStart = true;
        var groupStatusIdx = $scope.createGroupData.groupTypeID;
        var groupStatusData = $scope.groupTypes[groupStatusIdx];
        opts.user_id = APP.currentUser.id;

        if($scope.createGroupData.name === undefined || $scope.createGroupData.name === '') {
            $scope.createGroupStart = false;
            $scope.createGroupError = true;
            $scope.createClub.clubname.$dirty = true;
            $scope.createClub.clubname.$invalid = true;
            $scope.createClub.clubname.$error.required = true;
            focus('clubname');   
            return false;
        } else if(groupStatusData.groupTypeID === undefined || groupStatusData.groupTypeID == '') {
            $scope.createGroupStart = false;
            $scope.createGroupError = true;
            $scope.createClub.clubstatus.$dirty = true;
            $scope.createClub.clubstatus.$invalid = true;
            $scope.createClub.clubstatus.$error.required = true;
            focus('clubstatus'); 
            return false;
        } else if($scope.createGroupData.description === undefined || $scope.createGroupData.description === '') {
            $scope.createGroupStart = false;
            $scope.createGroupError = true;
            $scope.createClub.clubdescription.$dirty = true;
            $scope.createClub.clubdescription.$invalid = true;
            $scope.createClub.clubdescription.$error.required = true;
            focus('clubdescription'); 
            return false;
        }
        opts.group_name = $scope.createGroupData.name;
        opts.group_status = groupStatusData.groupTypeID;
        opts.group_description = $scope.createGroupData.description;
        opts.group_media = '';

        //to make by default public group
        if(opts.group_status == 0) {
            opts.group_status = 1;
        }
        
        GroupService.createGroup(opts, $scope.myFile, function(data){
            if(data.code == 101) {
                $location.path('/club/view/' + data.data.group_id + '/' + data.data.group_status);      
              //  $scope.createGroupStart = false;
              //  $scope.createGroupData = {};
              //  $scope.createGroupToggleTag = true;
              // $scope.getMyClub();
            } else {
                $scope.createGroupStart = false;
                $scope.createGroupError = true;
            }
        });      
    };

    //function to show two layout listing for the group
    $scope.listActive = 'active';
    $scope.changeView = function(layout){
        if(layout == 'grid'){
            $scope.gridActive = 'active'; 
            $scope.listActive = ''; 
        } else if(layout == 'list'){
            $scope.listActive = 'active'; 
            $scope.gridActive = '';
        }
    };

    //function to delete a user group
    $scope.deleteGroup = function(idx){ 
        var formData = {};
        $scope.isLoading = true;
        var groupData = $scope.userGroupList[idx];
        
        formData.user_id = APP.currentUser.id;
        formData.group_owner_id = groupData.owner_id;
        formData.group_id = groupData.group_id;
        // calling the services to delete the group
        GroupService.deleteGroup(formData, function(data){
            if(data.code == 101) {
                $scope.message = $scope.i18n.clubs.delete_success;
                $scope.userGroupList.splice(idx, 1);
                $timeout(function(){
                $scope.message ='';
                 }, 15000);
                $scope.isLoading = false;
            } else {
                $scope.message = $scope.i18n.clubs.delete_fail;
                $scope.isLoading = false;
            }
        });
    }

    $scope.createGroupToggleTag = true;
    $scope.createGroupStart = false;
    $scope.createGroupToggle = function() {
        $scope.createGroupData.groupTypeID = 0;
        $scope.createGroupToggleTag = $scope.createGroupToggleTag === false ? true : false; 
    };

    $scope.cancelCreateGroupToggle = function() {
        $scope.createGroupData = {};
        $scope.files = '';
        $scope.myFile = '';
        $scope.imageSrc = '';
        $scope.createGroupToggle();
    };
     // code for rating in listing of club
        $scope.averageRating = function(rating){
            return new Array(Math.ceil(rating));
        };

        $scope.blankStar = function(rating){
            if((5-Math.ceil(rating)) > 0){
                return new Array(5-Math.ceil(rating));
            }else{
                return 0;
            }
        };
        $scope.findPeople = function(id, type, count_Vote){
            if(count_Vote === 0 ){
                return false;
            }
            var opts = {};
            $scope.ratedUsers = {};
            $scope.showPeopleLoader = true;

            var modalInstance = $modal.open({
                        templateUrl: 'app/views/find_people.html',
                        controller: 'ModalController',
                        size: 'lg',
                        scope: $scope,
            });
            opts.type = type;
            opts.type_id = id;
            opts.session_id = APP.currentUser.id;
            ProfileService.findPeople(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.showPeopleLoader = false;
                    $scope.ratedUsers = data.data.users_rated;
                    if(data.data.users_rated.length == 0){
                        $scope.message = $scope.i18n.dashboard.no_vote;
                    }
                }else{
                    $scope.showPeopleLoader = false;
                }
            });
            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
        };   
    // Code end for rating in listing of club

}]);
app.controller('GroupDetailController', ['$scope', '$http', '$rootScope', '$location', '$routeParams', '$interval', '$window', 'GroupService', 'ProfileService', 'fileReader', '$timeout','$modal', '$log', 'focus', function ($scope, $http, $rootScope, $location, $routeParams, $interval, $window, GroupService, ProfileService, fileReader, $timeout ,$modal ,$log, focus) {

    $scope.friend_id = 0;
    $scope.listMember =[];
    $scope.UserName = APP.currentUser.username;
    //$rootScope.clubCoverActive = 'about';
    var str1 = $location.path().replace("/", "");
    var str = str1.split('/');
    var activeUrl = str[0]+"/"+str[1];
    switch(activeUrl) {
        case 'album/club' :  
        $rootScope.clubCoverActive = 'photos'; break;
        default : 
        $rootScope.clubCoverActive = 'about';
    }
    $scope.removeClb = true;
    $scope.rmClub = true;
    $scope.clubsection = true;

    $scope.$on('updateClubProfileCover', function(event, imgData) { 
        $scope.groupDetail.profile_img_cover = imgData.cover;
        $scope.groupDetail.profile_img_original = imgData.original;
        $scope.groupDetail.media_id = imgData.media_id;
        $scope.coverLoadHide = false;
        $scope.fileUrl = "";
        $timeout(function(){
            $scope.repositionImage();
        },50);
     });

    //remove club
    $scope.removeClub = function() {    
        $scope.clubloader = true;  
        $scope.rmClub = false;      
        var groupId = $routeParams.clubId;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.club_id = groupId;
        GroupService.unjoinclubs(opts, function(data) {
            if( data.code == 101) { 
                $scope.successClub = true;  
                $scope.clubloader = false;  
                $scope.rmClub = false;  
                $timeout(function(){
                     $scope.clubsection = false;   
                    }, 3000);
                
            } else {
                $scope.clubloader = false;  
                $scope.rmClub = false;  
            }
        });
    }

    $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
        $scope.windowHeight = newValue.h;
        $scope.windowWidth = newValue.w;
        if($scope.windowWidth <= '780'){
            if($rootScope.mobileView == true){
                $timeout(function(){
                    $scope.resizeClubMediaCoordinate();
                },1000);
            }else{
                $rootScope.mobileView = true; //declare in main controller           
            }
        } else {
            $rootScope.mobileView = false; //declare in main controller
        }
    }, true);

    var img = new Image();
    $scope.mobileShopX_Cord = 0;
    $scope.mobileShopY_Cord = 0;
    $scope.resizeClubMediaCoordinate = function(){
        if($scope.groupDetail != undefined){
            img = null;
            img = new Image();
            img.src = $scope.groupDetail.profile_img_cover;
            if($scope.windowWidth <= '480'){
                img.onload = function(){
                    if(img.width <= 910){
                        if( $scope.groupDetail.y_cord != ""){
                            if( $scope.groupDetail.y_cord > 100){
                                $scope.mobileClubY_Cord =  $scope.groupDetail.y_cord / 3;
                            }else{
                                $scope.mobileClubY_Cord =  $scope.groupDetail.y_cord / 4;
                            }
                            $scope.mobileClubX_Cord = 0;
                        }else{
                            $scope.groupDetail.x_cord = 0;
                            $scope.groupDetail.y_cord = 0;
                            $scope.mobileClubX_Cord = 0;
                            $scope.mobileClubY_Cord = 0;
                        }
                    }else if(img.width > 910 && img.width <= 1300){
                        if( $scope.groupDetail.x_cord != ""){
                            if( $scope.groupDetail.x_cord > 100){
                                $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 4;
                            }else{
                                $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 5;
                            }
                            $scope.mobileClubY_Cord = 0;
                        }else{
                            $scope.groupDetail.x_cord = 0;
                            $scope.groupDetail.y_cord = 0;
                            $scope.mobileClubX_Cord = 0;
                            $scope.mobileClubY_Cord = 0;
                        }
                    }else if(img.width > 1300 ){
                        if( $scope.groupDetail.x_cord != ""){
                            if( $scope.groupDetail.x_cord > 100){
                                $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 5;
                            }else{
                                $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 6;
                            }
                            $scope.mobileClubY_Cord = 0;
                        }else{
                            $scope.groupDetail.x_cord = 0;
                            $scope.groupDetail.y_cord = 0;
                            $scope.mobileClubX_Cord = 0;
                            $scope.mobileClubY_Cord = 0;
                        }
                    }
                }
            }else if($scope.windowWidth > '480' && $scope.windowWidth < '650'){
                img.onload = function(){
                    if(img.width <= 910){
                        if( $scope.groupDetail.y_cord != ""){
                            if( $scope.groupDetail.y_cord > 100){
                                $scope.mobileClubY_Cord =  $scope.groupDetail.y_cord / 1.8;
                            }else{
                                $scope.mobileClubY_Cord =  $scope.groupDetail.y_cord / 2;
                            }
                            $scope.mobileClubX_Cord = 0;
                        }else{
                            $scope.groupDetail.x_cord = 0;
                            $scope.groupDetail.y_cord = 0;
                            $scope.mobileClubX_Cord = 0;
                            $scope.mobileClubY_Cord = 0;
                        }
                    }else if(img.width > 910 && img.width <= 1300){
                        if( $scope.groupDetail.x_cord != ""){
                            if( $scope.groupDetail.x_cord > 100){
                                $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 2.00;
                            }else{
                                $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 2.20;
                            }
                            $scope.mobileClubY_Cord = 0;
                        }else{
                            $scope.groupDetail.x_cord = 0;
                            $scope.groupDetail.y_cord = 0;
                            $scope.mobileClubX_Cord = 0;
                            $scope.mobileClubY_Cord = 0;
                        }
                    }else if(img.width > 1300){
                        if( $scope.groupDetail.x_cord != ""){
                            if( $scope.groupDetail.x_cord > 100){
                                $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 2.80;
                            }else{
                                $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 3.00;
                            }
                            $scope.mobileClubY_Cord = 0;
                        }else{
                            $scope.groupDetail.x_cord = 0;
                            $scope.groupDetail.y_cord = 0;
                            $scope.mobileClubX_Cord = 0;
                            $scope.mobileClubY_Cord = 0;
                        }
                    }
                }
            }
        }
    };
    $scope.displayGroupDetail = function() {
		$scope.groupTypes = APP.groupTypes;
		$scope.groupDetailLoading = false;
		$scope.showAllMembers = false;
		$scope.editGroupStatus = false;
		$scope.editGroupObject = {};
		var groupId = $routeParams.clubId;
        var groupStatus = $routeParams.clubType;
        //alert("top id"+groupId + " type="+groupStatus);
		$scope.groupViewLoader = true;
		opts = {};
		opts.user_id = APP.currentUser.id;
		opts.group_id = groupId; 
		opts.group_status = groupStatus;
        $scope.listMember =[];
		GroupService.getGroupDetail(opts, function(data) {
			$scope.groupViewLoader = false;
			if( data.code == 101) {
                $scope.groupDetail = data.data;
                if(data.data.owner_id !== APP.currentUser.id){
                    angular.element('#checkUser').css('display','none');
                }
                $scope.editGroupObject = $scope.groupDetail;
				$scope.groupDetailLoading = true;
                $scope.listMember = data.data.members;
                $scope.allMemberTotal = data.data.members.length;
                if($rootScope.mobileView == true){
                        img = null;
                        img = new Image();
                        img.src = $scope.groupDetail.profile_img_cover;
                        if($scope.windowWidth <= '480'){
                            img.onload = function(){
                                if(img.width <= 910){
                                    if( $scope.groupDetail.y_cord != ""){
                                        if( $scope.groupDetail.y_cord > 100){
                                            $scope.mobileClubY_Cord =  $scope.groupDetail.y_cord / 3;
                                        }else{
                                            $scope.mobileClubY_Cord =  $scope.groupDetail.y_cord / 4;
                                        }
                                        $scope.mobileClubX_Cord = 0;
                                    }else{
                                        $scope.groupDetail.x_cord = 0;
                                        $scope.groupDetail.y_cord = 0;
                                        $scope.mobileClubX_Cord = 0;
                                        $scope.mobileClubY_Cord = 0;
                                    }
                                }else if(img.width > 910 && img.width <= 1300){
                                    if( $scope.groupDetail.x_cord != ""){
                                        if( $scope.groupDetail.x_cord > 100){
                                            $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 4;
                                        }else{
                                            $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 5;
                                        }
                                        $scope.mobileClubY_Cord = 0;
                                    }else{
                                        $scope.groupDetail.x_cord = 0;
                                        $scope.groupDetail.y_cord = 0;
                                        $scope.mobileClubX_Cord = 0;
                                        $scope.mobileClubY_Cord = 0;
                                    }
                                }else if(img.width > 1300 ){
                                    if( $scope.groupDetail.x_cord != ""){
                                        if( $scope.groupDetail.x_cord > 100){
                                            $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 5;
                                        }else{
                                            $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 6;
                                        }
                                        $scope.mobileClubY_Cord = 0;
                                    }else{
                                        $scope.groupDetail.x_cord = 0;
                                        $scope.groupDetail.y_cord = 0;
                                        $scope.mobileClubX_Cord = 0;
                                        $scope.mobileClubY_Cord = 0;
                                    }
                                }
                            }
                        }else if($scope.windowWidth > '480' && $scope.windowWidth < '650'){
                            img.onload = function(){
                                if(img.width <= 910){
                                    if( $scope.groupDetail.y_cord != ""){
                                        if( $scope.groupDetail.y_cord > 100){
                                            $scope.mobileClubY_Cord =  $scope.groupDetail.y_cord / 1.80;
                                        }else{
                                            $scope.mobileClubY_Cord =  $scope.groupDetail.y_cord / 2;
                                        }
                                        $scope.mobileClubX_Cord = 0;
                                    }else{
                                        $scope.groupDetail.x_cord = 0;
                                        $scope.groupDetail.y_cord = 0;
                                        $scope.mobileClubX_Cord = 0;
                                        $scope.mobileClubY_Cord = 0;
                                    }
                                }else if(img.width > 910 && img.width <= 1300){
                                    if( $scope.groupDetail.x_cord != ""){
                                        if( $scope.groupDetail.x_cord > 100){
                                            $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 2.00;
                                        }else{
                                            $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 2.20;
                                        }
                                        $scope.mobileClubY_Cord = 0;
                                    }else{
                                        $scope.groupDetail.x_cord = 0;
                                        $scope.groupDetail.y_cord = 0;
                                        $scope.mobileClubX_Cord = 0;
                                        $scope.mobileClubY_Cord = 0;
                                    }
                                }else if(img.width > 1300 ){
                                    if( $scope.groupDetail.x_cord != ""){
                                        if( $scope.groupDetail.x_cord > 100){
                                            $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 2.60;
                                        }else{
                                            $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 3.00;
                                        }
                                        $scope.mobileClubY_Cord = 0;
                                    }else{
                                        $scope.groupDetail.x_cord = 0;
                                        $scope.groupDetail.y_cord = 0;
                                        $scope.mobileClubX_Cord = 0;
                                        $scope.mobileClubY_Cord = 0;
                                    }
                                }
                            }
                        }
                }
                $scope.canPost = false; 
                if(data.data.role != 21){
                   $scope.canPost = true; 
                } 
                if(data.data.owner_id == APP.currentUser.id) {
                   $scope.uploadButton = true;
                } else {
                    $scope.uploadButton = false; 
                }
 
            } else {

			}
		});
	}
    $scope.deleteMember = function(idx){ 
        var opts = {};
        var groupId = $routeParams.clubId;
        var memberData = $scope.listMember[idx];
        opts.owner_id = APP.currentUser.id;
        opts.member_id = memberData.id;
        opts.club_id = groupId;
        opts.session_id = APP.currentUser.id;
        GroupService.deleteClubMember(opts, function(data){
            if(data.code == 101) {
                $scope.memberMessage = $scope.i18n.clubs.member_success;
                $scope.msgClass = 'text-success text-center display-block-inline';
                $timeout(function(){
                    $scope.memberMessage ='';
                }, 10000);
                $scope.listMember.splice(idx, 1);
            } else if(data.code == 100) {
                $scope.memberMessage = $scope.i18n.validation.missed_param;
                $scope.msgClass = 'login-error text-red text-center display-block-inline';
                $timeout(function(){
                    $scope.memberMessage = '';
                }, 10000);
            } else if(data.code == 78) {
                $scope.memberMessage = $scope.i18n.clubs.member_club;
                $scope.msgClass = 'login-error text-red text-center display-block-inline';
                $timeout(function(){
                    $scope.memberMessage = '';
                }, 10000);
            } else if(data.code == 79) {
                $scope.memberMessage = $scope.i18n.clubs.member_owner;
                $scope.msgClass = 'login-error text-red text-center display-block-inline';
                $timeout(function(){
                    $scope.memberMessage = '';
                }, 10000);
            } else if(data.code == 85) {
                $scope.memberMessage = $scope.i18n.clubs.member_account;
                $scope.msgClass = 'login-error text-red text-center display-block-inline';
                $timeout(function(){
                    $scope.memberMessage = '';
                }, 10000);
             } else if(data.code == 80) {
                $scope.memberMessage = $scope.i18n.clubs.member_owner_delete;
                $scope.msgClass = 'login-error text-red text-center display-block-inline';
                $timeout(function(){
                    $scope.memberMessage = '';
                }, 10000);
            }
        });
    };
	$scope.displayGroupDetail();
    $scope.aboutsection = true;
    $scope.showInvite = false;
    $scope.toggleInvite = function(){
        $rootScope.clubCoverActive = 'invite';
        $scope.showInvite = !$scope.showInvite;
        $scope.showRole = false;
         $scope.aboutclub = false;
         $scope.showMember = false;
         $scope.aboutsection = true;
         $scope.albumshow = false;
        $scope.invite.userAddress = "";
    }
    // function for about of club //
     $scope.aboutclub = false;
    $scope.aboutClub = function(id){
        $rootScope.clubCoverActive = 'about';
        $scope.showRole = false;
        $scope.showInvite = false;
         $scope.showMember = false;
         $scope.aboutsection = true;
        $location.path('/club/view/'+id+'/'+$routeParams.clubType);
       // $scope.invite.userAddress = "";
    }
    $scope.showRole = false;
    $scope.toggleRole = function(){
        $rootScope.clubCoverActive = 'changerole';
        $scope.aboutclub = false;
        $scope.showRole = !$scope.showRole;
        $scope.showInvite = false;
         $scope.showMember = false;
         $scope.aboutsection = true;
         $scope.albumshow = false;
    }
         $scope.showMember = false;
         $scope.albumshow = true;
    $scope.toggleMember = function(){
        $rootScope.clubCoverActive = 'member';
        $scope.showMember = true;
        $scope.showRole = false;
         $scope.aboutclub = false;
         $scope.showInvite = false;
         $scope.aboutsection = false;
         $scope.albumshow = false;
        $scope.invite.userAddress = "";
    }

    $scope.togglePhotos = function(){
        $rootScope.clubCoverActive = 'photos';
        $scope.albumshow = true;
        $scope.showRole = false;
         $scope.aboutclub = false;
         $scope.showInvite = false;
         $scope.aboutsection = false;
         $scope.showMember = false;
        $scope.invite.userAddress = "";
    }
    $scope.hideRoleInvite = function(){
        $scope.showRole = false;
        $scope.showInvite = false;
    }

    $scope.assignRoleToGroup = function(groupId){
        var opts = {};
        $scope.ChangeRoleError = false;
        if($scope.role.member === null || $scope.role.member === undefined || $scope.role.member.id == '') {
            $scope.changeroleErrorMsg = $scope.i18n.clubs.cover.select_member;
            $scope.ChangeRoleError = true;
            $timeout(function(){
            $scope.changeroleErrorMsg = '';
                }, 5000);
            return false;
        }
        if($scope.role.selectedRole === undefined || $scope.role.selectedRole == '') {
            $scope.changeroleErrorMsg = $scope.i18n.groupcontrol.enter_role;
            $scope.ChangeRoleError = true;
            $timeout(function(){
            $scope.changeroleErrorMsg = '';
                }, 5000);
            return false;
        }
        opts.user_id = APP.currentUser.id;
        opts.friend_id = $scope.role.member.id;
        opts.acl_access = $scope.role.selectedRole;
        opts.group_id = groupId;
        GroupService.assignRoleToGroup(opts, function(data) {
            if( data.code == 101) {
                $scope.ChangeRoleMessage = "Role changed successfully";
                $timeout(function(){
                $scope.ChangeRoleMessage = '';
                }, 10000);
            } else {
                $scope.Message = data.message;
                $timeout(function(){
                $scope.changeroleErrorMsg = '';
                }, 10000);
            }
        });
    }


    $scope.requestMessage = "";
    $scope.showMessage = true;
    $scope.joinPublicGroups =function(groupId){
        $(".join-club-request").hide();
        $("#groupjoing"+groupId).hide();
        $("#joinloader"+groupId).show();
        $scope.requestMessage = "";
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.group_id = groupId;
        GroupService.joinPublicGroup(opts, function(data){
            if(data.code == 101) {
                $("#requestsent"+groupId).show();
                $(".join-club-request-sent").show();
                $("#joinloader"+groupId).hide();
                //$timeout(function(){
                //$("#requestsent"+groupId).hide();
                //}, 10000);
            } else if(data.code == 118){
                $("#requestpending"+groupId).show();
                $("#joinloader"+groupId).hide();
                $timeout(function(){
                $("#requestpending"+groupId).hide();
                }, 10000);
            }else {
                $(".join-club-request-sent").hide();
                $("#groupjoing"+groupId).show();
                $("#joinloader"+groupId).hide();
                $(".join-club-request").show();
            }
        });
    }

    $scope.invite = {};
    $scope.userList = [];
    $scope.cancelRequest = 0;
    $scope.showUserList = false;
    $scope.searchUser = function() {
        $scope.cancelRequest = 0;
        $scope.albloader = true;
        var opts = {};
        
        if($scope.invite.userAddress != ""){
            $scope.showUserList = true;
            
            opts.user_id = APP.currentUser.id;
            opts.friend_name = $scope.invite.userAddress;
            opts.limit_start = APP.user_list_pagination.start;
            opts.limit_size = APP.user_list_pagination.end; 
            ProfileService.searchUser(opts, function(data) {
                if( $scope.cancelRequest == 0 ){
                    $scope.userList = [];
                    if(data.code == 101) {
                        // angular.forEach(data.data.users,function(user) {
                        //     $scope.userList.push(user);
                        // })
                    if(data.data.count != 0 && (data.data.users.length != 0)){
                                     $scope.albloader = false;    
                                     $scope.userList = $scope.userList.concat(data.data.users); 
                                }else {
                                    $scope.showUserList = false;
                                 }    
                   
                    }else{
                        $scope.albloader = false;
                        //$scope.userList = [];
                        //$scope.showUserList = false;
                    }
                }else{
                    //$scope.userList = [];
                    //$scope.showUserList = false;
                }
            });
        }else{
                $scope.userList = [];
                $scope.userList.slice();
                $scope.cancelRequest = 1;
                $scope.showUserList = false;
        }
    };

   /* $scope.clearList = function(){
        stop = $interval(function() {
        $scope.cancelRequest = 1;
        $scope.showList = false;
        $scope.showUserList = false;
        }, 1000,1);
    }*/

    $('body').click(function() {
        stop = $interval(function() {
            $scope.cancelRequest = 1;
            $scope.showList = false;
            $scope.showUserList = false;
        }, 200,1);
    });

    $scope.setUser = function(firstName, lastName, userId){
        $scope.invite.userAddress = firstName + ' ' + lastName;
        $scope.friend_id = userId;
    }


    $scope.joinPrivateGroups = function(groupId){
        var opts = {};
         $scope.InviteUserError = false;
         $scope.showinvite = true;
         if($scope.friend_id === undefined || $scope.friend_id == '') {
            $scope.inviteuserErrorMsg = $scope.i18n.groupcontrol.enter_user;
            $scope.InviteUserError = true;
            $scope.showinvite = false;
            $timeout(function(){
            $scope.inviteuserErrorMsg = '';
                }, 6000);
            return false;
        }
        if($scope.invite.role === undefined || $scope.invite.role == '') {
            $scope.inviteuserErrorMsg = $scope.i18n.groupcontrol.enter_role;
            $scope.InviteUserError = true;
            $scope.showinvite = false;
            $timeout(function(){
            $scope.inviteuserErrorMsg = '';
                }, 6000);
            return false;
        }
        opts.user_id = APP.currentUser.id;
        opts.group_id = groupId;
        opts.friend_id = $scope.friend_id;
        opts.access_role = $scope.invite.role;
        
        GroupService.joinPrivateGroups(opts, function(data) {
            if(data.code == 101){
                $scope.Message = $scope.i18n.groupcontrol.join_group;
                $scope.showinvite = false;
                stop = $interval(function() {
                    $scope.showInvite = false;
                    $scope.Message='';
                    $scope.friend_id='';
                    $scope.invite.role='';
                }, 10000,1);
            }else if(data.code == 118){
                $scope.Message = $scope.i18n.groupcontrol.REQUEST_IS_PENDING_FOR_USER_APPROVAL;
                $scope.showinvite = false;
                stop = $interval(function() {
                    $scope.showInvite = false;
                    $scope.Message='';
                    $scope.invite.role='';
                    $scope.friend_id='';
                }, 10000,1);
            }else if(data.code == 117){
                $scope.Message = $scope.i18n.groupcontrol.Already_member;
                $scope.showinvite = false;
                stop = $interval(function() {
                    $scope.showInvite = false;
                    $scope.Message='';
                    $scope.invite.role='';
                    $scope.friend_id='';
                }, 10000,1);
            }
            else{
                $scope.Message = $scope.i18n.groupcontrol.permission_denied;
                $scope.showinvite = false;
                stop = $interval(function() {
                    $scope.Message='';
                    $scope.showInvite = false;
                }, 10000,1);
            }
        });
    }

	$scope.showGroupMembers = function() {
		$scope.showAllMembers = $scope.showAllMembers === false ? true : false;
	};

	$scope.editGroup = function() {
		$scope.editGroupObject.groupTypeID = $scope.editGroupObject.group_status;
		$scope.editGroupStatus = $scope.editGroupStatus === false ? true : false;
        $scope.files = '';
        $scope.myFile = '';
        $scope.imageSrc = '';
	};

    $scope.myFile = '';
    $scope.invalidCoverImage = false;
    /*$scope.invalidCoverImageMgs = $scope.i18n.groupcontrol.correct_file_size;*/
    $scope.getFile = function () {
        $scope.progress = 0;
        $scope.invalidCoverImageMgs = $scope.i18n.groupcontrol.correct_file_size;
        fileReader.readAsDataUrl($scope.file, $scope)
        .then(function(result) {
            $scope.myFile = $scope.file;
            $scope.readImage($scope.myFile, function(data){
                if(data.length != 0 && data.width >= 910 && data.height >= 400){
                    $scope.uploadClubCover(); 
                }
                else { 
                    $("#invalidCoverImage").show();
                    $timeout(function(){
                        $("#invalidCoverImage").hide();
                    }, 2000);
                }
            });
            
        });
    };

    //function to check upload image dimenstions
    $scope.readImage = function(file, callback) {
        var reader = new FileReader();
        var image  = new Image();
        reader.readAsDataURL(file);  
        reader.onload = function(_file) {
            var filedata = {};
            image.src    = _file.target.result;
            image.onload = function() {
                var w = this.width,
                    h = this.height,
                    t = file.type,                     
                    n = file.name,
                    s = ~~(file.size/1024) +'KB';
                    filedata['width'] = w;
                    filedata['height'] = h;
                    callback(filedata);
            };
            image.onerror= function() {
                callback(filedata);
            };      
        };

    };
    
    $scope.clubEditSUbmitted = false;
    $scope.updateGroup = function() {
        $scope.createGroupError = false;
        $scope.clubEditSUbmitted = true;
        var groupStatusIdx = $scope.editGroupObject.groupTypeID;
        var groupStatusData = $scope.groupTypes[groupStatusIdx];
        if($scope.editGroupObject.title === undefined || $scope.editGroupObject.title === '') {
            $scope.clubEditForm.editclubname.$dirty = true;
            $scope.clubEditForm.editclubname.$invalid = true;
            $scope.clubEditForm.editclubname.$error.required = true;
            focus('editclubname');   
            return false;
        } else if($scope.editGroupObject.groupTypeID === 0 || $scope.editGroupObject.groupTypeID === '') {
            $scope.clubEditForm.editclubstatus.$dirty = true;
            $scope.clubEditForm.editclubstatus.$invalid = true;
            $scope.clubEditForm.editclubstatus.$error.required = true;
            focus('editclubstatus');   
            return false;
        }else if($scope.editGroupObject.description === undefined || $scope.editGroupObject.description == '') {
            $scope.clubEditForm.editclubdesc.$dirty = true;
            $scope.clubEditForm.editclubdesc.$invalid = true;
            $scope.clubEditForm.editclubdesc.$error.required = true;
            focus('editclubdesc');   
            return false;
        } else {
            $scope.createGroupStart = true;
            opts.user_id = APP.currentUser.id;
            if($scope.editGroupObject.owner_id == APP.currentUser.id) {
            	opts.group_owner_id = $scope.editGroupObject.owner_id;
            }
            opts.group_id = $scope.editGroupObject.id;
            opts.group_name = $scope.editGroupObject.title;
            opts.group_status = groupStatusData.groupTypeID;
            opts.group_description = $scope.editGroupObject.description;

            if($scope.editGroupObject.title === undefined || $scope.myFile === undefined) {
                //$scope.createGroupStart = false;
                //return false;
            }

            //to make by default public group
            if(opts.group_status == 0) {
                opts.group_status = 1;
            }
            opts.group_media = '';
            GroupService.updateGroup(opts, $scope.myFile, function(data){
                if(data.code == 101) {
                    $scope.createGroupStart = false;
                    $scope.editGroupObject = {};
                    $scope.myFile = undefined;
                    $scope.editGroup();
                    $scope.displayGroupDetail();
                } else {
                    $scope.createGroupStart = false;
                    $scope.createGroupError = true;
                }
            });
        }
    };

    $scope.newImage = false;
    $scope.uploadClubCover = function() {
        $scope.showCoverOption = false; 
        $scope.coverImageUploadStart = true;
        var opts = {};
        opts.group_id = $routeParams.clubId;
        opts.session_id = APP.currentUser.id;
        //Allow some images types for uploading
        if ($scope.myFile !== undefined ) {
            var imageType = $scope.myFile['name'].substring($scope.myFile['name'].lastIndexOf(".") + 1);
            // Checking Extension
            if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
                $scope.createGroupErrorMsg = $scope.i18n.groupcontrol.upload_media;
                return false;
            }
        }
        $scope.fileUrl = null;
        GroupService.uploadClubCover(opts, $scope.myFile, function(data){
            if(data.code == 101) {
                $scope.newImage = true;
                $scope.groupDetail.profile_img_cover = data.data.cover_thumb_image_path;
                $scope.groupDetail.profile_img_original = data.data.profile_img_original;
                $scope.coverImageUploadStart = false;
                $scope.fileUrl = data.data.cover_thumb_image_path;
                $scope.groupDetail.media_id =  data.data.media_id;
                $scope.showCanves = true;
                $scope.coverLoadHide = true;

            } else {
                $scope.coverImageUploadStart = false;
            }
        });
    };
    $scope.imageCropResult = null;
    $scope.imageCropResult2 = null;
    $scope.imageWidth = null;
    $scope.imageHeight = null;
    $scope.showImageCropper = false;
    $scope.showImageCropper2 = false;
    $scope.imageString = "";
    $scope.file ={};
    $scope.coverLoadHide = false;
    $scope.$watch('imageCropResult2', function(newVal) {
        if (newVal) {
            console.log('imageCropResult2', newVal);
        }
    });

    $scope.imageXPosition = 0;
    $scope.imageYPosition = 0;
    $scope.setImageCordinate = function(){
        $scope.groupDetail.x_cord = $rootScope.club.x_cord * -1;
        $scope.groupDetail.y_cord = $rootScope.club.y_cord * -1;
        $scope.saveCordinate();
    };

    $rootScope.club = {};
    $scope.showCanves = false;
    $scope.repositionImage = function(){
        $scope.showCanves = true;
        $scope.fileUrl =  $scope.groupDetail.profile_img_cover;
        if($scope.groupDetail.x_cord == 'NaN'){
            $scope.imageXPosition = 0;
            $scope.imageYPosition = 0;
            $scope.coverLoadHide = true;
        }else{
            $scope.imageXPosition = $scope.groupDetail.x_cord * -1;
            $scope.imageYPosition =  $scope.groupDetail.y_cord * -1;
            $scope.coverLoadHide = true;
        }
    };

    $scope.saveCordinate = function(){
        /*$scope.groupDetail.x_cord = $scope.imageXPosition * -1;
        $scope.groupDetail.y_cord = $scope.imageYPosition * -1;*/
        //$scope.coverLoadHide = false;
        $scope.hideUpdateCoverButton = true;
        $scope.showCanves = false;
        var opts = {};
        opts.media_id = $scope.groupDetail.media_id; 
        opts.session_id = APP.currentUser.id;   
        opts.x = ""+($scope.groupDetail.x_cord )+"";
        opts.y = ""+($scope.groupDetail.y_cord)+"";
        GroupService.setClubMediaCoordinate(opts,function(data){
            if(data.code == 101 && data.message == "SUCCESS"){
                $scope.groupDetail.x_cord = data.data.x_cord ;
                $scope.groupDetail.y_cord = data.data.y_cord ;
                $scope.coverLoadHide = false;
                $scope.file = null;
                $scope.fileUrl = null;
                $scope.hideUpdateCoverButton = false;
                $scope.showCanves = false;
                if($rootScope.mobileView == true){
                    img = null;
                    img = new Image();
                    img.src = $scope.groupDetail.profile_img_cover;
                    if($scope.windowWidth <= '480'){
                        img.onload = function(){
                            if(img.width <= 910){
                                if( $scope.groupDetail.y_cord != ""){
                                    if( $scope.groupDetail.y_cord > 100){
                                        $scope.mobileClubY_Cord =  $scope.groupDetail.y_cord / 3;
                                    }else{
                                        $scope.mobileClubY_Cord =  $scope.groupDetail.y_cord / 4;
                                    }
                                    $scope.mobileClubX_Cord = 0;
                                }else{
                                    $scope.groupDetail.x_cord = 0;
                                    $scope.groupDetail.y_cord = 0;
                                    $scope.mobileClubX_Cord = 0;
                                    $scope.mobileClubY_Cord = 0;
                                }
                            }else if(img.width > 910 && img.width <= 1300){
                                if( $scope.groupDetail.x_cord != ""){
                                    if( $scope.groupDetail.x_cord > 100){
                                        $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 4;
                                    }else{
                                        $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 5;
                                    }
                                    $scope.mobileClubY_Cord = 0;
                                }else{
                                    $scope.groupDetail.x_cord = 0;
                                    $scope.groupDetail.y_cord = 0;
                                    $scope.mobileClubX_Cord = 0;
                                    $scope.mobileClubY_Cord = 0;
                                }
                            }else if(img.width > 1300 ){
                                if( $scope.groupDetail.x_cord != ""){
                                    if( $scope.groupDetail.x_cord > 100){
                                        $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 5;
                                    }else{
                                        $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 6;
                                    }
                                    $scope.mobileClubY_Cord = 0;
                                }else{
                                    $scope.groupDetail.x_cord = 0;
                                    $scope.groupDetail.y_cord = 0;
                                    $scope.mobileClubX_Cord = 0;
                                    $scope.mobileClubY_Cord = 0;
                                }
                            }
                        }
                    }else if($scope.windowWidth > '480' && $scope.windowWidth < '650'){
                        img.onload = function(){
                            if(img.width <= 910){
                                if( $scope.groupDetail.y_cord != ""){
                                    if( $scope.groupDetail.y_cord > 100){
                                        $scope.mobileClubY_Cord =  $scope.groupDetail.y_cord / 1.80;
                                    }else{
                                        $scope.mobileClubY_Cord =  $scope.groupDetail.y_cord / 2;
                                    }
                                    $scope.mobileClubX_Cord = 0;
                                }else{
                                    $scope.groupDetail.x_cord = 0;
                                    $scope.groupDetail.y_cord = 0;
                                    $scope.mobileClubX_Cord = 0;
                                    $scope.mobileClubY_Cord = 0;
                                }
                            }else if(img.width > 910 && img.width <= 1300){
                                if( $scope.groupDetail.x_cord != ""){
                                    if( $scope.groupDetail.x_cord > 100){
                                        $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 2.00;
                                    }else{
                                        $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 2.20;
                                    }
                                    $scope.mobileClubY_Cord = 0;
                                }else{
                                    $scope.groupDetail.x_cord = 0;
                                    $scope.groupDetail.y_cord = 0;
                                    $scope.mobileClubX_Cord = 0;
                                    $scope.mobileClubY_Cord = 0;
                                }
                            }else if(img.width > 1300 ){
                                if( $scope.groupDetail.x_cord != ""){
                                    if( $scope.groupDetail.x_cord > 100){
                                        $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 2.60;
                                    }else{
                                        $scope.mobileClubX_Cord = $scope.groupDetail.x_cord / 3.00;
                                    }
                                    $scope.mobileClubY_Cord = 0;
                                }else{
                                    $scope.groupDetail.x_cord = 0;
                                    $scope.groupDetail.y_cord = 0;
                                    $scope.mobileClubX_Cord = 0;
                                    $scope.mobileClubY_Cord = 0;
                                }
                            }
                        }
                    }
                }
            }
        });
    };

    $scope.showcrossactive = true;
    $scope.showcrossactive1 = function(){
        $scope.showcrossactive = false;
    };

    $scope.showCoverOption = false;
    $scope.showCoverDropDown = function($event){
        $scope.showCoverOption = !$scope.showCoverOption;
        $event.stopPropagation();
    };

    window.onclick = function() {
        $timeout(function(){
            if ($scope.showCoverOption) {
                $scope.showCoverOption = false;
                $scope.$apply();
            }
        },100)
        
    };


    //// start code for club rating /////
     //calling function to load postlist

        $scope.averageVoting = 0;
        $scope.vote_count = 0;
        $scope.waitRateResponse = false;
        $scope.ratePost = function(rating, post_id){
            var update = "";
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "club";
            opts.type_id = post_id;
            opts.rate = rating;
            $scope.waitRateResponse = true;
            if($scope.groupDetail.is_rated){
                update = "update";
            }else{
                update = "add";
            }
            waitRequest = ProfileService.rateThis(opts, update, function(data){
                if(data.code === 101 && data.message === "SUCCESS"){
                    $scope.groupDetail.avg_rate = data.data.avg_rate;
                    $scope.groupDetail.no_of_votes = data.data.no_of_votes;
                    $scope.groupDetail.is_rated = true;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    //$scope.userPostList[index].avg_rate = 0;
                    //$scope.userPostList[index].no_of_votes = 0;
                    $scope.groupDetail.is_rated = false;
                    $scope.groupDetail.current_user_rate = 0;
                }
                $scope.waitRateResponse = false;
            });
        };

        $scope.WaitDeleteResponse = false;
        $scope.removeRating = function(post_id, postIndx){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "club";
            opts.type_id = post_id;
            if($scope.WaitDeleteResponse === false){
                $scope.WaitDeleteResponse = true;
                $scope.waitRateResponse = true;
            }else{
                return;
            }
            ProfileService.removeRating(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.groupDetail.current_user_rate = 0;
                    $scope.groupDetail.is_rated = false;
                    $scope.groupDetail.no_of_votes = data.data.no_of_votes;
                    $scope.groupDetail.avg_rate =  data.data.avg_rate;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    $scope.groupDetail.current_user_rate = 0;
                    $scope.groupDetail.is_rated = false;
                    //$scope.userPostList[postIndx].no_of_votes =0;
                    //$scope.userPostList[postIndx].avg_rate =  0;
                }
                $scope.WaitDeleteResponse = false;
                $scope.waitRateResponse = false;
            });
        };
        $scope.stars = [];

        $scope.averageRating = function(rating){
            return new Array(Math.ceil(rating));
        };

        $scope.blankStar = function(rating){
            if((5-Math.ceil(rating)) > 0){
                return new Array(5-Math.ceil(rating));
            }else{
                return 0;
            }
        };

        $scope.max = 5;
        $scope.isReadonly = false;

        $scope.rateThis = function(value, id){
            $scope.ratePost(value, id);
        };

        $scope.hoveringOver = function(value) {
            $scope.overStar = value;
            $scope.percent = 100 * (value / $scope.max);
        };

        $scope.ratingStates = [
            {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
        ];

        $scope.showPeopleLoader = false;
        $scope.findPeople = function(id, type, count_Vote){
            if(count_Vote === 0 ){
                return false;
            }
            var opts = {};
            $scope.ratedUsers = {};
            $scope.showPeopleLoader = true;

            var modalInstance = $modal.open({
                        templateUrl: 'app/views/find_people.html',
                        controller: 'ModalController',
                        size: 'lg',
                        scope: $scope,
            });
            opts.type = type;
            opts.type_id = id;
            opts.session_id = APP.currentUser.id;
            ProfileService.findPeople(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.showPeopleLoader = false;
                    $scope.ratedUsers = data.data.users_rated;
                    if(data.data.users_rated.length == 0){
                        $scope.message = $scope.i18n.dashboard.no_vote;
                    }
                }else{
                    $scope.showPeopleLoader = false;
                }
            });
            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
        };
    ///  end code for club rating  /////
}]);
app.controller('GroupPostController',['$scope', 'PostService', '$location', '$timeout', '$routeParams', 'CommentService', 'FileUploader','ProfileService','$modal', '$log' ,function ($scope, PostService, $location, $timeout, $routeParams, CommentService, FileUploader ,ProfileService,$modal ,$log) {
    $scope.currentUser = $scope.currentUser;
    $scope.noComment = false;
    $scope.postErrMsg = '';
    var groupId = $routeParams.clubId;
    var groupStatus = $routeParams.clubType;
    $scope.postContentStart = false;
    $scope.posts = [];
    $scope.myRes = 1;
    $scope.tempPostId = '';
    $scope.postErrCls = '';// add dynamic class for success and fail
    $scope.textLimit = APP.post_charecter_limit;
    
    //Create Group post 
    $scope.createPost = function() {
        var link_type;
        var opts = {};
        $scope.postInProcess = true;
        $scope.postContentStart = true;
        $scope.postContentLoader = true;
        var filescount = $scope.imageSrc.length;
        /*Link Preview feature*/
        var descval = $("#preview_lp1").html();
        var href = $('#previewUrl_lp1').html();
        var textarea = $('#text_lp1').val();
        var description = '';
        description = textarea;
        var regex = /src="([^"]+)"/;
        var src = description.split(regex)[1];
        if(src != undefined && src != ''){
                description = src;
        }
        description = escapeHtmlEntities(description); // converting the special charector to entities
        //URLs starting with http://, https://, file:// or ftp://
        if(href == '') {
            link_type = "0";
        } else {
            description = "<p>"+description+"</p>";
            description += descval;
            link_type = "1";
        }

        if ((description == undefined || description == '') && filescount == 0) {
            $scope.postInProcess = false;
            $scope.postErrMsg = $scope.i18n.editprofile.attach_link;
            $scope.postErrCls = 'text-red';
            $timeout(function(){
                $scope.postErrCls = '';
                $scope.postErrMsg = '';
            }, 15000);
            $scope.postContentStart = false;
            $scope.postContentLoader =  false;
            return false;
        } 
        
        opts.user_id = APP.currentUser.id;
        opts.group_id = groupId;
        opts.post_title = "Not in use on frontend"; //This dummy data as currently there is no field to accept the posttitle
        opts.post_desc = description;
        opts.youtube = '';
        opts.post_media = '';
        opts.post_id = $scope.tempPostId;
        opts.link_type = link_type;
        opts.post_type = "1";
        opts.media_id = [];
        angular.forEach($scope.imageSrc, function(file) {
            opts.media_id.push(file.media_id);
        });
        PostService.createPost(opts, function(data){
            if(data.code == 101) {
                var newpost = {};
                newpost = data.data[0];
                newpost.comments = [];
                $scope.posts.unshift(newpost);
                $scope.noContent = false;
                $scope.postInProcess = false;
                $scope.postErrMsg = "";
                $scope.postErrCls = '';
                
                uploader.data.post_id={};
                while(uploader.queue.length) {
                   uploader.queue[0].remove();
                }
                if($scope.posts.length == 0){
                    $scope.noContent = true;
                }
                $scope.imageSrc = [];
                $scope.postFiles = [];
                $scope.postText = undefined;
                $scope.isImage = false;
                $scope.imgUpload = false;
                $scope.isUpload = false;
                $scope.uploadBox = false;
                $scope.postContentStart = false;
                $scope.postContentLoader = false;
                $scope.tempPostId = '';
                $('#text_lp1').val('');
                $('#text_lp1').attr("style", "");
                $timeout(function(){
                    $('#closePreview_lp1').click();
                }, 100);
            } else {
                if($scope.posts.length == 0){
                    $scope.noContent = true;
                }
                $scope.postInProcess = false;
                $scope.postErrCls = 'text-red';
                $scope.postErrMsg = $scope.i18n.editprofile.post_unable;
                $scope.imageSrc = [];
                $scope.postFiles = [];
                $scope.isImage = false;
                $scope.imgUpload = false;
                $scope.isUpload = false;
                $scope.uploadBox = false;
                $timeout(function(){
                    $scope.postErrCls = '';
                    $scope.postErrMsg = '';
                }, 15000);
                $scope.postContentStart = false;
                $scope.postContentLoader = false;
            }
        });
    };
   

    // function to get the post and comment of the post
    $scope.getPosts = function() {
        $scope.isLoading = true;
        $scope.noContent = false;
        var limit_start = $scope.posts.length;
        var opts = {};
        opts.user_group_id = groupId;
        opts.user_id = APP.currentUser.id;
        opts.group_type = groupStatus;
        opts.limit_start = limit_start;
        opts.limit_size = APP.group_pagination.end;
        
        // This service's function returns post
        if ((($scope.totalSize > limit_start ) || $scope.totalSize == 0 ) && $scope.myRes == 1) {
            $scope.myRes = 0;
            $scope.isLoading = false;
            PostService.listPost(opts, function(data){
                if(data.code == 101)
                {
                    var items =  data.data;
                    if(items != undefined || items.length != 0){
                        $scope.posts = $scope.posts.concat(items);
                    }
                    $scope.myRes = 1;
                    $scope.totalSize = data.total;
                    if($scope.posts.length == 0){
                        $scope.noContent = true;
                    }
                } else {
                    $scope.noContent = true;
                    $scope.isLoading = false;
                    $scope.posts;
                }
            });
        } else {
            $timeout(function(){
                $scope.isLoading = false;
            }, 1000);
        }
    };

    //function to call initial loading
    $scope.showClubPostList = function(){
        $scope.isLoading = true;
        $scope.posts = [];
        $scope.totalSize = 0;
        $scope.myRes = 1;
        $scope.noContent = false; 
        $scope.getPosts();
    };

    // calling get post function on controller load
    $scope.showClubPostList();

    $scope.loadMore = function() {
        if($scope.totalSize > $scope.posts.length){
            $scope.getPosts();
        }
    };

    // function to get the post and comment of the post
    $scope.showComments = [];
    $scope.commentLoading = [];
    $scope.getComments = function(opts, postIndx) {
        $scope.posts[postIndx].comments = [];
        $scope.showComments[postIndx] = true;
        $scope.commentLoading[postIndx] = true;
        // This service's function returns post
        CommentService.listComment(opts, function(data){
            if(data.code == 100)
            {   
                $scope.posts[postIndx].comments = data.data.comments;  
                $scope.commentLoading[postIndx] = false;
                    if($scope.posts[postIndx].comments.length != 0 ) {
                        $scope.noComment = true;
                    }
            } else {
                $scope.commentLoading[postIndx] = false;
            }
        });
    };

    //function to show all comment of the post
    $scope.showAllComments = function(postIndx) {
        $scope.commentInProcess = true;
        var post = $scope.posts[postIndx];
        var opts = {};
        opts.post_id = post.post_id;
        opts.session_id = $scope.currentUser.id;
        opts.limit_size = null;
        opts.limit_start = 0;
        $scope.getComments(opts, postIndx);
    };

    //function to show limited comment of the post
    $scope.showLimitedComment = function(postIndx) {
        $scope.commentInProcess = true;
        var post = $scope.posts[postIndx];
        var opts = {};
        opts.post_id = post.post_id;
        opts.session_id = $scope.currentUser.id;
        opts.limit_size = APP.group_pagination.end;
        opts.limit_start = APP.group_pagination.start;
        $scope.getComments(opts, postIndx);
    };

    
    //funciton to delete single post
    $scope.deleteErrMsg = [];
    $scope.deleteErrCls = [];
    $scope.deletePost = function(indx) {
        $scope.deletePostIndx = indx;
        var postData = {};
        postData = $scope.posts[indx];
        var formData = {};
        formData.user_id = $scope.currentUser.id;
        formData.post_id = postData.post_id;
        
        //calling the service to delete the selected post 
        PostService.deletePost(formData, function(data){
            if(data.code == 101) {
                $scope.posts.splice(indx, 1);
                if($scope.posts.length == 0){
                    $scope.noContent = true;
                }
            } else {
                $scope.deleteErrCls[indx] = 'text-red';
                $scope.deleteErrMsg[indx]= $scope.i18n.dashboard.postcomment.delete_post_fail;
                $scope.posts;
            }
            $timeout(function(){
                $scope.deleteErrCls[indx] = '';
                $scope.deleteErrMsg[indx] = '';
            }, 15000);
        });
    };

    
    $scope.imageSrc = [];
    $scope.postFiles = [];
    $scope.postImgLoader = [];
    $scope.tempPostId = '';
    var uploader = $scope.uploader = new FileUploader({
        url: APP.service.createGroupPost+"?access_token="+APP.accessToken,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'method': 'POST'
            /*'Accept': 'text/json'*/
        },
        data:{
            'user_id': APP.currentUser.id,
            'group_id': groupId,
            'title':"Not in use on frontend", //This dummy data as currently there is no field to accept the posttitle
            'description':'',
            'youtube_url':'',
            'to_id': APP.currentUser.id,
            'link_type':"0",
            'post_type':"0",
            'post_id': $scope.tempPostId,
        },
        dataObjName:'reqObj',
        formDataName:'post_media[]'
    });

    // FILTERS
    uploader.filters.push({
        name: 'post_media[]',
        fn: function(item /*{File|FileLikeObject}*/, options) {
            var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
            return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
        }
    });

    uploader.onAfterAddingFile = function(fileItem) {
        $scope.postContentStart = true;
        uploader.data.post_id=$scope.tempPostId;
        var queueLen = uploader.queue.length-1;
        if(uploader.queue.length != 0){
            $scope.uploadBox = false;
            $scope.imgUpload = true;
        }
        $scope.postImgLoader[queueLen] = true;
        uploader.uploadItem(fileItem);
    };

    uploader.onSuccessItem = function(fileItem, response, status, headers) {
        var index = uploader.getIndexOfItem(fileItem);
        if(response.code == 101){
            $scope.imageSrc[index] = response.data;
            $scope.postImgLoader[index] = false;
            $scope.tempPostId = response.data.id;
            uploader.data.post_id=response.data.id;
        }
    };

    uploader.onCompleteAll = function() {
        $scope.postContentStart = false;
    }

    uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
        $scope.postErrMsg = $scope.i18n.groupcontrol.incorrect_upload;
        $scope.postErrCls = 'text-red';
        $timeout(function(){
            $scope.postErrCls = '';
            $scope.postErrMsg = '';
        }, 15000);
    };

   
    //function to add image on user post
    $scope.isImage = false;
    $scope.isUpload = false;
    $scope.uploadBox = false; //previously used to hide the text area in first click of photo tab 
    $scope.addImage = function() { 
        var href = $('#previewUrl_lp1').html();
        if(href != ''){
            $timeout(function(){
                $('#closePreview_lp1').click();
            }, 100);
        }
        $scope.isImage = true;
        $scope.imageSrc = [];
        $scope.postFiles = [];
        $scope.uploadBox = true;
        uploader.queue = [];
        $scope.isUpload = false;
    };
    $scope.addPost = function() {
        $scope.isImage = false;
        $scope.imgUpload = false;
        $scope.uploadBox = false;
        $scope.isPost = true;
        $scope.imageSrc = [];
        $scope.postFiles = [];
        uploader.queue = [];
    };

    

    //function to create post
    $scope.saveUpdatePost = function(indx) {
        $scope.editPostErrorMsg = [];
        $scope.editPostErrorCls = [];
        var opts = {};
        $scope.updatePostInProcess = true;
        var editPostText = escapeHtmlEntities($scope.updateBody[indx]); 
        var post = $scope.posts[indx];
        
        if (editPostText === undefined || editPostText === '') {
            $scope.updatePostInProcess = false;
            $scope.editPostErrorMsg[indx] = $scope.i18n.groupcontrol.write_to_post;
            $scope.editPostErrorCls[indx] = 'text-red';
            return false;
        } 
        var regex = /src="([^"]+)"/;
        var src = editPostText.split(regex)[1];
        if(src != undefined && src !='' ){
               editPostText = src; 
            }
        opts.user_id = $scope.currentUser.id;
        opts.user_group_id = groupId;
        opts.group_type = $scope.groupDetail.group_status;
        opts.post_id = post.post_id;
        opts.post_title = post.post_title; //This dummy data as currently there is no field to accept the posttitle
        opts.post_desc = editPostText;
        opts.youtube = '';
        var myFile = '';
        
        PostService.updatePost(opts, myFile, function(data){
            if(data.code == 101) {
                $scope.updatePostInProcess = false;
                $scope.editPostErrorMsg[indx] = '';
                $scope.editPostErrorCls[indx] = '';
                $scope.posts[indx].post_description = editPostText;
                $scope.editPostText = '';
                $scope.activeEdit[indx] = false;
            } else {
                $scope.updatePostInProcess = false;
                $scope.activeEdit[indx] = false;
                $scope.editPostErrorCls[indx] = 'text-red';
                $scope.editPostErrorMsg[indx] = $scope.i18n.groupcontrol.not_send_post;
            }
            $timeout(function(){
                $scope.editPostErrorCls[indx] = '';
                $scope.editPostErrorMsg[indx] = '';
            }, 15000);
        });
    };

    $scope.updateBody = [];
    $scope.activeEdit = [];
    $scope.editPostErrorCls = [];
    $scope.editPostErrorMsg = [];
    //funtion to open form to update post
    $scope.updatePost = function(indx) {
        var post = $scope.posts[indx];
        //for resize the textarea
        autosize(document.querySelectorAll('.editpostbox'));
        var str = $.trim(post.post_description.replace(/\n\n\n+/g, '\n\n'));
        var htmlstr = str.replace(/\n/g,'<br />');
        var height = $('<div style="display:block;" id="postedit-hidden-div"></div>')
        .html(htmlstr)
        .appendTo('#post_'+post.post_id)
        .height();     
        $('#editpost_'+post.post_id).css('height',height + 'px');
        str = $('#postedit-hidden-div').html(str).text();
        $('#postedit-hidden-div').remove();
        $scope.updateBody[indx] = str;
        $scope.activeEdit[indx] = true;
        //set cursor start of textarea
        $timeout(function(){
            $('#editpost_'+post.post_id).putCursorAtStart();
        },200);
    }
    // close the edit form on cancel
    $scope.cancelPost = function(indx) {
        $('#postedit-hidden-div').remove();
        $scope.updateBody[indx] = '';
        $scope.activeEdit[indx] = false;
        $scope.editPostErrorCls[indx] = '';
        $scope.editPostErrorMsg[indx] = '';
    };

    
    //remove iamge from preview array
    //remove iamge from preview array
    $scope.removeImage = function(index) {
        var tempImg = $scope.imageSrc[index];
        $scope.imageSrc.splice(index, 1);
        var item = $scope.uploader.queue[index];
        item.remove();
        var formData = {};
        formData.user_id = APP.currentUser.id;
        formData.media_id = tempImg.media_id;
        formData.post_id = $scope.tempPostId;
        formData.session_id = APP.currentUser.id;
        
        //calling the service to delete the selected post 
        PostService.deletePostMedia(formData, function(data){
            if(data.code == 101) {
                
            } else {
                $scope.imageSrc[index] = tempImg;
                $scope.postErrCls = 'text-red';
                $scope.postErrMsg = $scope.i18n.dashboard.postcomment.remove_img_fail;
                $timeout(function(){
                    $scope.postErrCls = '';
                    $scope.postErrMsg = '';
                }, 15000);
            }
        });
    };
    
    //check screen for mobile devicess to show corresponding layou
        $scope.loadMoreFunc = 'loadMore()';
        $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
            $scope.windowHeight = newValue.h;
            $scope.windowWidth = newValue.w;
            if($scope.windowWidth <= '768'){
                $scope.isSmallScreen =  true; //declare in main controller
                $scope.loadMoreFunc = '';
            } else {
                $scope.isSmallScreen =  false; //declare in main controller
                $scope.loadMoreFunc = 'loadMore()';
            }
        }, true);

    $(".fancybox").fancybox();

}]).filter('unsafe', function($sce) {
    return function(val) {
        return $sce.trustAsHtml(val);
    };
});

app.controller('MediaController',['$scope', 'MediaService', function ($scope, MediaService) {
    
    //Upload Media 
    $scope.uploadmedia = function() { 
        var opts = {};
        opts.user_id = "";
        opts.album_id = "";
        opts.form_file = "";
        MediaService.uploadmedia(opts, function(data) {
            if(data.code == 101) {
             
            } else {
              
            }
      });
       
    }
    //listing Media 
    $scope.listmedia = function() { 
        $scope.signupStart = true;  
        var opts = {};
        opts.user_id = "";
        opts.limit_start = "";
        MediaService.listmedia(opts, function(data) {
            if(data.code == 101) {
              
            } else {
             
            }
      });
       
    }
    //Delete Media 
    $scope.deletemedia = function() { 
        $scope.signupStart = true;  
        var opts = {};
        opts.user_id = "";
        opts.album_id = "";  
        MediaService.deletemedia(opts, function(data) {
            if(data.code == 101) {
            
            } else {
              
            }
      });
       
    }
    //Search Media 
    $scope.searchmedia = function() { 
      $scope.signupStart = true;  
        var opts = {};
        opts.search_text = "";
        opts.user_id = "";
        opts.access_token = "";     
        opts.limit_size = "";  
        opts.limit_start = "";  
        MediaService.searchmedia(opts, function(data) {
            if(data.code == 101) {
             
            } else {
              
            }
      });
       
    }
   
}]);



app.controller('MessageController',['$scope','$rootScope', '$interval','$timeout','fileReader', 'MessageService', 'saveFriendId', 'threadAndPass','$routeParams', 'saveFriendDate', 'FileUploader', function ($scope, $rootScope, $interval, $timeout, fileReader, MessageService, saveFriendId, threadAndPass, $routeParams, saveFriendDate, FileUploader) {
    $scope.loadUserMessage = false;
    $scope.errorMessage = "";
    var oneClicklistMsg = 0;
    var oneClickReadMsg = 0;
    var oneClickMsgInb = 0;
    $scope.totalUnreadMsg = 0;
    $scope.showMsgSearch = false;
    $scope.storeReceiverObj = [];
    $scope.isNewMessage = false;
    $scope.showSetting = false;
    $scope.user_id = [];
    $scope.noMsg = true;
    $scope.isAddUser = false;
    $scope.storeThreadMembers = [];
    $scope.body = '';
    $scope.MessageUserid = $routeParams.mid; // to send message from friend profile 
    //Message Listing Inbox
    $scope.response = {};
   
    $scope.messageInbox = function(){ 
        var opts = {};
        $scope.loadUserMessage = true;
        opts.user_id = $scope.currentUser.id;
        opts.limit_start = APP.friend_list_pagination.start;
        opts.limit_size = APP.friend_list_pagination.end;  
        if(oneClickMsgInb == 0) {
            oneClickMsgInb = 1;
            MessageService.listGroupInbox(opts, function(data) {
                if(data.code == 101) {
                    oneClickMsgInb = 0;
                    $scope.loadUserMessage = false;
                    $scope.response = data.data;
                    if(data.total > 0){
                        $scope.storeThreadMembers = data.data[0].thread_members;
                        if($scope.MessageUserid == '' || $scope.MessageUserid == undefined){
                            $scope.listGroupMessages(data.data[0].thread_id, $scope.storeThreadMembers);
                            $timeout(function(){
                                $('#list-'+data.data[0].thread_id).addClass('active');
                            }, 500);
                        } else {
                            $scope.sendFriendMessage();
                        }
                    } else {
                        $scope.newMessageShow();
                        $scope.noMsg = true;
                       $scope.listmessage = []; 
                    }
                } else {
                    $scope.loadUserMessage = false;   
                }
            });
        }
    }

    /*function to clear the variable when new thread is clicked*/
    $scope.MessageHide = function() {
        if($scope.isGroupThread == true){
            $scope.showSetting = true;
        }
        $scope.custom = false;
        $scope.noMsg = false;
        $scope.emptyMessageError = false;
        $scope.createMessageerror = "";
        $scope.isNewMessage = false;
        $scope.isJoinGroup = false;
    };

    /*function to show the new message form*/
    $scope.newMessageShow = function() {
        if($scope.isGroupThread == true){
            $scope.showSetting = false;
        }
        $scope.isJoinGroup = false;
        $scope.user_id = [];
        $scope.tags = [];
        $scope.storeReceiverObj = [];
        $scope.custom = true;
        $scope.recipientAddress = "";
        $scope.createMessageerror = "";
        $scope.emptyMessageError = false;
        $scope.isNewMessage = true;
    };

    //Create Message
    $scope.createMessageshow = false; 
    $scope.createMessage = function(){
        var opts = {};
        opts.session_id = $scope.currentUser.id;
        if($scope.isNewMessage == true || $scope.isJoinGroup == true) {
            //set recipeient name
            if($scope.tags == undefined || $scope.tags.length == 0){
                $scope.emptyMessageError = true;
                $scope.createMessageerror = $scope.i18n.msg_message.message_create;
                $timeout(function() {
                        $scope.emptyMessageError = false;
                    }, 15000);
                return false;
            } 
            for (i = 0; i < $scope.tags.length; i++) { 
                $scope.user_id.push($scope.tags[i].user_id);
            }
            opts.recipient = $scope.user_id; 
            if($scope.isJoinGroup == true) {
                opts.thread_id = $scope.storeThread;
            } else {
                opts.thread_id = "0";
            }
        } else {
            opts.recipient = $scope.storeRecipient;
            opts.thread_id = $scope.storeThread;
        }
        
        if(($scope.myFile == undefined ||  $scope.myFile == '') && ($scope.body == undefined || $scope.body == '')){
            $scope.emptyMessageError = true;
            $scope.createMessageerror = $scope.i18n.msg_message.message_first;
            $timeout(function() {
                    $scope.emptyMessageError = false;
                }, 15000);
            return false;
        } 

        opts.body = $scope.body;
        $scope.myFile == ''
        $scope.createMessageshow = true;
        $scope.emptyMessageError = false;
        $scope.sendMessage = MessageService.groupMessageSends(opts, $scope.myFile, function(data){
            if(data.code == 101) {
                $scope.custom = false;
                $scope.createMessageshow = false;
                if($scope.isNewMessage == true || $scope.isAddUser == true) {
                    $scope.messageInbox();
                    $scope.isNewMessage == false;
                } else {
                    $scope.listGroupMessages($scope.storeThread, $scope.storeThreadMembers);
                    $scope.listingmsge();
                }
                $scope.imageSrc = '';
                $scope.myFile = '';
                $scope.body = "";
                $scope.user_id = [];
                $scope.tags = [];
            }
            else {
                $scope.custom = false;
                $scope.createMessageshow = false;
            }
        });
    }

    /*function to show the message Listing
    * @accept Threadid
    * @return array object of messages
    */
    $scope.listGroupMessages = function(thread_id, threadMembers){ 
        $scope.MessageHide(); 
        // $scope.MessageUserid = $routeParams.mid;
        var count = 1;
        $scope.names = [];
        $scope.storeRecipient = [];
        $scope.listmessage = [];
        $scope.storeThreadMembers = '';
        $scope.storeReceiverName = []; 
        $scope.receiverName = '';
        $scope.loadMessage =true;
        $scope.showMsgSearch =  false;
        var opts = {};
        opts.user_id = $scope.currentUser.id;
        opts.thread_id= thread_id;
        opts.limit_size = APP.message_list_pagination.end;
        opts.limit_start = APP.message_list_pagination.start;
        if(oneClicklistMsg == 0){
            oneClicklistMsg = 1;
            MessageService.listGroupMessages(opts, function(data){
                if(data.code == 101) {
                    oneClicklistMsg = 0;
                    $scope.listmessage = data.data.messages;
                    $scope.storeThread = data.data.group_id;
                    $scope.loadMessage =false;
                    $scope.expandButton = false;
                    $scope.memberName = true;
                    $scope.collapseButton = true;
                    $scope.storeReceiverObj = threadMembers;
                    $scope.storeThreadMembers = threadMembers;
                    //calling function to update notification message count
                    $rootScope.listUnReadMessages();
                    if(data.data.group_type == 'group'){
                        $scope.storeRecipient = data.data.recipient;
                        $scope.isGroupThread = true;
                        $scope.showSetting = true;
                        if($scope.storeThreadMembers.length == 1 ) {
                            $scope.storeReceiverName.push($scope.storeThreadMembers[0].first_name+' '+$scope.storeThreadMembers[0].last_name);
                            $scope.receiverName = $scope.storeThreadMembers[0].first_name+' '+$scope.storeThreadMembers[0].last_name;
                        } else if ($scope.storeThreadMembers.length == 2) {
                            $scope.storeReceiverName.push($scope.storeThreadMembers[0].first_name+' '+$scope.storeThreadMembers[0].last_name);
                            $scope.storeReceiverName.push($scope.storeThreadMembers[1].first_name+' '+$scope.storeThreadMembers[1].last_name);
                            $scope.receiverName = $scope.storeThreadMembers[0].first_name+' '+$scope.storeThreadMembers[0].last_name + ', ';
                            $scope.receiverName += $scope.storeThreadMembers[1].first_name+' '+$scope.storeThreadMembers[1].last_name;   
                        } else if ($scope.storeThreadMembers.length > 2 ) {
                            for(var i = 0; i < $scope.storeThreadMembers.length; i++){
                                $scope.storeReceiverName.push($scope.storeThreadMembers[i].first_name+' '+$scope.storeThreadMembers[i].last_name);
                                $scope.receiverName += $scope.storeThreadMembers[i].first_name+' '+$scope.storeThreadMembers[i].last_name + ', ';   
                                if(count == $scope.storeThreadMembers.length) {
                                    $scope.receiverName = $scope.receiverName.replace(/,\s*$/, "");
                                }
                                count = count+1;
                            } 
                        } 
                    } else {
                        //$scope.storeRecipient.push(data.data.recipient);
                        $scope.storeRecipient = data.data.recipient;
                        $scope.isGroupThread = false;
                        $scope.showSetting = false;
                        $scope.storeReceiverName.push($scope.storeThreadMembers[0].first_name+' '+$scope.storeThreadMembers[0].last_name);
                        $scope.receiverName = $scope.storeThreadMembers[0].first_name+' '+$scope.storeThreadMembers[0].last_name;
                    }

                    //console.log($scope.storeReceiverName);
                    $scope.readMessage(data.data.group_id);
                    $(".messages-onscroll").animate({
                            scrollTop: $(".messages-onscroll")[0].scrollHeight
                    },'fast');
                    $timeout(function(){
                        $('.scrollable-block li').removeClass('active');
                        $('#list-'+thread_id).addClass('active');
                    }, 500);
                } else {
                    $scope.loadMessage =false;
                }
            });
        }
    }

    /*function to mark the message as read on thread click
    * @ accept thread Id
    */
    //Read Message 
    $scope.readMessage = function(threadId){
        var opts = {};
        opts.session_id = $scope.currentUser.id;
        opts.thread_id = threadId;
        if(oneClickReadMsg == 0) {
            oneClickReadMsg = 1;
            $scope.read = MessageService.readGroupMessages(opts, function(data){
                if(data.code == 101) {
                    $scope.getUnreadMessage();
                  oneClickReadMsg = 0;
                  $('#list-'+threadId).removeClass('bold');
                }
                else {
                    oneClickReadMsg = 0;
                }
            });
        }
    }

    /*function to delete a message in the thread
    *@ accept threadid and messageid
    */
    //Delete Message 
    $scope.deleteMessage = function(messageId, threadId){
        var opts = {};
        var r = confirm($scope.i18n.msg_message.message_confirm);
        if (r == true) {
            opts.session_id = $scope.currentUser.id;
            opts.message_id = messageId;
            MessageService.deleteGroupMessages(opts, function(data){ 
                if(data.code == 101) {
                    $scope.listGroupMessages(threadId, $scope.storeThreadMembers);
                    $scope.listingmsge();// add for refresh the left bar
                }
            });
        }
    }


    /// call list group service
     $scope.listingmsge = function(){
        var opts = {};
        $scope.loadUserMessage = true;
        opts.user_id = $scope.currentUser.id;
        opts.limit_start = APP.friend_list_pagination.start;
        opts.limit_size = APP.friend_list_pagination.end; 
        MessageService.listGroupInbox(opts, function(data) {
           if(data.code == 101) {
                 $scope.loadUserMessage = false;
                  $scope.response = data.data;
            } else
              {
                
              }
        } );   
     };

    /// message send on enter
    $('#myTextarea').keydown(function(e) {
        if (e.ctrlKey && e.keyCode == 13) {
            $scope.createMessage();
        }
    });
    
    $scope.edit = true;
    $scope.model = {};
    $scope.model.updateBody = "";
    $scope.assignUpdate = function(data){
        $scope.model.updateBody = data;
    }

    //Update Message 
    $scope.updateMessage = function(messageId, threadId){
        var opts = {};
        opts.session_id = $scope.currentUser.id;
        opts.message_id = messageId;
        opts.body = $scope.model.updateBody;
        if($scope.model.updateBody == ""){
            $scope.deleteMessage(messageId,threadId);
        }else{
            $scope.update = MessageService.updateMessage(opts, function(data){
                if(data.code == 101) {
                    $scope.listGroupMessages(threadId, $scope.storeThreadMembers);
                    $scope.edit = true;
                    $scope.model.updateBody = "";
                }
                else {
                 
                }
            });
        }
    }

    //function to load more inbox*
    $scope.freezeRequest = 0;
    $scope.loadMessageUser = "false";
    $scope.loadMoreList = function(){
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.limit_start = $scope.response.length;
        opts.limit_size = APP.friend_list_pagination.end;
        $scope.loadMessageUser = "true";
        if($scope.freezeRequest == 0){
            $scope.freezeRequest = 1;
            MessageService.messageInbox(opts, function(data) {
            if(data.code == 100) {   
                if(data.total != 0){  
                    $scope.freezeRequest = 0;
                    $scope.loadMessageUser = "false";
                    $scope.response = $scope.response.concat(data.data);
                } else {
                    $scope.loadMessageUser = "false";
                    $scope.freezeRequest = 0;
                }
            }else{
                    $scope.loadMessageUser = "false";
                    $scope.freezeRequest = 0;
                }
            });
        }
    }

    //function to load more messages of a thread
    $scope.canLoad = true;
    $scope.loadMore = function(threadId) {
        $scope.canLoad = true;
        $scope.loadMoremessages(threadId);
    };

    //List User Messages of the thread
    $scope.showImage = false;
    $scope.loadMoreMessage = false;
    $scope.listmessage = {};
    $scope.blockRequest = 0;
    $scope.loadMoremessages = function(threadid){
        $scope.loadMoreMessage = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.thread_id = threadid;
        opts.limit_start = $scope.listmessage.length;
        opts.limit_size = APP.message_list_pagination.end-4;
        if($scope.blockRequest == 0){
            $scope.blockRequest = 1;
            MessageService.listGroupMessages(opts, function(data) { //console.log(data.data)
                if(data.code == 100 && data.data.messages.length > 0) {
                    $scope.blockRequest = 0;
                    $scope.loadMoreMessage = false;
                    $scope.userid = APP.currentUser.id;
                    $scope.listmessage = $scope.listmessage.concat(data.data.messages);
                    stop = $interval(function() {
                        $(".load-more-onscroll").scrollTop(10);
                    }, 1000,2);
                } else {
                    $scope.loadMoreMessage = false;
                    $scope.blockRequest = 0;
                }
            });
        }
    }

    $scope.names = [];
    $scope.cancelRequest = 0;
    $scope.noData = false;
    $scope.WaitFriendList = false;
    //function to show the friend list when searching friend to send message
    $scope.listFriend = function(){
        $scope.cancelRequest = 0;
        $scope.WaitFriendList = true;
        $scope.names = [];
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.friend_name = $scope.recipientAddress; 
        opts.session_id = APP.currentUser.id;
        opts.limit_size =  APP.friend_list_pagination.end;
        opts.limit_start = APP.friend_list_pagination.start;
        MessageService.searchFriends(opts, function(data){
            $scope.WaitFriendList = false;
            if( $scope.cancelRequest == 0 ){
                $scope.names.splice(0, 10)
                if(data.code == 101) {
                    angular.forEach(data.data.users,function(user) {
                        $scope.names.push(user);
                        $scope.noData = false;
                    });
                    if(data.data.count == '0'){
                        $scope.noData = true;
                    }
                }else {
                    $scope.noData = false;
                }
            }else{
                $scope.listfriend = [];
            }
        });
    }

    //search friend
    $scope.recipientAddress ='';
    var DELAY_TIME_BEFORE_POSTING = 300;
    var currentTimeout = null;
    $('#searchfrnd').keydown(function() {
      var model = $scope.recipientAddress;
      
      if(currentTimeout) {
        $timeout.cancel(currentTimeout);
      }
      currentTimeout = $timeout(function(){
        if(model.length > 1){
            $scope.listFriend();
        } else {
            $scope.noData = false;
            $scope.names = [];
        }
        
      }, DELAY_TIME_BEFORE_POSTING)
    });
    //Search User Thread
   
    $scope.searchUserThread = function(){  
        var opts = {};
        $scope.noResult = false;
        opts.user_id = APP.currentUser.id;
        opts.firstname = $scope.nameSearch;
        $scope.loadUserMessage = true;
        opts.limit_start = APP.message_list_pagination.start;
        opts.limit_size = APP.message_list_pagination.end;
        if($scope.nameSearch == '') {
                    $scope.noResult = false;
                    $scope.messageInbox();
        } else {    
            MessageService.searchUserThread(opts, function(data) { 
                if(data.code == 100) {
                    $scope.loadUserMessage = false;
                    $scope.response = data.data;
                    $scope.noResult = false;
                    if(data.total == 0) {
                        $scope.noResult = true;
                    }
                }
            });
        }
    }

    //search user
    $scope.nameSearch ='';
    var DELAY_TIME_BEFORE_POSTING_SEARCH = 300;
    $('#searchuser').keydown(function() {

        var model = $scope.nameSearch;
        if(currentTimeout) {
            $timeout.cancel(currentTimeout);
        }
        currentTimeout = $timeout(function(){
            if(model.length > 1){
                $scope.searchUserThread();  
            }
            else {
                $scope.messageInbox();
                $scope.noResult = false;
            }

        }, DELAY_TIME_BEFORE_POSTING_SEARCH)
    });

    $scope.clearList = function(){
        stop = $interval(function() {
            $scope.cancelRequest = 1;
            $scope.names = [];
        }, 200,1);
    };

    //function to show the username to whome the message will send
    $scope.tags = [];
    $scope.selectFriend = function(name){
        $scope.names = [];
        $scope.recipientAddress = name.user_info.first_name+' '+name.user_info.last_name;
        $scope.seen = true;
        for (var i = 0; i<$scope.tags.length; i++){
            if($scope.tags[i].user_id == name.user_info.id)
            {
               $scope.seen = false;
            }
        } 
        if($scope.seen == true)
        {   
            $scope.tags.push({"recipient":$scope.recipientAddress,"user_id": name.user_id});
        }
        
        $scope.recipientAddress = '';
    };

    //function to remove the username from the group
    $scope.remove = function ( idx ) {
        var tempTag = $scope.tags[idx];
        if($scope.isJoinGroup == true){
            var opts = {};
            opts.session_id = APP.currentUser.id;
            opts.deleted_user_id = tempTag.user_id;
            opts.thread_id = $scope.storeThread;
            MessageService.removeGroupUsers(opts, function(data) { 
                if(data.code == 101) {
                    $scope.getUnreadMessage();
                    $scope.tags.splice( idx, 1 );
                } 
            });
        } else {
            $scope.tags.splice( idx, 1 );
        }
    };

    //function to show and hide the full group recipeint name
    $scope.expandButton = false;
    $scope.collapseButton = true;
    $scope.memberName = true;
    $scope.hideFirstButton = function() {
        $scope.memberName = true;
        $scope.expandButton = false;
        $scope.collapseButton = true;
    }

    $scope.hideSecondButton = function() {
        $scope.memberName = false;
        $scope.expandButton = true;
        $scope.collapseButton = false;
    }

    /*funciton to get the unread count*/
    $scope.getUnreadMessage = function(){
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.limit_size =  APP.friend_list_pagination.end;
        opts.limit_start = APP.friend_list_pagination.start;
        opts.is_view = 1;
        MessageService.listGroupUnreadMessages(opts, function(data) {
            if(data.code == 101 && data.total > 0) {
                $scope.totalUnreadMsg = data.total;
            } else {
                $scope.totalUnreadMsg = 0;
            }
        });
    }
    //$scope.getUnreadMessage();

    //funciton to remove the user from the thread
    $scope.removeGroupUsers = function(threadId){
        var r = confirm($scope.i18n.msg_message.message_confirm);
        if (r == true) {
            var opts = {};
            opts.session_id = APP.currentUser.id;
            opts.deleted_user_id = APP.currentUser.id;
            opts.thread_id = threadId;
            MessageService.removeGroupUsers(opts, function(data) { 
                if(data.code == 101) {
                    $scope.getUnreadMessage();
                    $scope.receiverName = '';
                    $scope.tags = [];
                    $scope.messageInbox('');
                    $scope.storeReceiverName = [];
                } 
            });
        }
    }

    //function to add new user in the thread for group message
    $scope.addUserGroup = function(threadId){
        $scope.tags = [];
        $scope.custom = true;
        $scope.isAddUser = true;
        var recipienName = '';
        $scope.recipientAddress = "";
        $scope.createMessageerror = "";
        $scope.emptyMessageError = false;
        $scope.fileuperror = false;
        $scope.uploadfileerror = "";
        if($scope.storeReceiverObj.length != 0 && $scope.storeReceiverObj != undefined){
            for(i=0; i<$scope.storeReceiverObj.length; i++){
                recipienName = $scope.storeReceiverObj[i].first_name + " " +$scope.storeReceiverObj[i].last_name;
                $scope.tags.push({"recipient":recipienName,"user_id": $scope.storeReceiverObj[i].id});
            }
        }
        
        $scope.isJoinGroup = true;
        $scope.storeThread = threadId;
    }

    //call the service to search Message in a thread
    $scope.loadSearch = false;
    $scope.noSearch = false;
    $scope.searchMessage = function(){
        var opts = {};
        $scope.loadSearch = true;
        opts.user_id = APP.currentUser.id;
        opts.thread_id = $scope.storeThread;
        opts.keyword = $scope.resultMsg;
        
        MessageService.searchThreadMessages(opts, function(data){
            if(data.code == 100) {
                $scope.loadMessage = false;
                $scope.loadSearch = false;
                 $scope.noSearch = true;
                $scope.listmessage = data.data.messages;
                $scope.nouserSearch = data.total;
            }
        });
    }

    //function to open the message serch box
    $scope.openSearchBox = function(){
        $scope.showMsgSearch = true;
        $('#searchMsg').val('');
        $scope.noSearch = false;
    }

    //search message in a thread
    var DELAY_TIME_BEFORE_POSTING_THREAD = 300;
    
    var currentTimeout = null;
    $('#searchMsg').keydown(function() {
        //$scope.loadMessage = true;
        var model = $scope.resultMsg;
        if(currentTimeout) {
            $timeout.cancel(currentTimeout);
        }
        currentTimeout = $timeout(function(){
            if(model.length > 1){
                //$scope.loadMessage = true;
                $scope.searchMessage();
            } else {
                $scope.listGroupMessages($scope.storeThread, $scope.storeThreadMembers);  
            }
        }, DELAY_TIME_BEFORE_POSTING_THREAD)
    });

    $scope.cancelSearch = function(){
        $scope.cancelRequest = 1;
        $scope.listmessage = [];
        $scope.loadMessage = false;
        $scope.showMsgSearch = false;
        $scope.listGroupMessages($scope.storeThread, $scope.storeThreadMembers);  
    }

    /*functions to image message upload start*/
    $scope.myFile = '';
    $scope.imageSrc = '';
    $scope.getFile = function () {
        $scope.progress = 0;
        fileReader.readAsDataUrl($scope.file, $scope)
        .then(function(result) {

            $scope.myFile = $scope.file;
            var imageType = $scope.myFile['name'].substring($scope.myFile['name'].lastIndexOf(".") + 1);
            // Checking Extension
            if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg" || imageType == "GIF" || imageType == "PNG" || imageType == "JPG" || imageType == "JPEG")) {
                $scope.uploadfileerror = $scope.i18n.msg_directive.upload_media_file;
                $scope.msgUploadError = true;
                $scope.imageSrc = '';
                $scope.myFile = "";
                $scope.fileuperror = true;
                $scope.deleteImage = false;
                $timeout(function() {
                        $scope.fileuperror = false;
                        $scope.msgUploadError = false;
                }, 2000);
            } else {
                $scope.uploadfileerror = "";
                $scope.msgUploadError = false;
                $scope.imageSrc = result;
                $scope.fileuperror = false;
                $scope.deleteImage = true;
            }
            
        });
    };

    $scope.removeImage = function(){
        $scope.imageSrc = '';
        $scope.myFile = "";
        $scope.deleteImage = false;
    }
    /*function to image message upload end*/

    /* function to set user name for new message sending from friend profile message button
    * @accept userid from the Route params
    @return set the user name on message send box
    */
    $scope.sendFriendMessage = function(){
        if($scope.MessageUserid != '' && $scope.MessageUserid != undefined){
            var frind = saveFriendDate.getFriendIdObject();
            if(frind && frind.user_id != undefined ){
                $scope.newMessageShow();
                var friendAddress = frind.user_info.first_name+' '+frind.user_info.last_name;
                $scope.tags.push({"recipient":friendAddress,"user_id": parseInt(frind.user_id)});
                $scope.MessageUserid = undefined;
            }
        }
    }
    
}]);
app.controller('ModalController', ['$scope', '$modalInstance',
    function ($scope, $modalInstance) {

        $scope.$on('closeModal', function () {
            $modalInstance.dismiss('cancel');
        });

        $scope.closeModal = function () {
            $modalInstance.dismiss('cancel');
        };

        $scope.averageRating = function(rating){
            if(rating != undefined){
                return new Array(Math.ceil(rating));    
            }
        };

        $scope.blankStar = function(rating){
            if(rating != undefined){
                if((5-Math.ceil(rating)) > 0){
                    return new Array(5-Math.ceil(rating));
                }else{
                    return 0;
                }
            }
        };

    }
]);
app.controller('NotificationController',['$scope', 'NotificationService', function($scope, NotificationService) {

    // Function to send email notification 
    $scope.sendEmailNotification = function() {
        var formData = {};
        formData.message_type = "Friend Request";
        formData.from = "abhinav.nehra@daffodilsw.com";
        formData.to = "vidhi.srivastava@daffodilsw.com";
        formData.mail_subject = "edit by post man";
        formData.notification_type = "Email";
        formData.message = "send from vidhi daffodil to vidhi123";
        formData.sender_userid = 21;
        formData.receiver_userid =  39;
        //Calling the NotificationService for sending the  http request to send email notification
        $scope.response = NotificationService.sendEmailNotification(formData, function(data){
            if(data.code == 101) {
                console.log("success");
            }
            else {
                console.log("failure");
            }
        });
    }
    // Function to Get Email Notification 
    $scope.getEmailNotification = function() {
        var formData = {};
        formData.notification_type = "Email";
        formData.receiver_userid = 39;
        formData.limit_start = 0;
        formData.limit_size = 20;
        //Calling the NotificationService for sending the  http request to get email notification
        $scope.response = NotificationService.getEmailNotification(formData, function(data){
            if(data.code == 101) {
                console.log("success");
            }
            else {
                console.log("failure");
            }
        });
    }
    //Function to get read and unread email notification
    $scope.readUnreadEmailNotifications = function() {
        var formData = {};
        formData.notification_type = "Email";
        formData.message_id = "";
        formData.session_id = APP.currentUser.id;
        formData.read_value  = "";
        //Calling the NotificationService to get the detail of read and unread notification
        $scope.response = NotificationService.readUnreadEmailNotifications(formData, function(data){
            if(data.code == 101) {
                console.log("success");
            }
            else {
                console.log("failure");
            }
        });
    }
    //Function to delete the specific email
    $scope.deleteEmailNotifications = function() {
        var formData = {};
        formData.notification_type = "Email";
        formData.message_id = "53d8b2088fd8cd98dd8b4567";
        formData.session_id = APP.currentUser.id;
        //Calling the NotificationService to delete the specific email
        $scope.response = NotificationService.deleteEmailNotifications(formData, function(data){
            if(data.code == 101) {
                console.log("success");
            }
            else {
                console.log("failure");
            }
        });
    }
    // Function to search the email that contain the specific text 
    $scope.searchEmailNotifications = function() {
        var formData = {};
        formData.notification_type = "Email";
        formData.search_text = "send";
        formData.receiver_userid = 39;
        formData.limit_start = 0;
        formData.limit_size = 4;
        //Calling the NotificationService to get email that contain the specific text
        $scope.response = NotificationService.searchEmailNotifications(formData, function(data){
            if(data.code == 101) {
                console.log("success");
            }
            else {
                console.log("failure");
            }
        });
    }

}]);
app.controller('CardController', ['$scope', 'OfferService', '$routeParams', 'StoreService', '$timeout', '$cookieStore', 'ProfileService', function($scope, OfferService, $routeParams, StoreService, $timeout, $cookieStore, ProfileService) {
    var map;
    var geocoder;
    geocoder = new google.maps.Geocoder();
    var markers          = [];
    $scope.latitute      = 41.9000;
    $scope.longitude     = 12.4833;
    $scope.Default_lat   = 41.9000;
    $scope.Default_long  = 12.4833;
    $scope.Shopid_loc    = [];
    $scope.selectedRange = 50;
    $scope.gridActive    = '';
    $scope.listActive    = 'active';
    $scope.locationSearch= false;
    $scope.filterme      = '';
    $scope.orderBy       = '';
    $scope.firstPage     = 10;
    $scope.itemsPerPage  = 10;
    $scope.currentPage   = 1;
    $scope.totalItems    = 0;
    $scope.range         = []; 
    $scope.offerlodar    = true;
    $scope.noResultFound = false;
    $scope.offerlistingObject = [];
    $scope.citizenIncome = 0;
    $scope.shop_id       = [];
    $scope.map_pins      = [];
    $scope.frcount       = [];
    $scope.friendlist    = [];
    $scope.categories    = [];
    $scope.sortby        = "_id";
    $scope.nofndlist     = false;
    $scope.currentLanguage = $cookieStore.get("activeLanguage");
    $scope.searchResult  = false;
    $scope.iscomingSoon  = false;
    $scope.collection    = "sixc_offers";
    var openedInfoWindow = null;

    $scope.format = function(n, currency) {
        n = Number(n);
        return currency + "" + n.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
    }

    $scope.getstorecredit = function(storeId) { 
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth();
        var yr = today.getFullYear();
        var date = new Date(yr,mm,dd);
        var opts = {"function":"UtilityService.shopWiseCitizenIncome", "parameters":[{"shop_id":[storeId],"citizen_id":String(APP.currentUser.id),"date":String(date.toISOString())}]}
        StoreService.getstorecredit(opts, function(data){
            if(data.response === undefined || data.response === '' || data.response.length === 0){} else {
                $('.ca-html').html($scope.format(data.response[0].total_credit, '€'));
            }
        });
    };

    $scope.initializeMap = function(){
        var centerLatLng = new google.maps.LatLng($scope.latitute,$scope.longitude);
        var input = (document.getElementById('pac-input'));
        
        var mapProp = {
            center      : centerLatLng,
            zoom        : 7,
            mapTypeId   : google.maps.MapTypeId.ROADMAP
        };
             
        map = new google.maps.Map(document.getElementById('map-canvas'), mapProp);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var searchBox = new google.maps.places.SearchBox((input));
        
        google.maps.event.addListener(searchBox, 'places_changed', function() {
            var address = document.getElementById('pac-input').value;
            geocoder.geocode({ 'address': address}, function(results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    $scope.locationSearch= true;
                    $scope.latitute      = results[0].geometry.location.lat();
                    $scope.longitude     = results[0].geometry.location.lng();
                    $scope.geolocation();
                }
            });    
        });    

        google.maps.event.addListener(map, 'click', function(e) {
            var geocoder = new google.maps.Geocoder();
             geocoder.geocode({"latLng":e.latLng}, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    var placeName = results[0].formatted_address;
                    document.getElementById('pac-input').value = placeName;
                }
            });         
            $scope.locationSearch= true;
            $scope.latitute      = e.latLng.lat();
            $scope.longitude     = e.latLng.lng();
            $scope.geolocation();
        });

        markers = []; 

        $scope.map_pins.forEach(function(data){
            if(data.latitude != undefined && data.longitude != undefined ){
                var markerpos = new google.maps.LatLng(data.latitude,data.longitude);
                var marker = new google.maps.Marker({
                    position:markerpos,
                    map: map
                });
                markers.push(marker);
                var votestructure = "";
                var num = parseFloat(data.vote).toFixed(1);
                for(var k = 0; k < 5; k++){
                    if((num <= (k+0.5)) && (num > (k+0.0))){
                        votestructure += "<li class='half'></li>";
                    } else if(num >= (k+0.6)){
                        votestructure += "<li class='active'></li>";
                    } else {
                        votestructure += "<li></li>";   
                    }
                }
                var pic = "<img src='app/assets/images/store-prod.jpg'>";
                if(data.pic !== ""){
                    pic = "<img src='"+ data.pic +"'>";
                }

                var mapfrndcount = "<img src='app/assets/images/group-count.png'><span class='number map-frnd-count-number'>0</span>";
                
                var infowindow = new google.maps.InfoWindow();
                var content = "<div class='offermapinfo-block'><div class='pic-container'>" + pic + "</div><div class='description'><div class='map-frnd-count'>"+mapfrndcount+"</div><div class='offer-map-heading'><a href='#/shop/view/"+data.id+"'>"+data.name+"</a></div><div><div class='vote-count'><ul>"+votestructure+"</ul></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span class='ca-html'>0€</span></div><div class='categories'>"+ data.cat +"</div></div>";
                google.maps.event.addListener(marker, 'click', (function(marker, content) {
                    return function() {
                       if (openedInfoWindow != null) openedInfoWindow.close();
                       $scope.getstorecredit(data.id);  
                       $scope.frindBoughtCount(data.id);
                       infowindow.setContent(content);
                       infowindow.open(map, marker);
                       openedInfoWindow = infowindow;
                       google.maps.event.addListener(infowindow, 'closeclick', function() {
                           openedInfoWindow = null;
                       });
                    };
                })(marker,content));  
            }
        });
    };

    if(navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
            $scope.latitute      = position.coords.latitude;
            $scope.longitude     = position.coords.longitude;
            $scope.Default_lat   = position.coords.latitude;
            $scope.Default_long  = position.coords.longitude;
            $scope.initializeMap();
        },function() {
          //The Geolocation service failed.
        });
    }
    
    if($routeParams.id === "1"){
        if($scope.i18n.left_menu != undefined){
            $scope.offerDropdownVal = $scope.i18n.left_menu.offer_card;
        }else{
            $scope.offerDropdownVal = "Shopping card";
        } 
    }else{
        if($routeParams.id === "3"){
            $scope.filterme   = 'selected';
            $scope.collection = "sixc_citizen_offers";
        }
        if($scope.i18n.left_menu != undefined){
            $scope.offerDropdownVal = $scope.i18n.left_menu.offer_coupons;
        }else{
            $scope.offerDropdownVal = "Coupons";
        } 
    }    
   
    $scope.offerDropdown = ['Shopping card','Coupons','Promotions E-commerce'];
    
    $scope.ConvertCategory = function(id){
        var cat = "";
        $scope.categories.forEach( function (Item)
        {
            if(String(Item.id) === id){
                cat = Item.category_name;
            }
        });
        return cat;
    };

    $scope.fireSearch = function(event){
        if(event.which === 13) {
            $scope.getlistingData($scope.itemsPerPage);
        }    
    };

    $scope.removepins = function(){
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
        }
    };

    $scope.searchCategory = function(currentLanguage){
        $scope.categories = [];
        var opts = {};
            opts.lang_code  = currentLanguage;
            opts.session_id = APP.currentUser.id;
        
        ProfileService.searchCatagory(opts,function(data){
            if(data.code === 101 && data.message === 'SUCCESS'){
                if(data.data.length > 0){
                    $timeout(function() {
                        $scope.$apply(function(){
                            $scope.categories = data.data;
                        });    
                    }, 0);    
                }
            }
        });
    };
    
    // creating category drop down
    $scope.$watch('currentLanguage', function(newValue, oldValue) {
        $scope.searchCategory(newValue);
    });

    $scope.changeCat = function(){
       // $scope.collection    = "sixc_offers";
        $scope.getlistingData($scope.itemsPerPage);
    };

    $scope.OfferChange = function(){
        if($scope.offerDropdownVal === $scope.i18n.offer_shoppingcard.promotion){
            $scope.iscomingSoon = true;
            $scope.offerlistingObject = [];
            $scope.range = []; 
            $scope.noResultFound = false;
            $scope.removepins();
        }else{
            $scope.iscomingSoon = false;
            if($scope.offerDropdownVal === $scope.i18n.left_menu.offer_card){
                $scope.Offercard   = 'selected';
                $scope.Offercoupon = '';
                $scope.offer_id    = "551ce49e2aa8f00f20d93295";
                $scope.offer_type  = "Card";
            }else{
                $scope.Offercard   = '';
                $scope.Offercoupon = 'selected';
                $scope.offer_id    = "551ce49e2aa8f00f20d9328f";
                $scope.offer_type  = "Coupon";
            }
            $scope.getlistingData($scope.itemsPerPage);
        }
     };

    //Get friend count on store
    $scope.frindBoughtCount = function(id) {       
        var opts = {};
        if(id === undefined){
            opts = {"function":"UtilityService.friendsShoppingCount", "parameters":[{"asArray":true,"shop_id":$scope.shop_id,"citizen_id":String(APP.currentUser.id)}]}    
        }else{
            opts = {"function":"UtilityService.friendsShoppingCount", "parameters":[{"asArray":true,"shop_id":[String(id)],"citizen_id":String(APP.currentUser.id)}]}
        }
        
        StoreService.frindboughtcount(opts, function(data){
            if(data.response === undefined || data.response === ''){
                $scope.frcount = [];
            } else {
                if(id === undefined){
                    $timeout(function() {
                        $scope.$apply(function(){
                            $scope.frcount = data.response;   
                        });    
                    }, 0);   
                }else{
                    $(".map-frnd-count-number").html(data.response[0].count);
                }    
            }
        });
    };

    $scope.getfrndlist = function(event, shopid){    
        $scope.friendlist = [];
        $scope.nofndlist = false;
        if($(event.target).nextAll('ul.friend-list:first').is(':visible')){
            $(event.target).nextAll('ul.friend-list:first').hide();
        }else{
            $scope.frndlistloader = true;
            $(event.target).nextAll('ul.friend-list:first').show();
            var formData = {};
                formData.user_id = APP.currentUser.id;
                formData.shop_id = shopid;
            $scope.friendlist = [];
            StoreService.getfriendboughtonstores(formData, function(data){
                $scope.frndlistloader = false;
                if(data.code === 101 && data.data.friends != undefined && data.data.friends.length > 0) {
                    $scope.nofndlist = false;
                    $scope.friendlist = data.data.friends;
                }else{
                    $scope.nofndlist = true;
                }
            });
        }
    };

    $scope.getcount = function(itemsPerPage){
        var opt = {};
            opt["$collection"] = $scope.collection;
        var filter = {};
            filter["offer_type"] = $scope.offer_id;
            filter["start_date"] = {"$lte":"$$CurrentDate"};
            filter["end_date"]   = {"$gte":"$$CurrentDate"};
        /*if($scope.filterme  === 'selected'){
            filter["citizen_id"]  = String(APP.currentUser.id);
            filter["is_my_offer"] = true;
        }*/
        
        if($scope.Shopid_loc.length > 0){
            var shopfilter = {};
                shopfilter["$in"] = $scope.Shopid_loc;
            filter["shop_id"] = shopfilter;
        }

        if($scope.searchText !== "" && $scope.searchText != undefined){
            filter["$text"] = {"$search":$scope.searchText};
        }

        if($scope.selectedcat != undefined){
            filter["shop_id.category_id"] = String($scope.selectedcat.id);
        }
        opt["$filter"] = filter;
        opt["$group"] = {"count":{"$sum":1},"_id":null};
        OfferService.getApplaneData(opt, function(data){
            if(data.status === "ok" && data.code === 200){
                if(data.response.result.length > 0){
                    $scope.totalItems = Math.ceil(data.response.result[0].count/itemsPerPage); 
                    $scope.range = [];  
                    for (var i=1; i<=$scope.totalItems; i++) {
                        $scope.range.push(i);
                    }             
                }
            }
        });
    };

    $scope.changePageMore = function(pageNo) {
        $scope.currentPage = pageNo;
        $scope.getlistingData($scope.itemsPerPage);
    };
    
    $scope.calculateprice = function(val, dis){
        var halfprice = val/2 ;
        var obc = {};
           obc.price_purchase = (val - (val * dis)/100); 
           obc.price_sixth    = halfprice;
        if($scope.citizenIncome < halfprice){
           obc.price_sixth    = $scope.citizenIncome; 
        }
           obc.onlyForYou    = obc.price_purchase - obc.price_sixth;
        return obc;
    };

    $scope.getCitizenIncome = function(){
        var opts = {};
            opts["$collection"] = "sixc_bucks";
            opts["$filter"] = {"citizen_id" : String(APP.currentUser.id)};
            opts["$group"] = {"_id":null,"amount":{"$sum":"$amount"},"debit":{"$sum":"$debit"},"credit":{"$sum":"$credit"}};

        OfferService.getApplaneData(opts, function(data){
            if(data.status === "ok" && data.code === 200){
                if(data.response.result.length > 0){
                    if(data.response.result[0].amount != null){
                        $scope.citizenIncome = data.response.result[0].amount;
                    }
                }
            }
        });
    };
    $scope.getCitizenIncome();

    $scope.getlistingData = function(itemsPerPage){
        if($scope.i18n.left_menu != undefined){
            $scope.offerDropdown = [$scope.i18n.left_menu.offer_card,$scope.i18n.left_menu.offer_coupons,$scope.i18n.offer_shoppingcard.promotion];
        }    
        var option = {};
        option["$collection"] = $scope.collection;
        $scope.range = []; 
        $scope.shop_id = [];
        $scope.noResultFound = false;
        $scope.removepins();
        $scope.offerlodar  = true;
        $scope.offerlistingObject = [];
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        var filter  = {};
            filter["offer_type"] = $scope.offer_id;
        /*if($scope.filterme  === 'selected'){
            filter["citizen_id"]  = String(APP.currentUser.id);
            filter["is_my_offer"] = true;
        }*/
        if($scope.Shopid_loc.length > 0){
            var shopfilter = {};
                shopfilter["$in"] = $scope.Shopid_loc;
            filter["shop_id"] = shopfilter;
        }
        if($scope.selectedcat != undefined){
            filter["shop_id.category_id"] = String($scope.selectedcat.id);
        }
        if($scope.searchText !== "" && $scope.searchText != undefined){
            filter["$text"] = {"$search":$scope.searchText};
        }

        filter["start_date"] = {"$lte":"$$CurrentDate"};
        filter["end_date"]   = {"$gte":"$$CurrentDate"};
        var sort = {};
            sort[$scope.sortby] = -1;
        option["$sort"]    = sort;
        option["$limit"]   = itemsPerPage;
        option["$skip"]    = limit_start;
        option["$filter"]  = filter;

        if($scope.collection === "sixc_citizen_offers"){
            var myofferopts = {};
                myofferopts = {"function" : "SixcServices.offerForMe","parameters":[{"citizen_id":String(APP.currentUser.id),"count":true,"$filter":filter,"$sort":sort,"$limit":itemsPerPage,"$skip":limit_start}]};
            OfferService.getApplaneInvoke(myofferopts, function(data){
                $scope.offerlodar  = false;
                if(data.response === undefined || data.response === ''){
                    $scope.noResultFound = true;
                    $scope.initializeMap();
                }else {
                    if(data.response.myOffer.result.length === 0){
                        $scope.noResultFound = true;
                        $scope.initializeMap();
                    }else{
                        $scope.noResultFound = false;
                        $scope.offerlistingObject = data.response.myOffer.result;
                        $scope.offerlistingObject.forEach(function(val,index){
                            $scope.shop_id.push(val.shop_id._id);
                            var pin = {};
                                pin.longitude = val.shop_id.longitude;
                                pin.latitude  = val.shop_id.latitude;
                                pin.id        = val.shop_id._id;
                                pin.name      = val.shop_id.name;
                                if(val.shop_id.average_anonymous_rating != undefined){
                                    pin.vote  = val.shop_id.average_anonymous_rating;
                                }else{
                                    pin.vote  = 0;
                                }
                                if(val.shop_id.shop_thumbnail_img != undefined){
                                    pin.pic  = val.shop_id.shop_thumbnail_img;
                                }else{
                                    pin.pic  = "";
                                }
                                if(val.shop_id.category_id != undefined){
                                    pin.cat  = $scope.ConvertCategory(val.shop_id.category_id._id);
                                }else{
                                    pin.cat  = "";
                                }
                            $scope.map_pins.push(pin);
                        });
                        $scope.initializeMap();
                        $scope.frindBoughtCount();
                        $scope.totalItems = Math.ceil(data.response.myOfferCount.result/itemsPerPage); 
                        $scope.range = [];  
                        for (var i=1; i<=$scope.totalItems; i++) {
                            $scope.range.push(i);
                        }    
                    }    
                } 
            });
        }else{
            OfferService.getApplaneData(option, function(data){
                $scope.offerlodar  = false;
                if(data.status === "ok" && data.code === 200){
                    if(data.response.result.length > 0){
                        $scope.noResultFound = false;
                        $scope.offerlistingObject = data.response.result;
                        $scope.offerlistingObject.forEach(function(val,index){
                            $scope.shop_id.push(val.shop_id._id);
                            var pin = {};
                                pin.longitude = val.shop_id.longitude;
                                pin.latitude  = val.shop_id.latitude;
                                pin.id        = val.shop_id._id;
                                pin.name      = val.shop_id.name;
                                if(val.shop_id.average_anonymous_rating != undefined){
                                    pin.vote  = val.shop_id.average_anonymous_rating;
                                }else{
                                    pin.vote  = 0;
                                }
                                if(val.shop_id.shop_thumbnail_img != undefined){
                                    pin.pic  = val.shop_id.shop_thumbnail_img;
                                }else{
                                    pin.pic  = "";
                                }
                                if(val.shop_id.category_id != undefined){
                                    pin.cat  = $scope.ConvertCategory(val.shop_id.category_id._id);
                                }else{
                                    pin.cat  = "";
                                }
                                
                            $scope.map_pins.push(pin);
                        });
                        $scope.initializeMap();
                        $scope.frindBoughtCount();
                        $scope.getcount(itemsPerPage);
                    }else{
                        $scope.initializeMap();
                        $scope.noResultFound = true;
                    }
                }else{
                    $scope.initializeMap();
                    $scope.noResultFound = true;
                }
            });
        }
    };

    $scope.geolocation = function(){
        $scope.Shopid_loc = [];
        var opts = {};
            opts.longitude  = $scope.longitude;
            opts.latitute   = $scope.latitute;
            opts.radius     = $scope.selectedRange;
            opts.session_id = APP.currentUser.id;
        OfferService.searchstoreondimensions(opts,function(data){
            if(data.code === 101 && data.message === 'SUCCESS'){
                data.data.stores.forEach(function(rsl){
                   $scope.Shopid_loc.push(rsl.id);
                });
            }
            if($scope.locationSearch === false){
               $scope.Shopid_loc = [];
            }
            $scope.OfferChange();
        });
    };
   
    $scope.search = function (search) {
        //$scope.searchResult = true;    
    };

    $scope.searchMapText = function(){
        if($scope.searchMap === ""){
            $scope.locationSearch= false;
            $scope.latitute = $scope.Default_lat ;
            $scope.longitude = $scope.Default_long;
            $scope.geolocation();
        }
    };

    $scope.changeView = function(layout) {
        if(layout == 'grid'){
            $scope.gridActive = 'active'; 
            $scope.listActive = ''; 
        }else if(layout == 'list'){
            $scope.listActive = 'active'; 
            $scope.gridActive = '';
        }
    };

    $scope.filterChange = function(){
        if($scope.filterme === 'selected'){
            $scope.filterme      = '';
            $scope.collection    = "sixc_offers";
        }else{
            $scope.filterme      = 'selected';
            $scope.collection    = "sixc_citizen_offers";
        }
        $scope.getlistingData($scope.itemsPerPage);
    };

    $scope.setPage = function(number) {
        $scope.itemsPerPage = number;
        $scope.currentPage = 1;
        $scope.getlistingData($scope.itemsPerPage);
    };

    $scope.prevPageDisabled = function() {
        return $scope.currentPage === 1 ? "disabled" : "";
    };

    $scope.prevPage = function() {
        if ($scope.currentPage > 1) {
            $scope.currentPage--;
        }
        $scope.getlistingData($scope.itemsPerPage);
    };

    $scope.nextPage = function() {
        if ($scope.currentPage < $scope.totalItems) {
            $scope.currentPage++;
        }
        $scope.getlistingData($scope.itemsPerPage);
    };

    $scope.paginate = function() {
       $scope.currentPage = 1; 
    }

    $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.totalItems ? "disabled" : "";
    };

    $scope.$watch('selectedRange', function(value) {
        $scope.selectedRange = value;
        $scope.geolocation();
    });

    $scope.buyCoupon = function(index, id){
        $scope['buyCouponbtn' + index]   = 1;
        $scope['buyCouponloder' + index] = true;

        var opts = {};
           opts = {"function" : "ApplyCouponBL.applyCoupon","parameters":[{"offer_id": String(id),"citizen_id":String(APP.currentUser.id)}]};
      
        OfferService.getApplaneInvoke(opts, function(data){
            if(data.response === undefined || data.response === ''){
                $scope['buyCouponErr' + index] = true;
            }else{
                if(data.status === "ok" && data.code === 200){
                    $scope['buyCouponSuccess' + index] = true;
                }else if (data.response === "Coupon is already purchased"){
                    $scope['buyCouponalready' + index] = true;
                }else{
                    $scope['buyCouponErr' + index] = true;
                }
            }
            $scope['buyCouponloder' + index] = false;
            $timeout(function() {
                $scope['buyCouponbtn' + index]     = 0;
                $scope['buyCouponloder' + index]   = false;
                $scope['buyCouponSuccess' + index] = false;
                $scope['buyCouponErr' + index]     = false;
                $scope['buyCouponalready' + index] = false;    
            }, 8000); 
        });
    };

    $scope.Sorting = function(type){
        $scope.sortby = type;
        $scope.getlistingData($scope.itemsPerPage);
    };
}]);

app.controller('CardDetailsController', ['$scope', '$timeout', '$routeParams', 'OfferService', 'StoreService', '$modal', '$location', '$window', function( $scope, $timeout, $routeParams, OfferService, StoreService, $modal, $location, $window) {
    var map;
    var IMAGE_WIDTH    = 405;
    var colorArray     = ['#0b7eba', '#cccbca', '#ffce30'];
    $scope.offer_id    = $routeParams.id;
    $scope.reviews     = [];
    $scope.totalreview = 0;
    $scope.reviewRes   = 1;
    $scope.isLoading   = true;
    $scope.textLimit   = 200;
    $scope.loadMoreFunc = 'loadMore()';
    $scope.friendsId    = [];
    $scope.frndlistshow = true;
    $scope.storeId;
    $scope.cardData;
    $scope.citizenIncome = 0;
    $scope.PieChartData = [];
    $scope.galleryData  = [];
    $scope.Imageselected ;
    $scope.price_sixth = 0;
    $scope.price_purchase = 0;
    $scope.onlyForYou = 0;
    $scope.nofndlist     = false;
    $scope.FrndArray = [];
    $scope.vote = 0;
    $scope.pic  = "";
    
    $scope.format = function(n, currency) {
        n = Number(n);
        return currency + "" + n.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
    }

    $scope.getCitizenIncome = function(){
        var opts = {};
            opts["$collection"] = "sixc_bucks";
            opts["$filter"] = {"citizen_id" : String(APP.currentUser.id)};
            opts["$group"] = {"_id":null,"amount":{"$sum":"$amount"},"debit":{"$sum":"$debit"},"credit":{"$sum":"$credit"}};

        OfferService.getApplaneData(opts, function(data){
            if(data.status === "ok" && data.code === 200){
                if(data.response.result.length > 0){
                    if(data.response.result[0].amount != null){
                        $scope.citizenIncome = data.response.result[0].amount;
                    }
                }
            }
        });
    };
    $scope.getCitizenIncome();

    $scope.calculateprice = function(val, dis){
        var halfprice = val/2 ;
        var discount  = (val * dis)/100; 
        $timeout(function(){
            $scope.$apply(function(){
                $scope.price_sixth = halfprice;
                $scope.price_purchase = (val - (val * dis)/100); 
                
                if($scope.citizenIncome < halfprice){
                   $scope.price_sixth = $scope.citizenIncome; 
                }
                $scope.onlyForYou = $scope.price_purchase - $scope.price_sixth;
                $scope.onlyForYou = Math.round($scope.onlyForYou * 100) / 100;
                $scope.PieChartData = [
                    {
                        key: $scope.i18n.offer_shoppingcard.price_for_me,
                        y: Math.round($scope.onlyForYou * 100) / 100
                    },
                    {
                        key: $scope.i18n.offer_shoppingcard.price_discount,
                        y: Math.round(discount * 100) / 100
                    },
                    {
                        key: $scope.i18n.offer_shoppingcard.price_app_cont,
                        y: Math.round($scope.price_sixth * 100) / 100
                    },
                ];
            })
        }, 500);
    };

    //Get friend count on store
    $scope.frindBoughtCount = function(id) {       
        console.log(id);
        var opts = {};
        if(id === undefined){
            opts = {"function":"UtilityService.friendsShoppingCount", "parameters":[{"asArray":true,"shop_id":[String($scope.storeId)],"citizen_id":String(APP.currentUser.id)}]}    
        }else{
            opts = {"function":"UtilityService.friendsShoppingCount", "parameters":[{"asArray":true,"shop_id":[String(id)],"citizen_id":String(APP.currentUser.id)}]}
        }
        
        StoreService.frindboughtcount(opts, function(data){
            if(data.response === undefined || data.response === ''){
                $scope.frcount = [];
            } else {
                if(id === undefined){
                    $timeout(function() {
                        $scope.$apply(function(){
                            $scope.frcount = data.response;   
                        });    
                    }, 0);   
                }else{
                    $(".map-frnd-count-number").html(data.response[0].count);
                }    
            }
        });
    };

    var option = {};
        option["$collection"] = "sixc_offers";
            
    $scope.getData = function(itemsPerPage){
        $scope.cardData = [];
        $scope.noResultFound = false;
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        var filter  = {};
            filter["_id"] = $scope.offer_id;
            
        option["$filter"]  = filter;

        OfferService.getApplaneData(option, function(data){
            $scope.offerlodar  = false;
            if(data.status === "ok" && data.code === 200){
                if(data.response.result.length > 0){
                   $scope.noResultFound = false;
                   $scope.cardData = data.response.result[0];
                    if($scope.cardData.shop_id.average_anonymous_rating != undefined){
                        $scope.vote  = $scope.cardData.shop_id.average_anonymous_rating;
                    }
                    if($scope.cardData.shop_id.shop_thumbnail_img != undefined){
                        $scope.pic  = $scope.cardData.shop_id.shop_thumbnail_img;
                    }
                   $scope.storeId  = $scope.cardData.shop_id._id;
                   $scope.storename = $scope.cardData.shop_id.name;
                   $scope.getreviews($scope.storeId);
                   $scope.frindBoughtCount();
                   $scope.searchFriend($scope.storeId);
                   $scope.calculateprice($scope.cardData.value,$scope.cardData.discount);
                   $scope.initializeMap($scope.cardData.shop_id.longitude,$scope.cardData.shop_id.latitude);
                   $scope.galleryData   = $scope.cardData.imageurl.split(",");
                   $scope.Imageselected = $scope.galleryData[0];
                }else{
                    $scope.noResultFound = true;
                }
            }else{
               $scope.noResultFound = true;
            }
        });
    };

    $scope.getData();

    $scope.showAllFriend = function(post_id, creater_info, allTagFriend){
        $scope.allTagFriends = allTagFriend;
        $scope.post_id = post_id;
        $scope.creater = creater_info;
        var modalInstance = $modal.open({
            template: '<div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3><div class="modal-popup-close" ng-click="closeModal()"></div> </div><div class="modal-body tag-frnd-modal"><ul><li data-ng-repeat="friend in allTagFriends"><span class="tag-img"><img title="" style="width:30px;height:30px" alt="No image available" data-ng-src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a href ng-click="viewFriendProile(friend.id)">{{friend.first_name}} {{friend.last_name}}</a></span></li></ul></div><div class="modal-footer"></div>',
            controller: 'ModalController',
            size: 'lg',
            scope: $scope,
        });

        modalInstance.result.then(function (selectedItem) {
        }, function () {
            //$log.info('Modal dismissed at: ' + new Date());
        });
        $scope.viewFriendProile = function(friendId){
            modalInstance.dismiss('cancel');
            $location.path('/viewfriend/'+friendId);
        };
    };

    $scope.getreviews = function(shopid){
        var limit_start = $scope.reviews.length;
        var opts = {};
        opts.store_id = shopid;
        opts.user_id  = APP.currentUser.id;
        opts.limit_start = limit_start;
        opts.limit_size  = 5;
        if($scope.FrndArray.length > 0){
            opts.friends_ids = $scope.FrndArray;
        }
        if ((($scope.totalreview > limit_start ) || $scope.totalreview == 0 ) && $scope.reviewRes == 1) {
            $scope.reviewRes = 0;
            $scope.isLoading = true;
            // This service's function returns customers review
            StoreService.listcustomersreviews(opts, function(data){
                $scope.isLoading = false;
                if(data.code === "101")
                {
                    $scope.isLoading = false;
                    var items = data.data;
                    if(items != undefined){
                        $scope.reviews = $scope.reviews.concat(items);    
                    }
                    $scope.totalreview = data.count;
                } 

                if ($scope.reviews.length === 0){
                    $scope.noContent = true; 
                } 
                $scope.reviewRes = 1;
            });
        } 
    }; 

    $scope.frndVal = function(id) {
        $scope.FrndArray = [];
        if(id === 'all'){}else{
            $scope.FrndArray.push(String(id));
        }
        $scope.totalreview = 0;
        $scope.reviewRes == 1;
        $scope.reviews = [];
        $scope.getreviews($scope.storeId);
    };
    
    $scope.showmoredesc = function(index, event){
        $(event.target).hide();
        $('.full-desc' + index).show();
        $('.limit-desc' + index).hide();
    };

    //check screen for mobile devicess to show corresponding layou
    $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
        $scope.windowHeight = newValue.h;
        $scope.windowWidth  = newValue.w;
        if($scope.windowWidth <= '768'){
            $scope.isSmallScreen =  true; //declare in main controller
            $scope.loadMoreFunc  = '';
        } else {
            $scope.isSmallScreen =  false; //declare in main controller
            $scope.loadMoreFunc  = 'loadMore()';
        }
    }, true);

    $scope.loadMore = function() {
        if($scope.reviews.length > 0){
            $scope.getreviews($scope.storeId);
        }
    };

    $scope.searchFriend = function(frndId) {  
        $scope.nofndlist = false;      
        var opt = {};
            opt.user_id = APP.currentUser.id;
            opt.shop_id = frndId;
        StoreService.getfriendboughtonstores(opt, function(data){
            if(data.code === 101 && data.data.friends != undefined && data.data.friends.length > 0) {
                $scope.friendlist = data.data.friends;
            } else {
                $scope.nofndlist = true;
            }
        });
    };
    
    // Scroll to appropriate position based on image index and width
    $scope.scrollTo = function(image, ind, element) {
        $(".thumbnailanchor").removeClass('active');
        $(element.target).parent().addClass('active');
        $scope.listposition = {left:(IMAGE_WIDTH * ind * -1) + "px"};
        $scope.Imageselected = image;
    };
    
    $scope.xFunction = function(){
        return function(d) {
            return d.key;
        };
    };

    $scope.yFunction = function(){
        return function(d) {
            return d.y;
        };
    };

    $scope.descriptionFunction = function(){
        return function(d){
            return d.key;
        };
    };

    $scope.colorFunction = function() {
        return function(d, i) {
            return colorArray[i];
        };
    };

    $scope.buycard = function(val, dis){
        $scope.buyclass = 'disabled';
        $scope.buylodar = true;
        var opts = {};
            opts.session_id = String(APP.currentUser.id);
            opts.shop_id    = String($scope.storeId);
            opts.offer_id   = String($scope.offer_id);
            opts.total_value= val;
            opts.discount   = dis;
            opts.cancel_url = APP.payment.siteDomain + "#/buycard_cancel";
            opts.return_url = APP.payment.siteDomain + "#/buycard_success";

        OfferService.buyshoppingcard(opts, function(data){
            if(data.code === 101 && data.message === "SUCCESS"){
                $window.location.href = data.data.link;
            }else{
                $scope.buyerror = true;
                $scope.buyclass = '';
                $scope.buylodar = false;
            }
            $timeout(function() {
                $scope.buyerror = false;
                $scope.buyclass = '';
                $scope.buylodar = false;  
            }, 8000); 
        });    
    };

    $scope.getstorecredit = function(storeId) { 
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth();
        var yr = today.getFullYear();
        var date = new Date(yr,mm,dd);
        var opts = {"function":"UtilityService.shopWiseCitizenIncome", "parameters":[{"shop_id":[storeId],"citizen_id":String(APP.currentUser.id),"date":String(date.toISOString())}]}
        StoreService.getstorecredit(opts, function(data){
            if(data.response === undefined || data.response === '' || data.response.length === 0){} else {
                $('.ca-html').html($scope.format(data.response[0].total_credit, '€'));
            }
        });
    };

    $scope.initializeMap = function(longitude, latitude){
        var centerLatLng   = new google.maps.LatLng(latitude,longitude);
        var mapProp = {
            center      : centerLatLng,
            zoom        : 7,
            mapTypeId   : google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(document.getElementById('map-canvas'), mapProp);

        var markers = [];
        var markerpos = new google.maps.LatLng(latitude,longitude);
        var marker = new google.maps.Marker({
            position:markerpos,
            map: map
        });
        markers.push(marker);

        var votestructure = "";
        var num = parseFloat($scope.vote).toFixed(1);
        for(var k = 0; k < 5; k++){
            if((num <= (k+0.5)) && (num > (k+0.0))){
                votestructure += "<li class='half'></li>";
            } else if(num >= (k+0.6)){
                votestructure += "<li class='active'></li>";
            } else {
                votestructure += "<li></li>";   
            }
        }
        var pic = "<img src='app/assets/images/store-prod.jpg'>";
        if($scope.pic !== ""){
            pic = "<img src='"+ $scope.pic +"'>";
        }

        var mapfrndcount = "<img src='app/assets/images/group-count.png'><span class='number map-frnd-count-number'>0</span>";
        
        var infowindow = new google.maps.InfoWindow();
        var content = "<div class='offermapinfo-block'><div class='pic-container'>" + pic + "</div><div class='description'><div class='map-frnd-count'>"+mapfrndcount+"</div><div class='offer-map-heading'><a href='#/shop/view/"+$scope.storeId+"'>"+$scope.storename+"</a></div><div><div class='vote-count'><ul>"+votestructure+"</ul></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span class='ca-html'>0€</span></div></div>";

        var infowindow = new google.maps.InfoWindow();

        google.maps.event.addListener(marker, 'click', (function(marker, content) {
            return function() {
               $scope.getstorecredit($scope.storeId);  
               $scope.frindBoughtCount($scope.storeId);
               infowindow.setContent(content);
               infowindow.open(map,marker);
            };
        })(marker, content));  
    };

    $timeout(function(){
        $('#scroll-pane').perfectScrollbar('update');
    },2000);
    $('#scroll-pane').perfectScrollbar();
}]);

app.controller('BuyCardController', ['$scope', 'OfferService', '$routeParams', '$location', function($scope, OfferService, $routeParams, $location) {
    $scope.sendresponse = function(){
        var opts = {};
            opts.session_id = String(APP.currentUser.id);
            opts.shop_id    = String($scope.shop_id);
            opts.transaction_id = $scope.transaction_id;
            opts.type = $scope.success_type
            
        OfferService.responsebuycards(opts, function(data){
            /*This service is for sending response about transaction to back end*/
        });    
    };

    $scope.isLoading = true;
    var searchObject = $location.search();
    $scope.success_type = "SUCCESS";
    if(searchObject.transaction_id != undefined && searchObject.shop_id != undefined){
        $scope.transaction_id = searchObject.transaction_id;
        $scope.shop_id  = searchObject.shop_id;
        $scope.isLoading = false;
        if($location.path().trim() === "/buycard_cancel"){
            $scope.message = 'error';
            $scope.success_type = "CANCELED";
        }else{
            $scope.message = 'success';
        }
        $scope.sendresponse();
    }else{
        $location.path("/");
    }
}]);
app.controller('ProfileController',['$cookieStore', '$rootScope', '$scope', '$http', '$location', '$timeout', '$interval', '$routeParams', '$modal', '$log', 'UserService', 'ProfileService', 'fileReader', 'threadAndPass', function($cookieStore, $rootScope, $scope, $http, $location, $timeout, $interval, $routeParams, $modal, $log, UserService, ProfileService, fileReader, threadAndPass) {
	//$('#retrieveFromDatabase').linkPreviewRetrieve();
   var latitudeMap = 0;
   var longitudeMap = 0;
   $('.nav li').removeClass('active');
   $('.home').addClass('active');

   $('.nav li').click(function() {
   		$('.nav li').removeClass('active');
   		$(this).addClass('active');
   });
   
   $('.dropdown-menu li').click(function() {
   		$('.nav li').removeClass('active');
   		
   });   

	$scope.editUser = {};
	$scope.renderProfile = false;
	$scope.friendProfile = false;
	$scope.requestSend = true;
	$scope.alreadtSend = true;
	$scope.broker = 0;
	$scope.userDetails = "";
	
	$scope.getUserProfile = function(profileType){
		var opts = {};
		$scope.editMessage = "";
		opts.user_id = APP.currentUser.id;
		opts.profile_type = profileType;
		ProfileService.getProfile(opts, function(data) {
			$scope.userDetails = data.data;
			$scope.renderProfile = true;
		});
	};

	
	$scope.deleteProfile = function() {
		var opts = {};
		opts.user_id = APP.currentUser.id;
		ProfileService.deleteProfile(opts, function(data) {
			
		});
	};
	$scope.searchFrind ='';
	var DELAY_TIME_BEFORE_POSTING = 300;
	//var element = $('#search');
    var currentTimeout = null;

    $('#search').keydown(function() {
    
      var model = $scope.searchFrind;
      //var poster = model($scope);
      if(currentTimeout) {
        $timeout.cancel(currentTimeout);
      }
      currentTimeout = $timeout(function(){
        $scope.searchUser();
      }, DELAY_TIME_BEFORE_POSTING)
      });
  
    
	$scope.userList = [];
	$scope.cancelRequest = 0;
	$scope.showList = false;
	$scope.searchUser = function() {
		$scope.showList = true;
		$scope.cancelRequest = 0;
            $scope.albloader = true;
		var opts = {};
        if($scope.searchFrind.length >= 3){
			opts.user_id = APP.currentUser.id;
			opts.friend_name = $scope.searchFrind;
			opts.limit_start = APP.user_list_pagination.start;
			opts.limit_size = APP.user_list_pagination.end; 
			ProfileService.searchAllProfile(opts, function(data) {
				if( $scope.cancelRequest == 0 ){
					$scope.userList = [];
            		if(data.code == 101 ) {
						if(data.data.count != 0){
			                $scope.userList = [];
			                $scope.albloader = false;
			                $scope.userList = $scope.userList.concat(data.data);  
			            }else {
			                $scope.showList = false;
			            }	
			        }else{
		               $scope.albloader = false;
					}
				}else{

				}
			});
		}else{
			$scope.showList = false;
			$scope.userList = [];
			$scope.userList.slice();
			$scope.cancelRequest = 1;
		}
	};

	$scope.clearList = function(name){
		stop = $interval(function() {
			$scope.cancelRequest = 1;
			$scope.showList = false;
			if(name !== 'blank'){
				$scope.searchFrind = name;
			}
		}, 1000,1);
	}

	//TODO: test
	$scope.searchFriend = function() {
		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.friend_name = "liju"; //TODO
		opts.session_id = APP.currentUser.id;
		opts.limit_start = APP.user_list_pagination.start;
		opts.limit_size = APP.user_list_pagination.end; 
		ProfileService.searchFriend(opts, function(data) {
			
		});
	};

	$scope.showAllFriend = function(post_id, creater_info, allTagFriend){
		$scope.allTagFriends = allTagFriend;
		//$scope.currentUser = APP.currentUser;
		$scope.post_id = post_id;
		$scope.creater = creater_info;
		var modalInstance = $modal.open({
            template: '<div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3> </div><div class="modal-body tag-frnd-modal"><ul><li data-ng-repeat="friend in allTagFriends"><span class="tag-img"><img title="" style="width:30px;height:30px" alt="No image available" data-ng-src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a ng-href="#/viewfriend/{{friend.id}}">{{friend.first_name}} {{friend.last_name}}</a><span class="frnd-details"><a href>{{friend.about_me}}</a></span></span><span data-ng-if="creater.id === currentUser.id || currentUser.id === friend.id" ng-click="RemoveTagFriend(friend, creater.id)" class="rmv-tag"><a href>{{i18n.profile_post.remove_tagged_friend}}</a></span></li></ul></div><div class="modal-footer"></div>',
            controller: 'ModalController',
            size: 'lg',
            scope: $scope,
        });

		modalInstance.result.then(function (selectedItem) {
		}, function () {
			$log.info('Modal dismissed at: ' + new Date());
		});
		$scope.RemoveTagFriend = function(friend, createrId){
			var opts = {};
			opts.user_id = APP.currentUser.id;
			opts.untag_user_id = friend.id;
			opts.post_id = $scope.post_id;
			ProfileService.removeTagedFriends(opts,function(data){
				if(data.code === 101){
					var index = $scope.allTagFriends.indexOf(friend)
					$scope.allTagFriends.splice(index,1);
					if(createrId != APP.currentUser.id ){
						modalInstance.close();
					}
					if($scope.allTagFriends.length === 0){
						modalInstance.close();
					}	
				} 
			});
		};
	};

	// checking tagged friend
	$scope.validate = false;
	$scope.checkTagUser = function(allTaggedFriend){
		$scope.tagInfo = allTaggedFriend;
		$scope.validate = false;
		angular.forEach($scope.tagInfo,function(index){
			if(index.id === APP.currentUser.id){
				$scope.validate = true;
			}
		});

		if($scope.validate === true){
			return true;
		}
	};

    $(".fancybox").fancybox();
}]).filter('unsafe', function($sce) {
    return function(val) {
        return $sce.trustAsHtml(val);
    };
});

//Controller to handle the profile related notifications
app.controller('ProfileNotiController',['$cookieStore', '$scope', '$http', '$location', '$timeout', 'ProfileService', '$rootScope', 'storeHistorySelection', function($cookieStore, $scope, $http, $location, $timeout, ProfileService, $rootScope, storeHistorySelection) {
	$scope.NotificationFound = false;
	$scope.NotificationNotFound = false;
	
	$(document).click(function(){
		$scope.$apply(function() {
   			$rootScope.groupNotificationList = false;
			$rootScope.showNewMessageList = false;
			$rootScope.showNotificationList = false;
			$rootScope.showFriendNotificationList = false;
			$rootScope.loadGroupNotification = false;
	  		$scope.scopeVar2 = false;
	   		$scope.scopeVar  = false;
	     	$scope.scopeVar1 = false;
			$scope.scopeVar3 = false;
        });  
	});


	$scope.getNotification = function() {
		$scope.NotificationFound = false;
		$scope.NotificationNotFound = false;
		opts = {};
		opts.user_id = APP.currentUser.id;
		opts.limit_start = 0;
		opts.limit_size = 12;
		ProfileService.getPendingFreindReq(opts, function(data) {
			if(data.code == 101) {
				if(data.data.length != 0) {
					$scope.FriendRequests = data.data;
					$scope.NotificationFound = true;
				} else {
					$scope.NotificationNotFound = true;
				}
			} else {
				$scope.NotificationNotFound = true;
			}
		});
	};

	//$scope.getNotification();
	$scope.AcceptRequest = function(friendId) {
		opts = {};
		opts.user_id = APP.currentUser.id;
		opts.friend_id = friendId;
		opts.action = "1";
		ProfileService.acceptFriendRequest(opts, function(data) {
			if(data.code == 101) {
				$scope.getNotification();
			} else {

			}
		});
	};

	$scope.RejectRequest = function(friendId, id) { 
		$("#notii-"+id).fadeOut(1000);
		opts = {};
		opts.user_id = APP.currentUser.id;
		opts.friend_id = friendId;
		opts.action = "0";
		ProfileService.rejectFriendRequest(opts, function(data) {
			if(data.code == 101) {
				$scope.getNotification();
			} else {

			}
		});
	};

	var today = new Date();
	var dd = today.getDate();
	var mm = today.getMonth();
	var yr = today.getFullYear();
	var date = new Date(yr,mm,dd);
	var newdate = new Date(date);
	newdate.setDate(newdate.getDate() + 1);
	var nd = new Date(newdate);
	//get today credit on right panel
	$scope.getTodayCredit = function() { 
		opts = {};
		//opts = {"$collection":String(APP.applaneTables.today_credit),"$group":{"credit":{"$sum":"$credit"},"_id":null,"$fields":false},"$filter":{"citizen_id":String(APP.currentUser.id),"date":{"$gte":"2015-04-24T00:00:00.000Z","$lt":"2015-04-25T00:00:00.000Z"}},"$skip":0};
		opts = {"$collection":String(APP.applaneTables.today_credit),"$group":{"credit":{"$sum":"$credit"},"_id":null,"$fields":false},"$filter":{"citizen_id":String(APP.currentUser.id),"__history.__createdOn":{"$gte":String(date.toISOString()),"$lt":String(nd.toISOString())}},"$skip":0}
		ProfileService.getTodayCredit(opts, function(data) {
			if(data.response === undefined || data.response.result === '' ||data.response.result.length < 1){
				$scope.todayCredit = 0.00;
			} else {
				$scope.todayCredit = data.response.result[0].credit;
			}
		});
	};
	$scope.getTodayCredit();

	$scope.storeSelection = function(){
		storeHistorySelection.storeTodayYouGain();
	};
}]);

app.controller('passwordChangeController',['$cookieStore', '$scope', '$http', '$location', '$timeout', '$interval', '$routeParams', 'ProfileService', function($cookieStore, $scope, $http, $location, $timeout, $interval, $routeParams, ProfileService) {
	$scope.changeLoder = true;
	$scope.changePassword = function(){
		var opts = {};
		if($scope.previousPassword == undefined || $scope.previousPassword == ''){
			$scope.changeMessage = $scope.i18n.passchange.old_password;
			$scope.msgClass = 'login-error text-red text-center display-block-inline';
			$timeout(function(){
                $scope.changeMessage = '';
            }, 8000);
			return false;
		} else if($scope.oldPassword == undefined || $scope.oldPassword == ''){
			$scope.changeMessage = $scope.i18n.passchange.new_password;
			$scope.msgClass = 'login-error text-red text-center display-block-inline';
			$timeout(function(){
                $scope.changeMessage = '';
            }, 8000);
			return false;
		} else if($scope.newPassword == undefined || $scope.newPassword == '') {
			$scope.changeMessage = $scope.i18n.passchange.retype_password;
			$scope.msgClass = 'login-error text-red text-center display-block-inline';
			$timeout(function(){
                $scope.changeMessage = '';
            }, 8000);
			return false;
		} else if($scope.newPassword  !== $scope.oldPassword){
			$scope.changeMessage = $scope.i18n.passchange.password_mismatch;
			$scope.msgClass = 'login-error text-red text-center display-block-inline';
			$timeout(function(){
                $scope.changeMessage = '';
            }, 8000);
			return false;
		}
		opts.user_id = APP.currentUser.id;
		opts.old_password = $.base64.encode($scope.previousPassword);
		opts.password1 = $.base64.encode($scope.oldPassword);
		opts.password2 = $.base64.encode($scope.newPassword);
		$scope.changeLoder = false;
		ProfileService.changePassword(opts, function(data) {
			if(data.code == 101){
				$scope.changeLoder = true;
				$scope.msgClass = 'text-success text-center display-block-inline';
				$scope.changeMessage = $scope.i18n.passchange.updated_password;
				$timeout(function(){
                $scope.changeMessage = '';
                }, 8000);
			}else if (data.code == 139) {
				$scope.changeLoder = true;
				$scope.msgClass = 'login-error text-red text-center display-block-inline';
				$scope.changeMessage = $scope.i18n.validation.password_not_blank;
				$timeout(function(){
                $scope.changeMessage = '';
                }, 8000);
			}else if (data.code == 138) {
				$scope.changeLoder = true;
				$scope.msgClass = 'login-error text-red text-center display-block-inline';
				$scope.changeMessage = $scope.i18n.validation.password_not_match;
				$timeout(function(){
                $scope.changeMessage = '';
                }, 8000);
			} else if(data.code == 174){
				$scope.changeLoder = true;
				$scope.msgClass = 'login-error text-red text-center display-block-inline';
				$scope.changeMessage = $scope.i18n.validation.password_not_match;
				$timeout(function(){
                $scope.changeMessage = '';
                }, 8000);
			}else if (data.code == 100) {
				$scope.changeLoder = true;
				$scope.msgClass = 'login-error text-red text-center display-block-inline';
				$scope.changeMessage = $scope.i18n.validation.account_inactive;
				$timeout(function(){
                $scope.changeMessage = '';
                }, 8000);
			} else if (data.code == 96) {
				$scope.changeLoder = true;
				$scope.msgClass = 'login-error text-red text-center display-block-inline';
				$scope.changeMessage = $scope.i18n.validation.error_occured;
				$timeout(function(){
                $scope.changeMessage = '';
                }, 8000);

			} else {
				$scope.changeLoder = true;
				$scope.msgClass = 'login-error text-red text-center display-block-inline';
				$scope.changeMessage = data.message;
				$timeout(function(){
                $scope.changeMessage = '';
                }, 8000);
			}
		});
	}
	$scope.go = function( path ) {
		$location.path( path );
	};
}]);

/**
* Controller to display the friends profile detail
*
*/
app.controller('FriendProfile',['$cookieStore', '$scope', '$http', '$location', '$timeout', '$interval', '$routeParams', '$modal', '$log', '$rootScope', 'ProfileService','AlbumService','AffiliatedkService', function($cookieStore, $scope, $http, $location, $timeout, $interval, $routeParams, $modal, $log, $rootScope, ProfileService,AlbumService,AffiliatedkService) {
	$scope.friendViewLoader = true;
	// $scope.sendFriendRequestLoader = false;
	$scope.months = [
    { value: 0, name: 'January' },
    { value: 1, name: 'February' },
    { value: 2, name: 'March' },
    { value: 3, name: 'April' },
    { value: 4, name: 'May' },
    { value: 5, name: 'June' },
    { value: 6, name: 'July' },
    { value: 7, name: 'August' },
    { value: 8, name: 'September' },
    { value: 9, name: 'October' },
    { value: 10, name: 'November' },
    { value: 11, name: 'December' }
  ];
  $scope.sendFriendRequestLoader = false;
    $scope.showRequestButton = false;
    $scope.addFriend_personal    = false;
    $scope.requestSent_personal  = false;
    $scope.IsFriend_personal     = false;
    $scope.respond_personal      = false;
    $scope.addFriend_professional    = false;
    $scope.requestSent_professional  = false;
    $scope.IsFriend_professional     = false;
    $scope.respond_professional      = false;
	
	$scope.showButton = true;
	if($( window ).width() <= 768){
		$scope.showButton = false;
	}		
   /*
   $scope.RespontToRequest_personal = function(){
   		$("#RespontToRequest_personal").click(function(){
   			$(".request-links-personal").slideToggle('slow');
   		});
   };

   $scope.RespontToRequest_professional = function(){
   		$("#RespontToRequest_professional").click(function(){
   			$(".request-links-professional").slideToggle('slow');
   		});
   };
   $scope.showRequestButton = false;
   $scope.addFriend_personal   	= false;
   $scope.requestSent_personal 	= false;
   $scope.IsFriend_personal 	= false;
   $scope.respond_personal 		= false;
   $scope.addFriend_professional   	= false;
   $scope.requestSent_professional 	= false;
   $scope.IsFriend_professional 	= false;
   $scope.respond_professional 		= false;

	$scope.RejectRequest = function(request_type) {
		if(request_type === 1){
			$scope.sendPersonalRequestLoader = true;
		}else if(request_type === 2){
			$scope.sendProfessionalRequestLoader = true;
		}
   		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.friend_id = $routeParams.friendId;
		opts.action = '0';
		opts.request_type = request_type; 
		ProfileService.rejectFriendRequest(opts, function(data) {
			if(data.code == 101) {
				if(request_type === 2){
					$scope.addFriend_professional   = true;
					$scope.respond_professional = false;
					$scope.sendProfessionalRequestLoader = false;
				}else if(request_type === 1){
					$scope.addFriend_personal   = true;
					$scope.respond_personal = false;
					$scope.sendPersonalRequestLoader = false;
				}
				$rootScope.getAllNotification();
				$rootScope.getAllFriendNotification();
			} else {
				
			}
		});
	};
    
    $scope.AcceptRequest = function(request_type) {
    	if(request_type === 1){
			$scope.sendPersonalRequestLoader = true;
		}else if(request_type === 2){
			$scope.sendProfessionalRequestLoader = true;
		}
		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.friend_id = $routeParams.friendId;
		opts.action = "1";
		opts.request_type = request_type; 
		ProfileService.acceptFriendRequest(opts, function(data) {
			if(data.code == 101) {
				if(request_type === 2){
					$scope.IsFriend_professional   = true;
					$scope.respond_professional = false;
					$scope.sendProfessionalRequestLoader = false;
				}else if(request_type === 1){
					$scope.IsFriend_personal   = true;
					$scope.respond_personal = false;
					$scope.sendPersonalRequestLoader = false;
				}
				$rootScope.getAllNotification();
				$rootScope.getAllFriendNotification();
			} else {
				
			}
		});
	};
	
$scope.viewFriendProfile = function() {
  $scope.searchFrind = '';
  $('#search').val('');
  var opts = {};
  opts.user_id = APP.currentUser.id;
  opts.friend_id = $routeParams.friendId;
  ProfileService.friendProfileView(opts, function(data) {
  	$scope.showRequestButton = true;
   if(data.code == 101) {
    if(data.data.user_id == APP.currentUser.id) {
		$location.path('timeline/'+data.data.user_id);
    }
    $scope.friendProfile = data.data;
    
    if(($scope.friendProfile.user_info.friend_type == 0 || $scope.friendProfile.user_info.friend_type == 2) &&  $scope.friendProfile.user_info.personal_pending == 0 && ($scope.friendProfile.friend_request_type == 0 || $scope.friendProfile.friend_request_type == 2)){
        $scope.addFriend_personal   = true;
	}
	if(($scope.friendProfile.user_info.friend_type == 0 || $scope.friendProfile.user_info.friend_type == 1) &&  $scope.friendProfile.user_info.professional_pending == 0 && ($scope.friendProfile.friend_request_type == 0 || $scope.friendProfile.friend_request_type == 1)){
        $scope.addFriend_professional   = true;
	}
	if($scope.friendProfile.user_info.personal_pending == 1){
        $scope.requestSent_personal   = true;
	}
	if($scope.friendProfile.user_info.professional_pending == 1){
        $scope.requestSent_professional   = true;
	}
	if($scope.friendProfile.user_info.friend_type == 1 || $scope.friendProfile.user_info.friend_type == 3){
        $scope.IsFriend_personal   = true;
	}
	if($scope.friendProfile.user_info.friend_type == 2 || $scope.friendProfile.user_info.friend_type == 3){
        $scope.IsFriend_professional   = true;
	}
	if(($scope.friendProfile.friend_request_type == 1 || $scope.friendProfile.friend_request_type == 3) && $scope.friendProfile.user_info.friend_type != 1 && $scope.friendProfile.user_info.friend_type != 3){
        $scope.respond_personal   = true;
    }
	if(($scope.friendProfile.friend_request_type == 2 || $scope.friendProfile.friend_request_type == 3) && $scope.friendProfile.user_info.friend_type != 2 && $scope.friendProfile.user_info.friend_type != 3){
        $scope.respond_professional   = true;
	}

    for(var i =0; i<=11 ; i++){
    	if(data.data.user_info.date_of_birth != null) {
		    if(data.data.user_info.date_of_birth.date.substring(5,7) == i){    	
		      $scope.birthmonth = $scope.months[i-1].name; 
		     }
	 	} else {
	 		$scope.birthmonth = '';
	 		$scope.comma = '';
	 	}
    }
    if(data.data.user_info.skills !== null && data.data.user_info.skills.length > 0){
                       $scope.tempskills = data.data.user_info.skills.split(',');
     }
    if(data.data.user_info.skills !== null && data.data.user_info.skills.length > 0){     
        for(var i=0;i<$scope.tempskills.length;i++) {
            $scope.tempobj={"name":$scope.tempskills[i] };
            $scope.skillobj.push($scope.tempobj);
      }
     }
     $scope.personaledu = false;
     $scope.professionedu = false;
     $scope.personaljob = false;
     $scope.professionjob = false;
    if($scope.friendProfile.user_info.educationDetail != null && $scope.friendProfile.user_info.educationDetail != "" && $scope.friendProfile.user_info.educationDetail != undefined){
     for(var i=0; i<$scope.friendProfile.user_info.educationDetail.length; i++){
      if($scope.friendProfile.user_info.educationDetail[i].visibility_type == 1 || $scope.friendProfile.user_info.educationDetail[i].visibility_type == 3){
       $scope.personaledu = true;
      }
      if($scope.friendProfile.user_info.educationDetail[i].visibility_type == 2 || $scope.friendProfile.user_info.educationDetail[i].visibility_type == 3){
       $scope.professionedu = true;
      }
     }
    }
    if($scope.friendProfile.user_info.jobDetails != null && $scope.friendProfile.user_info.jobDetails != "" && $scope.friendProfile.user_info.jobDetails != undefined){
     for(var i=0; i<$scope.friendProfile.user_info.jobDetails.length; i++){
      if($scope.friendProfile.user_info.jobDetails[i].visibility_type == 1 || $scope.friendProfile.user_info.jobDetails[i].visibility_type == 3){
       $scope.personaljob = true;
      }
      if($scope.friendProfile.user_info.jobDetails[i].visibility_type == 2 || $scope.friendProfile.user_info.jobDetails[i].visibility_type == 3){
       $scope.professionjob = true;
      }
     }
    }
    var opts1 = {};
    opts1.sender_id = APP.currentUser.id;
    opts1.to_id = $scope.friendProfile.user_id;
    ProfileService.checkfollowUser(opts1, function(data1) {
     if(data1.code == 151 || data1.is_follow == 1) {
      $scope.followUser = false;
     } 
     if(data1.code == 152 || data1.is_follow == 0) {
      $scope.followUser = true;
     } 
    });

    //friend profile all details 
    var copts = {};
    var connectedProfile = {};
    copts.user_id = $routeParams.friendId;
    ProfileService.getConnectedProfil(copts, function(data) {
        if(data.code = 101)
            $scope.friendProfile.connectedProfile = data.data;

        $scope.friendViewLoader = false;
    });
   } else {
    $scope.friendViewLoader = false;
   }
  });
 };
 
	$scope.viewFriendProfile();
*/
	    // Start function for the show album in profile page
        $scope.loaduseralbumimages =function(){
        $scope.noalbumimages = false;
        var opts = {};
        opts.user_id = $scope.currentUser.id;
        opts.friend_id = $routeParams.friendId;
		opts.limit_start = 0; 
		opts.limit_size = 4;

        AlbumService.albumListing(opts, function(data){
            if(data.code == 101) {
                $scope.userlatestalbum =  data.data.albums;
                if($scope.userlatestalbum.length == 0 ){
                	$scope.noalbumimages = true;
                }

            } else {
                $scope.userlatestalbum = '';
            }
            });
    };
    
      // End function for the show album in profile page
	$scope.loaduseralbumimages();
	//Get Affilicate counts
    $scope.getAffiliateCounts = function() {  
        var opts = {};
        opts.user_id = $routeParams.friendId;
        opts.session_id = APP.currentUser.id;  

        AffiliatedkService.getAllcounts(opts, function(data) {
            if(data.code == 101) {
                $scope.totalCounts = data.data;
            } 
        });
    };
        $scope.redirectUrl = function(album_id, album_name ,id) {
       if(album_name == '') {
           album_name = 'Untitled';
           $location.path(id +"/friend/images/"+album_id+"/"+album_name);
        }
        else {
           $location.path(id+ "/friend/images/"+ album_id+"/"+album_name); 
        }
    }
    $scope.getAffiliateCounts();
	$scope.pendingProfessional = false;
	$scope.pendingPersonal = false;
	$scope.sendFriendRequests = function(friendId, id) {
		var modalInstance = $modal.open({
		                        template: '<div id="friendModal"class="modal-header"> <h3 class="modal-title">{{i18n.friends.send_request}}</h3> </div><div class="modal-body"><ul><li><div class="friend-req-block"><span class="req-img"><img alt="" ng-if="friendProfile.user_info.profile_image_thumb != \'\'" src="{{friendProfile.user_info.profile_image}}"><img alt="" ng-if="friendProfile.user_info.profile_image_thumb == \'\'" src="app/assets/images/prof-pic.jpg"></span ><span class="req-frnd-content"><span class="req-frnd-name">{{(friendProfile.user_info.first_name+\' \'+friendProfile.user_info.last_name).length>19?((friendProfile.user_info.first_name+\' \'+friendProfile.user_info.last_name) | limitTo: 16)+\'...\':(friendProfile.user_info.first_name+\' \'+friendProfile.user_info.last_name)}}</span><span class="req-frnd-tagline">{{i18n.friends.add_as_friend}}</span><span class="req-view-page"><span class="viewlabel"></span><div class="register-sixth-two-half"> <div class="register-sixth-one-radio" data-ng-show="friendProfile.user_info.friend_type != 1"> <div class="shipping_input_radio"> <input type="radio" name="viewIn" value="Per" id="select_per" class="register-sixth-radio" data-ng-model="friendType"> <label for="select_per"><span>{{i18n.friends.add_as_personal}}</span></label> </div><label for="select_per">{{i18n.friends.add_as_personal}}<label> </label></label></div><div class="register-sixth-two-radio" data-ng-show="friendProfile.user_info.friend_type != 2"> <div class="shipping_input_radio"> <input type="radio" name="viewIn" value="pro" id="select_pro" class="register-sixth-radio" data-ng-model="friendType"> <label for="select_pro"><span>{{i18n.friends.add_as_professional}}</span></label> </div><label for="select_pro">{{i18n.friends.add_as_professional}}</label> </div></span></span></div></li></ul></div><div class="modal-footer"> <button class="btn btn-primary" ng-click="addFriend(friendType)" data-ng-hide="sendFriendRequestLoader">{{i18n.friends.send_button}}</button><img class="sent-requestloading" data-ng-show="sendFriendRequestLoader" src="app/assets/images/proceed.gif" alt="{{i18n.friends.loading}}..." /></div>',
		                        controller: 'ModalController',
		                        size: 'lg',
		                        scope: $scope,
		                    });

		modalInstance.result.then(function (selectedItem) {
		}, function () {
			$log.info('Modal dismissed at: ' + new Date());
		});

		$scope.cancel = function() {
			modalInstance.close();
        };

        /*$scope.$on('$destroy', function() {
            modalInstance.remove();
        });*/
        
        $scope.addFriend = function(type){
        	if(type === undefined || type === null || type === '' ){
        		return false;
        	}
        	$scope.sendFriendRequestLoader = true;
			var opts = {};
			opts.user_id = APP.currentUser.id;
			opts.friend_id = $routeParams.friendId;
			opts.msg = "Friend Request";
			var friendType;
			if(type ===  'Per'){
				opts.request_type = 1;
			}else if(type ===  'pro'){
				opts.request_type = 2;
			}
			ProfileService.sendFriendRequests(opts, function(data) {
				if(data.code == 101){
					$scope.friendProfile.is_friend = 2;
					$scope.sendFriendRequestLoader = false;
					modalInstance.close();
					if(type === 'pro'){
						$scope.friendProfile.user_info.professional_pending = 1;
					}else if(type === 'Per'){
						$scope.friendProfile.user_info.personal_pending = 1;
					}
				}else if(data.code == 109){
					$scope.friendProfile.is_friend = 2;
					$scope.sendFriendRequestLoader = false;
					modalInstance.close();
					$scope.friendProfile.is_sent = 1;
				}
			});
        };
	};
/*
	$scope.sendPersonalRequestLoader = false;
	$scope.sendProfessionalRequestLoader = false;
	$scope.addFriend = function(type){
        	
			var opts = {};
			opts.user_id = APP.currentUser.id;
			opts.friend_id = $routeParams.friendId;
			opts.msg = "Friend Request";
			var friendType;
			if(type ===  1){
				opts.request_type = 1;
				$scope.sendPersonalRequestLoader = true;
			}else if(type ===  2){
				opts.request_type = 2;
				$scope.sendProfessionalRequestLoader = true;
			}
			ProfileService.sendFriendRequests(opts, function(data) {
				if(data.code == 101){
					$scope.friendProfile.is_friend = 2;
					$scope.sendFriendRequestLoader = false;
					if(type === 2){
						$scope.friendProfile.user_info.professional_pending = 1;
						$scope.addFriend_professional   = false;
						$scope.requestSent_professional   = true;
						$scope.sendProfessionalRequestLoader = false;
					}else if(type === 1){
						$scope.friendProfile.user_info.personal_pending = 1;
						$scope.addFriend_personal   = false;
						$scope.requestSent_personal   = true;
						$scope.sendPersonalRequestLoader = false;
					}
				}else if(data.code == 109){
					$scope.friendProfile.is_friend = 2;
					$scope.sendFriendRequestLoader = false;
					$scope.friendProfile.is_sent = 1;
					$scope.sendProfessionalRequestLoader = false;
					$scope.sendPersonalRequestLoader = false;
				}
			});
        };


	$scope.removeFriend = function(friendDetail,type) { 
		$scope.sendFriendRequestLoader = true;
		opts = {};
		opts.user_id = APP.currentUser.id;
		opts.friend_id = friendDetail.user_id;
		opts.action = "0";
		opts.request_type = type;
		if(type === 1){
			$scope.sendPersonalRequestLoader = true;
		}else if(type === 2){
			$scope.sendProfessionalRequestLoader = true;
		}
		ProfileService.rejectFriendRequest(opts, function(data) {
			if(data.code == 101) {
				
				$scope.sendFriendRequestLoader = false;
				if(type === 2){
					$scope.friendProfile.user_info.friend_type = $scope.friendProfile.user_info.friend_type - 2;
					$scope.sendProfessionalRequestLoader = false;
					$scope.addFriend_professional = true;
					$scope.IsFriend_professional =false;
				}else if(type === 1){
					$scope.friendProfile.user_info.friend_type = $scope.friendProfile.user_info.friend_type - 1;
					$scope.sendPersonalRequestLoader = false;
					$scope.addFriend_personal = true;
					$scope.IsFriend_personal=false;
				}
				if($scope.friendProfile.user_info.friend_type === 0){
					$scope.friendProfile.is_friend =  0;
				}
			} else {
				$scope.friendProfile.is_friend = 0;
				$scope.sendFriendRequestLoader = false;
			}
		});
	};*/
	// $scope.followRequestLoader = false;
	// $scope.followFriend = function(friendId) {
	// 	$scope.followRequestLoader = true;
	// 	var opts = {};
	// 	opts.sender_id = APP.currentUser.id;
	// 	opts.to_id = friendId;
	// 	ProfileService.followUser(opts, function(data) {
	// 		if(data.code == 101) {
	// 			$scope.followUser = false;
	// 			$scope.followRequestLoader = false;
	// 		} 
	// 	});
	// };

	// $scope.unFollowFriend = function(friendId) {
	// 	$scope.followRequestLoader = true;
	// 	var opts = {};
	// 	opts.user_id = APP.currentUser.id;
	// 	opts.friend_id = friendId;
	// 	ProfileService.unFollowUser(opts, function(data) {
	// 		if(data.code == 101) {
	// 			$scope.followUser = true;
	// 			$scope.followRequestLoader = false;
	// 		}
	// 	});
	// };
}]);


/**
* Controller to display the friend's album
*
*/
app.controller('friendAlbumController',['$scope', 'ProfileService', '$location', '$routeParams', '$timeout', function ($scope, ProfileService, $location, $routeParams, $timeout) {
//Album Listing
    $scope.friendAlbumListing = function(){ 
    	$scope.friendId = $routeParams.friendId;
    	$scope.userId = $routeParams.id;
        $scope.albloader = true;  
        var opts = {};
        opts.user_id = $routeParams.id;
        opts.friend_id = $scope.friendId;
        opts.limit_start = 0; 
        opts.limit_size = 20; 
        
        ProfileService.friendAlbumListing(opts, function(data){
              
            if(data.code == 101) {
                $scope.listAlbum = data.data;
                $scope.noAlbums = true;    
                $scope.albloader = false;    
            }else {
                $scope.albloader = false; 
            }
        });
    }
    $scope.friendAlbumListing();

    //View friend Album Images 
    $scope.friendAlbumImage = function(){
        $scope.albloader = true;
        var albumId = $routeParams.id;
        $scope.albumname = $routeParams.name;
        $scope.frndUserId = $routeParams.userId;
        var opts = {};
        opts.user_id = $routeParams.userId;
        opts.album_id = albumId;
        ProfileService.friendAlbumImage(opts, function(data){
            
            if(data.code == 101) {
                $scope.albloader = false;
                $scope.viewalbum = data.data;
                $scope.noPhotos = true;
            } else {
                $scope.albloader = false;
                $scope.noPhotos = true;
            }
        });  
    }
    $scope.friendAlbumImage();
    $(".fancybox").fancybox(); //Image Pop Up Plugin
    $scope.redirectUrl = function(album_id, album_name, userId) {
        $location.path("/friend/image/"+album_id+"/"+album_name+"/"+userId);
    }
}]);

app.controller('EditProfileController',['$scope', 'ProfileService', '$location', '$routeParams', '$timeout', function($cookieStore, $rootScope, $scope, $http, $location, $timeout, $interval, $routeParams, ProfileService, threadAndPass, fileReader) {
$scope.months = [
    { value: 1, name: 'January' },
    { value: 2, name: 'February' },
    { value: 3, name: 'March' },
    { value: 4, name: 'April' },
    { value: 5, name: 'May' },
    { value: 6, name: 'June' },
    { value: 7, name: 'July' },
    { value: 8, name: 'August' },
    { value: 9, name: 'September' },
    { value: 10, name: 'October' },
    { value: 11, name: 'November' },
    { value: 12, name: 'December' }
  ];

  	$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
  	

  	


  	$scope.monthChange = function(){

  		if($scope.editUser.month.value <= 6){
  			if($scope.editUser.month.value % 2 == 0){
  				$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
  			}else if($scope.editUser.month.value == 1){
  				$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28];
  			}else{
 				$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
  			}
  		}else{
  			if($scope.editUser.month.value % 2 != 0){
  				$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
  			}else {
 				$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
  			}
  		}
  	}
  	$scope.getyears = function() {
		var currentYear = new Date().getFullYear();
		$scope.years = [];
		for (var i = 1970; i <= currentYear ; i++){
			$scope.years.push(i);
		}
  	}

  	$scope.getyears();
  	$scope.loadEditProfile = true;
	$scope.basicProfile = function(type){
		var opts = {};
		opts.user_id = APP.currentUser.id;
		if (type) {
			opts.profile_type = type;
		} else {
			opts.profile_type = 4;
	    }
		//$scope.editUser = {};
		ProfileService.viewMultiProfile(opts, function(data) {
			if(data.code == 101){
				//$scope.loadEditProfile = false;
				if (type == 1) {
					for(var i=0; i < APP.countries.length; i++){ 
					    if(data.data.region == APP.countries[i].name){
						    $scope.editUser.country = APP.countries[i];

					    }
					}

				} else {
					$scope.editUser.firstName = data.data.firstname;
				    $scope.editUser.lastName = data.data.lastname;
				    $scope.editUser.gender = data.data.gender;

				    for(var i=0; i < APP.countries.length; i++){ 
					    if(data.data.country.code == APP.countries[i].id){
						    $scope.editUser.country = APP.countries[i];
					    }
					}
					var currVal = data.data.date_of_birth.date;
					currVal = currVal.substring(0,10);
					var dtArray = currVal.split("-");
					var dtDay = parseInt(dtArray[2]);
					var dtMonth = parseInt(dtArray[1]);
					var dtYear = parseInt(dtArray[0]);
					$scope.editUser.year = dtYear;
					$scope.editUser.day = dtDay;			
					$scope.editUser.month = $scope.months[dtMonth-1];

				}
				$scope.broker = data.data.broker_profile;
				$rootScope.currentUser.basicProfile = data.data;

			}else{

			}
		});
	}

	//$scope.basicProfile();

	$scope.viewMultiProfile = function(profileType){
		var opts = {};
		$scope.editUser = {};
		$scope.editMessage = "";
		opts.user_id = APP.currentUser.id;
		opts.profile_type = profileType;
		ProfileService.viewMultiProfile(opts, function(data) {
			if(data.code == 101){
				if(profileType == 1){
					$scope.userDetails = data.data;
					$scope.renderProfile = true; 
					$scope.editUser.region = data.data.region;
					$scope.editUser.zip = parseInt(data.data.zip, 10);
					$scope.editUser.city = data.data.city;
					$scope.editUser.address = data.data.address;
					$scope.editUser.referral_id = data.data.referral_info.id;
					$scope.editUser.latitude = data.data.latitude;
					$scope.editUser.longitude = data.data.longitude;
					$scope.editUser.place = data.data.map_place;
					$scope.basicProfile();
					$scope.loadEditProfile = false;
					latitudeMap = data.data.latitude;
					longitudeMap = data.data.longitude;
					$timeout(function(){
						$scope.initialize();
					}, 1000)
				}else {
					$scope.editUser.phone = parseInt(data.data.phone, 10);
					$scope.editUser.vatnumber = data.data.vat_number;
					$scope.editUser.fiscalcode  = data.data.fiscal_code;
					$scope.editUser.iban  = data.data.iban;
					$scope.editUser.brokerplace = data.data.map_place;
					$scope.editUser.brokerreferral_id = data.data.referral_info.id;
					$scope.editUser.brokerlatitude = data.data.latitude;
					$scope.editUser.brokerlongitude = data.data.longitude;
					$scope.editUser.idcard = data.data.idcard;
					$scope.editUser.ssn = data.data.ssn;
					latitudeMap = data.data.latitude;
					longitudeMap = data.data.longitude;
					/*$timeout(function(){
						$scope.initializesecond();
					}, 1000);*/
				}
			}else{
				$scope.basicProfile();

			}
		});
	}
	//$scope.getUserProfile(1);
	if(JSON.stringify(APP.currentUser) != "{}"){
		$scope.viewMultiProfile(1);
		$scope.viewMultiProfile(2);
	};

	$scope.edit = true;
	$scope.brokerprofile = false;
	$scope.showTab = function(tab){
		if(tab === "edit1") {
			$('.profile-tab-container ul li').removeClass('active');
			$('.profile-tab-container ul li').eq( 0 ).addClass('active');
		}else if(tab === "edit") {
			$('.profile-tab-container ul li').removeClass('active');
			$('.profile-tab-container ul li').eq( 0 ).addClass('active');
			$scope.edit = true;
			$scope.brokerprofile = false;
			$timeout(function(){
				$scope.initialize();
			}, 1000);
		}else if(tab === "brokerprofile") {
			$('.profile-tab-container ul li').removeClass('active');
			$('.profile-tab-container ul li').eq( 1 ).addClass('active');
			$scope.edit = false;
			$scope.brokerprofile = true;
			$timeout(function(){
				$scope.initializesecond();
			}, 1000);
		}
	};
	
	$scope.getIdCardFile = function () {
		//Allow some images types for uploading
        var imageType = $scope.idCardFile['name'].substring($scope.idCardFile['name'].lastIndexOf(".") + 1);
        if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
            $scope.editMessage = $scope.i18n.idcard.invalid_upload;
            $scope.idCardFile = null;
        } else {
			fileReader.readAsDataUrl($scope.idCardFile, $scope)
				.then(function(result) {
				  $scope.idCardFilePre = result;
				});
		}
    };
    $scope.getSsnFile = function () {
    	//Allow some images types for uploading
        var imageType = $scope.ssnFile['name'].substring($scope.ssnFile['name'].lastIndexOf(".") + 1);
        if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
            $scope.editMessage = $scope.i18n.idcard.invalid_ssn;
            $scope.ssnFile = null;
        } else {
	        fileReader.readAsDataUrl($scope.ssnFile, $scope)
				.then(function(result) {
				  $scope.ssnFilePre = result;
				});
		}
    };

    $scope.removePreviewIdCard = function () {
		$scope.idCardFilePre = '';
		$scope.idCardFile = [];
    };
    
    $scope.removePreviewSSN = function () {
        $scope.ssnFilePre = '';
		$scope.ssnFile = [];
    };

	if(JSON.stringify(APP.currentUser) != "{}"){
		var type = $routeParams.type;
		$scope.showTab(type);
	};

	
	$scope.editMessage = "";
	$scope.showloading = false;
	$scope.msgClass = '';
	$scope.editProfile = function(profileType) {

		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.type = profileType;
		if($scope.editUser.gender == undefined){
			$scope.editMessage = $scope.i18n.editprofile.select_gender;
			return false;
       	}

		if(profileType == 1){
			opts.firstname = $scope.editUser.firstName ; 
			opts.lastname = $scope.editUser.lastName ;
			opts.birthday = $scope.editUser.day + '-' + $scope.editUser.month.name  +'-' +$scope.editUser.year;
			opts.gender = $scope.editUser.gender;
			opts.country = $scope.editUser.country.id;
			opts.region = $scope.editUser.country.country;
			opts.map_place = document.getElementById("mapplace").value;
			opts.zip = $scope.editUser.zip;
			opts.city = $scope.editUser.city;
			opts.address = $scope.editUser.address;
			opts.latitude = document.getElementById("lat").value;
			opts.longitude = document.getElementById("lon").value;
			opts.referral_id = $scope.editUser.referral_id;
		}else if(profileType == 2){
			opts.phone = $scope.editUser.phone;
			opts.vat_number = $scope.editUser.vatnumber;
			opts.fiscal_code = $scope.editUser.fiscalcode;
			opts.iban = $scope.editUser.iban;
			opts.referral_id = $scope.editUser.brokerreferral_id;
			opts.map_place = document.getElementById("mapplace1").value;
			opts.latitude = document.getElementById("lat1").value;
			opts.longitude = document.getElementById("lon1").value;
			if(typeof $scope.idcard == undefined){
				opts.idcard = $scope.editUser.idcard;
			}
			if(typeof $scope.ssnFile == undefined){
				opts.ssn = $scope.editUser.ssn;
			}
		}
		$scope.showloading = true;
		ProfileService.editProfileDetail(opts, $scope.idCardFile, $scope.ssnFile, function(data) {
			if(data.code == 101){
				$scope.msgClass = 'alert-success';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.validation.save_success;
				$scope.showloading = false;
				$timeout(function() {
					$scope.msgClass = '';
					$scope.editMessage = '';
				}, 2000);
				if(profileType == 1){
					$scope.shouldBeFocus = true;
					$scope.basicProfile();
					$timeout(function() {
					   $scope.basicProfile(1);
					}, 2000);
					
				}
			} else if(data.code == 132) {
				$scope.msgClass = 'alert-danger';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.validation.invalid_profile_type;
				$scope.showloading = false;
			} else if(data.code == 100) {
				$scope.msgClass = 'alert-info';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.validation.account_not_active;
				$scope.showloading = false;
			} else if(data.code == 131) {
				$scope.msgClass = 'alert-danger';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.validation.invalid_date_format;
				$scope.showloading = false;
			} else if(data.code == 137) {
				$scope.msgClass = 'alert-danger';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.validation.invalid_user;
				$scope.showloading = false;
			} else if(data.code == 95) {
				$scope.msgClass = 'alert-danger';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.validation.you_must_choose_iamge;
				$scope.showloading = false;
			} else{
			      // $scope.editMessage = data.message;
			    $scope.msgClass = 'alert-danger';
			    $scope.shouldBeFocus = true;
                $scope.editMessage = $scope.i18n.validation.YOU_MUST_CHOOSE_AN_IMAGE;
				$scope.showloading = false;
				
			}
			$timeout(function() {
					$scope.msgClass = '';
					$scope.editMessage = '';
				}, 2000);
		});
	};
	$scope.initialize = function () {
		var mapOptions = {
			center: new google.maps.LatLng(latitudeMap, longitudeMap),
			zoom: 8
		};
		var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

		var input = (document.getElementById('pac-input'));

		var types = document.getElementById('type-selector');
		map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
		map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

		var autocomplete = new google.maps.places.Autocomplete(input);
		autocomplete.bindTo('bounds', map);

		var infowindow = new google.maps.InfoWindow();
		var marker = new google.maps.Marker({
			map: map,
			anchorPoint: new google.maps.Point(0, -29)
		});

		google.maps.event.addListener(autocomplete, 'place_changed', function() {
			infowindow.close();
			marker.setVisible(false);
			var place = autocomplete.getPlace();
			if (!place.geometry) {
				return;
			}
			var countryPlace = autocomplete.getPlace();
			document.getElementById("lat").value = countryPlace.geometry.location.k;
			document.getElementById("lon").value = countryPlace.geometry.location.D;
			document.getElementById("mapplace").value = countryPlace.formatted_address;

			if (place.geometry.viewport) {
				map.fitBounds(place.geometry.viewport);
			} else {
				map.setCenter(place.geometry.location);
				map.setZoom(17);  
			}
			marker.setIcon(({
				url: place.icon,
				size: new google.maps.Size(71, 71),
				origin: new google.maps.Point(0, 0),
				anchor: new google.maps.Point(17, 34),
				scaledSize: new google.maps.Size(35, 35)
			}));
			marker.setPosition(place.geometry.location);
			marker.setVisible(true);

			var address = '';
			if (place.address_components) {
				address = [
				(place.address_components[0] && place.address_components[0].short_name || ''),
				(place.address_components[1] && place.address_components[1].short_name || ''),
				(place.address_components[2] && place.address_components[2].short_name || '')
				].join(' ');
			}

			infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
			infowindow.open(map, marker);
		});

		function setupClickListener(id, types) {
			var radioButton = document.getElementById(id);
		}

		setupClickListener('changetype-all', []);
		setupClickListener('changetype-establishment', ['establishment']);
		setupClickListener('changetype-geocode', ['geocode']);
	};
	$scope.initializesecond = function () {
		var mapOptions = {
			center: new google.maps.LatLng(latitudeMap, longitudeMap),
			zoom: 8
		};
		var map2 = new google.maps.Map(document.getElementById('map-canvas-second'),mapOptions);

		var input = (document.getElementById('pac-input'));

		var types = document.getElementById('type-selector');
		map2.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
		map2.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

		var autocomplete = new google.maps.places.Autocomplete(input);
		autocomplete.bindTo('bounds', map2);

		var infowindow = new google.maps.InfoWindow();
		var marker2 = new google.maps.Marker({
			map2: map2,
			anchorPoint: new google.maps.Point(0, -29)
		});

		google.maps.event.addListener(autocomplete, 'place_changed', function() {
			infowindow.close();
			marker2.setVisible(false);
			var place = autocomplete.getPlace();
			if (!place.geometry) {
				return;
			}
			var countryPlace = autocomplete.getPlace();
			document.getElementById("lat1").value = countryPlace.geometry.location.k;
			document.getElementById("lon1").value = countryPlace.geometry.location.D;
			document.getElementById("mapplace1").value = countryPlace.formatted_address;

			if (place.geometry.viewport) {
				map2.fitBounds(place.geometry.viewport);
			} else {
				map2.setCenter(place.geometry.location);
				map2.setZoom(17);  
			}
			marker2.setIcon(({
				url: place.icon,
				size: new google.maps.Size(71, 71),
				origin: new google.maps.Point(0, 0),
				anchor: new google.maps.Point(17, 34),
				scaledSize: new google.maps.Size(35, 35)
			}));
			marker2.setPosition(place.geometry.location);
			marker2.setVisible(true);

			var address = '';
			if (place.address_components) {
				address = [
				(place.address_components[0] && place.address_components[0].short_name || ''),
				(place.address_components[1] && place.address_components[1].short_name || ''),
				(place.address_components[2] && place.address_components[2].short_name || '')
				].join(' ');
			}

			infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
			infowindow.open(map2, marker2);
		});

		function setupClickListener(id, types) {
			var radioButton = document.getElementById(id);
		}

		setupClickListener('changetype-all', []);
		setupClickListener('changetype-establishment', ['establishment']);
		setupClickListener('changetype-geocode', ['geocode']);
	}


}]);

app.controller('EditUserProfileController',['$cookieStore', '$rootScope', '$scope', '$location', '$http', '$timeout', '$interval', '$routeParams', 'ProfileService', 'threadAndPass', 'fileReader','focus', function($cookieStore, $rootScope, $scope, $location,$http, $timeout, $interval, $routeParams, ProfileService, threadAndPass, fileReader, focus) {
    
  	$scope.editDays = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
  	$scope.Result = 0;
  	function Leap(Year, type){
		if ( (Year % 4) == 0){
			if ( (Year % 100) == 0)	{
				$scope.Result = ( (Year % 400) == 0);
			}else{
				$scope.Result = 1;
			}
		}else{
			$scope.Result = 0;
		}
		if(type == 0){
			$scope.monthChange();
		}else if(type == 1){
			$scope.professionalMonthStart();
		}else if(type == 2){
			$scope.professionalMonthEnd();
		}
	}

	$scope.$watch('editUser.year',function(val){
  		Leap(val, 0);
    });
    $scope.$watch('professional.yearStart',function(val){
  		Leap(val, 1);
    });
    $scope.$watch('professional.yearEnd',function(val){
  		Leap(val,2);
    });
  	$scope.monthChange = function(){
  		if($scope.editUser.month === undefined || $scope.editUser.month === "" || $scope.editUser.month === null){
    	}else{
    		var normalValue = $scope.editUser.month.value-1;
	  		if(normalValue <= 6){ 
	  			if(normalValue % 2 == 0){
	  				$scope.editDays = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
	  			}else if(($scope.editUser.month.value-1) == 1){
	  					if($scope.Result){
		  					$scope.editDays = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29];
		  				}else{
		  					$scope.editDays = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28];
		  				}
	  			}else{
	 				$scope.editDays = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
	  			}
	  		}else{
	  			if(normalValue % 2 != 0){
	  				$scope.editDays = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
	  			}else {
	 				$scope.editDays = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
	  			}
	  		}
	  	}
  	};

  	$scope.jobDaysStart = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
  	$scope.professionalMonthStart = function(){
  		if($scope.professional.monthStart === undefined || $scope.professional.monthStart === "" || $scope.professional.monthStart === null){
    	}else{
    		var normalValue = $scope.professional.monthStart.value-1;
	  		if(normalValue <= 6){ 
	  			if(normalValue % 2 == 0){
	  				$scope.jobDaysStart = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
	  			}else if(($scope.professional.monthStart.value-1) == 1){
	  					if($scope.Result || $scope.professional.yearStart == undefined){
		  					$scope.jobDaysStart = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29];
		  				}else{
		  					$scope.jobDaysStart = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28];
		  				}
	  			}else{
	 				$scope.jobDaysStart = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
	  			}
	  		}else{
	  			if(normalValue % 2 != 0){
	  				$scope.jobDaysStart = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
	  			}else {
	 				$scope.jobDaysStart = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
	  			}
	  		}
	  	}
  	};

  	$scope.jobDaysEnd = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
  	$scope.professionalMonthEnd = function(){
  		if($scope.professional.monthEnd === undefined || $scope.professional.monthEnd === "" || $scope.professional.monthEnd === null){
    	}else{
    		var normalValue = $scope.professional.monthEnd.value-1;
	  		if(normalValue <= 6){ 
	  			if(normalValue % 2 == 0){
	  				$scope.jobDaysEnd = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
	  			}else if(($scope.professional.monthEnd.value-1) == 1){
	  					if($scope.Result || $scope.professional.yearEnd == undefined){
		  					$scope.jobDaysEnd = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29];
		  				}else{
		  					$scope.jobDaysEnd = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28];
		  				}
	  			}else{
	 				$scope.jobDaysEnd = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
	  			}
	  		}else{
	  			if(normalValue % 2 != 0){
	  				$scope.jobDaysEnd = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
	  			}else {
	 				$scope.jobDaysEnd = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
	  			}
	  		}
	  	}
  	};
  	$scope.getyears = function() {
		var currentYear = new Date().getFullYear();
		$scope.years = [];
		for (var i = 1914; i <= currentYear ; i++){
			$scope.years.push(i);
		}
  	}
  	$scope.getyears();
  	$scope.loadEditProfile = true;
  	$scope.educationDetails = [];
  	$scope.professionalDetails = [];
  	$scope.allCatagories = [];
	$scope.allRelatives  = [];
  	$scope.relationshipstatus = APP.relationshipstatus;
  	$scope.showSync = false;
  	$scope.showLink = false;
  	
  	$scope.sync_to_fb = function(){
  		nonuserAccessToken(function(access_token,fbId){
			// if access token is null show message in sixthcontinent website that you have declined sixthcontinent 
			//acces privilage to you fb account to do successful sync please allow sixthcontinent see your public profile
			if(access_token){
				var opts = {}
				opts.user_id = APP.currentUser.id;
				opts.facebook_id = fbId;
				opts.facebook_accesstoken = access_token;
				ProfileService.updateFbAccessToken(opts, function(data){
					if(data.code == 101){
						$scope.showSync = false;
						$scope.showLink = false;
					}
				})
			}
		})
  	}

	$scope.basicProfile = function(type){
		var opts = {};
		opts.user_id = APP.currentUser.id;
		if (type) {
			opts.profile_type = type;
		} else {
			opts.profile_type = 4;
	    }
		//$scope.editUser = {};
		ProfileService.viewMultiProfile(opts, function(data) {
			if(data.code == 101){
				var expiryDayCount = parseInt(data.data.facebook_profile.expires)
				if(!isNaN(expiryDayCount) && expiryDayCount<=0) $scope.showSync = true;
				if(data.data.facebook_profile.expires === '') $scope.showLink = true;
				if (type == 1) {
					for(var i=0; i < APP.countries.length; i++){ 
					    if(data.data.region == APP.countries[i].name){
						    $scope.editUser.country = APP.countries[i];
					    }					   
					}
					$rootScope.currentUser.basicProfile = data.data.baisc_profile_info;
				} else {
					$scope.editUser.firstName = data.data.firstname;
				    $scope.editUser.lastName = data.data.lastname;
				    $scope.editUser.gender = data.data.gender;

				    for(var i=0; i < APP.countries.length; i++){ 
					    if(data.data.country.code == APP.countries[i].id){
						    $scope.editUser.country = APP.countries[i];
					    }
					}
					for(var i=0; i< $scope.i18n.profile.relationshipstatus.length;i++)
					{
						if(data.data.relationship == $scope.i18n.profile.relationshipstatus[i].status){
							$scope.editUser.relationshipsts = $scope.i18n.profile.relationshipstatus[i];
						}
					}
					var currVal = data.data.date_of_birth.date;
					currVal = currVal.substring(0,10);
					var dtArray = currVal.split("-");
					var dtDay = parseInt(dtArray[2]);
					var dtMonth = parseInt(dtArray[1]);
					var dtYear = parseInt(dtArray[0]);
					$scope.editUser.year = dtYear;
					$scope.editUser.day = dtDay;

					$scope.editUser.month = $scope.months[dtMonth-1];
					$scope.editUser.brokeresists = data.data.broker_profile.broker_profile_exists;
					$scope.editUser.citizenesists = data.data.citizen_profile;
					$rootScope.currentUser.basicProfile = data.data;
					$scope.educationDetails = data.data.educationDetail;
					$scope.professionalDetails = data.data.jobDetails;
					$scope.allCatagories = data.data.categoryKeywords;
					$scope.allRelatives = data.data.userRelatives;
				}
				$scope.broker = data.data.broker_profile;
				
			}else{

			}
		});
	}
     /* AutoSuggestion for hobbies*/
	$scope.searchText ='';
	var DELAY_TIME_BEFORE_POSTING = 300;
	//var element = $('#search');
    var currentTimeout = null;

    $('#searchInput').keydown(function() {
    
      var model = $scope.searchText;
      //var poster = model($scope);
      if(currentTimeout) {
        $timeout.cancel(currentTimeout);
      }
      currentTimeout = $timeout(function(){
        $scope.searchsuggestion();
      }, DELAY_TIME_BEFORE_POSTING)
      });

	$scope.suggestions=[];
    $scope.selectedTags=[];

    $scope.selectedIndex=-1;
    $scope.hobbyarray=[];
    $scope.removeTag=function(index){
        $scope.selectedTags.splice(index,1);
    }

    $scope.searchsuggestion=function(){
       	    var opts={};
       	    opts.session_id = APP.currentUser.id;
       	    opts.name=$scope.searchText;
       	    opts.type="hobby";
       	    $scope.cancelHobbiesRequest = false;
       	    ProfileService.searchSuggestion(opts, function(data){
       	    if(data.code === 101){
    			if($scope.cancelHobbiesRequest === false){
	       	    	if(data.data.length > 0)
	       	    	{
	                    $scope.suggestions=data.data;
	                    $scope.selectedIndex=-1;
	            	}
	            }
            }

        });
    };

    var hobbytimer ;
    $scope.addToSelectedTags=function(index){
    	if($scope.searchText != ''){
	    	var duplicate = false;
	    	if(index != -1 )
	    	{
	            if($scope.selectedTags.indexOf($scope.suggestions[index])===-1){
	            	if($scope.suggestions[index] === undefined || $scope.suggestions[index] === null){

	            	}else{
	            		for(var i=0;i<$scope.selectedTags.length;i++){
	 	           			if($scope.selectedTags[i].name == $scope.suggestions[index].name){
	                			duplicate=true;
	            			}
	            		}
	            		if(duplicate == false){
	                		$scope.selectedTags.push($scope.suggestions[index]);
	            		}else{
	            			 $scope.hobbymsgClass = 'text-red display-block-inline fr';
				 			 $scope.shouldBeFocus = true;
				   			 $scope.hobbyMessage = $scope.i18n.profile.edit_profile.hobby_cannot_be_duplicate;
				   			 hobbytimer = $timeout(function(){
				   				$scope.hobbymsgClass = "";
				   				$scope.hobbyMessage = "";
				   			 },5000);
	            		}
	              		  $scope.searchText='';
	             		  $scope.suggestions=[];
	                }                
	            }
	  	  	} else{
	  	  		for(var i=0;i<$scope.selectedTags.length;i++){
	  	  			if($scope.selectedTags[i].name.toLowerCase() == $scope.searchText.toLowerCase()){
	  	  				duplicate=true;
	  	  			}
	  	  		}
	  	  			if(duplicate == false){
	  	  				var temphobby = { "name": $scope.searchText, "type" : "hobby"};
	  	  				$scope.selectedTags.push(temphobby);
	             	  	$scope.searchText='';
	               		$scope.suggestions=[];
	            	}else{
	            		 $scope.hobbymsgClass = 'text-red display-block-inline fr';
				 		 $scope.shouldBeFocus = true;
				   		 $scope.hobbyMessage = $scope.i18n.profile.edit_profile.hobby_cannot_be_duplicate;
				   		 hobbytimer = $timeout(function(){
				   			$scope.hobbymsgClass = "";
				   			$scope.hobbyMessage = "";
				   		 },5000);
	            	}
	  	  	}
  	  	}	
    }

    $scope.checkKeyDown=function(event){
        if(event.keyCode===40){
            event.preventDefault();
            if($scope.selectedIndex+1 !== $scope.suggestions.length){
                $scope.selectedIndex++;
            }
        }
        else if(event.keyCode===38){
            event.preventDefault();
            if($scope.selectedIndex-1 !== -1){
                $scope.selectedIndex--;
            }
        }
        else if(event.keyCode===13){
            $scope.addToSelectedTags($scope.selectedIndex);
        }
    }

    $scope.$watch('selectedIndex',function(val){
        if(val!==-1) {
            $scope.searchText = $scope.suggestions[$scope.selectedIndex].name;
        }
    });

    // Clear  hobbies List
    $scope.cancelHobbiesRequest = false;
    $scope.clearHobbyList = function(){
    	$scope.cancelHobbiesRequest = true;
    	$timeout(function(){
    		$scope.suggestions = [];
    	},500);
    };
	$scope.viewMultiProfile = function(profileType){
		var opts = {};
		$scope.editUser = {};
		$scope.editMessage = "";
		opts.user_id = APP.currentUser.id;
		opts.profile_type = profileType;
		$scope.temprelobj = {};
		$scope.temphobbies = {};
		ProfileService.viewMultiProfile(opts, function(data) {
			if(data.code == 101){
				if(profileType == 1){
					$scope.tempobj={};
					$scope.userDetails = data.data;
					$scope.renderProfile = true; 
					$scope.editUser.region = data.data.region;
					$scope.editUser.state = data.data.baisc_profile_info.state;
					$scope.editUser.zip = parseInt(data.data.zip);
					$scope.editUser.city = data.data.city;
					$scope.editUser.city_born = data.data.baisc_profile_info.city_born;
					if(data.data.address !== null && data.data.address.length > 0){
						$scope.editUser.address = data.data.address.trim();				
					}
					if(data.data.baisc_profile_info.about_me !== null && data.data.baisc_profile_info.about_me.length > 0){
						$scope.editUser.about_me = data.data.baisc_profile_info.about_me.trim();
					}
					$scope.currentValue = data.data.baisc_profile_info.hobbies;
					if($scope.currentValue !== null && $scope.currentValue.length > 0){
                       $scope.currentValue=$scope.currentValue.trim();
                       $scope.temphobbies = $scope.currentValue.split(',');
					}
					$scope.tempobj={};
					if($scope.currentValue !== null && $scope.currentValue.length > 0){     
					   for(var i=0;i<$scope.temphobbies.length;i++) {
					       $scope.tempobj={"name":$scope.temphobbies[i] , "type" : "hobby"};
					       $scope.selectedTags.push($scope.tempobj);
						}
					}
					$scope.editUser.referral_id = data.data.referral_info.id;
					if (data.data.referral_info.id) {
						$scope.editUser.referral_id = data.data.referral_info.id;
					} else {
						$scope.editUser.referral_id = '';
					}
					$scope.editUser.latitude = data.data.latitude.trim();
					$scope.editUser.longitude = data.data.longitude.trim();
					$scope.editUser.place = data.data.map_place.trim();
					$scope.editUser.zip = data.data.zip;
					$scope.basicProfile();
					$scope.loadEditProfile = false;
					latitudeMap = data.data.latitude;
					longitudeMap = data.data.longitude;
					angular.element('#pac-input').val($scope.editUser.place);
					$timeout(function(){
						$scope.initialize();
					}, 1000);
					
				}else {
					$scope.basicProfile();
					$scope.editUser.phone = parseInt(data.data.phone, 10);
					$scope.editUser.vatnumber = data.data.vat_number;
					$scope.editUser.fiscalcode  = data.data.fiscal_code;
					$scope.editUser.iban  = data.data.iban;
					$scope.editUser.brokerplace = data.data.map_place;
					$scope.editUser.brokerreferral_id = data.data.referral_info.id;
					$scope.editUser.brokerlatitude = data.data.latitude;
					$scope.editUser.brokerlongitude = data.data.longitude;
					$scope.editUser.idcard = data.data.idcard;
					$scope.editUser.ssn = data.data.ssn;
					$scope.loadEditProfile = false;
					latitudeMap = data.data.latitude;
					longitudeMap = data.data.longitude;
					$timeout(function(){
						$scope.initializesecond();
					}, 1000);
				}
			}else{
				$scope.basicProfile();

			}
		});
	}
	//$scope.getUserProfile(1);
	if(JSON.stringify(APP.currentUser) != "{}"){
		var type = $routeParams.type;
		$scope.viewMultiProfile(type);
	};

	$scope.edit = true;
	$scope.brokerprofile = false;
	$scope.getIdCardFile = function () {
		//Allow some images types for uploading
        var imageType = $scope.idCardFile['name'].substring($scope.idCardFile['name'].lastIndexOf(".") + 1);
        if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
            $scope.editMessage = $scope.i18n.idcard.invalid_upload;
            $scope.idCardFile = null;
        } else {
			fileReader.readAsDataUrl($scope.idCardFile, $scope)
				.then(function(result) {
				  $scope.idCardFilePre = result;
				});
		}
    };
    $scope.getSsnFile = function () {
    	//Allow some images types for uploading
        var imageType = $scope.ssnFile['name'].substring($scope.ssnFile['name'].lastIndexOf(".") + 1);
        if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
            $scope.editMessage = $scope.i18n.idcard.invalid_ssn;
            $scope.ssnFile = null;
        } else {
	        fileReader.readAsDataUrl($scope.ssnFile, $scope)
				.then(function(result) {
				  $scope.ssnFilePre = result;
				});
		}
    };

    $scope.removePreviewIdCard = function () {
		$scope.idCardFilePre = '';
		$scope.idCardFile = [];
    };
    
    $scope.removePreviewSSN = function () {
        $scope.ssnFilePre = '';
		$scope.ssnFile = [];
    };

	if(JSON.stringify(APP.currentUser) != "{}"){
		var type = $routeParams.type;
		// $scope.showTab(type);
	};

	$scope.hobbyarray = [];
	$scope.editMessage = "";
	$scope.showloading = false;
	var editTimer;

	$scope.preventEnter = function(event){
		if(event.keyCode == 13  && (event.target.type != "textarea")) {
	      event.preventDefault();
	      return false;
	    }
	};
	$scope.editProfile = function(profileType ,valid, event) {
		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.type = profileType;
		$scope.errorIndex = null;
		$scope.errorIndex = 0;
		if(profileType == 1){
			if($scope.editUser.firstName == undefined || $scope.editUser.firstName == ''){
				$scope.errorIndex = 1;
				$scope.editUsers.firstname.$dirty = true;
			    $scope.editUsers.firstname.$invalid = true;
			    $scope.editUsers.firstname.$error.required = true;
			    focus('user_First_Name');
       	    }else if($scope.editUser.lastName == undefined || $scope.editUser.lastName == ''){
       	    	$scope.errorIndex = 1;
       	    	$scope.editUsers.lastname.$dirty = true;
			    $scope.editUsers.lastname.$invalid = true;
			    $scope.editUsers.lastname.$error.required = true;
			    focus('user_Last_Name');
       	    } else if($scope.editUser.month == undefined || $scope.editUser.month == '' || $scope.editUser.month == null){
				$scope.errorIndex = 1;
				$scope.editUsers.birthmonth.$dirty = true;
			    $scope.editUsers.birthmonth.$invalid = true;
			    $scope.editUsers.birthmonth.$error.required = true;
				focus('birthmonth');
			}else if($scope.editUser.day == undefined || $scope.editUser.day == '' ){
				$scope.errorIndex = 1;
				$scope.editUsers.birthdate.$dirty = true;
			    $scope.editUsers.birthdate.$invalid = true;
			    $scope.editUsers.birthdate.$error.required = true;
				focus('birthdate');
			}else if($scope.editUser.year == undefined || $scope.editUser.year == '' ){
				$scope.errorIndex = 1;
				$scope.editUsers.birthyear.$dirty = true;
			    $scope.editUsers.birthyear.$invalid = true;
			    $scope.editUsers.birthyear.$error.required = true;
				focus('birthyear');
			} else if($scope.editUser.gender == undefined){
       	    	$scope.errorIndex = 1;
       	    	focus('register_male');
       	    } /*else if($scope.editUser.relationshipsts == undefined || $scope.editUser.relationshipsts.status == undefined || $scope.editUser.relationshipsts.status == ''){
			    $scope.errorIndex = 1;
			    $scope.editUsers.relation.$dirty = true;
			    $scope.editUsers.relation.$invalid = true;
			    $scope.editUsers.relation.$error.required = true;
			    focus('relation');
       	    } */ else if($scope.editUser.country == undefined || $scope.editUser.country.country == undefined || $scope.editUser.country.country == ''){
			    $scope.errorIndex = 1;
			    $scope.editUsers.nation.$dirty = true;
			    $scope.editUsers.nation.$invalid = true;
			    $scope.editUsers.nation.$error.required = true;
			    focus('countryId');
       	    } else if($scope.editUser.state == undefined || $scope.editUser.state == '' || isNaN($scope.editUser.state) == false ){
				$scope.errorIndex = 1;
				$scope.editUsers.states.$dirty = true;
			    $scope.editUsers.states.$invalid = true;
			    $scope.editUsers.states.$error.required = true;
				focus('state');
			} else if($scope.editUser.zip == undefined || $scope.editUser.zip == '' || $scope.editUser.zip.length < 5 || $scope.editUser.zip.length > 5 || isNaN($scope.editUser.zip) == true){
			    $scope.errorIndex = 1;
			    $scope.editUsers.zipcode.$dirty = true;
			    $scope.editUsers.zipcode.$invalid = true;
			    $scope.editUsers.zipcode.$error.required = true;
			    focus('zipcode');
       	    } else if($scope.editUser.city == undefined || $scope.editUser.city == '' || isNaN($scope.editUser.city) == false){
				$scope.errorIndex = 1;
				$scope.editUsers.place.$dirty = true;
			    $scope.editUsers.place.$invalid = true;
			    $scope.editUsers.place.$error.required = true;
				focus('place');
			}else if($scope.editUser.city_born == undefined || $scope.editUser.city_born == '' || isNaN($scope.editUser.city_born) == false){
				$scope.errorIndex = 1;
				$scope.editUsers.cityborn.$dirty = true;
			    $scope.editUsers.cityborn.$invalid = true;
			    $scope.editUsers.cityborn.$error.required = true;
				focus('city_born');
			} 
			if( $scope.errorIndex == 1){
				return false;
				//$scope.errorIndex = 0;
			}
			//var birthDay = 
			
			var bDate =  $scope.editUser.month.value  +'-' + $scope.editUser.day + '-' + $scope.editUser.year  + " 00:00:00";
			var birthDayObject =  new Date(bDate).getTime();
			var currentDateObject = new Date().getTime();

			if(currentDateObject < birthDayObject){
				$scope.birthdateclass = 'text-red display-block-inline fr';
				$scope.shouldBeFocus = true;
				$scope.birthdateError = $scope.i18n.register.birthday_invalid;
				$scope.errorIndex = 1;
				/*$scope.editUsers.birthmonth.$dirty = true;
			    $scope.editUsers.birthmonth.$invalid = true;
			    $scope.editUsers.birthmonth.$error.required = true;
			    $scope.editUsers.birthdate.$dirty = true;
			    $scope.editUsers.birthdate.$invalid = true;
			    $scope.editUsers.birthdate.$error.required = true;
			    $scope.editUsers.birthyear.$dirty = true;
			    $scope.editUsers.birthyear.$invalid = true;
			    $scope.editUsers.birthyear.$error.required = true;*/
				focus('birthmonth');
				editTimer = $timeout(function(){
			   		$scope.birthdateclass = "";
			   		$scope.birthdateError = "";
			   	},10000);
			}

			if( $scope.errorIndex == 1){
				return false;
			}
			var temparr =[];
			if($scope.selectedTags == undefined || $scope.selectedTags == '' || $scope.selectedTags == null){
				temparr.push(" ");
			}else{
				for(var i=0;i<$scope.selectedTags.length;i++)
				{	
				 	temparr.push($scope.selectedTags[i].name);
	         	}
	         }
	        if($scope.editUser.relationshipsts == undefined || $scope.editUser.relationshipsts == ''){
				opts.relationship=" ";
			}
			else{
				opts.relationship = $scope.editUser.relationshipsts.status;
			}
			if($scope.editUser.about_me == undefined || $scope.editUser.about_me == ''){
				opts.about_me = " ";
			}else{
				opts.about_me = $scope.editUser.about_me;
			}
			if($scope.editUser.address == undefined || $scope.editUser.address == ''){
			  	opts.address = " ";
       	    }else{
       	    	opts.address = $scope.editUser.address;
       	    }
       	    if((document.getElementById("lat").value) == undefined || (document.getElementById("lat").value) == ''){
				opts.latitude = " ";
			}else{
				opts.latitude = document.getElementById("lat").value;
			}
			if((document.getElementById("lon").value )== undefined || (document.getElementById("lon").value) == ''){
				opts.longitude = " ";
			}else{
				opts.longitude = document.getElementById("lon").value;
			}
			if((document.getElementById("mapplace").value) == undefined || (document.getElementById("mapplace").value) == ''){
				opts.map_place = " ";
			}else{
				opts.map_place = document.getElementById("mapplace").value;
			}
         	$scope.hobbyarray=temparr;
         	$scope.hobbyarray=$scope.hobbyarray.join();
			opts.firstname = $scope.editUser.firstName ;
			opts.lastname = $scope.editUser.lastName ;
			opts.birthday = $scope.editUser.day + '-' + $scope.editUser.month.value  +'-' +$scope.editUser.year;
			opts.gender = $scope.editUser.gender;
			opts.country = $scope.editUser.country.id;
			opts.region = $scope.editUser.country.country;
			opts.state = $scope.editUser.state;
			opts.referral_id = '';
			opts.zip = $scope.editUser.zip;
			opts.city = $scope.editUser.city;
			opts.city_born = $scope.editUser.city_born;
			opts.hobbies = $scope.hobbyarray;
			$timeout.cancel(editTimer);
		}else if(profileType == 2){
			if($scope.editUser.phone == undefined || $scope.editUser.phone == '' || isNaN($scope.editUser.phone) == true){
				$scope.msgClass = 'text-red display-block-inline fr';
				$scope.shouldBeFocus = true;
				$scope.brokerMsg = $scope.i18n.broker.enter_brokernumber ;
				return false;
			} else if($scope.editUser.fiscalcode == undefined || $scope.editUser.fiscalcode == ''){
				$scope.msgClass = 'text-red display-block-inline fr';
				$scope.shouldBeFocus = true;
			   $scope.editMessage = $scope.i18n.broker.enter_brokerfiscal;
			   return false;
       	    } else if($scope.editUser.iban == undefined || $scope.editUser.iban == ''){
			   $scope.msgClass = 'text-red display-block-inline fr';
			   $scope.shouldBeFocus = true;
			   $scope.editMessage = $scope.i18n.broker.enter_brokeriban;
			   return false;
       	    }  else if((document.getElementById("lat1").value) == undefined || (document.getElementById("lat1").value) == ''){
				$scope.msgClass = 'text-red display-block-inline fr';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.register.enter_businesslat;
				return false;
			} else if((document.getElementById("lon1").value )== undefined || (document.getElementById("lon1").value) == ''){
				$scope.msgClass = 'text-red display-block-inline fr';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.register.enter_businesslog;
				return false;
			} else if((document.getElementById("mapplace1").value) == undefined || (document.getElementById("mapplace1").value) == ''){
				$scope.msgClass = 'text-red display-block-inline fr';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.register.enter_businessmap;
				return false;
			} 

			opts.phone = $scope.editUser.phone;
			opts.vat_number = $scope.editUser.vatnumber;
			opts.fiscal_code = $scope.editUser.fiscalcode;
			opts.iban = $scope.editUser.iban;
			if ($scope.editUser.brokerreferral_id) {
				opts.referral_id = $scope.editUser.brokerreferral_id;
			} else {
				opts.referral_id = '';
			}
			// opts.referral_id = $scope.editUser.brokerreferral_id;
			opts.map_place = document.getElementById("mapplace1").value;
			opts.latitude = document.getElementById("lat1").value;
			opts.longitude = document.getElementById("lon1").value;
			if(typeof $scope.idcard == undefined){
				opts.idcard = $scope.editUser.idcard;
			}
			if(typeof $scope.ssnFile == undefined){
				opts.ssn = $scope.editUser.ssn;
			}
		}
	
		$scope.showloading = true;
        $scope.editloader = true;
        $scope.msgClass = "";
		$scope.editMessage = "";
		ProfileService.updateProfileDetail(opts, $scope.idCardFile, $scope.ssnFile, function(data) {
			if(data.code == 101){
				$scope.msgClass = 'text-success display-block-inline fr';
				//$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.validation.save_success;
                $scope.editloader = false;
				$scope.showloading = false;
				editTimer = $timeout(function() {
					$scope.msgClass = '';
					$scope.editMessage = '';
				}, 15000);
				if(profileType == 1){
					$scope.basicProfile();
					editTimer = $timeout(function() {
					   //$scope.basicProfile(1);
					}, 10000);
					
				}
			} else if(data.code == 132) {
				$scope.msgClass = 'text-red display-block-inline fr';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.validation.invalid_profile_type;
				$scope.showloading = false;
                $scope.editloader = false;
			} else if(data.code == 100) {
				$scope.msgClass = 'text-red display-block-inline fr';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.validation.account_not_active;
				$scope.showloading = false;
                $scope.editloader = false;
			} else if(data.code == 131) {
				$scope.msgClass = 'text-red display-block-inline fr';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.validation.invalid_date_format;
				$scope.showloading = false;
                $scope.editloader = false;
			} else if(data.code == 137) {
				$scope.msgClass = 'text-red display-block-inline fr';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.validation.invalid_user;
				$scope.showloading = false;
                $scope.editloader = false;
			} else if(data.code == 95) {
				$scope.msgClass = 'text-red display-block-inline fr';
				$scope.shouldBeFocus = true;
				$scope.editMessage = $scope.i18n.validation.you_must_choose_iamge;
				$scope.showloading = false;
                $scope.editloader = false;
			} else{
			    $scope.msgClass = 'text-red display-block-inline fr';
			    $scope.shouldBeFocus = true;
                $scope.editMessage = $scope.i18n.validation.YOU_MUST_CHOOSE_AN_IMAGE;
				$scope.showloading = false;
                $scope.editloader = false;
				
			}
			editTimer =  $timeout(function() {
				$scope.msgClass = '';
				$scope.editMessage = '';
			}, 15000);
		});
	};

	var EducationIndex = 0;
	$scope.educations = [];
	$scope.education = {};
	
	/* show EducationForm form  */
	$scope.showEducationForm = false;
	$scope.toggleEducationForm = function(){
		$scope.education = {};
		$scope.formValid = true;
		$scope.editEducationBUtton = false;
		if($scope.showEducationForm === false){
			$scope.showEducationForm = true;
			focus('school_start');
		}else {
			$scope.educations.$setPristine();
			$timeout(function(){
				$scope.showEducationForm = false;
			},100);
			
		}
	}

	var educationTimer;
	/*Submit education form */
	$scope.saveEducation = function(type){

		$scope.educationFocus = false;
		$scope.formValid = true;
		var opts = {};
		if($scope.education.school === undefined || $scope.education.school === '' || $scope.education.school === null){
			$scope.formValid = false;
			$scope.educations.schoolName.$dirty = true;
			$scope.educations.schoolName.$invalid = true;
			$scope.educations.schoolName.$error.required = true;
			focus('schoolSuggestion');
		} else if($scope.education.yearStart == undefined || $scope.education.yearStart == '' || $scope.education.yearStart == null){
			$scope.formValid = false;
			$scope.educations.startYear.$dirty = true;
			$scope.educations.startYear.$invalid = true;
			$scope.educations.startYear.$error.required = true;
			focus('school_start');
		}else if($scope.education.currently_attending === undefined || $scope.education.currently_attending === '' || $scope.education.currently_attending === null){
			$scope.formValid = false;
			$scope.educations.ca.$dirty = true;
			$scope.educations.ca.$invalid = true;
			$scope.educations.ca.$error.required = true;
			focus('school_start')
		}else if($scope.education.currently_attending == 0 && ($scope.education.yearEnd === undefined || $scope.education.yearEnd === '' || $scope.education.yearEnd === null)){
			$scope.formValid = false;
			$scope.educations.endYear.$dirty = true;
			$scope.educations.endYear.$invalid = true;
			$scope.educations.endYear.$error.required = true;
			focus('end_year');
		}else if($scope.education.degree === undefined || $scope.education.degree === '' || $scope.education.degree === null){
			$scope.formValid = false;
			$scope.educations.degreeName.$dirty = true;
			$scope.educations.degreeName.$invalid = true;
			$scope.educations.degreeName.$error.required = true;
			focus('degree_name')
		}else if($scope.education.Field_Of_Study === undefined || $scope.education.Field_Of_Study === '' || $scope.education.Field_Of_Study === null){
			$scope.formValid = false;
			$scope.educations.studyField.$dirty = true;
			$scope.educations.studyField.$invalid = true;
			$scope.educations.studyField.$error.required = true;
			focus('studySuggestion');
		}else if($scope.education.grade === undefined || $scope.education.grade === '' || $scope.education.grade === null){
			$scope.formValid = false;
			$scope.educations.grad.$dirty = true;
			$scope.educations.grad.$invalid = true;
			$scope.educations.grad.$error.required = true;
			focus('school_grade');
		}else if($scope.education.description === undefined || $scope.education.description === '' || $scope.education.description === null){
			$scope.formValid = false;
			$scope.educations.desc.$dirty = true;
			$scope.educations.desc.$invalid = true;
			$scope.educations.desc.$error.required = true;
			focus('desc_option');
		}else if($scope.education.visibility === undefined || $scope.education.visibility === '' || $scope.education.visibility === null){
			$scope.formValid = false;
			$scope.educations.visible.$dirty = true;
			$scope.educations.visible.$invalid = true;
			$scope.educations.visible.$error.required = true;
			focus('visible_option');
		}

		if($scope.formValid == false){
			return false;
		}

		var sDate = $scope.education.yearStart;  // + '/' + $scope.education.monthStart.name  + '/' + $scope.education.dayStart;
		var eDate;
		if($scope.education.currently_attending == 1){
			eDate = ' ';  // + '/' + $scope.education.monthEnd.name  + '/' + $scope.education.dayEnd;
		}else{
			eDate = $scope.education.yearEnd;
		if(sDate > eDate){
			$scope.formValid = false;
			focus('end_year')
			}
		}

		if($scope.formValid == false){
			$scope.formValid = true;
			return false;
		}

		if (type === ''){
		opts.id = "";
		}else {
		opts.id = $scope.educationId;
		}
		opts.user_id = APP.currentUser.id;
		opts.type = 1;
		opts.school = $scope.education.school;
		opts.start_date = $scope.education.yearStart;
		if($scope.education.currently_attending == 0){
			opts.currently_attending = false;
		}else{
			opts.currently_attending = true;
		}
		//opts.currently_attending = $scope.education.currently_attending;
		opts.end_date =  eDate; 
		opts.degree = $scope.education.degree.degree;
		opts.field_of_study = $scope.education.Field_Of_Study;
		opts.grade = $scope.education.grade;
		if($scope.education.activity_society === undefined || $scope.education.activity_society === '' || $scope.education.activity_society === null){
		opts.activities = "";
		}else{
		opts.activities = $scope.education.activity_society;
		}
		opts.desc = $scope.education.description;
		opts.visibility_type = $scope.education.visibility.id;
		$scope.errorClass = "";
		$scope.educationMessage = "";
		$scope.wait = true;
		$timeout.cancel(educationTimer);
		ProfileService.saveUserEducation(opts, function(data){
			$scope.wait = false;
			if(data.code === "101" && data.message === "SUCCESS"){
				$scope.editEducationBUtton = false;
				if (type === ''){
					//$scope.educationDetails.push(data.data);
					$scope.educationDetails = data.data;
				}else{
					/*var indexNo = 0;
					//var indexNo = $scope.educationDetails.indexOf(data.data);
					for (var i = 0; i < $scope.educationDetails.length; i++) {
						if($scope.educationDetails[i].id === data.data.id){
							indexNo = i;
							break;
						}
					}*/
					//$scope.educationDetails.splice(indexNo,1);
					//$scope.educationDetails.push(data.data);
					$scope.educationDetails = data.data;
				}

				$scope.errorClass = 'text-success text-center';
				$scope.educationMessage = $scope.i18n.profile.edit_profile.education_saved;
				educationTimer =  $timeout(function(){
				    $scope.errorClass = "";
				    $scope.educationMessage = "";
				   },15000);
				$scope.toggleEducationForm();
			}else{
			$scope.errorClass = 'text-red text-center';
			$scope.educationMessage = data.message;
			educationTimer =  $timeout(function(){
			    $scope.errorClass = "";
			    $scope.educationMessage = "";
			   },15000);
			}
		});

	};

	$scope.visibleWait = [];
	// Change visiblity of education
	$scope.updateEducationVisibility = function(index, type){
		$scope.visibleWait[index.id] = true;
		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.id = index.id;
		opts.type = 1;
		opts.visibility_type = type;
		ProfileService.updateEducationVisibility(opts,function(data){
			$scope.visibleWait[index.id] = false;
			if(data.code === '101' && data.message === "SUCCESS"){
				for (var i = 0; i < $scope.educationDetails.length; i++) {
					if($scope.educationDetails[i].id === index.id){
						$scope.educationDetails[i].visibility_type = type;
					}
				};
			}
		});
	};


	$scope.currentFullDate = new Date().getFullYear();
	//Edit education form
	$scope.educationFocus = false;
	$scope.editEducationBUtton = false;
	$scope.editEducation = function(index, id){
		focus(id);
		$scope.editEducationBUtton = true;
		$scope.education = {};
		$scope.showEducationForm = true;
		//$scope.toggleEducationForm();
		$scope.education.school = index.school;
		$scope.education.yearStart  = parseInt(index.start_date);
		$scope.education.yearEnd = parseInt(index.end_date);
		$scope.education.grade = index.grade;
		$scope.education.activity_society = index.activities;
		$scope.education.Field_Of_Study = index.field_of_study;
		$scope.education.description = index.description;
		if(index.currently_attending === true){
			$scope.education.currently_attending = 1;
		}else{
			$scope.education.currently_attending = 0;
		}
		
		for(var i=0;i<$scope.degrees.length;i++){
			if(index.degree === $scope.degrees[i].degree){
				$scope.education.degree = $scope.degrees[i];
			}
		};
		for (var i = 0; i < $scope.visibility.length; i++) {
			if($scope.visibility[i].id === index.visibility_type){
				$scope.education.visibility = $scope.visibility[i];
			}
		};
		$scope.educationId = index.id;
		$scope.educationFocus = true;
	};
	// Delete the Education
	$scope.deleteEducation = function(index,id){
		var opts = {};
		opts.user_id = index.user_id;
		opts.type = 1;
		opts.id = index.id;
		$scope.wait = true;
		angular.element('.deleteEducation'+id).css('display','none');
		$timeout.cancel(educationTimer);
		ProfileService.deleteEducation(opts,function(data){
			$scope.wait = false;
		if(data.code == 101 && data.message == "SUCCESS"){
			$scope.showEducationForm = false;
			var indexNo = $scope.educationDetails.indexOf(index);
			$scope.educationDetails.splice(indexNo,1);
			$scope.errorClass = 'text-success text-center';
			$scope.educationMessage = $scope.i18n.profile.edit_profile.edu_deleted_success;
			educationTimer =  $timeout(function(){
		   		$scope.errorClass = "";
		   		$scope.educationMessage = "";
		   	},15000);
		}else{
			angular.element('.deleteEducation'+id).css('display','block');
			$scope.errorClass = 'text-red text-center';
			$scope.educationMessage = data.message;
			educationTimer =  $timeout(function(){
		   		$scope.errorClass = "";
		   		$scope.educationMessage = "";
		   	},15000);
		}
		});
	};

	//Delete categories
	$scope.deleteCategories = function(index){

		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.type = 1;
		opts.id = index.id;
		ProfileService.deleteCategory(opts,function(data){
			if(data.message = "SUCCESS")
			{
				console.log("category deleted");
			}
		});
	};


	// Show School name suggestion
	$scope.education.school ='';
	var DELAY_TIME_BEFORE_POSTING = 300;
	//var element = $('#search');
    var currentTimeout = null;

    $('#schoolSuggestion').keydown(function(event) {
		var model = $scope.searchText;
		if(currentTimeout) {
		$timeout.cancel(currentTimeout);
		}
		currentTimeout = $timeout(function(){
			if(event.which != 13){ 
				$scope.schoolSuggestion();
			}
		}, DELAY_TIME_BEFORE_POSTING)
    });
	$scope.schools = [];
	$scope.schoolLoader = false;
	$scope.schoolSuggestion = function(){
		var opts = {};
   	    opts.name=$scope.education.school;
   	    opts.type= "school";
   	    opts.session_id = APP.currentUser.id;
   	    $scope.cancelSchoolRequest = false;
   	    $scope.schoolLoader = true;
   	    ProfileService.searchSuggestion(opts, function(data){
   	    	if(data.code === 101 && data.message === "SUCCESS"){
   	    		if($scope.cancelSchoolRequest === false){
   	    			$scope.schools = data.data;
   	    			$scope.schoolLoader = false;
   	    		}else{
   	    			$scope.schoolLoader = false;
   	    		}
   	    	}
   	    });
	};

	// Add selected school
	$scope.education.school = "";
	$scope.addSchool = function(index){
		//$scope.education.school = "";
		$scope.education.school = index.name;
		$scope.schoolIndex = -1;
		$scope.schools = [];
	};

	$scope.schoolIndex = -1;
	$scope.schoolDropDowm = function(event){
	    if(event.keyCode===40){
	        event.preventDefault();
	        if($scope.schoolIndex+1 !== $scope.schools.length){
	            $scope.schoolIndex++;
	        }
	    }
	    else if(event.keyCode===38){
	        event.preventDefault();
	        if($scope.schoolIndex-1 !== -1){
	            $scope.schoolIndex--;
	        }
	    }
	    else if(event.keyCode===13){
	        $scope.addSchool($scope.schools[$scope.schoolIndex]);
	    }
	};

	// Clear school suggestion
	$scope.cancelSchoolRequest = false;
	$scope.clearSchoolList = function(){
		$scope.cancelSchoolRequest = true;
		$timeout(function(){
			$scope.schools = [];
		},500);
	};

	// Show Stydy name suggestion
	$('#studySuggestion').keydown(function(event) {
		var model = $scope.searchText;
		if(currentTimeout) {
		$timeout.cancel(currentTimeout);
		}
		currentTimeout = $timeout(function(){
			if(event.which != 13){ 
				$scope.studySuggestion();
			}
		}, DELAY_TIME_BEFORE_POSTING)
    });
	$scope.studies = [];
	$scope.studyLoader = false;
	$scope.studySuggestion = function(){
		var opts = {};
   	    opts.name=$scope.education.Field_Of_Study;
   	    opts.type= "study";
   	    opts.session_id = APP.currentUser.id;
   	    $scope.cancelFeildRequest = false;
   	    $scope.studyLoader = true;
   	    ProfileService.searchSuggestion(opts, function(data){
   	    	if(data.code === 101 && data.message === "SUCCESS"){
   	    		if($scope.cancelFeildRequest === false){
   	    			$scope.studies = data.data;
   	    		}
   	    		$scope.studyLoader = false;
   	    	}else{
   	    		$scope.studyLoader = false;
   	    	}
   	    });
	};

	// Add selected study
	$scope.education.Field_Of_Study = "";
	$scope.addStudy = function(index){
		//$scope.education.Field_Of_Study = "";
		$scope.education.Field_Of_Study = index.name;
		$scope.studyIndex = -1;
		$scope.studies = [];
	};

	$scope.studyIndex = -1;
	$scope.studyDropDown = function(event){
	    if(event.keyCode===40){
	        event.preventDefault();
	        if($scope.studyIndex+1 !== $scope.studies.length){
	            $scope.studyIndex++;
	        }
	    }
	    else if(event.keyCode===38){
	        event.preventDefault();
	        if($scope.studyIndex-1 !== -1){
	            $scope.studyIndex--;
	        }
	    }
	    else if(event.keyCode===13){
	        $scope.addStudy($scope.studies[$scope.studyIndex]);
	    }
	};

	//Clear Field of study
	$scope.cancelFeildRequest = false;
	$scope.clearFeildOfStudy = function(){
		$timeout(function(){
			$scope.studies = [];
		},500);
		$scope.cancelFeildRequest = true;
	};


	/*Show  profession  form */
	$scope.showProfessionForm = false;
	$scope.toggleProfessionForm = function(){
		$scope.professionFormValidate = false;
		$scope.editProfessionButton = false;
		$scope.professional = {};
		if($scope.showProfessionForm === false){
			$scope.showProfessionForm = true;
			focus('companySearch');
		}else {
			
			$scope.professionals.$setPristine();
			$timeout(function(){
				$scope.showProfessionForm = false;
			},100);
		}
	};

	/*Submit Professional form */
	$scope.professional = {};
	$scope.saveProfession = function(type){
		$scope.professionFocus = false; 
		$scope.dateError = false;
		$scope.professionFormValidate = false;
		var opts = {};
		if($scope.professional.company === undefined || $scope.professional.company === '' || $scope.professional.company === null){
			$scope.professionals.companyName.$dirty = true;
			$scope.professionals.companyName.$invalid = true;
			$scope.professionals.companyName.$error.required = true;
			$scope.professionFormValidate = true;
			focus('companySearch');
		}else if($scope.professional.title === undefined || $scope.professional.title === '' || $scope.professional.title === null){
				$scope.professionals.Role.$dirty = true;
				$scope.professionals.Role.$invalid = true;
				$scope.professionals.Role.$error.required = true;
				$scope.professionFormValidate = true;
				focus('jobTitle');
		}else if($scope.professional.monthStart === undefined || $scope.professional.monthStart === '' || $scope.professional.monthStart === null){
				$scope.professionals.job_Month_Start.$dirty = true;
				$scope.professionals.job_Month_Start.$invalid = true;
				$scope.professionals.job_Month_Start.$error.required = true;
				$scope.professionFormValidate = true;
				focus('job_month_start');
		}else if($scope.professional.dayStart === undefined || $scope.professional.dayStart === '' || $scope.professional.dayStart === null){
				$scope.professionals.job_day_start.$dirty = true;
				$scope.professionals.job_day_start.$invalid = true;
				$scope.professionals.job_day_start.$error.required = true;
				$scope.professionFormValidate = true;
				focus('job_day_start');
		}else if($scope.professional.yearStart === undefined || $scope.professional.yearStart === '' || $scope.professional.yearStart === null){
				$scope.professionals.job_year_start.$dirty = true;
				$scope.professionals.job_year_start.$invalid = true;
				$scope.professionals.job_year_start.$error.required = true;
				$scope.professionFormValidate = true;
				focus('job_year_start');
		}else if($scope.professional.currently_working === undefined || $scope.professional.currently_working === '' || $scope.professional.currently_working === null){
				$scope.professionals.cw.$dirty = true;
				$scope.professionals.cw.$invalid = true;
				$scope.professionals.cw.$error.required = true;
				$scope.professionFormValidate = true;
				focus('condition_current');
		}else if(($scope.professional.currently_working != 1 || $scope.professional.currently_working == undefined) && ($scope.professional.monthEnd === undefined || $scope.professional.monthEnd === '' || $scope.professional.monthEnd === null)){
				$scope.professionals.job_month_end.$dirty = true;
				$scope.professionals.job_month_end.$invalid = true;
				$scope.professionals.job_month_end.$error.required = true;
				$scope.professionFormValidate = true;
				focus('job_month_ends');
		}else if(($scope.professional.currently_working != 1) && ($scope.professional.dayEnd === undefined || $scope.professional.dayEnd === '' || $scope.professional.dayEnd === null)){
				$scope.professionals.job_day_end.$dirty = true;
				$scope.professionals.job_day_end.$invalid = true;
				$scope.professionals.job_day_end.$error.required = true;
				$scope.professionFormValidate = true;
				focus('job_days_ends');
		}else if(($scope.professional.currently_working != 1) && ($scope.professional.yearEnd === undefined || $scope.professional.yearEnd === '' || $scope.professional.yearEnd === null)){
				$scope.professionals.job_year_end.$dirty = true;
				$scope.professionals.job_year_end.$invalid = true;
				$scope.professionals.job_year_end.$error.required = true;
				$scope.professionFormValidate = true;
				focus('job_years_ends');
		}else if($scope.professional.description === undefined || $scope.professional.description === '' || $scope.professional.description === null){
				$scope.professionals.job_desc.$dirty = true;
				$scope.professionals.job_desc.$invalid = true;
				$scope.professionals.job_desc.$error.required = true;
				$scope.professionFormValidate = true;
				focus('job_description');
		}else if($scope.professional.visibility === undefined || $scope.professional.visibility === '' || $scope.professional.visibility === null){
				$scope.professionals.visibility_type.$dirty = true;
				$scope.professionals.visibility_type.$invalid = true;
				$scope.professionals.visibility_type.$error.required = true;
				$scope.professionFormValidate = true;
				focus('job_visibility');
		}
		
		if($scope.professionFormValidate === true){
			return false;
		}
		var sDate = $scope.professional.yearStart + '-' + $scope.professional.monthStart.value  + '-' + $scope.professional.dayStart + " 00:00:00";
		var arr1 = sDate.split(/[- :]/);
		var startingDate = new Date(arr1[0], arr1[1]-1, arr1[2], arr1[3], arr1[4], arr1[5]);
		var eDate, endingDate;
		if($scope.professional.currently_working == 0){
			eDate = $scope.professional.yearEnd + '-' + $scope.professional.monthEnd.value  + '-' + $scope.professional.dayEnd + " 00:00:00";
			var arr2 = eDate.split(/[- :]/);
			endingDate = new Date(arr2[0], arr2[1]-1, arr2[2], arr2[3], arr2[4], arr2[5]);
			if(endingDate > (new Date())){
			$scope.professionFormValidate = true;
			$scope.errorClass = 'text-red text-center';
			$scope.professionMessage = $scope.i18n.profile.edit_profile.end_date_wrong;
			timer = $timeout(function(){
		   		$scope.errorClass = "";
		   		$scope.professionMessage = "";
		   	},15000);
		}
		}else{
			endingDate = new Date();
			$scope.professional.yearEnd = endingDate.getFullYear();
			$scope.professional.monthEnd = {value: endingDate.getMonth(), name: $scope.months[parseInt(endingDate.getMonth())].name};
			$scope.professional.dayEnd = endingDate.getDate();
		}
		$scope.dateError = false;
		if(startingDate > endingDate){
			$scope.dateError = true;
			$scope.professionFormValidate = true;
			focus('job_month_ends');
		}



		if($scope.professionFormValidate === true){
			$scope.professionFormValidate = false;
			return false;
		}
		if (type === ''){
			opts.id =  '';
		}else{
			opts.id = $scope.professional.id;
		}
		opts.user_id = APP.currentUser.id;
		opts.type = 1;
		opts.company = $scope.professional.company;
		opts.title = $scope.professional.title;
		opts.start_date = $scope.professional.yearStart + '-' +($scope.professional.monthStart.value) + '-' + $scope.professional.dayStart;
		opts.end_date = $scope.professional.yearEnd + '-' +($scope.professional.monthEnd.value) + '-' + $scope.professional.dayEnd ;
		opts.currently_working = $scope.professional.currently_working;
		opts.headline = "";//$scope.professional.headline;
		opts.location = "";
		opts.description = $scope.professional.description;
		opts.visibility_type = $scope.professional.visibility.id;
		$scope.errorClass = "";
		$scope.professionMessage = "";
		$scope.wait = true;
		$timeout.cancel(timer);
		ProfileService.saveUserProfession(opts,function(data){
		$scope.wait = false;
			if(data.code === "101" && data.message === "SUCCESS"){
				$scope.editProfessionButton = false;
				if (type === ''){
					$scope.professionalDetails = data.data;
					$scope.errorClass = 'text-success text-center';
					$scope.professionMessage = $scope.i18n.profile.edit_profile.job_successfully_saved;
				}else{
					$scope.professionalDetails = data.data;
					$scope.errorClass = 'text-success text-center';
					$scope.professionMessage = $scope.i18n.profile.edit_profile.job_successfully_update;
				}
				$scope.toggleProfessionForm();
				timer = $timeout(function(){
			   		$scope.errorClass = "";
			   		$scope.professionMessage = "";
			   	},15000);
			}else{
				$scope.errorClass = 'text-red text-center';
				$scope.professionMessage = data.message;
				$scope.toggleProfessionForm();
				timer = $timeout(function(){
			   		$scope.errorClass = "";
			   		$scope.professionMessage = "";
			   	},15000);
			}
		});

	};

	// Update visibility of profession
	$scope.jobVisibleWait = [];
	// Change visiblity of education
	$scope.updateProfessionVisibility = function(index, type){
		$scope.jobVisibleWait[index.id] = true;
		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.id = index.id;
		opts.type = 1;
		opts.visibility_type = type;
		ProfileService.updateProfessionVisibility(opts,function(data){
			$scope.jobVisibleWait[index.id] = false;
			if(data.code === '101' && data.message === "SUCCESS"){
				for (var i = 0; i < $scope.professionalDetails.length; i++) {
					if($scope.professionalDetails[i].id === index.id){
						$scope.professionalDetails[i].visibility_type = type;
					}
				};
			}
		});
	}; 
	// Edit Profession
	$scope.professionFocus = false; 
	$scope.editProfessionButton = false;
	$scope.editProfession = function(index, focusId){
		$scope.editProfessionButton = true;
		//$scope.toggleProfessionForm();
		focus(focusId);
		$scope.professional = {};
		$scope.showProfessionForm = true;
		$scope.professional.company = index.company;
		$scope.professional.title = index.title;
		var startDate = index.start_date.date.substring(0,10);
		var dtArray = startDate.split("-");
		var dtDay = parseInt(dtArray[2]);
		var dtMonth = parseInt(dtArray[1]);
		var dtYear = parseInt(dtArray[0]);
		$scope.professional.yearStart  = dtYear;
		$scope.professional.monthStart = $scope.months[dtMonth-1];
		$scope.professional.dayStart = dtDay;
		var endDate = index.end_date.date.substring(0,10);
		var enddtArray = endDate.split("-");
		var enddtDay = parseInt(enddtArray[2]);
		var enddtMonth = parseInt(enddtArray[1]);
		var enddtYear = parseInt(enddtArray[0]);
		$scope.professional.yearEnd = enddtYear;
		$scope.professional.monthEnd = $scope.months[enddtMonth-1];
		$scope.professional.dayEnd = enddtDay;
		$scope.professional.currently_working = index.currently_working;
		$scope.professional.headline = index.headline;
		$scope.professional.location = index.location;
		$scope.professional.description = index.description;
		for (var i = 0; i < $scope.visibility.length; i++) {
			if($scope.visibility[i].id === index.visibility_type){
				$scope.professional.visibility = $scope.visibility[i];
			}
		};
		$scope.professional.id = index.id;
		$scope.professionFocus = true;
	};

	var timer;
	// Delete the job
	$scope.deleteProfession = function(index,id){
		var opts = {};
		opts.user_id = index.user_id;
		opts.type = 1;
		opts.id = index.id;
		angular.element(".deleteProfession"+id).css("display", "none");
		$scope.wait = true;
		$scope.errorClass = "";
		$scope.professionMessage = "";
		$timeout.cancel(timer);
		//$scope.toggleProfessionForm();
		$scope.showProfessionForm = false;
		ProfileService.deleteProfession(opts,function(data){
			$scope.wait = false;
			if(data.code == 101 && data.message == "SUCCESS"){
				var indexNo = $scope.professionalDetails.indexOf(index);
				$scope.professionalDetails.splice(indexNo,1);
				$scope.errorClass = "text-center text-success";
				$scope.professionMessage = $scope.i18n.profile.edit_profile.job_successfully_deleted;
				timer = $timeout(function(){
					$scope.errorClass = "";
					$scope.professionMessage = "";
				},15000);
			}else{
				angular.element("#deleteProfession"+id).css("display","block");
			}
		});
	};

	// Show Stydy name suggestion
	$('#companySearch').keydown(function(event) {
		var model = $scope.searchText;
		if(currentTimeout) {
		$timeout.cancel(currentTimeout);
		}
		currentTimeout = $timeout(function(){
			if(event.which != 13){ 
				$scope.companySuggestion();
			}
		}, DELAY_TIME_BEFORE_POSTING)
    });
	$scope.companies = [];
	$scope.companySuggestion = function(){
		var opts = {};
   	    opts.name=$scope.professional.company;
   	    opts.type= "company";
   	    opts.session_id = APP.currentUser.id;
   	    $scope.cancelCompanyRequest = false;
   	    ProfileService.searchSuggestion(opts, function(data){
   	    	if(data.code === 101 && data.message === "SUCCESS"){
   	    		if($scope.cancelCompanyRequest === false){
   	    			$scope.companies = data.data;
   	    		}
   	    	}
   	    });
	};

	// Add selected Company

	$scope.professional.company = "";
	$scope.addCompany = function(index){
		//$scope.education.Field_Of_Study = "";
		$scope.professional.company = index.name;
		$scope.companyIndex = -1;
		$scope.companies = [];
	};

	$scope.companyIndex = -1;
	$scope.companyDropDown = function(event){
	    if(event.keyCode===40){
	        event.preventDefault();
	        if($scope.companyIndex+1 !== $scope.companies.length){
	            $scope.companyIndex++;
	        }
	    }else if(event.keyCode===38){
	        event.preventDefault();
	        if($scope.companyIndex-1 !== -1){
	            $scope.companyIndex--;
	        }
	    }
	    else if(event.keyCode===13){
	        $scope.addCompany($scope.companies[$scope.companyIndex]);
	    }
	};

	//clear company list 
	$scope.cancelCompanyRequest = false;
	$scope.clearCompanyList = function(){
		$scope.cancelCompanyRequest = true;
		$timeout(function(){
			$scope.companies = [];
		},500);
	};

	// Show Title
	$('#jobTitle').keydown(function(event) {
		var model = $scope.searchText;
		if(currentTimeout) {
		$timeout.cancel(currentTimeout);
		}
		currentTimeout = $timeout(function(){
			if(event.which != 13){ 
				$scope.titleSuggestion();
			}
		}, DELAY_TIME_BEFORE_POSTING)
    });
	$scope.titles = [];
	$scope.titleSuggestion = function(){
		var opts = {};
   	    opts.name=$scope.professional.title;
   	    opts.type= "jobtitle";
   	    opts.session_id = APP.currentUser.id;
   	    $scope.cancelJobTitlerequest = false;
   	    ProfileService.searchSuggestion(opts, function(data){
   	    	if(data.code === 101 && data.message === "SUCCESS"){
   	    		if($scope.cancelJobTitlerequest === false){
   	    			$scope.titles = data.data;
   	    		}
   	    	}
   	    });
	};

	// Add selected Company

	$scope.professional.title = "";
	$scope.addTitle = function(index){
		$scope.professional.title = index.name;
		$scope.titleIndex = -1;
		$scope.titles = [];
	};

	$scope.titleIndex = -1;
	$scope.jobTitleDropDown = function(event){
	    if(event.keyCode===40){
	        event.preventDefault();
	        if($scope.titleIndex+1 !== $scope.titles.length){
	            $scope.titleIndex++;
	        }
	    }else if(event.keyCode===38){
	        event.preventDefault();
	        if($scope.titleIndex-1 !== -1){
	            $scope.titleIndex--;
	        }
	    }
	    else if(event.keyCode===13){
	        $scope.addTitle($scope.titles[$scope.titleIndex]);
	    }
	};

	// clear job Title list
	$scope.cancelJobTitlerequest = false;
	$scope.clearJobTitle = function(){
		$scope.cancelJobTitlerequest = true;
		$timeout(function(){
			$scope.titles = [];
		},500);
	};

	// Show the Catageory Form
	$scope.showCatageoryForm = false;
	$scope.toogleCatageory = function(){
		$scope.cathaserror  = false;
		$scope.catkeyerror  = false;
		$scope.catErrClsMsg = '';
		$scope.catErrCls = '';
		$scope.editCategoryButton = false;
		$scope.selectedCategory = "";
		$scope.categoryKeyword = "";
		$scope.keywordList = [];
		if($scope.showCatageoryForm === false){
			$scope.showCatageoryForm = true;
		}else {
			$scope.showCatageoryForm = false;
		}
	};

	// Search Category 
	var DELAY_TIME_BEFORE_POSTING = 300;
    var currentTimeout = null;
    $scope.searchicn = '';
    $scope.showCatLoading = false;
	$scope.categories = [];
	$scope.$watch('currentLanguage', function(newValue, oldValue) {
		$scope.searchCatagory(newValue);
		$timeout(function(){
	    	$scope.degrees = $scope.i18n.profile.degree;
	    	$scope.relationshipstatus = $scope.i18n.profile.relationshipstatus;
	    	$scope.visibility = $scope.i18n.profile.profile_visibility;
	    	$scope.relatives = $scope.i18n.profile.relationtype;
	    	$scope.months = $scope.i18n.profile.months;
		},400);
	});


	$scope.searchCatagory = function(currentLanguage){
		var opts = {};
		opts.lang_code = currentLanguage;
		opts.session_id = APP.currentUser.id;
		$scope.cancelCategoryRequest = false;
		ProfileService.searchCatagory(opts,function(data){
			if(data.code === 101 && data.message === 'SUCCESS'){
				if(data.data.length > 0){
					$scope.categories = data.data;
				}
				$scope.showCatLoading = false;
			}
		});
	};
	$scope.searchCatagory($scope.currentLanguage);

	// enable disable keyword box
	$scope.enableKeyword = true;
	$scope.focusKeyword = function(){
		if($scope.selectedCategory === undefined || $scope.selectedCategory === "" || $scope.selectedCategory === null){
			$scope.enableKeyword = true;
			$scope.editCategoryButton = false;
		}else{
			$scope.enableKeyword = false;
		}
	};


	// Search keyword for particular catagory
	$scope.showCatKeyLoading = false;
	$scope.srchkeyicn = '';
	$('#categoryKeyword').keydown(function(event) {
		if(currentTimeout) {
			$timeout.cancel(currentTimeout);
		}
		currentTimeout = $timeout(function(){
			if(event.which != 13){ 
				$scope.searchKeyword();
			}
		}, DELAY_TIME_BEFORE_POSTING)
	});

	$scope.keywords = [];
	$scope.searchKeyword = function(){
		var opts = {};
		opts.category_id = $scope.selectedCategory.id.toString();
		opts.session_id = APP.currentUser.id;
		opts.keyword = $scope.categoryKeyword;
		$scope.cancelKeywordRequest = false;
		$scope.showCatKeyLoading = true;
		ProfileService.searchCatagoryKeyword(opts,function(data){
			$scope.showCatKeyLoading = false;
			if(data.code === 101 && data.message === "SUCCESS"){
				if($scope.cancelKeywordRequest === false){
					$scope.keywords =  data.data.keyword;
				}
			}
		});
	};

	$scope.keywordIndex = -1;
	$scope.keywordKeyDown=function(event){
	    if(event.keyCode===40){
	        event.preventDefault();
	        if($scope.keywordIndex+1 !== $scope.keywords.length){
	            $scope.keywordIndex++;
	        }
	    }
	    else if(event.keyCode===38){
	        event.preventDefault();
	        if($scope.keywordIndex-1 !== -1){
	            $scope.keywordIndex--;
	        }
	    }
	    else if(event.keyCode===13){
	       if($scope.keywords[$scope.keywordIndex] === undefined ){
	       		if($scope.categoryKeyword.trim() !== ''){
                   var opts = {};
                   		opts.user_id = APP.currentUser.id;
                   		opts.keyword = $scope.categoryKeyword;

               		ProfileService.addKeywords(opts,function(data){
						// if(data.code === 101 && data.message === 'SUCCESS'){
						// }
					});
               }
		       $scope.storeKeyword($scope.categoryKeyword);
		   }else{
		       $scope.storeKeyword($scope.keywords[$scope.keywordIndex]);
		   }
	    }
	};

	// Clear keyword List
	$scope.cancelKeywordRequest = false;
	$scope.clearKeyList = function(){
		$scope.cancelKeywordRequest = true;
		$timeout(function(){
			$scope.keywords = [];
		},500);
	}

	// Store Keyword
	$scope.categoryKeyword = "";
	$scope.keywordList = [];
	$scope.storeKeyword = function(index){
		$scope.keywords = [];
		$scope.keywordIndex = -1;
		$scope.categoryKeyword = "";
		if( typeof(index) === 'object'){
			if($scope.keywordList.indexOf(index.name) === -1){
		   		$scope.keywordList.push(index.name);
		   	}
		}else{
			if(index === '' || index === undefined ){
				return false;
			}else{
				if($scope.keywordList.indexOf(index) === -1){
					$scope.keywordList.push(index);
				}
			}
  		}
	};

	//Clear keyword array List
	$scope.clearKeywordList = function(){
		$timeout(function(){
			$scope.keywords = [];
		},500);
		
	};

	//Remove keyword from the array
	$scope.removeKeyword = function(index){
		//var keyIndex = $scope.keywordList.indexOf(index);
		$scope.keywordList.splice(index,1);
	};

	// Save Category form
	$scope.saveCat = false;
	$scope.saveCategory = function(type){
		$scope.cathaserror  = false;
		$scope.catkeyerror  = false;
		$scope.catErrClsMsg = '';
		$scope.catErrCls = '';
		$scope.saveCat = true;
		var catId = $scope.selectedCategory.id;
		var catKey = $scope.keywordList;
		if (catId === undefined || catId === '') {
            $scope.catErrClsMsg = $scope.i18n.editprofile.invalidCat;
            $scope.cathaserror  = true;
            $scope.catErrCls = 'text-red text-center';
            $timeout(function(){
		   		$scope.catErrCls = "";
		   		$scope.catErrClsMsg = "";
			},15000);
            return false;
        }

		if ($scope.keywordList === undefined || $scope.keywordList.length === 0 || $scope.keywordList === '') {
            $scope.catErrClsMsg = $scope.i18n.editprofile.invalidCatKey;
            $scope.catkeyerror  = true;
            $scope.catErrCls = 'text-red text-center';
            $timeout(function(){
		   		$scope.catErrCls = "";
		   		$scope.catErrClsMsg = "";
			},15000);
            return false;
        } 
		for(var i=0;i<$scope.allCatagories.length;i++){
			if($scope.allCatagories[i].category_id != catId){
				continue;
			}else if($scope.allCatagories[i].keywords == catKey){
				if(type === ''){
					$scope.catErrClsMsg = $scope.i18n.editprofile.duplicateCatKey;
					$scope.catkeyerror  = true;
					$scope.catErrCls = 'text-red text-center';
					$timeout(function() {
						$scope.catErrCls = "";
						$scope.catErrClsMsg = "";
					}, 15000);
					return false;
				}else {
					continue;
				}
			}
		}
        var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.type = 1;
		if(type === ''){
			opts.id = '';
		}else {
			opts.id = $scope.categoryId;
		}
		opts.category_id = $scope.selectedCategory.id;
		opts.keywords = $scope.keywordList.toString();
		opts.lang_code = $scope.currentLanguage;
		$scope.wait = true;
		$timeout.cancel(timer);
		$scope.catErrCls = "";
		$scope.catErrClsMsg = "";
		ProfileService.saveCategory(opts,function(data){
			$scope.wait = false;
			if(data.code === "101" && data.message === "SUCCESS"){
				$scope.editCategoryButton = false;
				$scope.showCatageoryForm = false;
				$scope.enableKeyword = true;
				$scope.keywordList = [];
				if (type === ''){
					$scope.allCatagories.push(data.data);
				}else{
					var indexNo = 0;
					for (var i = 0; i < $scope.allCatagories.length; i++) {
						if($scope.allCatagories[i].id === data.data.id){
							indexNo = i;
							break;
						}
					}
					$scope.allCatagories.splice(indexNo,1);
					$scope.allCatagories.push(data.data);
				}
				$scope.catErrCls = "text-success text-center";
				$scope.catErrClsMsg = $scope.i18n.editprofile.category_save;
				$timeout(function(){
					$scope.catErrCls = "";
					$scope.catErrClsMsg ="";
				},15000);
				$scope.categoryKeyword = "";
				$scope.categorySearch = "";
				$scope.saveCat = false;
			}else{
				$scope.catErrCls = "text-red text-center";
				$scope.catErrClsMsg = $scope.i18n.editprofile.category_service_error;
				$timeout(function(){
					$scope.catErrCls = "";
					$scope.catErrClsMsg = "";
				}, 15000);
			}
	 	});
	 };

	// Edit selected category 
	$scope.editCategoryButton = false;
	$scope.categoryId = "";
	$scope.editCatagory = function(index){
		$scope.editCategoryButton = true;
		$scope.enableKeyword = false;
		for (var i = 0; i < $scope.categories.length; i++) {
			if(index.category_name === $scope.categories[i].category_name){
				$scope.selectedCategory = $scope.categories[i];
			}
		};
		if(index.keywords.length > 0){
			$scope.keywordList = index.keywords.split(",");
		}
		$scope.categoryId = index.id;
		$scope.showCatageoryForm = true;
		focus('selectCategoryFocus');
	};

	//Delete categories
	$scope.isDelCat = [];
	$scope.deleteCategories = function(index){
		var category =  $scope.allCatagories[index];
		$scope.isDelCat[index] = true;
		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.type = 1;
		opts.id = category.id;
		$scope.selectedCategory = "";
		$scope.categoryKeyword = "";
		$scope.showCatageoryForm = false;
		$scope.keywordList = [];
		ProfileService.deleteCategory(opts,function(data){
			if(data.code === "101"){
				$scope.allCatagories.splice(index,1);
				$scope.catErrClsMsg = $scope.i18n.editprofile.category_Delete;
	            $scope.catErrCls = 'text-success text-center';
	            $timeout(function(){
			   		$scope.catErrCls = "";
			   		$scope.catErrClsMsg = "";
				},15000);
				$scope.isDelCat[index] = false;
			}else{
				$scope.catErrClsMsg = $scope.i18n.editprofile.category_service_error;
	            $scope.catErrCls = 'text-red text-center';
	            $timeout(function(){
			   		$scope.catErrCls = "";
			   		$scope.catErrClsMsg = "";
				},15000);
				$scope.isDelCat[index] = false;
			}
		});
	};



	$scope.convertString = function(stringArray){
		if(stringArray.length > 0){
			return stringArray.split(',');
		}else{
			return [];
		}
	};

	/*
	*
	* Select relation to friendpe
	*
	*/
	var opt ={};	

	$scope.searchFrind ='';
	var DELAY_TIME_BEFORE_POSTING = 300;
    var currentTimeout = null;

	$('#searchrelative').keydown(function(event) {
		if(currentTimeout) {
			$timeout.cancel(currentTimeout);
		}
		currentTimeout = $timeout(function(){
			if(event.which != 13){ 
				$scope.selectFriend();
			}
		}, DELAY_TIME_BEFORE_POSTING)
	});
	$scope.relativeSuggesions = [];

	$scope.noFriend = false;
	// Search Friend for selecting relation //
	$scope.selectFriend = function(){
		$scope.noFriend = false;
		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.user_name = $scope.searchRelative;
		$scope.cancelRelativeRequest = false;
		$scope.relativeloader = true;
		ProfileService.selectFriend(opts,function(data){
			if(data.code === 101 && data.message === "SUCCESS"){
				if($scope.cancelRelativeRequest === false){
					$scope.relativeloader = false;
					$scope.relativeSuggesions = [];
					var temp = data.data.users.user_info;
					if(temp.length > 0 ){
						$scope.relativeSuggesions = temp;
					}else{
						$scope.noFriend = true;
					}
				}
			}
		});
	};

	//keyUpDown selection functionality 
	$scope.selectIndex = -1;
	$scope.downUpKeyPress=function(event){
		if($scope.searchRelative.length == 0){
			$scope.storeRelative = {};
			$scope.relativeSuggesions = [];
		}
	    if(event.keyCode===40){
	        event.preventDefault();
	        if($scope.selectIndex+1 !== $scope.relativeSuggesions.length){
	            $scope.selectIndex++;
	        }
	    }
	    else if(event.keyCode===38){
	        event.preventDefault();
	        if($scope.selectIndex-1 !== -1){
	            $scope.selectIndex--;
	        }
	    }
	    else if(event.keyCode===13){
	        $scope.selectedRelative($scope.relativeSuggesions[$scope.selectIndex]);
	    }
	}

	// Storing the selected friend 
	$scope.searchRelative = "";
	$scope.storeRelative = {};
	$scope.selectedRelative = function(index){
		$scope.relativeSuggesions = [];
		$scope.searchRelative = "";
		$scope.storeRelative = {};
		if(index != undefined){
			$scope.storeRelative = index;
			$scope.searchRelative = index.firstname + ' ' + index.lastname;
		}
	};

	/* save Relative */
	/*$scope.$watch('currentLanguage', function(newValue, oldValue) {
		$scope.relationshipstatus = $scope.i18n.profile.relationshipstatus;
	});*/
	
    $scope.wait = false;
	$scope.saveRelative = function(type){
		$scope.relativeRelError = false;
		$scope.relativeFrndError = false;
		$scope.relativeError = false;
		if($scope.searchRelative === undefined || $scope.searchRelative === '' || $scope.searchRelative === null){
			$scope.errorClass = 'text-red text-center';
			$scope.relativeMessage = $scope.i18n.profile.edit_profile.please_enter_friend;
			$scope.relativeFrndError = true;
			timer = $timeout(function(){
		   		$scope.errorClass = "";
		   		$scope.relativeMessage = "";
		   	},15000);
			return false;
		}else if($scope.storeRelative.user_id=== undefined || $scope.storeRelative.user_id === '' || $scope.storeRelative.user_id === null){
			$scope.errorClass = 'text-red text-center';
			$scope.relativeMessage = $scope.i18n.profile.edit_profile.please_enter_friend;
			timer =  $timeout(function(){
		   		$scope.errorClass = "";
		   		$scope.relativeMessage = "";
		   	},15000);
			return false;
		}else if($scope.releativeSearch=== undefined || $scope.releativeSearch=== '' || $scope.releativeSearch === null){
			$scope.errorClass = 'text-red text-center';
			$scope.relativeMessage = $scope.i18n.profile.edit_profile.please_enter_relation;
			$scope.relativeRelError = true;
			timer =  $timeout(function(){
		   		$scope.errorClass = "";
		   		$scope.relativeMessage = "";
		   	},15000);
			return false;
		}

		$scope.relativesavebtn=true;
		var opts = {};
		if(type === ''){
			opts.id = '';
		}else{
			opts.id = $scope.RelativeId;
		}
		opts.user_id = APP.currentUser.id;
		opts.type = 1;
		opts.relative_id = $scope.storeRelative.user_id;
		opts.relation = $scope.releativeSearch.id;
		$scope.wait = true;
	   	$scope.errorClass = "";
		$scope.relativeMessage = "";
		$timeout.cancel(timer);
		ProfileService.saveRelative(opts,function(data){
			$scope.wait = false;
			if(data.code == "101" && data.message == "SUCCESS"){
				if (type === ''){
					$scope.allRelatives.push({"id":data.data.id,"user_id":data.data.user_id,"relative_id":data.data.relative_id,"lastname":data.data.relative_detail[0].lastname,"firstname":data.data.relative_detail[0].firstname,"email":data.data.relative_detail[0].profileImg,"profileImg":data.data.relative_detail[0].profileImg,"relationName":data.data.relative_detail[0].relationName , "relationId":data.data.relation});
					$scope.relativeMessage = $scope.i18n.profile.edit_profile.realtion_saved;

				}else{
					var indexNo = 0;
					for (var i = 0; i < $scope.allRelatives.length; i++) {
						if($scope.allRelatives[i].id === data.data.id){
							indexNo = i;
							break;
						}
					}
					$scope.allRelatives.splice(indexNo,1);
					$scope.allRelatives.push({"id":data.data.id,"user_id":data.data.user_id,"relative_id":data.data.relative_id,"lastname":data.data.relative_detail[0].lastname,"firstname":data.data.relative_detail[0].firstname,"email":data.data.relative_detail[0].profileImg,"profileImg":data.data.relative_detail[0].profileImg,"relationName":data.data.relative_detail[0].relationName,  "relationId":data.data.relation});
					$scope.relativeMessage = $scope.i18n.profile.edit_profile.relation_updated;
			}
				$scope.errorClass = 'text-success text-center';
				timer = $timeout(function(){
			   		$scope.errorClass = "";
			   		$scope.relativeMessage = "";
		   		},15000);
				$scope.relativesavebtn=false;
				$scope.editRelativeButton = false;
				$scope.searchRelative= "";
				$scope.storeRelative={};
				$scope.releativeSearch={};
				$scope.toogleRelative();
			}else {
				$scope.errorClass = 'text-red text-center';
				$scope.relativeMessage = $scope.i18n.profile.edit_profile.invalid_request;
				timer = $timeout(function(){
			   		$scope.errorClass = "";
			   		$scope.relativeMessage = "";
		   		},15000);
			}
		});
	};

	// show hide relative form
	$scope.showRelativeForm = false;
	$scope.toogleRelative = function(){
		$scope.errorClass = "";
		$scope.relativeMessage = "";
		$scope.relativeRelError = false;
		$scope.relativeFrndError = false;
		$scope.searchRelative = '';
		$scope.releativeSearch  = '';
		$scope.editRelativeButton = false;
		if($scope.showRelativeForm === false){
			$scope.showRelativeForm = true;
		}else {
			$scope.showRelativeForm = false;
		}
	};

	//edit relative
	$scope.editRelativeButton = false;
	$scope.editRelative = function(index){ 
		//$scope.toogleRelative();
		$scope.showRelativeForm = true;
		$scope.editRelativeButton = true;
		$scope.searchRelative = index.firstname + ' ' + index.lastname;
		$scope.releativeSearch = $scope.relatives[index.relationId - 1];
		/*for(var i=0; i < $scope.relatives.length; i++){ 
		    if(index.relationName === $scope.relatives[i].name){
			    $scope.releativeSearch = $scope.relatives[i];
		    }
		}*/
		$scope.storeRelative = {"user_id":index.relative_id,"firstname":index.firstname,"lastname":index.lastname, "relationId":index.relationId};
		$scope.RelativeId = index.id;
		focus('searchrelative');
	};

	// Delete Relative
	$scope.deleteRelative = function(index,id){
		var opts = {};
		opts.user_id = index.user_id;
		opts.type = 1;
		opts.id = index.id;
		$scope.wait = true;
		angular.element('.deleteRelative'+id).css('display','none');
		$scope.errorClass = "";
		$scope.relativeMessage = "" ;
		$timeout.cancel(timer);
		$scope.searchRelative = '';
		$scope.releativeSearch  = '';
		$scope.editRelativeButton = false;
		$scope.showRelativeForm = false;
		ProfileService.deleteRelative(opts,function(data){
			$scope.wait = false;
			if(data.code == 101 && data.message == "SUCCESS"){
				var indexNo = $scope.allRelatives.indexOf(index);
				$scope.allRelatives.splice(indexNo,1);
				$scope.errorClass = "text-success text-center";
				$scope.relativeMessage = $scope.i18n.profile.edit_profile.relation_successfully_deleted;
				timer = $timeout(function(){
					$scope.errorClass = "";
					$scope.relativeMessage = "" ;
				},15000);

			}else{
				angular.element('.deleteRelative'+id).css('display','block');
				$scope.errorClass = "text-red text-center";
				$scope.relativeMessage = $scope.i18n.profile.edit_profile.error_in_relation_deletion;
				timer = $timeout(function(){
					$scope.errorClass = "";
					$scope.relativeMessage = "" ;
				},15000);
			}
		});
	};

	// Clear relative array list
	$scope.cancelRelativeRequest = false;
	$scope.clearRelative = function(){
		$scope.relativeloader = false;
		$scope.cancelRelativeRequest = true;
		$scope.noFriend = false;
		$timeout(function(){
			$scope.relativeSuggesions = [];
		},500);
	};

	$scope.$watch('searchRelative',function(val){
        if(val === '') {
            $scope.editRelativeButton = false;
        }
    });

	// Show skill Textbox
	$scope.addSkillBox = false;
	$scope.viewskill= true;
	$scope.temprarySkillCheck = false;
	$scope.toggleSkillForm = function(){
		$scope.skillMesError = false;
		$scope.skillMessage = "";
		$scope.skillClass ="";
		$scope.storeSkills = [];
		if($scope.storeSkillss !== undefined){
			if($scope.storeSkillss.length > 0){
				for(var i=0; i < $scope.storeSkillss.length; i++){
					$scope.storeSkills.push($scope.storeSkillss[i]);
				}
			}
		}
		if($scope.viewskill === false){
			$scope.viewskill= true;
			if($scope.storeSkillss === undefined){
    			$scope.emptyskill = true;
    		}
		}else{
			$scope.viewskill= false;
		}
		if($scope.addSkillBox === false){
			$scope.addSkillBox = true;
		}else{
			$scope.addSkillBox = false;
		}
		
	};

	$scope.closeSkillForm = function(){
		$scope.skillMesError = false;
		$scope.skillMessage = "";
		$scope.skillClass ="";
		if($scope.temprarySkillCheck == true){
			if($scope.storeTempSkill.length > 0){
				for(var i=0;i<$scope.storeTempSkill.length;i++){
					if($scope.storeSkills.indexOf($scope.storeTempSkill[i]) == -1){
						$scope.storeSkills.push($scope.storeTempSkill[i]);
					}
				}
				$scope.temprarySkillCheck = false;
			}
		}
		
		$scope.storeTempSkill = [];
		

		if($scope.viewskill === false){
			$scope.viewskill= true;
			if($scope.storeSkillss === undefined){
    			$scope.emptyskill = true;
    		}
		}else{
			$scope.viewskill= false;
		}
		if($scope.addSkillBox === false){
			$scope.addSkillBox = true;
		}else{
			$scope.addSkillBox = false;
		}
		
	};


	var DELAY_TIME_BEFORE_POSTING = 300;
	$('#searchSkill').keydown(function(event) {
    
      var model = $scope.searchFrind;
      //var poster = model($scope);
      if(currentTimeout) {
        $timeout.cancel(currentTimeout);
      }
      currentTimeout = $timeout(function(){
      	if(event.which != 13){ 
        	$scope.searchSkills();
        }
      }, DELAY_TIME_BEFORE_POSTING)
      });

	$scope.skillLoader = false;
	$scope.searchSkills = function(){
		$scope.skillLoader = true;
		var opts = {};
		opts.type = "skill";
		opts.name = $scope.searchSkill;
		opts.session_id = APP.currentUser.id;
		$scope.cancelSkillRequest = false;
		ProfileService.searchSuggestion(opts,function(data){
			if(data.code === 101 && data.message === "SUCCESS"){
				if($scope.cancelSkillRequest === false){
					$scope.skills = data.data;
				}
				$scope.skillLoader = false;
			}else{
				$scope.skillLoader = false;
			}
		});
	};


	// Save the user skills
	$scope.addSkill = function(){
		$scope.skillMesError = false;
		var opts = {};
		if($scope.storeSkills === undefined || $scope.storeSkills == null || $scope.storeSkills.length === 0){
			$scope.skillMessage = $scope.i18n.skill.insert_msg;
			$scope.skillMesError = true;
    		$scope.skillClass = "text-red text-center";
    		timer = $timeout(function(){
    			$scope.skillMessage = "";
    			$scope.skillClass ="";
    		},15000);
    		return false;
		}
		opts.user_id = APP.currentUser.id;
		opts.skills = $scope.storeSkills.toString();
		$scope.wait = true;
		//$timeout.cancel(timer);
		$scope.skills = [];
		ProfileService.addUserSkills(opts,function(data){
			if(data.code === 101 && data.message === "SUCCESS"){
				$scope.temprarySkillCheck = false;
				$scope.storeSkillss = data.data.skills.skills.split(',');
				$scope.wait = false;
				$scope.toggleSkillForm();
				$scope.emptyskill=false;
				$scope.skillMessage = $scope.i18n.skill.save_msg;
	    		$scope.skillClass = "text-success text-center";
	    		$timeout(function(){
	    			$scope.skillMessage = "";
	    			$scope.skillClass ="";
	    		},15000);
	    		$scope.cancelSkillRequest = true;
	    		$scope.viewskill=true;
			}else{
				$scope.wait = false;
				$scope.skillMessage = data.message;
	    		$scope.skillClass = "text-red text-center";
	    		timer = $timeout(function(){
	    			$scope.skillMessage = "";
	    			$scope.skillClass ="";
	    		},15000);
			}
		});
	};

	// Select the drop down on Upper and lower key press
	$scope.skillIndex = -1;
	$scope.pressDownKey=function(event){
        if(event.keyCode===40){
            event.preventDefault();
            if($scope.skillIndex+1 !== $scope.skills.length){
                $scope.skillIndex++;
            }
        }
        else if(event.keyCode===38){
            event.preventDefault();
            if($scope.skillIndex-1 !== -1){
                $scope.skillIndex--;
            }
        }
        else if(event.keyCode===13){
        	$scope.emptyskill=false;
        	if($scope.skillIndex === -1){
        		$scope.addToSelectedSkill({name:$scope.searchSkill});
        	}else{
            	$scope.addToSelectedSkill($scope.skills[$scope.skillIndex]);
            }
        }
    };


    // Store the selected skills
    $scope.storeSkills = [];
    $scope.addToSelectedSkill = function(index){
    	$scope.skillMessage = "";
    	$scope.skillClass = "";
    	$scope.skillIndex = -1;
    	$timeout.cancel(timer);
    	if($scope.storeSkills.indexOf(index.name) === -1){
    		if(index.name === undefined || index.name === null || index.name === ''){

    		}else{
    			$scope.storeSkills.push(index.name);
    		}
    		//$scope.addSkill($scope.storeSkills);
    		$scope.searchSkill = "";
    	}else{
    		$scope.skillMessage = $scope.i18n.skill.duplicate_msg;
    		$scope.skillClass = "text-red text-center";
    		timer = $timeout(function(){
    			$scope.skillMessage = "";
    			$scope.skillClass = "";
    		},15000);
    	}

    	$timeout(function(){
    		$scope.skills = [];
    	},500);
    };

    // Clear the skill list and stop it for showing more suggestion
    $scope.cancelSkillRequest = false;
    $scope.clearSkillList = function(){
    	$scope.cancelSkillRequest = true;
    	$scope.skillIndex = -1;
    	$timeout(function(){
    		$scope.skills = [];
    	},500);
    };
    $scope.emptyskill = true;
    //get Skill of user
    $scope.skills = [];
    $scope.getSkills = function(){
    	var opts = {};
    	opts.user_id = APP.currentUser.id;
    	ProfileService.getUserSkills(opts,function(data){
    		if(data.code === 101 && data.message === "SUCCESS"){
    			if(data.data.skills.skills.length > 0){
    				$scope.storeSkillss = data.data.skills.skills.split(',');
    				//$scope.storeSkills = data.data.skills.skills.split(',');
					$scope.emptyskill=false;
				}else{
					$scope.emptyskill=true;
    			}
    		}
    	});
    };


    $scope.getSkills();

    $scope.storeTempSkill = [];
    //Remove the selceted skill
    $scope.removeSkill = function(index){
    	$scope.addSkillBox = true;
    	$scope.storeTempSkill.push($scope.storeSkills[index]);
    	$scope.temprarySkillCheck = true;
    	$scope.storeSkills.splice(index,1);
    };
	$scope.initialize = function () {
		if (latitudeMap) {
			var mapOptions = {
				center: new google.maps.LatLng(latitudeMap, longitudeMap),
				zoom: 6,
				scrollwheel: false,
				navigationControl: false,
   				mapTypeControl: false,
   				scaleControl: false,
   				mapTypeId: google.maps.MapTypeId.ROADMAP
			};
		} else {
			var mapOptions = {
				center: new google.maps.LatLng(-33.8688, 151.2195),
				zoom: 6,
				scrollwheel: false,
				navigationControl: false,
   				mapTypeControl: false,
   				scaleControl: false,
   				mapTypeId: google.maps.MapTypeId.ROADMAP
			};
		}

		var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

		var input = (document.getElementById('pac-input'));

		var types = document.getElementById('type-selector');
		map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
		map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

		var autocomplete = new google.maps.places.Autocomplete(input);
		autocomplete.bindTo('bounds', map);

		var current =  new google.maps.LatLng(latitudeMap, longitudeMap);
		var infowindow = new google.maps.InfoWindow();
		var marker = new google.maps.Marker({
			map: map,
			position: current,
			anchorPoint: new google.maps.Point(0, -20)
		});

		google.maps.event.addListener(autocomplete, 'place_changed', function() {
			infowindow.close();
			marker.setVisible(false);
			var place = autocomplete.getPlace();
			if (!place.geometry) {
				return;
			}
			var countryPlace = autocomplete.getPlace();
			document.getElementById("lat").value = countryPlace.geometry.location.lat();
			document.getElementById("lon").value = countryPlace.geometry.location.lng();
			document.getElementById("mapplace").value = countryPlace.formatted_address;

			if (place.geometry.viewport) {
				map.fitBounds(place.geometry.viewport);
			} else {
				map.setCenter(place.geometry.location);
				map.setZoom(17);  
			}
			marker.setIcon(({
				url: place.icon,
				size: new google.maps.Size(71, 71),
				origin: new google.maps.Point(0, 0),
				anchor: new google.maps.Point(17, 34),
				scaledSize: new google.maps.Size(35, 35)
			}));
			marker.setPosition(place.geometry.location);
			marker.setVisible(true);

			var address = '';
			if (place.address_components) {
				address = [
				(place.address_components[0] && place.address_components[0].short_name || ''),
				(place.address_components[1] && place.address_components[1].short_name || ''),
				(place.address_components[2] && place.address_components[2].short_name || '')
				].join(' ');
			}

			infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
			infowindow.open(map, marker);
		});

		//click to swlct the place on map
		/*google.maps.event.addListener(map, "click", function(event){
            // place a marker
            console.log(event);
            marker.setVisible(false);
            //placeMarker(event.latLng);
            document.getElementById("lat").value = event.latLng.k;
			document.getElementById("lon").value = event.latLng.D;
			//document.getElementById("mapplace").value = countryPlace.formatted_address;
			marker = new google.maps.Marker({
                    position: event.latLng,
                    map: map,
                    draggable: true
            });
            //map.setCenter(marker.getPosition());
        });*/

		function setupClickListener(id, types) {
			var radioButton = document.getElementById(id);
		}

		setupClickListener('changetype-all', []);
		setupClickListener('changetype-establishment', ['establishment']);
		setupClickListener('changetype-geocode', ['geocode']);
	};
	$scope.initializesecond = function () {
		var mapOptions = {
			center: new google.maps.LatLng(latitudeMap, longitudeMap),
			zoom: 8,
			scrollwheel: false,
			navigationControl: false,
   			mapTypeControl: false,
   			scaleControl: false,
    		draggable: false
		};
		var map2 = new google.maps.Map(document.getElementById('map-canvas-second'),mapOptions);

		var input = (document.getElementById('pac-input'));

		var types = document.getElementById('type-selector');
		map2.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
		map2.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

		var autocomplete = new google.maps.places.Autocomplete(input);
		autocomplete.bindTo('bounds', map2);

		var infowindow = new google.maps.InfoWindow();
		var marker2 = new google.maps.Marker({
			map2: map2,
			anchorPoint: new google.maps.Point(0, -29)
		});

		google.maps.event.addListener(autocomplete, 'place_changed', function() {
			infowindow.close();
			marker2.setVisible(false);
			var place = autocomplete.getPlace();
			if (!place.geometry) {
				return;
			}
			var countryPlace = autocomplete.getPlace();
			document.getElementById("lat1").value = countryPlace.geometry.location.k;
			document.getElementById("lon1").value = countryPlace.geometry.location.D;
			document.getElementById("mapplace1").value = countryPlace.formatted_address;

			if (place.geometry.viewport) {
				map2.fitBounds(place.geometry.viewport);
			} else {
				map2.setCenter(place.geometry.location);
				map2.setZoom(17);  
			}
			marker2.setIcon(({
				url: place.icon,
				size: new google.maps.Size(71, 71),
				origin: new google.maps.Point(0, 0),
				anchor: new google.maps.Point(17, 34),
				scaledSize: new google.maps.Size(35, 35)
			}));
			marker2.setPosition(place.geometry.location);
			marker2.setVisible(true);

			var address = '';
			if (place.address_components) {
				address = [
				(place.address_components[0] && place.address_components[0].short_name || ''),
				(place.address_components[1] && place.address_components[1].short_name || ''),
				(place.address_components[2] && place.address_components[2].short_name || '')
				].join(' ');
			}

			infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
			infowindow.open(map2, marker2);
		});

		function setupClickListener(id, types) {
			var radioButton = document.getElementById(id);
		}

		setupClickListener('changetype-all', []);
		setupClickListener('changetype-establishment', ['establishment']);
		setupClickListener('changetype-geocode', ['geocode']);
	}

}]);

app.controller('ProfileImageController',['$scope', '$rootScope', 'ProfileImageService', '$location', '$routeParams', '$timeout', 'fileReader', 'FileUploader', function ($scope, $rootScope, ProfileImageService, $location, $routeParams, $timeout, fileReader, FileUploader) {
    $scope.albloader = false;
    $scope.propic = false;
    $scope.picloader = false;
    $scope.successMsg = "";
    //Upload media 
    $scope.uploaduserprofileimages = function(){
        $scope.successMsg = "";
        $scope.fileNotValidMsg = "";
        $scope.fileNotValid = false;
        if($scope.myFile == undefined || $scope.myFile == ''){
            $scope.fileNotValid = true;
            $scope.fileNotValidMsg = $scope.i18n.editprofile.select_image;
            $timeout(function(){
                    $scope.fileNotValidMsg = "";
                    $scope.fileNotValid = false;
            }, 15000);
            return false;
        }
        $scope.albloader = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.user_media = $scope.myFile;
        //Allow some images types for uploading
        var imageType = $scope.myFile['name'].substring($scope.myFile['name'].lastIndexOf(".") + 1);
        // Checking Extension
        if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg" || imageType == "GIF" || imageType == "PNG" || imageType == "JPG" || imageType == "JPEG")) {
            $scope.albloader = false;
            $scope.fileNotValid = true;
            //$scope.imageSrc = 'notValid';
            $scope.fileNotValidMsg = $scope.i18n.editprofile.invalid_media;
            return false;
        } else {
            $scope.fileNotValidMsg = "";
            $scope.fileNotValid = false;
            ProfileImageService.uploaduserprofileimages(opts, $scope.myFile, function(data){    
               if(data.code == 101) {
                    $scope.albloader = false;
                    $('#addPhoto').show();
                    $("input[type='file']").val('');
                    $scope.postFiles = '';
                    $scope.imageSrc = '';
                    $scope.myFile = '';
                    
                    $scope.successMsg = data.message;
                    $timeout(function() {
                        $scope.successMsg = '';
                    }, 15000);
                    $scope.viewmultiprofiles();
                    
               } else {
                    $scope.albloader = false;
                    $('#addPhoto').show();
               }
            });
        }
    }

    $scope.myFile = '';
    $scope.imageSrc = '';
    $scope.fileNotValid = false;
    $scope.fileNotValidMsg = '';
    $scope.getFile = function () {
        if($scope.file == undefined){
            $scope.$apply(function() {
                $scope.removeImage();
            });   
        }else{
            $scope.progress = 0;
            fileReader.readAsDataUrl($scope.file, $scope)
            .then(function(result) {
                $scope.myFile = $scope.file;
                $scope.imageSrc = result;
                var imageType = $scope.myFile['name'].substring($scope.myFile['name'].lastIndexOf(".") + 1);
                //Checking Extension
                if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg" || imageType == "GIF" || imageType == "PNG" || imageType == "JPG" || imageType == "JPEG")) {
                    $scope.fileNotValid = true;
                    $scope.fileNotValidMsg = $scope.i18n.groupcontrol.upload_media;
                    $scope.postFiles = '';
                    $scope.imageSrc = '';
                    $scope.myFile = '';
                } else {
                     $scope.fileNotValid = false;
                }
            });
        }
    };
    
    $scope.removeImage = function() {
        $scope.postFiles = '';
        $scope.imageSrc = '';
        $scope.myFile = '';
        $("input[type='file']").val('');
    };
    

    $scope.viewmultiprofiles = function(){

        $scope.albloader = true; 
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.profile_type = 4; 
        ProfileImageService.viewmultiprofiles(opts, function(data){
            if(data.code == 101) {
                $scope.albloader = false; 
                $scope.picloader = false;
                $scope.propic = true; 
                $rootScope.currentUser.basicProfile = data.data;
            } else {                
                $scope.propic = true; 
                $scope.picloader = false;
                
            }
        });
    }
}]);

app.controller('ProfileImageUploadController',['$scope', '$rootScope', 'ProfileImageService', '$location', '$routeParams', '$timeout', 'fileReader', 'FileUploader', function ($scope, $rootScope, ProfileImageService, $location, $routeParams, $timeout, fileReader, FileUploader) {
    $scope.albloader = false;
    $scope.propic = false;
    $scope.picloader = false;
    $scope.successMsg = "";

    
    $scope.imagePrvSrc = '';
    $scope.imgProgress = '';
    $scope.postImgLoader = '';
    $scope.progress = '';
    var uploader =  $scope.uploader = new FileUploader({
        url: APP.service.uploaduserprofileimages+"?access_token="+APP.accessToken,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'method': 'POST'
            /*'Accept': 'text/json'*/
        },
        data:{
            'user_id': APP.currentUser.id,
        },
        dataObjName:'reqObj',
        formDataName:'user_media'
    });

    uploader.onAfterAddingFile = function(fileItem) {
        uploader.uploadItem(fileItem);
    };

    uploader.onSuccessItem = function(fileItem, response, status, headers) {
        var index = uploader.getIndexOfItem(fileItem);
        if(response.code == 101){
            $scope.imagePrvSrc = response.data;
        }
    };

    uploader.onCompleteAll = function() {
        $scope.postContentStart = false;
    }

    uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
        $timeout(function(){
            $scope.fileNotValidMsg = $scope.i18n.editprofile.no_media_valid;
        }, 4000);
    };

    // FILTERS
    // uploader.filters.push({
    //     name: 'user_media',
    //     fn: function(item /*{File|FileLikeObject}*/, options) {
    //         var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
    //         return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
    //     }
    // });

    // $scope.myFile = '';
    // $scope.imageSrc = '';
    // $scope.fileNotValid = false;
    // $scope.fileNotValidMsg = '';
    // $scope.getFile = function () {
    //     $scope.progress = 0;
    //     fileReader.readAsDataUrl($scope.file, $scope)
    //     .then(function(result) {
    //         $scope.myFile = $scope.file;
    //         $scope.imageSrc = result;
    //         var imageType = $scope.myFile['name'].substring($scope.myFile['name'].lastIndexOf(".") + 1);
    //         //Checking Extension
    //         if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg" || imageType == "GIF" || imageType == "PNG" || imageType == "JPG" || imageType == "JPEG")) {
    //             $scope.fileNotValid = true;
    //             $scope.fileNotValidMsg = $scope.i18n.editprofile.upload_invalid_media;
    //         } else {
    //              $scope.fileNotValid = false;
    //         }
    //     });
    // };

    $scope.removeImage = function() {
        $scope.postFiles = '';
        $scope.imageSrc = '';
        $("input[type='file']").val('');
    };
}]);

app.controller('UserCoverProfileController', ['$cookieStore', '$rootScope', '$scope', '$route', '$http', '$location', '$timeout', '$interval', '$routeParams', 'fileReader', 'ProfileService', 'AffiliatedkService','TranslationService', function($cookieStore, $rootScope, $scope, $route, $http, $location, $timeout, $interval, $routeParams, fileReader, ProfileService, AffiliatedkService, TranslationService) {
	$scope.coverImageUploadStart = false;
	$rootScope.timelineActive = 'profiles';
	var activeUrl = $location.path().replace("/", "");
    if (activeUrl.indexOf("album/images") != -1) { 
        activeUrl = 'album';
    }   
    if (activeUrl.indexOf("timeline") != -1) { 
        activeUrl = 'timeline';
    } 
    if(!$scope.i18n.storealbum){
        TranslationService.getTranslationWithCallback($scope, $scope.activeLanguage, function(data){
           $scope.i18n = data; 
           $scope.invalidCoverImageMgs = $scope.i18n.storealbum.album_invalidCoverImageMgs;
        });
    }else{
        $scope.invalidCoverImageMgs = $scope.i18n.storealbum.album_invalidCoverImageMgs;
    }

    $scope.imageCropResult = null;
    $scope.imageCropResult2 = null;
    $scope.imageWidth = null;
    $scope.imageHeight = null;
    $scope.showImageCropper = false;
    $scope.showImageCropper2 = false;
    $scope.imageString = "";
    $scope.file ={};
    $scope.coverLoadHide = false;
    
	switch(activeUrl) {
        case 'wallets' :  
        $rootScope.timelineActive = 'wallets'; break;
		case 'friends' :  
		$rootScope.timelineActive = 'friends'; break;
		case 'album' :  
		$rootScope.timelineActive = 'album'; break;
        case 'myclubs' :  
        $rootScope.timelineActive = 'club'; break; 
		case 'club' :  
		$rootScope.timelineActive = 'club'; break;
        case 'timeline' :  
		$rootScope.timelineActive = 'timeline'; break;
		case 'shope' :  
		$rootScope.timelineActive = 'shope'; break;
        case 'myshops/1' :  
        $rootScope.timelineActive = 'shope'; break;
        case 'myshops/2' :  
        $rootScope.timelineActive = 'shope'; break;
        case 'about' :  
        $rootScope.timelineActive = 'about'; break;
        case 'profiles' :  
        $rootScope.timelineActive = 'profiles'; break;
        case 'profiles/'+ APP.profileType.brokerProfile :  
        $rootScope.timelineActive = 'profiles'; break;
        case 'profiles/'+ APP.profileType.citizenProfile :  
        $rootScope.timelineActive = 'profiles'; break;
        case 'followers' :  
        $rootScope.timelineActive = 'more'; break;
        case 'citizen/affiliates' :
        $rootScope.timelineActive = 'more'; break;
        case 'broker/affiliates' :
        $rootScope.timelineActive = 'more'; break;
        case 'shop/affiliates' :
        $rootScope.timelineActive = 'more'; break;
        case 'followings' :  
        $rootScope.timelineActive = 'more'; break;
		default : 
		$rootScope.timelineActive = 'profiles';
	}

    $scope.imageXPosition = 0;
    $scope.imageYPosition = 0;
    $scope.setImageCordinate = function(){
        $scope.imageXPosition = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord; 
        $scope.imageYPosition = $rootScope.currentUser.basicProfile.profile_cover_img.y_cord;
        $scope.saveCordinate();
    };

    $scope.showCanves = false;
    $scope.repositionImage = function(){
        $scope.showCanves = true;
        $scope.fileUrl = $rootScope.currentUser.basicProfile.profile_cover_img.thumb;
        $scope.imageXPosition = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord * -1;
        $scope.imageYPosition =  $rootScope.currentUser.basicProfile.profile_cover_img.y_cord * -1;
        $scope.coverLoadHide = true;
    };

    $scope.showcrossactive = true;
    $scope.showcrossactive1 = function(){
        $scope.showcrossactive = false;
    };

    $scope.myFile = '';
    $scope.invalidCoverImage = false;
    $scope.getFile = function () { 
        $scope.progress = 0;
        fileReader.readAsDataUrl($scope.file, $scope)
        .then(function(result) {
            $scope.myFile = $scope.file;
            $scope.readImage($scope.myFile, function(data){
                if(data.length != 0 && data.width >= 910 && data.height >= 400){
                    $scope.uploadProfileCover(); 
                }
                else { 
                    $("#invalidCoverImage").show();
                    $timeout(function(){
                        $("#invalidCoverImage").hide();
                    }, 2000);
                }
            });
        });
    };

    
    //function to check upload image dimenstions
    $scope.readImage = function(file, callback) {
        var reader = new FileReader();
        var image  = new Image();
        reader.readAsDataURL(file);  
        reader.onload = function(_file) {
            var filedata = {};
            image.src    = _file.target.result;
            image.onload = function() {
                var w = this.width,
                    h = this.height,
                    t = file.type,                     
                    n = file.name,
                    s = ~~(file.size/1024) +'KB';
                    $scope.imageWidth = this.width;
                    $scope.imageHeight = this.height;
                    filedata['width'] = w;
                    filedata['height'] = h;
                    callback(filedata);
            };
            image.onerror= function() {
                callback(filedata);
            };      
        };
    }

    $scope.newImage = false;
    $scope.uploadProfileCover = function() {
        $scope.showCoverOption = false; 
    	$scope.coverImageUploadStart = true;
    	var opts = {};
    	opts.user_id = APP.currentUser.id;
    	opts.user_media = $scope.myFile;
        opts.base_64_data = $scope.imageString;
        $scope.fileUrl = "";
        $scope.showCanves = true;
    	ProfileService.uploadCoverPhoto(opts, $scope.myFile, function(data) {
    		if(data.code == '101') {
                $rootScope.currentUser.basicProfile.profile_cover_img.original = data.data.user_info.cover_image;
                $rootScope.currentUser.basicProfile.profile_cover_img.thumb = data.data.user_info.cover_image_thumb;
                $scope.coverImageUploadStart = false;
                $scope.fileUrl = data.data.user_info.cover_image_thumb;
                $scope.newImage = true;
                $rootScope.currentUser.basicProfile.profile_cover_img.media_id =  data.data.user_info.media_id
                $scope.showCanves = true;
                $scope.coverLoadHide = true;
    		} else {
                $scope.coverImageUploadStart = false;
                $scope.coverLoadHide = true;
                $scope.showCanves = true;
    		}
    	});
    }

    //Get Affilicate counts
    $scope.getAffiliateCounts = function() {  
        var opts = {};
        opts.user_id = APP.currentUser.id;   
        opts.session_id = APP.currentUser.id; 
        AffiliatedkService.getAllcounts(opts, function(data) {
            if(data.code == 101) {
                $scope.totalCounts = data.data;
            } 
        });
    };
    
    $scope.getAffiliateCounts();
    var img  = new Image();
    $scope.saveCordinate = function(){
        /*$rootScope.currentUser.basicProfile.profile_cover_img.x_cord = $scope.imageXPosition * -1;
        $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = $scope.imageYPosition * -1;*/
        //$scope.coverLoadHide = false;
        $scope.hideUpdateCoverButton = true;
        $scope.showCanves = false;
        var opts = {};
        opts.session_id = APP.currentUser.id;
        opts.media_id = $rootScope.currentUser.basicProfile.profile_cover_img.media_id;
        opts.session_id = APP.currentUser.id;
        opts.x = ""+($rootScope.currentUser.basicProfile.profile_cover_img.x_cord * -1)+"";
        opts.y = ""+($rootScope.currentUser.basicProfile.profile_cover_img.y_cord * -1)+"";
        ProfileService.sendMediaCoordinate(opts,function(data){
            if(data.code == 101 && data.message == "SUCCESS"){  
                $scope.coverLoadHide = false;
                $scope.file = null;
                $scope.fileUrl = null;
                $scope.hideUpdateCoverButton = false;
                $scope.showCoverOption = false;
                $scope.showCanves = false;
                $rootScope.currentUser.basicProfile.profile_cover_img.x_cord = data.data.x_cord ;
                $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = data.data.y_cord ;
                if($rootScope.mobileView == true){
                    img = null;
                    img = new Image();
                    img.src = $rootScope.currentUser.basicProfile.profile_cover_img.thumb;
                    if($scope.windowWidth <= "480"){
                        img.onload = function(){
                            if(img.width <= 910){
                                if( $rootScope.currentUser.basicProfile.profile_cover_img.y_cord != ""){
                                    if( $rootScope.currentUser.basicProfile.profile_cover_img.y_cord > 100){
                                        $rootScope.mobileY_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.y_cord / 3;
                                    }else{
                                        $rootScope.mobileY_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.y_cord / 4;
                                    }
                                    $rootScope.mobileX_Cord = 0;
                                }else{
                                    $rootScope.currentUser.basicProfile.profile_cover_img.x_cord = 0;
                                    $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = 0;
                                    $rootScope.mobileX_Cord = 0;
                                    $rootScope.mobileY_Cord = 0;
                                }
                            }else if(img.width > 910 && img.width <= 1300){
                                if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord != ""){
                                    if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord > 100){
                                        $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 4;
                                    }else{
                                        $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 5;
                                    }
                                    $rootScope.mobileY_Cord = 0;
                                }else{
                                    $rootScope.currentUser.basicProfile.profile_cover_img.x_cord = 0;
                                    $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = 0;
                                    $rootScope.mobileX_Cord = 0;
                                    $rootScope.mobileY_Cord = 0;
                                }
                            }else if(img.width > 1300){
                                if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord != ""){
                                    if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord > 100){
                                        $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 5;
                                    }else{
                                        $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 6;
                                    }
                                    $rootScope.mobileY_Cord = 0;
                                }else{
                                    $rootScope.currentUser.basicProfile.profile_cover_img.x_cord = 0;
                                    $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = 0;
                                    $rootScope.mobileX_Cord = 0;
                                    $rootScope.mobileY_Cord = 0;
                                }
                            }
                        }
                    }else if($scope.windowWidth > '480' && $scope.windowWidth <= '768'){
                        img.onload = function(){
                            if(img.width <= 910){
                                if( $rootScope.currentUser.basicProfile.profile_cover_img.y_cord != ""){
                                    if( $rootScope.currentUser.basicProfile.profile_cover_img.y_cord > 100){
                                        $rootScope.mobileY_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.y_cord / 1.80;
                                    }else{
                                        $rootScope.mobileY_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.y_cord / 2;
                                    }
                                    $rootScope.mobileX_Cord = 0;
                                }else{
                                    $rootScope.currentUser.basicProfile.profile_cover_img.x_cord = 0;
                                    $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = 0;
                                    $rootScope.mobileX_Cord = 0;
                                    $rootScope.mobileY_Cord = 0;
                                }
                            }else if(img.width > 910 && img.width <= 1300){
                                if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord != ""){
                                    if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord > 100){
                                        $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 2.00;
                                    }else{
                                        $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 2.20;
                                    }
                                    $rootScope.mobileY_Cord = 0;
                                }else{
                                    $rootScope.currentUser.basicProfile.profile_cover_img.x_cord = 0;
                                    $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = 0;
                                    $rootScope.mobileX_Cord = 0;
                                    $rootScope.mobileY_Cord = 0;
                                }
                            }else if(img.width > 1300){
                                if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord != ""){
                                    if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord > 100){
                                        $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 2.80;
                                    }else{
                                        $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 3.00;
                                    }
                                    $rootScope.mobileY_Cord = 0;
                                }else{
                                    $rootScope.currentUser.basicProfile.profile_cover_img.x_cord = 0;
                                    $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = 0;
                                    $rootScope.mobileX_Cord = 0;
                                    $rootScope.mobileY_Cord = 0;
                                }
                            }
                        }
                    }
                }
                
            }
        });
    };

    $scope.showCoverOption = false;
    $scope.showCoverDropDown = function($event){
        $scope.showCoverOption = !$scope.showCoverOption;
        $event.stopPropagation();
    };

    window.onclick = function() {
        $timeout(function(){
            if ($scope.showCoverOption) {
                $scope.showCoverOption = false;
                $scope.$apply();
            }
        },100);
    };

    $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
        $scope.windowHeight = newValue.h;
        $scope.windowWidth = newValue.w;
        if($scope.windowWidth <= '768'){
            if($rootScope.mobileView == true){
                $timeout(function(){
                    $scope.changeCordinatevalue(); 
                },1000);
            };
            $rootScope.mobileView = true; //declare in main controller
        } else {
            $rootScope.mobileView = false; //declare in main controller
        }
    }, true);
    $scope.changeCordinatevalue = function(){
        if($rootScope.currentUser !== undefined){
            img = null;
            img = new Image();
            img.src = $rootScope.currentUser.basicProfile.profile_cover_img.thumb;
            if($scope.windowWidth <= '480'){
                img.onload = function(){
                    if(img.width <= 910){
                        if( $rootScope.currentUser.basicProfile.profile_cover_img.y_cord != ""){
                            if( $rootScope.currentUser.basicProfile.profile_cover_img.y_cord > 100){
                                $rootScope.mobileY_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.y_cord / 3;
                            }else{
                                $rootScope.mobileY_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.y_cord / 4;
                            }
                            $rootScope.mobileX_Cord = 0;
                        }else{
                            $rootScope.currentUser.basicProfile.profile_cover_img.x_cord = 0;
                            $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = 0;
                            $rootScope.mobileX_Cord = 0;
                            $rootScope.mobileY_Cord = 0;
                        }
                    }else if(img.width >= 910 && img.width <= 1300){
                        if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord != ""){
                            if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord > 100){
                                $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 4;
                            }else{
                                $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 5;
                            }
                            $rootScope.mobileY_Cord = 0;
                        }else{
                            $rootScope.currentUser.basicProfile.profile_cover_img.x_cord = 0;
                            $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = 0;
                            $rootScope.mobileX_Cord = 0;
                            $rootScope.mobileY_Cord = 0;
                        }
                    }else if(img.width > 1300 ){
                        if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord != ""){
                            if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord > 100){
                                $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 5;
                            }else{
                                $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 6;
                            }
                            $rootScope.mobileY_Cord = 0;
                        }else{
                            $rootScope.currentUser.basicProfile.profile_cover_img.x_cord = 0;
                            $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = 0;
                            $rootScope.mobileX_Cord = 0;
                            $rootScope.mobileY_Cord = 0;
                        }
                    }
                }
            }else if($scope.windowWidth > '480' && $scope.windowWidth <='768'){
                img.onload = function(){
                    if(img.width <= 910){
                        if( $rootScope.currentUser.basicProfile.profile_cover_img.y_cord != ""){
                            if( $rootScope.currentUser.basicProfile.profile_cover_img.y_cord > 100){
                                $rootScope.mobileY_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.y_cord / 1.80;
                            }else{
                                $rootScope.mobileY_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.y_cord / 2;
                            }
                            $rootScope.mobileX_Cord = 0;
                        }else{
                            $rootScope.currentUser.basicProfile.profile_cover_img.x_cord = 0;
                            $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = 0;
                            $rootScope.mobileX_Cord = 0;
                            $rootScope.mobileY_Cord = 0;
                        }
                    }else if(img.width > 910 && img.width < 1300){
                        if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord != ""){
                            if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord > 100){
                                $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 2.00;
                            }else{
                                $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 2.20;
                            }
                            $rootScope.mobileY_Cord = 0;
                        }else{
                            $rootScope.currentUser.basicProfile.profile_cover_img.x_cord = 0;
                            $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = 0;
                            $rootScope.mobileX_Cord = 0;
                            $rootScope.mobileY_Cord = 0;
                        }
                    }else if(img.width > 1300){
                        if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord != ""){
                            if( $rootScope.currentUser.basicProfile.profile_cover_img.x_cord > 100){
                                $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 2.80;
                            }else{
                                $rootScope.mobileX_Cord = $rootScope.currentUser.basicProfile.profile_cover_img.x_cord / 3.00;
                            }
                            $rootScope.mobileY_Cord = 0;
                        }else{
                            $rootScope.currentUser.basicProfile.profile_cover_img.x_cord = 0;
                            $rootScope.currentUser.basicProfile.profile_cover_img.y_cord = 0;
                            $rootScope.mobileX_Cord = 0;
                            $rootScope.mobileY_Cord = 0;
                        }
                    }
                }
            }
        }
    };
}]);	
	
app.controller('ProfilePostController',['$scope', '$timeout', 'ProfileService', 'FileUploader', '$sce', function($scope, $timeout, ProfileService, FileUploader, $sce) {
//function to create post for dashboard
$scope.postErrMsg = '';
$scope.postContentStart = false;
$scope.showComments = [];
$scope.commentsShowLimit = [];
$scope.commentsLength = [];


    // function to get the post and comment of the post
    $scope.commentLoading = [];
    $scope.getComments = function(postIndx) {
        var post = $scope.userPostList[postIndx];
        $scope.userPostList[postIndx].comments = [];
        var opts = {};
        opts.post_id = post.id;
        opts.limit_start = 0;
        opts.limit_size = 20;

        // This service's function returns post
        ProfileService.getDashboardComments(opts, function(data){
            if(data.code == 100)
            {
                $scope.userPostList[postIndx].comments = data.data.comment;
                $scope.commentLoading[postIndx] = false;
                $scope.showComments[postIndx] = false;
                $scope.commentsShowLimit[postIndx] = 4;
                $scope.commentsLength[postIndx] = $scope.userPostList[postIndx].comments.length;
                if($scope.userPostList[postIndx].comments.length  != 0 ) {
                    $scope.noComment = true;
                }
            } else {
                $scope.commentLoading[postIndx] = false;
            }
        });
    };

    

    //function to delete the media file of post
    $scope.deletePostMedia = function(indx) {
        var postData = {};
        postData = $scope.userPostList[indx];
        var formData = {};
        formData.user_id = APP.currentUser.id;
        formData.post_media_id = postData.media_info[0].id;

        //calling the service to delete the selected post 
        ProfileService.deletePostMedia(formData, function(data){
            if(data.code == 101) {
                $scope.userPostList[indx].media_info.splice(0, 1);
            }
            else {
                $scope.message = data.message;
                $scope.userPostList;
            }
        });
    };

$(".fancybox").fancybox();

}]).filter('unsafe', function($sce) {
    return function(val) {
        return $sce.trustAsHtml(val);
    };
});
app.controller('SinglePostController', ['$scope', '$rootScope', 'ipCookie', '$http', '$routeParams', '$location', 'PublicService', function($scope, $rootScope, ipCookie, $http, $routeParams, $location, PublicService) {
	if( ipCookie("loggedInUser") && ipCookie("access_token")) {
		$location.path('post/'+$routeParams.postId);
	} else {
		$rootScope.isPublic = true;
		$scope.postPageLoader = true;
		$scope.postPageNotFound = false;
		var opts = {};
		opts.post_id = $routeParams.postId;
		opts.post_type = 'user';
		PublicService.getPublicPost(opts, function(data) {
			if(data.code == 101) {
				$scope.postPageLoader = false;
				$scope.posts = data.data.post;
				$rootScope.publicUser = data.data.post[0];
			} else {
				$scope.posts = [];
				$scope.postPageLoader = false;
				$scope.postPageNotFound = true;
			}
		});
	}

}]);

/**
* Open Public Shop post for unauthorized User 
*/
app.controller('ClubSinglePostController', ['$scope', '$rootScope', 'ipCookie', '$http', '$routeParams', '$location', 'PublicService', function($scope, $rootScope, ipCookie, $http, $routeParams, $location, PublicService) {
	if( ipCookie("loggedInUser") && ipCookie("access_token")) {
		$location.path('/club/'+$routeParams.postId+'/post/'+$routeParams.postId+'/'+$routeParams.status);
	} else {
		$rootScope.isPublic = true;
		$scope.postPageLoader = true;
		$scope.postPageNotFound = false;
		var opts = {};
		opts.post_id = $routeParams.postId;
		opts.post_type = 'club';
		PublicService.getPublicPost(opts, function(data) {
			if(data.code == 101) {
				$scope.postPageLoader = false;
				$scope.posts = data.data.post;
				$rootScope.publicUser = data.data.post[0];
			} else {
				$scope.posts = [];
				$scope.postPageLoader = false;
				$scope.postPageNotFound = true;
			}
		});
	}

}]);

/**
* Open Public Shop post for unauthorized User 
*/
app.controller('ShopSinglePostController', ['$scope', '$rootScope', 'ipCookie', '$http', '$routeParams', '$location', 'PublicService', function($scope, $rootScope, ipCookie, $http, $routeParams, $location, PublicService) {
	if( ipCookie("loggedInUser") && ipCookie("access_token")) {
		$location.path('/shop/'+$routeParams.shopId+'/post/'+$routeParams.postId);
	} else {
		$rootScope.isPublic = true;
		$scope.postPageLoader = true;
		$scope.postPageNotFound = false;
		var opts = {};
		opts.post_id = $routeParams.postId;
		opts.post_type = 'shop';
		PublicService.getPublicPost(opts, function(data) {
			if(data.code == 101) {
				$scope.postPageLoader = false;
				$scope.posts = data.data.post;
				$rootScope.publicUser = data.data.post[0];
			} else {
				$scope.posts = [];
				$scope.postPageLoader = false;
				$scope.postPageNotFound = true;
			}
		});
	}

}]);

app.controller('PostTaggedDetail', ['$cookieStore', '$scope', '$rootScope', '$http', '$timeout', '$routeParams', 'ProfileService', function($cookieStore, $scope, $rootScope, $http, $timeout, $routeParams, ProfileService) {

	$scope.readNotification = function(id) {
	opts = {};
	opts.user_id = (APP.currentUser.id).toString();
	opts.notification_id = id;
	ProfileService.markReadNotification(opts, function(data) {
		if(data.code == 101) {
		} else {
		}
	});
	};
}]);

app.controller('ShopPostDetail', ['$cookieStore', '$modal', '$location', '$scope', '$rootScope', '$http', '$timeout', '$routeParams', 'StoreService' ,function($cookieStore, $modal, $location, $scope, $rootScope, $http, $timeout, $routeParams, StoreService) {
	$scope.storeId = $routeParams.shopId;
    $scope.posts = [];
	$scope.storePostLoading = true;
    $scope.textLimit = APP.post_charecter_limit;
	opts = {};
	opts.user_id = APP.currentUser.id;
	opts.store_id = $routeParams.shopId;
	opts.post_id = $routeParams.postId;
	StoreService.getStorePostDetail(opts, function(data) {
		if(data.code == 101) {
			$scope.posts = data.data;
		} else {
			$scope.posts = [];
		}
		$scope.storePostLoading = false;
	});
    $scope.showAllFriend = function(post_id, creater_info, allTagFriend){
            $scope.allTagFriends = allTagFriend;
            $scope.post_id = post_id;
            $scope.creater = creater_info;
            var modalInstance = $modal.open({
                template: '<div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3><div class="modal-popup-close" ng-click="closeModal()"></div> </div><div class="modal-body tag-frnd-modal"><ul><li data-ng-repeat="friend in allTagFriends"><span class="tag-img"><img title="" style="width:30px;height:30px" alt="No image available" data-ng-src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a href ng-click="viewFriendProile(friend.id)">{{friend.first_name}} {{friend.last_name}}</a></span></li></ul></div><div class="modal-footer"></div>',
                controller: 'ModalController',
                size: 'lg',
                scope: $scope,
            });

            modalInstance.result.then(function (selectedItem) {
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
        };
  
}]);

app.controller('ClubPostDetail', ['$cookieStore', '$scope', '$rootScope', '$http', '$timeout', '$routeParams', 'GroupService', function($cookieStore, $scope, $rootScope, $http, $timeout, $routeParams, GroupService) {
	$scope.posts = [];
	$scope.groupPostDetailLoading = false;
    $scope.textLimit = APP.post_charecter_limit;
	opts = {};
	opts.user_id = APP.currentUser.id;
	opts.user_group_id = $routeParams.clubId;
	opts.post_id = $routeParams.postId;
	GroupService.getClubPostDetail(opts, function(data) {
		if(data.code == 101) {
			$scope.posts = data.data;
		} else {
			$scope.posts = [];
		}
		$scope.groupPostDetailLoading = true;
	});

}]);
app.controller('GroupDetailNotiController',['$scope', '$http', '$rootScope', '$location', '$routeParams', '$interval', 'GroupService', 'ProfileService', 'fileReader', '$timeout','$modal', '$log', function ($scope, $http, $rootScope, $location, $routeParams, $interval, GroupService, ProfileService, fileReader, $timeout ,$modal ,$log) {
   $scope.displayGroupNotiDetail = function() {
        var groupId = $routeParams.clubId;
        var groupStatus = $routeParams.status;
        opts = {};
        opts.user_id = APP.currentUser.id;
        opts.group_id = groupId; 
        opts.group_status = groupStatus;
        GroupService.getGroupDetail(opts, function(data) {
            $scope.groupViewLoader = false;
            if( data.code == 101) {
                $scope.groupDetail = data.data;
                $scope.editGroupObject = $scope.groupDetail;
            } else {

            }
        });
    };
    $scope.displayGroupNotiDetail();

}]);
app.directive('rateCommonClubPost',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
    return {
        templateUrl: 'app/views/rating_star_post.html',
        restrict: "E",
        scope: true,
        controller : function($scope, $modal, $log, ProfileService){
            $scope.hoveringOver = function(value) {
            $scope.overStar = value;
            $scope.percent = 100 * (value / $scope.max);
            };
            $scope.avg_rate = true;
            $scope.averageVoting = 0;
            $scope.vote_count = 0;
            $scope.waitRateResponse = false;
            $scope.showPeopleLoader = false;
            $scope.max = 5;
            $scope.isReadonly = false;
            $scope.WaitDeleteResponse = false;
            $scope.stars = [];

          $scope.findPeople = function(id,count_Vote){
            if(count_Vote === 0 ){
                return false;
            }
            var opts = {};
            $scope.ratedUsers = {};
            $scope.showPeopleLoader = true;

            var modalInstance = $modal.open({
                        templateUrl: 'app/views/find_people.html',
                        controller: 'ModalController',
                        size: 'lg',
                        scope: $scope,
            });
            opts.type = "club_post";
            opts.type_id = id;
            opts.session_id = APP.currentUser.id;
            ProfileService.findPeople(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.showPeopleLoader = false;
                    $scope.ratedUsers = data.data.users_rated;
                    if(data.data.users_rated.length == 0){
                        $scope.message = $scope.i18n.dashboard.no_vote;
                    }
                }else{
                    $scope.showPeopleLoader = false;
                }
            });
            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
        };

            $scope.ratePost = function(rating, post_id, index){
            var update = "";
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "club_post";
            opts.type_id = post_id;
            opts.rate = rating;
            $scope.waitRateResponse = true;
            if($scope.posts[index].is_rated){
                update = "update";
            }else{
                update = "add";
            }
            waitRequest = ProfileService.rateThis(opts, update, function(data){
                if(data.code === 101 && data.message === "SUCCESS"){
                    $scope.posts[index].avg_rate = data.data.avg_rate;
                    $scope.posts[index].no_of_votes = data.data.no_of_votes;
                    $scope.posts[index].is_rated = true;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    //$scope.userPostList[index].avg_rate = 0;
                    //$scope.userPostList[index].no_of_votes = 0;
                    $scope.posts[index].is_rated = false;
                    $scope.posts[index].current_user_rate = 0;
                }
                $scope.waitRateResponse = false;
            });
        };
             $scope.removeRating = function(post_id, postIndx){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "club_post";
            opts.type_id = post_id;
            if($scope.WaitDeleteResponse === false){
                $scope.WaitDeleteResponse = true;
                $scope.waitRateResponse = true;
            }else{
                return;
            }
            ProfileService.removeRating(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.posts[postIndx].current_user_rate = 0;
                    $scope.posts[postIndx].is_rated = false;
                    $scope.posts[postIndx].no_of_votes = data.data.no_of_votes;
                    $scope.posts[postIndx].avg_rate =  data.data.avg_rate;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    $scope.posts[postIndx].current_user_rate = 0;
                    $scope.posts[postIndx].is_rated = false;
                    //$scope.userPostList[postIndx].no_of_votes =0;
                    //$scope.userPostList[postIndx].avg_rate =  0;
                }
                $scope.WaitDeleteResponse = false;
                $scope.waitRateResponse = false;
            });
        };
         $scope.averageRating = function(rating){
            return new Array(Math.ceil(rating));
        };
        $scope.rateThis = function(value, id, index){
            $scope.ratePost(value, id, index);
        };

        $scope.blankStar = function(rating){
            if((5-Math.ceil(rating)) > 0){
                return new Array(5-Math.ceil(rating));
            }else{
                return 0;
            }
        };
         $scope.ratingStates = [
            {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
        ];
    },
        link: function (scope, element, attrs) {
            

        }
    }
}]);
app.directive('rateCommonStorePost',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
    return {
        templateUrl: 'app/views/rating_star_post.html',
        restrict: "E",
        scope: true,
        controller : function($scope, $modal, $log, ProfileService){
            $scope.hoveringOver = function(value) {
            $scope.overStar = value;
            $scope.percent = 100 * (value / $scope.max);
            };
            $scope.avg_rate = true;
            $scope.averageVoting = 0;
            $scope.vote_count = 0;
            $scope.waitRateResponse = false;
            $scope.showPeopleLoader = false;
            $scope.max = 5;
            $scope.isReadonly = false;
            $scope.WaitDeleteResponse = false;
            $scope.stars = [];

         $scope.findPeople = function(id, count_Vote){
            if(count_Vote === 0 ){
                return false;
            }
            var opts = {};
            $scope.ratedUsers = {};
            $scope.showPeopleLoader = true;
            var modalInstance = $modal.open({
                        templateUrl: 'app/views/find_people.html',
                        controller: 'ModalController',
                        size: 'lg',
                        scope: $scope,
            });
            opts.type = "store_post";
            opts.type_id = id;
            opts.session_id = APP.currentUser.id;
            ProfileService.findPeople(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.showPeopleLoader = false;
                    $scope.ratedUsers = data.data.users_rated;
                    if(data.data.users_rated.length == 0){
                        $scope.message = $scope.i18n.dashboard.no_vote;
                    }
                }else{
                    $scope.showPeopleLoader = false;
                }
            });
            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
        };
            $scope.ratePost = function(rating, post_id, index){
            var update = "";
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "store_post";
            opts.type_id = post_id;
            opts.rate = rating;
            $scope.waitRateResponse = true;
            if($scope.posts[index].is_rated){
                update = "update";
            }else{
                update = "add";
            }
            waitRequest = ProfileService.rateThis(opts, update, function(data){
                if(data.code === 101 && data.message === "SUCCESS"){
                    $scope.posts[index].avg_rate = data.data.avg_rate;
                    $scope.posts[index].no_of_votes = data.data.no_of_votes;
                    $scope.posts[index].is_rated = true;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    //$scope.userPostList[index].avg_rate = 0;
                    //$scope.userPostList[index].no_of_votes = 0;
                    $scope.posts[index].is_rated = false;
                    $scope.posts[index].current_user_rate = 0;
                }
                $scope.waitRateResponse = false;
            });
        };
            $scope.removeRating = function(post_id, postIndx){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "store_post";
            opts.type_id = post_id;
            if($scope.WaitDeleteResponse === false){
                $scope.WaitDeleteResponse = true;
                $scope.waitRateResponse = true;
            }else{
                return;
            }
            ProfileService.removeRating(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.posts[postIndx].current_user_rate = 0;
                    $scope.posts[postIndx].is_rated = false;
                    $scope.posts[postIndx].no_of_votes = data.data.no_of_votes;
                    $scope.posts[postIndx].avg_rate =  data.data.avg_rate;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    $scope.posts[postIndx].current_user_rate = 0;
                    $scope.posts[postIndx].is_rated = false;
                    //$scope.userPostList[postIndx].no_of_votes =0;
                    //$scope.userPostList[postIndx].avg_rate =  0;
                }
                $scope.WaitDeleteResponse = false;
                $scope.waitRateResponse = false;
            });
        };
       $scope.averageRating = function(rating){
            return new Array(Math.ceil(rating));
        };

        $scope.blankStar = function(rating){
            if((5-Math.ceil(rating)) > 0){
                return new Array(5-Math.ceil(rating));
            }else{
                return 0;
            }
        };
        $scope.rateThis = function(value, id, index){
            $scope.ratePost(value, id, index);
        };
        $scope.ratingStates = [
            {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
        ];
    },
        link: function (scope, element, attrs) {
            

        }
    }
}]);

app.controller('ReportController', ['$scope', '$rootScope','$routeParams', '$timeout', 'StoreService' , function ($scope, $rootScope, $routeParams, $timeout, StoreService) {
    var flag = 0;
    var arrTransactionMarker = [];
    $scope.storeId = $routeParams.id;
    var locations = [];
    var geocoder = new google.maps.Geocoder();
    var circle = null;
    var gmarkers = [];
    var map;
    $scope.setAllMarker = function(map) {
        for (var i = 0; i < arrTransactionMarker.length; i++) {
            arrTransactionMarker[i].setMap(map);
        }
    }
     $scope.setgmarkersMarker = function(map) {
        for (var i = 0; i < gmarkers.length; i++) {
            gmarkers[i].setMap(map);
        }
    }
    var arrId = [];
    $scope.activeClassFirst = "";
    $scope.activeClassSecond = "";
    $scope.reportTransaction = function(value) {
        $scope.maploader = true;
        locations = [];
        $scope.setAllMarker(null);
        $scope.setgmarkersMarker(null);
        arrTransactionMarker = [];
        gmarkers = [];
        $scope.displayLoader = true;
        var opts = {};
        if(value === 2) {
            $scope.activeClassFirst = "";
            $scope.activeClassSecond = "active";
            opts = {"$collection":"sixc_transactions", "$fields":{"transaction_value":1,"citizen_id.name":1,"citizen_id.address_l1":1,"citizen_id.address_l2":1,"citizen_id.city":1,"citizen_id.country":1,"citizen_id.state":1,"citizen_id.user_thumbnail_image":1,"citizen_id.longitude":1,"citizen_id.latitude":1},"$filter": {"shop_id":String($scope.storeId),"status":"Approved","transaction_type_id": {"$in": ["553209267dfd81072b176bba","553209267dfd81072b176bbc"]}},"$sort":{"date":-1}}; 
        } else {
            $scope.activeClassFirst = "active";
            $scope.activeClassSecond = "";
            opts = {"$collection":"sixc_transactions", "$fields":{"transaction_value":1,"citizen_id.name":1,"citizen_id.address_l1":1,"citizen_id.address_l2":1,"citizen_id.city":1,"citizen_id.country":1,"citizen_id.state":1,"citizen_id.user_thumbnail_image":1,"citizen_id.longitude":1,"citizen_id.latitude":1},"$filter": {"shop_id":String($scope.storeId),"offer_id.start_date":{"$lte":"$$CurrentDate"},"offer_id.end_date":{"$gte":"$$CurrentDate"},"status":"Approved","transaction_type_id": {"$in": ["553209267dfd81072b176bba"]}},"$sort":{"date":-1}};  
        }
        StoreService.getReportTransacation(opts, function(data) {
            $scope.maploader = false;
            if(data.code == 200 && data.status == 'ok'){
                $scope.reportlist = data.response.result;
                $scope.reportlistsearch = data.response.result;
                if($scope.reportlist.length > $scope.itemsPerPage){
                    $scope.pagination = true;
                }
                for(var i=0; i<$scope.reportlist.length; i++) {
                        var mi = new Array($scope.reportlist[i].citizen_id.latitude, $scope.reportlist[i].citizen_id.longitude,$scope.reportlist[i].citizen_id._id, $scope.reportlist[i].citizen_id.user_thumbnail_image, $scope.reportlist[i].citizen_id.name, $scope.reportlist[i].transaction_value, $scope.reportlist[i].citizen_id.address_l2, $scope.reportlist[i]._id);
                            locations.push(mi);
                            //console.log(mi+'lllll')
                }

                $scope.initializeReportMap();

            } else {
                $scope.pagination = false;
            }
            

        });
    };

    //for tab
     $scope.reportTransactionTab = function(value) {
        if (circle) circle.setMap(null);
        $scope.maploader = true;
        locations = [];
        $scope.setAllMarker(null);
        $scope.setgmarkersMarker(null);
        arrTransactionMarker = [];
        gmarkers = [];
        $scope.displayLoader = true;
        $('#pac-input').val('');
        var opts = {};
        if(value === 2) {
            $scope.activeClassFirst = "";
            $scope.activeClassSecond = "active";
            opts = {"$collection":"sixc_transactions", "$fields":{"transaction_value":1,"citizen_id.name":1,"citizen_id.address_l1":1,"citizen_id.address_l2":1,"citizen_id.city":1,"citizen_id.country":1,"citizen_id.state":1,"citizen_id.user_thumbnail_image":1,"citizen_id.longitude":1,"citizen_id.latitude":1},"$filter": {"shop_id":String($scope.storeId),"status":"Approved","transaction_type_id": {"$in": ["553209267dfd81072b176bba","553209267dfd81072b176bbc"]}},"$sort":{"date":-1}}; 
        } else {
            $scope.activeClassFirst = "active";
            $scope.activeClassSecond = "";
            opts = {"$collection":"sixc_transactions", "$fields":{"transaction_value":1,"citizen_id.name":1,"citizen_id.address_l1":1,"citizen_id.address_l2":1,"citizen_id.city":1,"citizen_id.country":1,"citizen_id.state":1,"citizen_id.user_thumbnail_image":1,"citizen_id.longitude":1,"citizen_id.latitude":1},"$filter": {"shop_id":String($scope.storeId),"offer_id.start_date":{"$lte":"$$CurrentDate"},"offer_id.end_date":{"$gte":"$$CurrentDate"},"status":"Approved","transaction_type_id": {"$in": ["553209267dfd81072b176bba"]}},"$sort":{"date":-1}};  
        }
        StoreService.getReportTransacation(opts, function(data) {
            $scope.maploader = false;
            if(data.code == 200 && data.status == 'ok'){
                $scope.reportlist = data.response.result;
                $scope.reportlistsearch = data.response.result;
                if($scope.reportlist.length > $scope.itemsPerPage){
                    $scope.pagination = true;
                }
                for(var i=0; i<$scope.reportlist.length; i++) {
                        var mi = new Array($scope.reportlist[i].citizen_id.latitude, $scope.reportlist[i].citizen_id.longitude,$scope.reportlist[i].citizen_id._id, $scope.reportlist[i].citizen_id.user_thumbnail_image, $scope.reportlist[i].citizen_id.name, $scope.reportlist[i].transaction_value, $scope.reportlist[i].citizen_id.address_l2, $scope.reportlist[i]._id);
                            locations.push(mi);
                }

                map.setCenter(new google.maps.LatLng(41.9000,12.4833)); 
                map.setZoom(6);

                var infowindow = new google.maps.InfoWindow();
                var marker, i;
                var pin = {
                    url: 'app/assets/images/green-pin.png'
                };

                for (var i = 0; i < locations.length; i++) {
                    //if(locations[i][0] !== undefined && locations[i][1] !== undefined){
                        marker = new google.maps.Marker({
                        position: new google.maps.LatLng(locations[i][0], locations[i][1]),
                        map: map,
                        icon :pin
                        });

                        google.maps.event.addListener(marker, 'click', (function(marker, i) {
                        return function() {
                            if(locations[i][6] == undefined){
                                locations[i][6] = '';
                            }
                            if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><a href='#/viewfriend/"+locations[i][2]+"'><img src='app/assets/images/prof-pic.jpg'></a></div><div class='desc'><a href='#/viewfriend/"+locations[i][2]+"'><span class='name'>"+locations[i][4]+"</span></a><span class='add-map'>"+locations[i][6]+"</span><span class='currency'>"+locations[i][5]+" euro</span></div></div>");
                            } else {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><a href='#/viewfriend/"+locations[i][2]+"'><img src='"+locations[i][3]+"'></a></div><div class='desc'><a href='#/viewfriend/"+locations[i][2]+"'><span class='name'>"+locations[i][4]+"</span></a><span class='add-map'>"+locations[i][6]+"</span><span class='currency'>"+locations[i][5]+" euro</span></div></div>");   
                            }              
                            infowindow.open(map, marker);
                        }
                    })(marker, i));
                    arrTransactionMarker.push(marker);
                    gmarkers.push(marker);
                   // } 
                }
            } else {
                $scope.pagination = false;
            }
            //$scope.initializeReportMap();

        });
    };
    //Display Map
    $scope.initializeReportMap = function() {
      var mapOptions = {
        zoom: 6,
        center: new google.maps.LatLng(41.9000,12.4833)
      };
      map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);
      var infowindow = new google.maps.InfoWindow();
        var marker, i;
        var pin = {
            url: 'app/assets/images/green-pin.png'
        };

        for (var i = 0; i < locations.length; i++) {
            //if(locations[i][0] !== undefined && locations[i][1] !== undefined){
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][0], locations[i][1]),
                map: map,
                icon :pin
                });

                google.maps.event.addListener(marker, 'click', (function(marker, i) {
                return function() {
                    if(locations[i][6] == undefined){
                        locations[i][6] = '';
                    }
                    if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                        infowindow.setContent("<div class='mappopup'><div class='pic-container'><a href='#/viewfriend/"+locations[i][2]+"'><img src='app/assets/images/prof-pic.jpg'></a></div><div class='desc'><a href='#/viewfriend/"+locations[i][2]+"'><span class='name'>"+locations[i][4]+"</span></a><span class='add-map'>"+locations[i][6]+"</span><span class='currency'>"+locations[i][5]+" euro</span></div></div>");
                    } else {
                        infowindow.setContent("<div class='mappopup'><div class='pic-container'><a href='#/viewfriend/"+locations[i][2]+"'><img src='"+locations[i][3]+"'></a></div><div class='desc'><a href='#/viewfriend/"+locations[i][2]+"'><span class='name'>"+locations[i][4]+"</span></a><span class='add-map'>"+locations[i][6]+"</span><span class='currency'>"+locations[i][5]+" euro</span></div></div>");   
                    }              
                    infowindow.open(map, marker);
                }
            })(marker, i));
            arrTransactionMarker.push(marker);
            gmarkers.push(marker);
           // } 
        }
        var input = (document.getElementById('pac-input'));
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        //if(flag == 0) {

        var searchBox = new google.maps.places.SearchBox(
        /** @type {HTMLInputElement} */(input));
        //}
        google.maps.event.addListener(searchBox, 'places_changed', function() {
            arrId = [];
            var address = document.getElementById('pac-input').value;
            document.getElementById('pac-input').value = address;
            //$scope.addressFilter = address;
            var radius = parseInt(50, 10)*1000;
            geocoder.geocode({ 'address': address}, function(results, status) {
               
                if (status == google.maps.GeocoderStatus.OK) {
                    var searchCenter = results[0].geometry.location
                    var latitude = results[0].geometry.location.lat();
                    var longitude = results[0].geometry.location.lng();
                    var latlng = new google.maps.LatLng(latitude, longitude);            
                    var marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location
                    });
                    marker.setMap(null);
                    if (circle) circle.setMap(null);
                        circle = new google.maps.Circle({center:searchCenter, 
                                             //radius: radius,
                                             //fillOpacity: 0.35,
                                             //fillColor: "#FF0000",
                                             strokeWeight: 2,
                                             map: map});
                    var bounds = new google.maps.LatLngBounds();
                    
                    for (var i=0; i<gmarkers.length;i++) {
                        if (google.maps.geometry.spherical.computeDistanceBetween(gmarkers[i].getPosition(),searchCenter) < radius) { 
                            arrId.push(locations[i][7]);
                            var infowindow = new google.maps.InfoWindow();
                            var marker, i;
                            var pin = {
                                url: 'app/assets/images/silver-pin.png'
                            };
                            gmarkers[i].getPosition();
                            google.maps.event.addListener(marker, 'click', (function(marker, i) {
                                return function() {
                                    if(locations[i][6] == undefined){
                                        locations[i][6] = '';
                                    }
                                    if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                        infowindow.setContent("<div class='mappopup'><div class='pic-container'><a href='#/viewfriend/"+locations[i][2]+"'><img src='app/assets/images/prof-pic.jpg'></a></div><div class='desc'><a href='#/viewfriend/"+locations[i][2]+"'><span class='name'>"+locations[i][4]+"</span></a><span class='add-map'>"+locations[i][6]+"</span><span class='currency'>"+locations[i][5]+" euro</span></div></div>");
                                    } else {
                                        infowindow.setContent("<div class='mappopup'><div class='pic-container'><a href='#/viewfriend/"+locations[i][2]+"'><img src='"+locations[i][3]+"'></a></div><div class='desc'><a href='#/viewfriend/"+locations[i][2]+"'><span class='name'>"+locations[i][4]+"</span></a><span class='add-map'>"+locations[i][6]+"</span><span class='currency'>"+locations[i][5]+" euro</span></div></div>");   
                                    }              
                                    infowindow.open(map, marker);
                            }
                            })(marker, i));
                            bounds.extend(gmarkers[i].getPosition())
                            gmarkers[i].setMap(map);
                        } else {            
                            gmarkers[i].setMap(null);        
                        }
                    }
                    if(arrId.length > 0){
                        map.fitBounds(bounds);
                        map.setZoom(9);
                    } else {
                         //map.fitBounds(circle.getBounds());
                         map.setCenter(new google.maps.LatLng(latitude,longitude)); 
                         map.setZoom(6);
                    }
                    $scope.newArraylist();                    
                } else {
                  alert('Geocode was not successful for the following reason: ' + status);
                }
            });
           
        });
        
        // [END region_getplaces]
        // Bias the SearchBox results towards places that are within the bounds of the
        // current map's viewport.
        google.maps.event.addListener(map, 'bounds_changed', function() {
            var bounds = map.getBounds();
            searchBox.setBounds(bounds);
        });
        var flag = 1;
    }
    $scope.reportTransaction(2);  
    var resultArray = [];
    $scope.newArraylist = function() {
        resultArray = [];
        for(var j = 0; j < arrId.length ; j++){
            for (var k = 0; k < $scope.reportlistsearch.length; k++) {
                if($scope.reportlistsearch[k]._id == arrId[j]){
                //console.log($scope.reportlist[arrayVal]._id+'id'); 
                    resultArray.push($scope.reportlistsearch[k]);
                }
            }
        }
        $scope.reportlist = resultArray;
        $scope.currentPage = 0;
        //$scope.setPage(1);
         $timeout(function(){
                $scope.range();
            }, 2000);
        
        //$scope.pageCount();
        //console.log(JSON.stringify(resultArray)+'kkkkk');
    }
    //Pagination
    $scope.currentPage = 0;
    $scope.itemsPerPage = 8;
    $scope.pagination = false;
    $scope.totalsize = [];
    $scope.range = function() {
        var rangeSize = Math.ceil($scope.reportlist.length/$scope.itemsPerPage);
       
        var ret = [];
        var start;
        start = $scope.currentPage;
        if ( start > $scope.pageCount()-rangeSize ) {
            start = $scope.pageCount()-rangeSize+1;
        }
        for (var i=start; i<start+rangeSize; i++) {
            ret.push(i);
        }
        $scope.totalsize = ret;
        return ret;
    };

    $scope.prevPage = function() {
        if ($scope.currentPage > 0) {
            $scope.currentPage--;
        }
    };

    $scope.prevPageDisabled = function() {
        return $scope.currentPage === 0 ? "disabled" : "";
    };

    $scope.pageCount = function() {
        if ($scope.reportlist !== undefined) {
            return Math.ceil($scope.reportlist.length/$scope.itemsPerPage)-1;
        }
    };

    $scope.nextPage = function() {
        if ($scope.currentPage < $scope.pageCount()) {
            $scope.currentPage++;
        }
    };

    $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.pageCount() ? "disabled" : "";
    };

    $scope.setPage = function(n) {
        $scope.currentPage = n;
    }; 

    $scope.pageinit = function() {
        $scope.currentPage = 0;
    }
}]);

//User will join the site from here when they come throught invited links
//For Landing page1 
app.controller('InvitedUserJoinSite', ['$cookieStore', '$rootScope', 'ipCookie', '$scope', '$http', 'TopLinkService', '$timeout', '$routeParams', '$location', function($cookieStore, $rootScope, ipCookie, $scope, $http, TopLinkService, $timeout, $routeParams, $location){
	$scope.coming_user_id = $routeParams.user_id;
	$scope.profile_type = $routeParams.type;
	$scope.isValid = 0;
	$scope.validInvitedUser = false;
	$scope.checkingloader = true;
	var opts = {};
	opts.user_id = $routeParams.user_id;
	opts.type = $routeParams.type;
	if(opts.type == 4) {
		$scope.validInvitedUser = true;
		$scope.checkingloader = false;
		TopLinkService.setNoAffiliated(true);
	} else if(opts.type == 5) {
		$scope.validInvitedUser = true;
		$scope.checkingloader = false;
	} else {
		TopLinkService.checkIsValidAffiliation(opts, function(data) {
			//Put the affiliated details in cookies
			var Affiliated = {};
			Affiliated.affiliator_id = opts.user_id;
			Affiliated.type = opts.type;
			if(Affiliated.type == 3) {
				localStorage.setItem('ShopAffiliatedObject', JSON.stringify(Affiliated));
			} else if(Affiliated.type == 1) {
				localStorage.setItem('CitizenAffiliatedObject', JSON.stringify(Affiliated));
			}
			TopLinkService.setAffiliationObject(opts);
			if(data.code == 101) {
				if(opts.type == 1) {
					$location.path('/citizen_affiliation_regis');
				} else {
					$scope.checkingloader = false;
				}
				$scope.validInvitedUser = true;
			} else {
				$scope.validInvitedUser = false;
				$scope.checkingloader = false;
			}
		});
	}
}]);

//For landing page2
app.controller('ShopLanding2Controller', ['$cookieStore', '$scope', '$rootScope', '$window', 'ipCookie', '$http', '$routeParams', '$timeout', '$location', 'AffiliatedkService', 'TopLinkService', 'UserService', 'EMAILPATTERN', 'focus', function($cookieStore, $scope, $rootScope, $window, ipCookie, $http, $routeParams, $timeout, $location, AffiliatedkService, TopLinkService, UserService, EMAILPATTERN, focus) {
	$scope.showLoading = true;
	$scope.sameAccount = false;
	$scope.newAccount = false;
	$scope.newLogin = false;
	$scope.profileType = $routeParams.profileType;
	//create data of birth drop dwon start
	//creat month array
	$scope.months = $scope.i18n.profile.months;
	$scope.countries  = $scope.i18n.countries;
	//create days array
	$scope.years = [];
	$scope.getYears = function() {
		var currentYear = new Date().getFullYear();
		$scope.years = [];
		for (var i = currentYear; i >= 1914 ; i--){
			$scope.years.push({"id":i,"value":i});
		}
  	}
  	$scope.getYears();
  	
	//create data of birth drop dwon end
	$scope.$watch('currentLanguage',function(newValue,oldValue){
		$timeout(function(){
			$scope.months = $scope.i18n.profile.months;
			$scope.countries  = $scope.i18n.countries;
		}, 400 );
	});
	
	//$scope.days = [];
	$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
	$scope.$watch('user.month', function(newValue){
		if (newValue && newValue.value-7 <= 0){
			if(newValue.value%2==1) $scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
			else $scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
		} else {
			if(newValue && newValue.value % 2 == 1) $scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
			else $scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
		}
		if(newValue && newValue.value == 2) $scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28];
	});

	$scope.$watch('user.year',function(newValue){
		if(newValue&&newValue.value % 4 == 0 && $scope.user.month.value == 2){
				$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29];
		}
	})

	if(TopLinkService.getAffiliationObject().hasOwnProperty("user_id")) {
		var affiliate = TopLinkService.getAffiliationObject();
		$scope.isreferralId = affiliate.user_id;
		$scope.referralId = affiliate.user_id;
		$scope.filtertypeId = affiliate.type;
	}

	if($scope.currentUser.id) {
		if($scope.currentUser.basicProfile) {
			$scope.sameAccount = true;
			$scope.oldUser = {};
			$scope.oldUser.userEmail = $scope.currentUser.basicProfile.email;
			$scope.oldUser.userPassword = 123456;
			$scope.oldUser.firstName = $scope.currentUser.basicProfile.firstname;
			$scope.oldUser.lastName = $scope.currentUser.basicProfile.lastname;
			$scope.oldUser.gender = $scope.currentUser.basicProfile.gender;
			$scope.oldUser.dob = $scope.currentUser.basicProfile.date_of_birth ? $scope.currentUser.basicProfile.date_of_birth.date :'';	
			$scope.oldUser.country = $scope.currentUser.basicProfile.country.name;
		} else {
			$location.path("/");
		}
	} else {
		$scope.newAccount = true;
	}

	$scope.changeLoginAccount = function() {
		$scope.sameAccount = false;
		$scope.newAccount = false;
		$scope.newLogin = true;
	};

	$scope.alreadyUserLogin = function() {
		var isAlreadyUser = {};
		isAlreadyUser.yes = true;
		isAlreadyUser.profileType = $scope.profileType;
		TopLinkService.setIsAlreadyUserLogin(isAlreadyUser);
		$location.path('/');
	}

	$scope.createNewAccount = function() {
		$scope.sameAccount = false;
		$scope.newAccount = true;
		$scope.newLogin = false;
	};

	$scope.back = function(){
		$scope.sameAccount = true;
		$scope.newAccount = false;
		$scope.newLogin = false;
	}

	$scope.backLocation = function() {
		$window.history.back();
	};

	$scope.changeAccountSubmitted = false;
	$scope.proceedWithNewAccount = function() {
		$scope.changeAccountSubmitted = true;
		if($scope.changeUser.userName === undefined || $scope.changeUser.userName === '' ){
			$scope.user.email.$dirty = true;
            $scope.user.email.$invalid = true;
            $scope.user.email.$error.required = true;
            focus('changeemailid');
			return false;
		} else if($scope.changeUser.password === undefined || $scope.changeUser.password === ''){
       		$scope.user.changepassword.$dirty = true;
            $scope.user.changepassword.$invalid = true;
            $scope.user.changepassword.$error.required = true;
            focus('changepassword');
       		return false;
       	} else {
       		$scope.loginStart = true;
				var	opts1 = {
					reqObj: {
						client_id : APP.keys.client_id,
						client_secret : APP.keys.client_secret,
				        grant_type : APP.keys.grant_type,
						username : $scope.changeUser.userName,
						password :  $.base64.encode($scope.changeUser.password)
					}
				};
				//call service to get access token
				UserService.getAccessToken(opts1).then(function(data) {
					if(data.data.error != 'invalid_request'){
					APP.accessToken = data.data.access_token;
					var opts2 = {};
					opts2.username = $scope.changeUser.userName;
					opts2.password =  $.base64.encode($scope.changeUser.password);
					UserService.getLoginUser(opts2, function(data){
			            	if(data.data && data.code != 100) {
								APP.currentUser = data.data;
								ipCookie("loggedInUser", data.data, { expires: 365 });
								ipCookie("access_token", APP.accessToken, { expires: 3000 });
								$rootScope.currentUser = data.data;
								$rootScope.isLoggedIn = true;
								if(APP.currentUser.country == 'IT') {
									$scope.selectlanguage('it');
								} else {
									$scope.selectlanguage('en');
								}
								var opts3 = {};
								opts3.user_id = APP.currentUser.id;
								opts3.profile_type = 4;
								UserService.getBasicProfile(opts3, function(data) {
									if(data.code == 101)
										$rootScope.currentUser.basicProfile = data.data;
									var opts4 = {};
									opts4.idcard = $rootScope.currentUser.basicProfile.user_id;
									UserService.getCreditAndIncome(opts4, function(data) {
										var currentCredit = {};
										if(data.code == 101) {
											currentCredit.totalCredit = (data.data.saldoc/1000000) ;
											currentCredit.totCreditMicro = (data.data.saldorm) + (data.data.saldorc) ;
											currentCredit.totalIncome = data.data.tot_income;
											currentCredit.totalIncomeShow = data.data.tot_income;
											$rootScope.currentUser.creditAndIncome = currentCredit;
										}
										else{
											$rootScope.currentUser.creditAndIncome = data.data;
										}
									});
								});
								$scope.$parent.loggedIn = true;
								$location.path("/shop/register/3");
							} else {
			                    $scope.loginError = true;
       							$scope.loginStart = false;
								$scope.loginErrorMsg = $scope.i18n.home.invalid_username;
								$timeout(function(){
				                $scope.loginError = false;
				                }, 15000);
							}
					});
					} else {
						$scope.loginError = true;
       					$scope.loginStart = false;
						$scope.loginErrorMsg = $scope.i18n.home.invalid_username;
						$timeout(function(){
		                $scope.loginError = false;
		                }, 15000);
					}
				}, function(error) {
					if(data.data.error === 'invalid_request'){
						$scope.loginError = true;
       					$scope.loginStart = false;
						$scope.loginErrorMsg = $scope.i18n.home.invalid_username;
						$timeout(function(){
		                $scope.loginError = false;
		                }, 15000);
					} else {
						$scope.loginStart = false;
						$scope.loginErrorMsg = $scope.i18n.home.server_not_responding;
						$timeout(function(){
		                $scope.loginError = false;
		                }, 15000);
					}
				});
			}
	};

	$scope.invalidSelectedDob = false;
	$scope.formSubmitted = false;
	$scope.registerCitizen = function() {
		var currentDOB = new Date();
		$scope.formSubmitted = true;
       	var opts = {};
       	if($scope.user.userEmail === undefined || $scope.user.userEmail === '' ){
			$scope.user.emailCitizenReg.$dirty = true;
            $scope.user.emailCitizenReg.$invalid = true;
            $scope.user.emailCitizenReg.$error.required = true;
            focus('emailCitizenReg');
			return false;
		} else if($scope.user.userPassword === undefined || $scope.user.userPassword === '' ){
       		$scope.user.pwdCitizenReg.$dirty = true;
            $scope.user.pwdCitizenReg.$invalid = true;
            $scope.user.pwdCitizenReg.$error.required = true;
            focus('pwdCitizenReg');
       		return false;
       	} else if($scope.user.firstName === undefined || $scope.user.firstName === '' ){
			$scope.user.fname.$dirty = true;
            $scope.user.fname.$invalid = true;
            $scope.user.fname.$error.required = true;
            focus('fname');
			return false;
		}else if($scope.user.lastName === undefined || $scope.user.lastName === '' ){
			$scope.user.lname.$dirty = true;
            $scope.user.lname.$invalid = true;
            $scope.user.lname.$error.required = true;
            focus('lname');;
			return false;
		}else if($scope.user.month.value === undefined || $scope.user.month.value === '' ){
			$scope.user.dobmonth.$dirty = true;
            $scope.user.dobmonth.$invalid = true;
            $scope.user.dobmonth.$error.required = true;
            focus('dobmonth');
			return false;
		}else if($scope.user.day === undefined || $scope.user.day === '' ){
			$scope.user.dobday.$dirty = true;
            $scope.user.dobday.$invalid = true;
            $scope.user.dobday.$error.required = true;
            focus('dobday');
			return false;
		}else if($scope.user.year.value === undefined || $scope.user.year.value === '' ){
			$scope.user.dobyear.$dirty = true;
            $scope.user.dobyear.$invalid = true;
            $scope.user.dobyear.$error.required = true;
            focus('dobyear')
			return false;
		}else if($scope.user.gender === undefined || $scope.user.gender === 0){
			$scope.user.genCitizenreg.$dirty = true;
            $scope.user.genCitizenreg.$invalid = true;
            $scope.user.genCitizenreg.$error.required = true;
            focus('genCitizenreg')
			return false;
		}else if($scope.user.year.value === currentDOB.getFullYear() && ($scope.user.month.value >= (currentDOB.getMonth()+1)) && ($scope.user.day > currentDOB.getDate())){
        	$scope.invalidSelectedDob = true;
			focus('dobday');
			$timeout(function(){
				$scope.invalidSelectedDob = false;
			},2000);
			return false;
        }else if($scope.user.country === undefined || $scope.user.country.id === undefined || $scope.user.country.id === '' ){
			$scope.user.countryReg.$dirty = true;
            $scope.user.countryReg.$invalid = true;
            $scope.user.countryReg.$error.required = true;
            focus('countryReg');
			return false;
		}else {
			//check if referral user going to affiliate shop 
			if(!TopLinkService.getNoAffiliated()) {
				if(localStorage.getItem('ShopAffiliatedObject')) {
					opts.referral_id = JSON.parse(localStorage.getItem('ShopAffiliatedObject')).affiliator_id;
				}
	    	}
			opts.email = $scope.user.userEmail;
			opts.firstname = $scope.user.firstName;
			opts.lastname = $scope.user.lastName;
			opts.password = $.base64.encode($scope.user.userPassword);
			opts.birthday = $scope.user.day + '-' + $scope.user.month.value + '-' + $scope.user.year.id;
			opts.gender = $scope.user.gender;
			opts.country = $scope.user.country.id;
			opts.type = 1;
			$scope.showLoading = false;

			UserService.registration(opts, function(data) {
				if(data.code == 101) {
					if(data.data.profile_type == 1){
						var	opts1 = {
							reqObj: {
								client_id : APP.keys.client_id,
								client_secret : APP.keys.client_secret,
						        grant_type : APP.keys.grant_type,
								username : $scope.user.userEmail,
								password : $.base64.encode($scope.user.userPassword)
							}
						};
						//call service to get access token
						UserService.getAccessToken(opts1).then(function(data) {
							APP.accessToken = data.data.access_token;
							var opts2 = {};
							opts2.username = $scope.user.userEmail;
							opts2.password = $.base64.encode($scope.user.userPassword);
							UserService.getLoginUser(opts2, function(data){
				            	if(data.data && data.code != 100) {
									APP.currentUser = data.data;
									ipCookie("loggedInUser", data.data, { expires: 365 });
									ipCookie("access_token", APP.accessToken, { expires: 3000 });
									$rootScope.currentUser = data.data;
									$rootScope.isLoggedIn = true;
									if(APP.currentUser.country == 'IT') {
										$scope.selectlanguage('it');
									} else {
										$scope.selectlanguage('en');
									}
									var opts3 = {};
									opts3.user_id = APP.currentUser.id;
									opts3.profile_type = 4;
									UserService.getBasicProfile(opts3, function(data) {
										if(data.code == 101)
											$rootScope.currentUser.basicProfile = data.data;
										var opts4 = {};
										opts4.idcard = $rootScope.currentUser.basicProfile.user_id;
										UserService.getCreditAndIncome(opts4, function(data) {
											var currentCredit = {};
											if(data.code == 101) {
												currentCredit.totalCredit = (data.data.saldoc/1000000) ;
												currentCredit.totCreditMicro = (data.data.saldorm) + (data.data.saldorc) ;
												currentCredit.totalIncome = data.tot_income;
												currentCredit.totalIncomeShow = data.tot_income;
												$rootScope.currentUser.creditAndIncome = currentCredit;
											}
											else{
												$rootScope.currentUser.creditAndIncome = data.data;
											}
										});
									});
									$scope.$parent.loggedIn = true;
									$location.path("/shop/register/"+$scope.profileType);
								} else {
				                    $scope.showLoading = true;
									$scope.signUpSuccessMsg = $scope.i18n.home.invalid_username;
									$timeout(function(){
					                $scope.signUpSuccessMsg = '';
					                }, 15000);
								}
							});
						}, function(error) {
							if(error.error === 'invalid_grant'){
								$scope.showLoading = true;
								$scope.signUpSuccessMsg = $scope.i18n.home.invalid_username;
								$timeout(function(){
				                $scope.signUpSuccessMsg = '';
				                }, 15000);
							} else {
								$scope.showLoading = true;
								$scope.signUpSuccessMsg = $scope.i18n.home.server_not_responding;
								$timeout(function(){
				                $scope.signUpSuccessMsg = '';
				                }, 15000);
							}
						});
					}
				} else if (data.code == 136) {
					$scope.signUpSuccessMsg = $scope.i18n.validation.user_exists;
				    $scope.showLoading = true;
				} else if(data.code == 154) {
					$scope.signUpSuccessMsg = $scope.i18n.validation.citizen_not_exists;
				    $scope.showLoading = true;
				} else if (data.code == 137) {
					$scope.signUpSuccessMsg  = $scope.i18n.validation.broker_not_exists;
					$scope.showLoading = true;
				} else if (data.code == 131) {
					$scope.signUpSuccessMsg  = $scope.i18n.validation.date_format_incorrect;
					$scope.showLoading = true;
				} else if (data.code == 100) {
					$scope.signUpSuccessMsg  = $scope.i18n.validation.missed_param;
					$scope.showLoading = true;
				} else if (data.code == 129) {
					$scope.signUpSuccessMsg  = $scope.i18n.validation.invalid_country_code;
					$scope.showLoading = true;
				} else if (data.code == 130) {
					$scope.signUpSuccessMsg  = $scope.i18n.validation.invalid_gender_type;
					$scope.showLoading = true;
				} else if (data.code == 133) {
					$scope.signUpSuccessMsg  = $scope.i18n.validation.invalid_profile_setting;
					$scope.showLoading = true;
				} else if (data.code == 143) {
					$scope.signUpSuccessMsg  = $scope.i18n.validation.referral_id_needed;
					$scope.showLoading = true;
				} else if (data.code == 135) {
					$scope.signUpSuccessMsg  = $scope.i18n.validation.email_invalid;
					$scope.showLoading = true;
				} else {
					$scope.signUpSuccessMsg  = data.message;
					$scope.showLoading = true;
				}
				$timeout(function(){
					$scope.signUpSuccessMsg = '';
				},15000);
			});
    	}
	}
}]);

//Shop register in the second step
app.controller('ShopRegisterController', ['$cookieStore', '$rootScope', 'ipCookie', '$scope', '$http', 'StoreService', '$timeout', '$routeParams', '$location', 'TopLinkService', 'ProfileService', 'focus', function($cookieStore, $rootScope, ipCookie, $scope, $http, StoreService, $timeout, $routeParams, $location, TopLinkService, ProfileService, focus){
	$scope.store = {};
	$scope.store.storecategory = {};
	$scope.store.storecategory.id = 0;
	var tempcat = $scope.store.storecategory.id;
	$scope.regions = APP.regions;
	$scope.enableKeyword = true;
	$scope.enableSubcategory = true;
	
	if(TopLinkService.getAffiliationObject().hasOwnProperty("user_id")) {
		var affiliate = TopLinkService.getAffiliationObject();
		$scope.isreferralId = affiliate.user_id;
		$scope.referralId = affiliate.user_id;
		$scope.filtertypeId = affiliate.type;
	}

	// creating category drop down
	$scope.$watch('currentLanguage', function(newValue, oldValue) {
		$scope.searchCategory(newValue);
		if(tempcat != '' && tempcat != 0){
			$scope.getSubCategory();
		}
	});

	$scope.backLocation = function() {
		$location.path("/citizen/register/"+$routeParams.profileType);
	};

	$scope.searchCategory = function(currentLanguage){
		var opts = {};
		opts.lang_code = currentLanguage;
		opts.session_id = APP.currentUser.id;
		$scope.cancelCategoryRequest = false;
		opts.session_id = APP.currentUser.id;
		ProfileService.searchCatagory(opts,function(data){
			if(data.code === 101 && data.message === 'SUCCESS'){
				if(data.data.length > 0){
					$scope.categories = data.data;
				}
			}
		});
	};

	//function to get the subcategory not in current use for registred shop
	$scope.getSubCategory = function(){
		if($scope.store.storecategory.id != '' && $scope.store.storecategory.id != 0){
			// enable disable keyword box
			$scope.enableKeyword = false;
			$scope.enableSubcategory = false;
			var opts = {};
			opts.lang_code = $scope.currentLanguage;
			opts.cat_id = $scope.store.storecategory.id;
			opts.session_id = APP.currentUser.id;
			$scope.cancelCategoryRequest = false;
			StoreService.getSubCategoryList(opts,function(data){
				if(data.code === 101 && data.message === 'SUCCESS'){
					$scope.subcategories = data.data;
				}
			});
		}else{
				$scope.enableKeyword = true;
				$scope.enableSubcategory = true;
		}
	};

	$scope.searchCategory($scope.currentLanguage);
	$scope.createStoreLoader = false;
	$scope.createStoreError = false;
	$scope.createStoreErrorMgs = "";  //$scope.i18n.storealbum.album_ErrorMgs
	$scope.store = {};
	$scope.legalForms = APP.legalForms;
	$scope.countries  = $scope.i18n.countries;
	$scope.createShopErrorMgs = '';
	$scope.vatNumberInvalid = false;
	$scope.ibanNumberInvalid = false;
	
	//function to validate and save the data of the Shop
	$scope.registerShop = function() {
		$scope.createStoreLoader = true;
		$scope.formSubmitted = true;
		if($scope.store.name == undefined || $scope.store.name == '' ){
			$scope.inputname = "storename";
			$scope.shopCreateForm.storename.$dirty = true;
			$scope.shopCreateForm.storename.$invalid = true;
			$scope.shopCreateForm.storename.$error.required = true;
			focus('storename');
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			return false;
		}else if($scope.store.companyName == undefined || $scope.store.companyName == '' ){
			$scope.inputname = "companyName";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.storecompany.$dirty = true;
			$scope.shopCreateForm.storecompany.$invalid = true;
			$scope.shopCreateForm.storecompany.$error.required = true;
			focus('storecompany');
			return false;
		}else if($scope.store.legalForm == undefined || $scope.store.legalForm == '' ){
			$scope.inputname = "legalForm";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.legalform.$dirty = true;
			$scope.shopCreateForm.legalform.$invalid = true;
			$scope.shopCreateForm.legalform.$error.required = true;
			focus('legalForm');
			return false;
		}else if($scope.store.vatNumber == undefined || $scope.store.vatNumber == ''){
			$scope.inputname = "vatNumber";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.vatnumber.$dirty = true;
			$scope.shopCreateForm.vatnumber.$invalid = true;
			$scope.shopCreateForm.vatnumber.$error.required = true;
			focus('vatNumber');
			return false;
		}else if($scope.store.taxNumber == undefined || $scope.store.taxNumber == ''){
			$scope.inputname = "taxNumber";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.taxnumber.$dirty = true;
			$scope.shopCreateForm.taxnumber.$invalid = true;
			$scope.shopCreateForm.taxnumber.$error.required = true;
			focus('taxNumber');
			return false;
		}else if($scope.store.email == undefined || $scope.store.email == '' ){
			$scope.inputname = "email";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.shopemail.$dirty = true;
			$scope.shopCreateForm.shopemail.$invalid = true;
			$scope.shopCreateForm.shopemail.$error.required = true;
			focus('email');
			return false;
		}else if($scope.store.confirmemail == undefined || $scope.store.confirmemail == '' || ($scope.store.email !== $scope.store.confirmemail)){
			$scope.inputname = "confirmemail";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.confirmemail.$dirty = true;
			$scope.shopCreateForm.confirmemail.$invalid = true;
			$scope.shopCreateForm.confirmemail.$error.required = true;
			focus('confirmemail');
			return false;
		}else if($scope.store.phone == undefined || $scope.store.phone == '' || isNaN($scope.store.phone) == true ){
			$scope.inputname = "phone";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.shopphone.$dirty = true;
			$scope.shopCreateForm.shopphone.$invalid = true;
			$scope.shopCreateForm.shopphone.$error.required = true;
			focus('phone');
			return false;
		}else if($scope.store.iban == undefined || $scope.store.iban == ''){
			$scope.inputname = "iban";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.iban.$dirty = true;
			$scope.shopCreateForm.iban.$invalid = true;
			$scope.shopCreateForm.iban.$error.required = true;
			focus('iban');
			return false;
		}else if($scope.store.storecategory == undefined || $scope.store.storecategory == ''){
			$scope.inputname = "storecategory";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.storecategory.$dirty = true;
			$scope.shopCreateForm.storecategory.$invalid = true;
			$scope.shopCreateForm.storecategory.$error.required = true;
			focus('storecategory');
			return false;
		}else if($scope.store.description == undefined || $scope.store.description == ''){
			$scope.inputname = "description";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.description.$dirty = true;
			$scope.shopCreateForm.description.$invalid = true;
			$scope.shopCreateForm.description.$error.required = true;
			focus('description');
			return false;
		}else if($scope.store.regOfficeCountry == undefined || $scope.store.regOfficeCountry == ''){
			$scope.inputname = "regOfficeCountry";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.regofficecountry.$dirty = true;
			$scope.shopCreateForm.regofficecountry.$invalid = true;
			$scope.shopCreateForm.regofficecountry.$error.required = true;
			focus('regOfficeCountry');
			return false;
		}else if($scope.store.regOfficeRegion == undefined || $scope.store.regOfficeRegion == ''){
			$scope.inputname = "regOfficeRegion";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.regofficeregion.$dirty = true;
			$scope.shopCreateForm.regofficeregion.$invalid = true;
			$scope.shopCreateForm.regofficeregion.$error.required = true;
			focus('regOfficeRegion');
			return false;
		}else if($scope.store.regOfficeCity == undefined || $scope.store.regOfficeCity == ''){
			$scope.inputname = "regOfficeCity";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.regofficecity.$dirty = true;
			$scope.shopCreateForm.regofficecity.$invalid = true;
			$scope.shopCreateForm.regofficecity.$error.required = true;
			focus('regOfficeCity');
			return false;
		}else if($scope.store.province == '' || $scope.store.province == undefined) {
			$scope.inputname = "province";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.province.$dirty = true;
			$scope.shopCreateForm.province.$invalid = true;
			$scope.shopCreateForm.province.$error.required = true;
			focus('province');
			return false;
		}else if($scope.store.province.length != 2 ){
			$scope.store.province = '';
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.province.$dirty = true;
			$scope.shopCreateForm.province.$invalid = true;
			$scope.shopCreateForm.province.$error.required = true;
			focus('province');
			return false;
		}else if($scope.store.regOfficezip == '' || $scope.store.regOfficezip == undefined || isNaN($scope.store.regOfficezip) == true ) {
			$scope.inputname = "regOfficezip";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.regofficezip.$dirty = true;
			$scope.shopCreateForm.regofficezip.$invalid = true;
			$scope.shopCreateForm.regofficezip.$error.required = true;
			focus('regOfficezip');
			return false;
		}else if($scope.store.regOfficezip.length !=5 ){
			$scope.store.regOfficezip = '';
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.regofficezip.$dirty = true;
			$scope.shopCreateForm.regofficezip.$invalid = true;
			$scope.shopCreateForm.regofficezip.$error.required = true;
			focus('regOfficezip');
			return false;
		}else if($scope.store.regOfficeStreet == undefined || $scope.store.regOfficeStreet == ''){
			$scope.inputname = "regOfficeStreet";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.regofficestreet.$dirty = true;
			$scope.shopCreateForm.regofficestreet.$invalid = true;
			$scope.shopCreateForm.regofficestreet.$error.required = true;
			focus('regOfficeStreet');
			return false;
		}else if($scope.store.HQCountry == undefined || $scope.store.HQCountry == '' ){
			$scope.inputname = "HQCountry";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.hqcountry.$dirty = true;
			$scope.shopCreateForm.hqcountry.$invalid = true;
			$scope.shopCreateForm.hqcountry.$error.required = true;
			focus('HQCountry');
			return false;
		}else if($scope.store.HQRegion == '' || $scope.store.HQRegion == undefined) {
			$scope.inputname = "HQRegion";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.hqregion.$dirty = true;
			$scope.shopCreateForm.hqregion.$invalid = true;
			$scope.shopCreateForm.hqregion.$error.required = true;
			focus('HQRegion');
			return false;
		}else if($scope.store.HQCity == '' || $scope.store.HQCity == undefined) {
			$scope.inputname = "HQCity";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.hqcity.$dirty = true;
			$scope.shopCreateForm.hqcity.$invalid = true;
			$scope.shopCreateForm.hqcity.$error.required = true;
			focus('HQCity');
			return false;
		}else if($scope.store.HQProvince == '' || $scope.store.HQProvince == undefined) {
			$scope.inputname = "HQProvince";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.hqprovince.$dirty = true;
			$scope.shopCreateForm.hqprovince.$invalid = true;
			$scope.shopCreateForm.hqprovince.$error.required = true;
			focus('HQProvince');
			return false;
		}else if($scope.store.HQProvince.length != 2){
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.hqprovince.$dirty = true;
			$scope.shopCreateForm.hqprovince.$invalid = true;
			$scope.shopCreateForm.hqprovince.$error.required = true;
			focus('HQProvince');
			return false;
		}else if($scope.store.HQCap == undefined || $scope.store.HQCap == '' || isNaN($scope.store.HQCap) == true ){
			$scope.inputname = "HQCap";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.hqcap.$dirty = true;
			$scope.shopCreateForm.hqcap.$invalid = true;
			$scope.shopCreateForm.hqcap.$error.required = true;
			focus('HQCap');
			return false;
		}else if($scope.store.HQCap.length !=5 ){
			$scope.store.HQCap = '';
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.hqcap.$dirty = true;
			$scope.shopCreateForm.hqcap.$invalid = true;
			$scope.shopCreateForm.hqcap.$error.required = true;
			focus('HQCap');
			return false;
		}else if($scope.store.HQStreet == undefined || $scope.store.HQStreet == ''){
			$scope.inputname = "HQStreet";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.hqstreet.$dirty = true;
			$scope.shopCreateForm.hqstreet.$invalid = true;
			$scope.shopCreateForm.hqstreet.$error.required = true;
			focus('HQStreet');
			return false;
		}else if($scope.store.HQEmail == undefined || $scope.store.HQEmail == '' ){
			$scope.inputname = "HQEmail";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.hqemail.$dirty = true;
			$scope.shopCreateForm.hqemail.$invalid = true;
			$scope.shopCreateForm.hqemail.$error.required = true;
			focus('HQEmail');
			return false;
		}else if($scope.store.HQPhone == undefined || $scope.store.HQPhone == '' || isNaN($scope.store.HQPhone) == true){
			$scope.inputname = "HQPhone";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.hqphone.$dirty = true;
			$scope.shopCreateForm.hqphone.$invalid = true;
			$scope.shopCreateForm.hqphone.$error.required = true;
			focus('HQPhone');
			return false;
		}else if($scope.store.legalTaxCode == undefined || $scope.store.legalTaxCode == '' ){
			$scope.inputname = "legalTaxCode";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.legaltaxcode.$dirty = true;
			$scope.shopCreateForm.legaltaxcode.$invalid = true;
			$scope.shopCreateForm.legaltaxcode.$error.required = true;
			focus('legalTaxCode');
			return false;
		}else if($scope.store.firstName == undefined || $scope.store.firstName == '' ){
			$scope.inputname = "firstName";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.firstname.$dirty = true;
			$scope.shopCreateForm.firstname.$invalid = true;
			$scope.shopCreateForm.firstname.$error.required = true;
			focus('firstName');
			return false;
		}else if($scope.store.lastName == undefined || $scope.store.lastName == '' ){
			$scope.inputname = "lastName";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.lastname.$dirty = true;
			$scope.shopCreateForm.lastname.$invalid = true;
			$scope.shopCreateForm.lastname.$error.required = true;
			focus('lastName');
			return false;
		}else if($scope.store.legalBirthPlace == undefined || $scope.store.legalBirthPlace == '' ){
			$scope.inputname = "legalBirthPlace";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.legaldobplace.$dirty = true;
			$scope.shopCreateForm.legaldobplace.$invalid = true;
			$scope.shopCreateForm.legaldobplace.$error.required = true;
			focus('legalBirthPlace');
			return false;
		}else if($scope.store.dobDay == undefined || $scope.store.dobDay == '' ){
			$scope.inputname = "dobDay";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.dobday.$dirty = true;
			$scope.shopCreateForm.dobday.$invalid = true;
			$scope.shopCreateForm.dobday.$error.required = true;
			focus('dobDay');
			return false;
		}else if($scope.store.dobMonth == undefined || $scope.store.dobMonth == '' ){
			$scope.inputname = "dobMonth";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.dobmonth.$dirty = true;
			$scope.shopCreateForm.dobmonth.$invalid = true;
			$scope.shopCreateForm.dobmonth.$error.required = true;
			focus('dobDay');
			return false;
		}else if($scope.store.dobYear == undefined || $scope.store.dobYear == '' ){
			$scope.inputname = "dobYear";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.dobyear.$dirty = true;
			$scope.shopCreateForm.dobyear.$invalid = true;
			$scope.shopCreateForm.dobyear.$error.required = true;
			focus('dobDay');
			return false;
		}else if($scope.store.legalEmail == undefined || $scope.store.legalEmail == '' ){
			$scope.inputname = "legalEmail";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.legalemail.$dirty = true;
			$scope.shopCreateForm.legalemail.$invalid = true;
			$scope.shopCreateForm.legalemail.$error.required = true;
			focus('legalEmail');
			return false;
		}else if($scope.store.legalPhone == undefined || $scope.store.legalPhone == '' || isNaN($scope.store.legalPhone) == true){
			$scope.inputname = "legalPhone";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.legalphone.$dirty = true;
			$scope.shopCreateForm.legalphone.$invalid = true;
			$scope.shopCreateForm.legalphone.$error.required = true;
			focus('legalPhone');
			return false;
		}else if($scope.store.permntAddress == undefined || $scope.store.permntAddress == '' ){
			$scope.inputname = "permntAddress";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.permntaddress.$dirty = true;
			$scope.shopCreateForm.permntaddress.$invalid = true;
			$scope.shopCreateForm.permntaddress.$error.required = true;
			focus('permntAddress');
			return false;
		}else if($scope.store.permntProvince == undefined || $scope.store.permntProvince == '' ){
			$scope.inputname = "permntProvince";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.permntprovince.$dirty = true;
			$scope.shopCreateForm.permntprovince.$invalid = true;
			$scope.shopCreateForm.permntprovince.$error.required = true;
			focus('permntProvince');
			return false;
		}else if($scope.store.permntProvince.length != 2 ){
			$scope.store.permntProvince = '';
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.permntprovince.$dirty = true;
			$scope.shopCreateForm.permntprovince.$invalid = true;
			$scope.shopCreateForm.permntprovince.$error.required = true;
			focus('permntProvince');
			return false;
		}else if($scope.store.permntCity == undefined || $scope.store.permntCity == '' ){
			$scope.inputname = "permntCity";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.permntcity.$dirty = true;
			$scope.shopCreateForm.permntcity.$invalid = true;
			$scope.shopCreateForm.permntcity.$error.required = true;
			focus('permntCity');
			return false;
		}else if($scope.store.permntZip == undefined || $scope.store.permntZip == '' || isNaN($scope.store.permntZip) == true  ){
			$scope.inputname = "permntZip";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.permntzip.$dirty = true;
			$scope.shopCreateForm.permntzip.$invalid = true;
			$scope.shopCreateForm.permntzip.$error.required = true;
			focus('permntZip');
			return false;
		}else if($scope.store.permntZip.length !=5 ){
			$scope.store.permntZip = '';
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.shopCreateForm.permntzip.$dirty = true;
			$scope.shopCreateForm.permntzip.$invalid = true;
			$scope.shopCreateForm.permntzip.$error.required = true;
			focus('permntZip');
			return false;
		}else if((document.getElementById("latitude").value) == undefined || (document.getElementById("latitude").value) == ''){
			$scope.inputname = "pac-input";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.malLocationEmpty = true;
			$timeout(function(){
				$scope.malLocationEmpty = false;
			}, 3000);
			focus('pac-input');
			return false;
		}else if((document.getElementById("longitude").value) == undefined || (document.getElementById("longitude").value) == ''){
			$scope.inputname = "pac-input";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.malLocationEmpty = true;
			$timeout(function(){
				$scope.malLocationEmpty = false;
			}, 3000);
			focus('pac-input');
			return false;
		}else if((document.getElementById("mapplace").value) == undefined || (document.getElementById("mapplace").value) == ''){
			$scope.inputname = "pac-input";
			$scope.createStoreError = true;
			$scope.createStoreLoader = false;
			$scope.malLocationEmpty = true;
			$timeout(function(){
				$scope.malLocationEmpty = false;
			}, 3000);
			focus('pac-input');
			return false;
		} else if($scope.store.referral_id != '' && $scope.store.referral_id != undefined) {
			if(isNaN($scope.store.referral_id)){
				$scope.createStoreErrorMgs = $scope.i18n.store.valid_ref_id;
				$scope.createStoreError = true;
				$scope.createStoreLoader = false;
				$timeout(function(){
					$scope.createStoreErrorMgs = '';
				}, 15000);
				return false;
			}
		} else if($scope.store.dobYear != undefined || $scope.store.dobYear != ''){
			if($scope.store.dobDay.id > 29 && $scope.store.dobMonth.value == 2){
				$scope.inputname = "dobDay";
				$scope.createStoreError = true;
				$scope.createStoreLoader = false;
				$scope.shopCreateForm.dobday.$dirty = true;
				$scope.shopCreateForm.dobday.$invalid = true;
				focus('dobDay');
				return false;
			}
		} else if($scope.store.dobYear != undefined || $scope.store.dobYear != ''){
			var isLeap = new Date($scope.store.dobYear.id, 1, 29).getMonth() == 1;
			if(isLeap == false && $scope.store.dobDay.id >= 29 && $scope.store.dobMonth.value == 2){
				$scope.inputname = "dobYear";;
				$scope.createStoreError = true;
				$scope.createStoreLoader = false;
				$scope.shopCreateForm.dobyear.$dirty = true;
				$scope.shopCreateForm.dobyear.$invalid = true;
				focus('dobYear');
				return false;
			}
		}
		var dd = $scope.store.dobDay.id;
		var month = $scope.store.dobMonth.value +'-';
		var year = $scope.store.dobYear.id +'-';
		$scope.store.dob = year.concat(month,dd);
		var opts = {};
		
		//check if referral user going to affiliate shop 
		if(!TopLinkService.getNoAffiliated()) {
			if(localStorage.getItem('ShopAffiliatedObject')) {
				opts.referral_id = JSON.parse(localStorage.getItem('ShopAffiliatedObject')).affiliator_id;
			}
    	}
		if($scope.keywordList != undefined || $scope.keywordList.length != '0') {
			opts.shop_keyword = $scope.keywordList.join();
		} else {
			opts.shop_keyword = [];	
		}
		
		opts.user_id = APP.currentUser.id; 
		opts.name = $scope.store.name;
		opts.business_name = $scope.store.companyName;
		opts.legal_status = $scope.store.legalForm.id;
		opts.vat_number = $scope.store.vatNumber;
		opts.fiscal_code = $scope.store.taxNumber;
		opts.tax_number = $scope.store.taxNumber;
		opts.email = angular.lowercase($scope.store.email);
		opts.phone = $scope.store.phone;
		opts.iban = $scope.store.iban;
		opts.sale_catid = $scope.store.storecategory.id;
		//opts.sale_subcatid = $scope.store.subcategory.id; // not in current use
		opts.sale_subcatid = null;
		opts.description = $scope.store.description;
		opts.business_country = $scope.store.regOfficeCountry.id;
		opts.business_region = $scope.store.regOfficeRegion.id;
		opts.business_city = $scope.store.regOfficeCity;
		opts.province = $scope.store.province;
		opts.zip = $scope.store.regOfficezip;
		opts.business_address = $scope.store.regOfficeStreet;
		opts.sale_country = $scope.store.HQCountry.id;
		opts.sale_region = $scope.store.HQRegion.id;
		opts.sale_city = $scope.store.HQCity;
		opts.sale_province = $scope.store.HQProvince;
		opts.sale_zip = $scope.store.HQCap;
		opts.sale_address = $scope.store.HQStreet;
		opts.map_place = document.getElementById("mapplace").value;
		opts.latitude = document.getElementById("latitude").value; 
		opts.longitude = document.getElementById("longitude").value;
		opts.sale_email = angular.lowercase($scope.store.HQEmail);
		opts.sale_phone_number = $scope.store.HQPhone;
		opts.repres_fiscal_code = $scope.store.legalTaxCode;
		opts.repres_first_name = $scope.store.firstName;
		opts.repres_last_name = $scope.store.lastName;
		opts.repres_place_of_birth = $scope.store.legalBirthPlace;
		opts.repres_dob = $scope.store.dob;
		opts.repres_email = angular.lowercase($scope.store.legalEmail);
		opts.repres_phone_number = $scope.store.legalPhone;
		opts.repres_address = $scope.store.permntAddress;
		opts.repres_province = $scope.store.permntProvince;
		opts.repres_city = $scope.store.permntCity;
		opts.repres_zip = $scope.store.permntZip;
		//not in use extra field in service
		opts.business_type = 'not in current use';
		opts.call_type = '2'; //for shop create
		opts.sale_description = 'not in current use';
		opts.sale_map = "not in current use";
		opts.broker_id = 0;
		$scope.createStoreErrorMgs = '';

		StoreService.createStore(opts, function(data) {
			if(data.code == 101) {
				//Remove referral object from cookies
				localStorage.removeItem('ShopAffiliatedObject');
				//$scope.createStoreLoader = false;
				$rootScope.tempStoreId = data.data.store_id;
                // Put store id in cookie
                $cookieStore.put('tempStoreId',data.data.store_id);
				// now it will redirect to terms and condition 
				$location.path("/shop/"+data.data.store_id+"/contract");
			} else if (data.code == 154) {
				$scope.createStoreLoader = false;
				$scope.createStoreErrorMgs = $scope.i18n.validation.citizen_not_exists;
				$scope.commonError = true;
				$timeout(function(){
					$scope.commonError = false;
				}, 3000);
				$scope.createStoreError = true;
			}else if (data.code == 100) {
				$scope.createStoreLoader = false;
				$scope.createShopErrorMgs = $scope.i18n.validation.missed_param;
				$scope.commonError = true;
				$timeout(function(){
					$scope.commonError = false;
				}, 3000);
				$scope.createStoreError = true;
			}else if (data.code == 116) {
				$scope.createStoreLoader = false;
				$scope.createShopErrorMgs = $scope.i18n.validation.enter_businessname;
				$scope.commonError = true;
				$timeout(function(){
					$scope.commonError = false;
				}, 3000);
				$scope.createStoreError = true;
			}else if (data.code == 138) {
				$scope.createStoreLoader = false;
				$scope.createShopErrorMgs = $scope.i18n.validation.vat_exists;
				$scope.vatNumberInvalid = true;
				$scope.createStoreError = true;
				$timeout(function(){
					$scope.vatNumberInvalid = false;
				}, 3000);
				focus('vatNumber');
			} else if (data.code == 85) {
				$scope.createStoreLoader = false;
				$scope.createShopErrorMgs = $scope.i18n.validation.account_inactive;
				$scope.commonError = true;
				$timeout(function(){
					$scope.commonError = false;
				}, 3000);
				$scope.createStoreError = true;
			} else if (data.code == 165) {
				$scope.createStoreLoader = false;
				$scope.createShopErrorMgs = $scope.i18n.validation.vat_valid;
				$scope.vatNumberInvalid = true;
				$scope.createStoreError = true;
				$timeout(function(){
					$scope.vatNumberInvalid = false;
				}, 3000);
				focus('vatNumber');
			} else if (data.code == 166) {
				$scope.createStoreLoader = false;
				$scope.createShopErrorMgs = $scope.i18n.validation.iban_valid;
				$scope.ibanNumberInvalid = true;
				$scope.createStoreError = true;
				$timeout(function(){
					$scope.ibanNumberInvalid = false;
				}, 3000);
				focus('iban');
			} else {
				$scope.createStoreLoader = false;
				$scope.createStoreError = true;
			}

			$timeout(function(){
				$scope.createShopErrorMgs = '';
				$scope.vatNumberInvalid = false;
				$scope.ibanNumberInvalid = false;
				$scope.createStoreError = false;
			}, 15000);
		});
	};
	//map section start
	$scope.resetStoreObject = function() {
		document.getElementById("mapplace").value = '';
		document.getElementById("latitude").value = ''; 
		document.getElementById("longitude").value = '';
		$scope.store = {};
	};

	$scope.$on('$viewContentLoaded', function(){
			$timeout(function(){
			$scope.initialize();
		}, 1000);
	});

	// $scope.loadMap = function() {
	// 	$scope.map = {center: {latitude: 40.1451, longitude: -99.6680 }, zoom: 4 }
	// 	$scope.options = {scrollwheel: false};
	// 	$scope.marker = {
	// 	id:0,
	// 	coords: {
	// 	latitude: 40.1451,
	// 	longitude: -99.6680
	// 	},
	// 	options: { draggable: true },
	// 	events: {
	// 	dragend: function (marker, eventName, args) {
	// 	document.getElementById("latitude").value = marker.getPosition().lat();
	// 	document.getElementById("longitude").value = marker.getPosition().lng();
	// 	$scope.mapLocation(marker.getPosition().lat(), marker.getPosition().lng());
	// 	}
	// 	}
	// 	}
	// }

	// $scope.mapLocation = function(mapLatitude, mapLogitude) {
	// 	var geocoder;
	// 	geocoder = new google.maps.Geocoder();
	// 	var latlng = new google.maps.LatLng(parseFloat(mapLatitude), parseFloat(mapLogitude));
	// 	geocoder.geocode({'latLng': latlng}, function(results, status) {
	// 		if (status == google.maps.GeocoderStatus.OK) {
	// 			if (results[1]) {
	// 				$('#mapplace').val(results[1].formatted_address);
	// 			} else {
	// 				alert($scope.i18n.storealbum.album_alert_msg);
	// 			}
	// 		} else {
	// 			alert($scope.i18n.storealbum.album_alert_failed + status);
	// 		}
	// 	});
	// };
	// $scope.loadMap();

	$scope.initialize = function () {
		var mapOptions = {
			center: new google.maps.LatLng(-33.8688, 151.2195),
			zoom: 13
		};
		var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

		var input = (document.getElementById('pac-input'));

		var types = document.getElementById('type-selector');
		map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
		map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

		var autocomplete = new google.maps.places.Autocomplete(input);
		autocomplete.bindTo('bounds', map);

		var infowindow = new google.maps.InfoWindow();
		var marker = new google.maps.Marker({
			map: map,
			anchorPoint: new google.maps.Point(0, -29)
		});

		google.maps.event.addListener(autocomplete, 'place_changed', function() {
			infowindow.close();
			marker.setVisible(false);
			var place = autocomplete.getPlace();
			if (!place.geometry) {
				return;
			}
			var countryPlace = autocomplete.getPlace();
			document.getElementById("latitude").value = countryPlace.geometry.location.lat();
			document.getElementById("longitude").value = countryPlace.geometry.location.lng();
			document.getElementById("mapplace").value = countryPlace.formatted_address;
			$scope.store.map_place = countryPlace.formatted_address;
			
			if (place.geometry.viewport) {
				map.fitBounds(place.geometry.viewport);
			} else {
				map.setCenter(place.geometry.location);
				map.setZoom(17);  
			}
			marker.setIcon(({
				url: place.icon,
				size: new google.maps.Size(71, 71),
				origin: new google.maps.Point(0, 0),
				anchor: new google.maps.Point(17, 34),
				scaledSize: new google.maps.Size(35, 35)
			}));
			marker.setPosition(place.geometry.location);
			marker.setVisible(true);

			var address = '';
			if (place.address_components) {
				address = [
				(place.address_components[0] && place.address_components[0].short_name || ''),
				(place.address_components[1] && place.address_components[1].short_name || ''),
				(place.address_components[2] && place.address_components[2].short_name || '')
				].join(' ');
			}

			infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
			infowindow.open(map, marker);
		});

		function setupClickListener(id, types) {
			var radioButton = document.getElementById(id);
		}

		setupClickListener('changetype-all', []);
		setupClickListener('changetype-establishment', ['establishment']);
		setupClickListener('changetype-geocode', ['geocode']);
	}

	//create data of birth drop dwon start--->
    //creat month array
    $scope.months = $scope.i18n.profile.months;
    //create days array
    $scope.days = [];
    $scope.years = [];
    $scope.daysLimit = 31;
    $scope.getDays = function(daysLimit) {
		for (start = 1;start <= daysLimit; start++) {
			$scope.days.push({"id":start,"value":start});
		}
    }
    $scope.getYears = function() {
        var currentYear = new Date().getFullYear();
        $scope.years = [];
        for (var i = currentYear; i >= 1914 ; i--){
            $scope.years.push({"id":i,"value":i});
        }
    }
	$scope.getYears();
	$scope.getDays($scope.daysLimit);

	$scope.changeShopMonth = function() {
        if($scope.store.dobMonth.value%2==1){
            $scope.days = [];
            $scope.getDays(31);
        } else if(($scope.store.dobMonth.value == 2) && ($scope.store.dobYear.value % 4 == 0)){
            $scope.days = [];
            $scope.getDays(29);
        } else if($scope.store.dobMonth.value == 2){
            $scope.days = [];
            $scope.getDays(28);
        } else {
            $scope.days = [];
            $scope.getDays(30);
        }
    };

    $scope.changeShopYear = function() {
        if($scope.store.dobYear.value % 4 == 0 && $scope.store.dobMonth.value == 2){
            $scope.days = [];
            $scope.getDays(29);
        } else if($scope.store.dobYear.value % 4 != 0 && $scope.store.dobMonth.value == 2) {
            $scope.days = [];
            $scope.getDays(28);
        } else if($scope.store.dobYear.value % 4 != 0 && $scope.store.dobMonth.value%2 == 1) {
            $scope.days = [];
            $scope.getDays(31);
        } else {
            $scope.days = [];
            $scope.getDays(30);
        }
    };
	//create data of birth drop dwon end
 
	// Search keyword for particular catagory
	var currentTimeout = null;
	var DELAY_TIME_BEFORE_POSTING = 300;

	$('#categoryKeyword').keypress(function(event) {
		if(currentTimeout) {
			$timeout.cancel(currentTimeout);
		}
		currentTimeout = $timeout(function(){
			if(event.which != 13){ 
				$scope.searchKeyword();
			}
		}, DELAY_TIME_BEFORE_POSTING)
	});

	$scope.keywords = [];
	$scope.searchKeyword = function(){
		var opts = {};
		opts.category_id = $scope.store.storecategory.id.toString();
		opts.keyword = $scope.store.keywords;
		opts.session_id = APP.currentUser.id;
		$scope.cancelKeywordRequest = false;
		$scope.showCatKeyLoading = true;
		opts.session_id = APP.currentUser.id;
		ProfileService.searchCatagoryKeyword(opts,function(data){
			$scope.showCatKeyLoading = false;
			if(data.code === 101 && data.message === "SUCCESS"){
				if($scope.cancelKeywordRequest === false){
					$scope.keywords =  data.data.keyword;
				}
			}
		});
	};

	$scope.keywordIndex = -1;
	$scope.keywordKeyDown=function(event){
	    if(event.keyCode===40){
	        event.preventDefault();
	        if($scope.keywordIndex+1 !== $scope.keywords.length){
	            $scope.keywordIndex++;
	        }
	    }
	    else if(event.keyCode===38){
	        event.preventDefault();
	        if($scope.keywordIndex-1 !== -1){
	            $scope.keywordIndex--;
	        }
	    }
	    else if(event.keyCode===13){
	       if($scope.keywords[$scope.keywordIndex] === undefined ){
		       $scope.storeKeyword($scope.categoryKeyword);
		   }else{
		       $scope.storeKeyword($scope.keywords[$scope.keywordIndex]);
		   }
	    }
	};

	// Clear keyword List
	$scope.cancelKeywordRequest = false;
	$scope.clearKeyList = function(){
		$scope.cancelKeywordRequest = true;
		$timeout(function(){
			$scope.keywords = [];
		},500);
	}

	// Store Keyword
	$scope.categoryKeyword = "";
	$scope.keywordList = [];
	$scope.storeKeyword = function(index){
		$scope.keywords = [];
		$scope.keywordIndex = -1;
		$scope.categoryKeyword = "";
	//	$scope.categoryKeyword = index.name;
		if( typeof(index) === 'object'){
			if($scope.keywordList.indexOf(index.name) === -1){
		   		$scope.keywordList.push(index.name);
		   	}
		}else{
			if(index === '' || index === undefined ){
				return false;
			}else{
				if($scope.keywordList.indexOf(index) === -1){
					$scope.keywordList.push(index);
				}
			}
  		}
  		
	};

	//Clear keyword array List
	$scope.clearKeywordList = function(){
		$timeout(function(){
			$scope.keywords = [];
		},500);
		
	};

	//Remove keyword from the array
	$scope.removeKeyword = function(index){
		$scope.keywordList.splice(index,1);
	};
}]);

//Shop Terms and conditions in the third step
app.controller('ShopTermsandConditions', ['$scope', '$http', '$rootScope', 'TopLinkService', '$timeout', '$routeParams', '$location', 'StoreService', 'StorePaymentService', 'ProfileService', function($scope, $http, $rootScope, TopLinkService, $timeout, $routeParams, $location, StoreService, StorePaymentService, ProfileService){
	$scope.loeadingContract = true;
	$scope.allowProceed = false;
	$scope.ShopDetail = [];
	$scope.storePaymentUrl = '';
	$scope.agree = {};
	$scope.agree.flag1 = 0;
	$scope.agree.flag1 = 0;
	$scope.agree.flag1 = 0;
	$scope.currentData = new Date();

	var opts = {};
    opts.user_id = APP.currentUser.id;
    opts.store_id = $routeParams.shopId;
	StoreService.getStoreDetail(opts, function(data){
		$scope.ShopDetail = data.data;
		var catopts= {};
        catopts.lang_code = 'it';//$scope.currentLanguage;
        catopts.cat_id = data.data.sale_catid;
        catopts.session_id = APP.currentUser.id;
        catopts.type = "show";
        catopts.session_id = APP.currentUser.id;
		ProfileService.getCategories(catopts, function(data) {
            if(data.code == 101) {
                $scope.ShopDetail.shop_category =  data.data.category_name;
            } else {
            	$scope.ShopDetail.shop_category = '';
            }
			var opts1 = {};
			opts1.profile_id = $routeParams.shopId;
			opts1.user_id = APP.currentUser.id;
			opts1.payment_type = APP.card.add_type;;
			opts1.cancel_url = APP.payment.siteDomain + '#/shop/paycancel'; 
			opts1.return_url = APP.payment.siteDomain + '#/shop/paysuccess'; 
			StorePaymentService.getOneClickPaymentUrls(opts1, function(data) {  
				if(data.code == 101) {
					if(data.data.url != '' ){
						$scope.loeadingContract = false;
						$scope.storePaymentUrl =  data.data.url;
					} else { 
						$scope.loeadingContract = false;
						$scope.storePaymentUrl = '';
					} 
				} else { 
					$scope.loeadingContract = false;
					$scope.storePaymentUrl = '';
				} 
			});
		});
	});
	
	$scope.checkFlag = function() {
		if($scope.agree.flag1 && $scope.agree.flag2 && $scope.agree.flag3 && $scope.agree.flag4) {
			$scope.allowProceed = true;
		} else {
			$scope.allowProceed = false;
		}
	};
}]);
//Create Store controller here
app.controller('EditShopController', ['$route', '$scope', '$http', '$sce', '$routeParams', '$location', '$timeout', 'StoreService', 'fileReader', 'ProfileService', 'focus', function($route, $scope, $http, $sce, $routeParams, $location, $timeout, StoreService, fileReader, ProfileService, focus) {
    $scope.store = {}
    $scope.store.storecategory = '';
    $scope.store.sale_subcatid = '';
    $scope.legalForms = APP.legalForms;
    $scope.countries  = APP.countries;
    $scope.regions = APP.regions;
    var latitudeMap = 0;
    var longitudeMap = 0;

    //create data of birth drop dwon start
    //creat month array
    $scope.months = $scope.i18n.profile.months;
    //create days array
    $scope.days = [];
    $scope.years = [];
    $scope.daysLimit = 31;
    $scope.getDays = function(daysLimit) {
    for (start = 1;start <= daysLimit; start++) {
        $scope.days.push({"id":start,"value":start});
    }
    }
    $scope.getYears = function() {
    var currentYear = new Date().getFullYear();
    $scope.years = [];
    for (var i = 1914; i <= currentYear ; i++){
        $scope.years.push({"id":i,"value":i});
    }
    }
    $scope.getYears();
    $scope.getDays($scope.daysLimit);
    $scope.changeShopMonth = function() {
        if($scope.store.dobMonth.value%2===1){
            $scope.days = [];
            $scope.getDays(31);
        } else if(($scope.store.dobMonth.value === 2) && ($scope.store.dobYear.value%4 === 0)){
            $scope.days = [];
            $scope.getDays(29);
        } else if($scope.store.dobMonth.value === 2){
            $scope.days = [];
            $scope.getDays(28);
        } else {
            $scope.days = [];
            $scope.getDays(30);
        }
    };

    $scope.changeShopYear = function() {
        if($scope.store.dobYear.value%4 === 0 && $scope.store.dobMonth.value === 2){
            $scope.days = [];
            $scope.getDays(29);
        } else if($scope.store.dobYear.value%4 !== 0 && $scope.store.dobMonth.value === 2) {
            $scope.days = [];
            $scope.getDays(28);
        } else if($scope.store.dobYear.value%4 !== 0 && $scope.store.dobMonth.value%2 === 1) {
            $scope.days = [];
            $scope.getDays(31);
        } else {
            $scope.days = [];
            $scope.getDays(30);
        }
    };

    //create data of birth drop dwon end
    $scope.initialize = function () {
        var myLatlng = new google.maps.LatLng(latitudeMap, longitudeMap);
        var mapOptions = {
            center: new google.maps.LatLng(latitudeMap, longitudeMap),
            zoom: 13
        };
        var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

        var input = (document.getElementById('pac-input'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            position:myLatlng,
            anchorPoint: new google.maps.Point(0, -29)
        });

        google.maps.event.addListener(autocomplete, 'place_changed', function() {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                return;
            }
            var countryPlace = autocomplete.getPlace();
            document.getElementById("latitude").value = countryPlace.geometry.location.lat();
            document.getElementById("longitude").value = countryPlace.geometry.location.lng();
            document.getElementById("mapplace").value = countryPlace.formatted_address;

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  
            }
            marker.setIcon(({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
        });

        function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);
    }

    $scope.loadDetails = function() {
        $scope.storeLoading = true;
        $scope.updateStart = false;
        $scope.createStoreError = false;
        $scope.createStoreErrorMgs = ''; 
        $scope.showEditForm = false;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $routeParams.id;
        StoreService.getStoreDetail(opts, function(data) {
            if(data.code == 101) {
                $scope.storeDetail = data.data;
                $scope.store = $scope.storeDetail;
                $scope.store.confirmemail = $scope.storeDetail.email;
                //seting kewyord list to show store data
                if($scope.storeDetail.shop_keyword != '' && $scope.storeDetail.shop_keyword != undefined && $scope.storeDetail.shop_keyword != null){
                    $scope.keywordList = $scope.storeDetail.shop_keyword.split(',');
                }
                //seting dropdowns to show store data
                var tempcat = $scope.storeDetail.sale_catid;
                $scope.store.storecategory = {"id":parseInt($scope.storeDetail.sale_catid)};
                //$scope.getSubCategory();
                $scope.store.subcategory = {"id":$scope.storeDetail.sale_subcatid};
                $scope.store.legal_status = {"id":$scope.storeDetail.legal_status};
                $scope.store.regOfficeCountry = {"id":$scope.storeDetail.business_country};
                $scope.store.sale_country = {"id":$scope.storeDetail.sale_country};
                $scope.store.regOfficeCountry = {"id":$scope.storeDetail.business_country};
                if($scope.store.repres_dob != '' && $scope.store.repres_dob != undefined && $scope.store.repres_dob != null) {
                    var DOB = $scope.store.repres_dob.substring(0,10);
                    var dtArray = DOB.split("-");
                    $scope.store.dobDay = {"id":parseInt(dtArray[2])};
                    $scope.store.dobMonth = {"value":parseInt(dtArray[1])};
                    $scope.store.dobYear = {"id":parseInt(dtArray[0])};
                }
                document.getElementById("latitude").value = $scope.storeDetail.latitude;
                document.getElementById("longitude").value = $scope.storeDetail.longitude;
                document.getElementById("mapplace").value = $scope.storeDetail.map_place;
                $scope.store.business_region = {"id":$scope.checkRegionExist(APP.regions, $scope.storeDetail.business_region)};
                $scope.store.sale_region = {"id":$scope.checkRegionExist(APP.regions, $scope.storeDetail.sale_region)};
                $scope.storeLoading = false;
                latitudeMap = data.data.latitude;
                longitudeMap = data.data.longitude;
                angular.element('#pac-input').val(data.data.map_place);
                $scope.initialize();
                var storeData = {};
                storeData.storeId = $scope.storeDetail.owner_id;
                //call service to get mobile app
                var mopts = {};
                mopts.store_id = $scope.storeDetail.id;
                mopts.session_id = APP.currentUser.id;
                StoreService.getMobileAppUrl(mopts, function(data) {
                    if(data.code == 101) {
                        $scope.store.mobileAppUrl =  data.data.url;
                    } else {
                        $scope.store.mobileAppUrl = '';
                    }
                });
            } else {
                $scope.storeLoading = false;
                $scope.createStoreError = true;
            }
        });
    }
    $scope.loadDetails();

    $scope.checkRegionExist = function(p, k) {
        for(var i=0;i<p.length;i++){
            var obj = p[i];
            if (obj['id'] === k) {
                return k;
            }        
        }
        return undefined;
    }

    $scope.commonError = false;
    $scope.vatNumberInvalid = false;
    $scope.ibanNumberInvalid = false;
    $scope.updateEditStore = function() {
        $scope.updateStart = true;
        $scope.formSubmitted = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $scope.store.id;
        if($scope.store.name == undefined || $scope.store.name == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_name;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.storename.$dirty = true;
            $scope.shopEditForm.storename.$invalid = true;
            $scope.shopEditForm.storename.$error.required = true;
            focus('storename');
            return false;
        } else if($scope.store.business_name == undefined || $scope.store.business_name == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storename;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.storecompany.$dirty = true;
            $scope.shopEditForm.storecompany.$invalid = true;
            $scope.shopEditForm.storecompany.$error.required = true;
            focus('storecompany');
            return false;
        } else if($scope.store.legal_status == undefined || $scope.store.legal_status == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storestatus;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.legalstatus.$dirty = true;
            $scope.shopEditForm.legalstatus.$invalid = true;
            $scope.shopEditForm.legalstatus.$error.required = true;
            focus('legalstatus');
            return false;
        } else if($scope.store.vat_number == undefined || $scope.store.vat_number == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storevat;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.vatnumber.$dirty = true;
            $scope.shopEditForm.vatnumber.$invalid = true;
            $scope.shopEditForm.vatnumber.$error.required = true;
            focus('vatnumber');
            return false;
        } else if($scope.store.fiscal_code == undefined || $scope.store.fiscal_code == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storetax;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.fiscalcode.$dirty = true;
            $scope.shopEditForm.fiscalcode.$invalid = true;
            $scope.shopEditForm.fiscalcode.$error.required = true;
            focus('fiscalcode');
            return false;
        } else if($scope.store.email == undefined || $scope.store.email == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeemail;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.email.$dirty = true;
            $scope.shopEditForm.email.$invalid = true;
            $scope.shopEditForm.email.$error.required = true;
            focus('email');
            return false;
        } else if($scope.store.confirmemail == undefined || $scope.store.confirmemail == '' || ($scope.store.email !== $scope.store.confirmemail)){
            $scope.inputname = "confirmemail";
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeemail;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.confirmemail.$dirty = true;
            $scope.shopEditForm.confirmemail.$invalid = true;
            $scope.shopEditForm.confirmemail.$error.required = true;
            focus('confirmemail');
            return false;
        } else if($scope.store.phone == undefined || $scope.store.phone == '' || isNaN($scope.store.phone) == true){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storenumber;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.phone.$dirty = true;
            $scope.shopEditForm.phone.$invalid = true;
            $scope.shopEditForm.phone.$error.required = true;
            focus('phone');
            return false;
        } else if($scope.store.iban == undefined || $scope.store.iban == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeiban;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.iban.$dirty = true;
            $scope.shopEditForm.iban.$invalid = true;
            $scope.shopEditForm.iban.$error.required = true;
            focus('iban');
            return false;
        } else if($scope.store.storecategory == undefined || $scope.store.storecategory == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storecategory;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $scope.updateStart = false;
            $scope.shopEditForm.iban.$dirty = true;
            $scope.shopEditForm.iban.$invalid = true;
            $scope.shopEditForm.iban.$error.required = true;
            focus('storecategory');
            return false;
        } else if($scope.store.description == undefined || $scope.store.description == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storedesc;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.description.$dirty = true;
            $scope.shopEditForm.description.$invalid = true;
            $scope.shopEditForm.description.$error.required = true;
            focus('description');
            return false;
        } else if($scope.store.regOfficeCountry == undefined || $scope.store.regOfficeCountry == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_country;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $scope.updateStart = false;
            $scope.shopEditForm.regofficecountry.$dirty = true;
            $scope.shopEditForm.regofficecountry.$invalid = true;
            $scope.shopEditForm.regofficecountry.$error.required = true;
            focus('regofficecountry');
            return false;
        } else if($scope.store.business_region.id == undefined || $scope.store.business_region.id == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeregregion;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.businessregion.$dirty = true;
            $scope.shopEditForm.businessregion.$invalid = true;
            $scope.shopEditForm.businessregion.$error.required = true;
            focus('businessregion');
            return false;
        } else if($scope.store.business_city == undefined || $scope.store.business_city == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeregcity;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.businesscity.$dirty = true;
            $scope.shopEditForm.businesscity.$invalid = true;
            $scope.shopEditForm.businesscity.$error.required = true;
            focus('businesscity');
            return false;
        } else if($scope.store.province == undefined || $scope.store.province == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeregprovince;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.province.$dirty = true;
            $scope.shopEditForm.province.$invalid = true;
            $scope.shopEditForm.province.$error.required = true;
            focus('province');
            return false;
        }  else if($scope.store.province.length < 2 || $scope.store.province.length > 2 ){
            $scope.createStoreErrorMgs = $scope.i18n.validation.province_length;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.province.$dirty = true;
            $scope.shopEditForm.province.$invalid = true;
            $scope.shopEditForm.province.$error.required = true;
            focus('province');
            return false;
        } else if($scope.store.zip == undefined || $scope.store.zip == '' || $scope.store.zip.length < 5 || $scope.store.zip.length > 5 ){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesszip;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.storezip.$dirty = true;
            $scope.shopEditForm.storezip.$invalid = true;
            $scope.shopEditForm.storezip.$error.required = true;
            focus('storezip');
            return false;
        } else if($scope.store.business_address == undefined || $scope.store.business_address == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeregaddress;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.businessaddress.$dirty = true;
            $scope.shopEditForm.businessaddress.$invalid = true;
            $scope.shopEditForm.businessaddress.$error.required = true;
            focus('businessaddress');
            return false;
        }  else if($scope.store.sale_country == undefined || $scope.store.sale_country == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_hqstorecountry;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.salecountry.$dirty = true;
            $scope.shopEditForm.salecountry.$invalid = true;
            $scope.shopEditForm.salecountry.$error.required = true;
            focus('salecountry');
            return false;
        } else if($scope.store.sale_region.id == undefined || $scope.store.sale_region.id == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_hqstoreregion;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.saleregion.$dirty = true;
            $scope.shopEditForm.saleregion.$invalid = true;
            $scope.shopEditForm.saleregion.$error.required = true;
            focus('saleregion');
            return false;
        } else if($scope.store.sale_city == undefined || $scope.store.sale_city == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_hqstorecity;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.salecity.$dirty = true;
            $scope.shopEditForm.salecity.$invalid = true;
            $scope.shopEditForm.salecity.$error.required = true;
            focus('salecity');
            return false;
        } else if($scope.store.sale_province == undefined || $scope.store.sale_province == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_hqstoreprovince;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.saleprovince.$dirty = true;
            $scope.shopEditForm.saleprovince.$invalid = true;
            $scope.shopEditForm.saleprovince.$error.required = true;
            focus('saleprovince');
            return false;
        } else if($scope.store.sale_province.length < 2 || $scope.store.sale_province.length > 2){
            $scope.createStoreErrorMgs = $scope.i18n.validation.hqprovincelength;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.saleprovince.$dirty = true;
            $scope.shopEditForm.saleprovince.$invalid = true;
            $scope.shopEditForm.saleprovince.$error.required = true;
            focus('saleprovince');
            return false;
        }else if($scope.store.sale_zip == undefined || $scope.store.sale_zip == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_hqstoreprovince;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.salezip.$dirty = true;
            $scope.shopEditForm.salezip.$invalid = true;
            $scope.shopEditForm.salezip.$error.required = true;
            focus('salezip');
            return false;
        } else if($scope.store.sale_zip.length < 5 || $scope.store.sale_zip.length > 5){
            $scope.createStoreErrorMgs = $scope.i18n.validation.hqprovincelength;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.salezip.$dirty = true;
            $scope.shopEditForm.salezip.$invalid = true;
            $scope.shopEditForm.salezip.$error.required = true;
            focus('salezip');
            return false;
        } else if($scope.store.sale_address == undefined || $scope.store.sale_address == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_hqstoreaddress;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.saleaddress.$dirty = true;
            $scope.shopEditForm.saleaddress.$invalid = true;
            $scope.shopEditForm.saleaddress.$error.required = true;
            focus('saleaddress');
            return false;
        } else if((document.getElementById("latitude").value) == undefined || (document.getElementById("latitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storelat;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if((document.getElementById("longitude").value )== undefined || (document.getElementById("longitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storelog;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if((document.getElementById("mapplace").value) == undefined || (document.getElementById("mapplace").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storemap;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.sale_email == undefined || $scope.store.sale_email == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_hqstoreemail;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.emailaddress.$dirty = true;
            $scope.shopEditForm.emailaddress.$invalid = true;
            $scope.shopEditForm.emailaddress.$error.required = true;
            focus('emailaddress');
            return false;
        } else if($scope.store.sale_phone_number == undefined || $scope.store.sale_phone_number == '' || isNaN($scope.store.sale_phone_number) == true){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_hqstorephone;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.salephone.$dirty = true;
            $scope.shopEditForm.salephone.$invalid = true;
            $scope.shopEditForm.salephone.$error.required = true;
            focus('salephone');
            return false;
        } else if($scope.store.repres_fiscal_code == undefined || $scope.store.repres_fiscal_code == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_legalTaxCode;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represfiscalcode.$dirty = true;
            $scope.shopEditForm.represfiscalcode.$invalid = true;
            $scope.shopEditForm.represfiscalcode.$error.required = true;
            focus('represfiscalcode');
            return false;
        } else if($scope.store.repres_first_name == undefined || $scope.store.repres_first_name == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_firstName;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represfirstname.$dirty = true;
            $scope.shopEditForm.represfirstname.$invalid = true;
            $scope.shopEditForm.represfirstname.$error.required = true;
            focus('represfirstname');
            return false;
        } else if($scope.store.repres_last_name == undefined || $scope.store.repres_last_name == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_lastName;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represlastname.$dirty = true;
            $scope.shopEditForm.represlastname.$invalid = true;
            $scope.shopEditForm.represlastname.$error.required = true;
            focus('represlastname');
            return false;
        } else if($scope.store.repres_place_of_birth == undefined || $scope.store.repres_place_of_birth == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_legalBirthPlace;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represdobplace.$dirty = true;
            $scope.shopEditForm.represdobplace.$invalid = true;
            $scope.shopEditForm.represdobplace.$error.required = true;
            focus('represdobplace');
            return false;
        } else if($scope.store.dobDay == undefined || $scope.store.dobDay == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntDd;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.dobday.$dirty = true;
            $scope.shopEditForm.dobday.$invalid = true;
            $scope.shopEditForm.dobday.$error.required = true;
            focus('dobday');
            return false;
        } else if($scope.store.dobMonth == undefined || $scope.store.dobMonth == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntMonth;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.dobmonth.$dirty = true;
            $scope.shopEditForm.dobmonth.$invalid = true;
            $scope.shopEditForm.dobmonth.$error.required = true;
            focus('dobmonth');
            return false;
        } else if($scope.store.dobYear == undefined || $scope.store.dobYear == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntYear;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.dobyear.$dirty = true;
            $scope.shopEditForm.dobyear.$invalid = true;
            $scope.shopEditForm.dobyear.$error.required = true;
            focus('dobyear');
            return false;
        } else if($scope.store.repres_email == undefined || $scope.store.repres_email == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_legalEmail;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represemail.$dirty = true;
            $scope.shopEditForm.represemail.$invalid = true;
            $scope.shopEditForm.represemail.$error.required = true;
            focus('represemail');
            return false;
        } else if($scope.store.repres_phone_number == undefined || $scope.store.repres_phone_number == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_legalPhone;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represphonenumber.$dirty = true;
            $scope.shopEditForm.represphonenumber.$invalid = true;
            $scope.shopEditForm.represphonenumber.$error.required = true;
            focus('represphonenumber');
            return false;
        } else if($scope.store.repres_address == undefined || $scope.store.repres_address == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntAddress;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represaddress.$dirty = true;
            $scope.shopEditForm.represaddress.$invalid = true;
            $scope.shopEditForm.represaddress.$error.required = true;
            focus('represaddress');
            return false;
        } else if($scope.store.repres_province == undefined || $scope.store.repres_province == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntProvince;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $scope.updateStart = false;
            $scope.shopEditForm.represprovince.$dirty = true;
            $scope.shopEditForm.represprovince.$invalid = true;
            $scope.shopEditForm.represprovince.$error.required = true;
            focus('represprovince');
            return false;
        } else if($scope.store.repres_province.length < 2 || $scope.store.repres_province.length > 2 ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntProvince;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $scope.updateStart = false;
            $scope.shopEditForm.represprovince.$dirty = true;
            $scope.shopEditForm.represprovince.$invalid = true;
            $scope.shopEditForm.represprovince.$error.required = true;
            focus('represprovince');
            return false;
        } else if($scope.store.repres_city == undefined || $scope.store.repres_city == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntCity;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $scope.updateStart = false;
            $scope.shopEditForm.represcity.$dirty = true;
            $scope.shopEditForm.represcity.$invalid = true;
            $scope.shopEditForm.represcity.$error.required = true;
            focus('represcity');
            return false;
        } else if($scope.store.repres_zip == undefined || $scope.store.repres_zip == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntZip;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $scope.updateStart = false;
            $scope.shopEditForm.represzip.$dirty = true;
            $scope.shopEditForm.represzip.$invalid = true;
            $scope.shopEditForm.represzip.$error.required = true;
            focus('represzip');
            return false; 
        } else if($scope.store.repres_zip.length < 5 || $scope.store.repres_zip.length > 5 ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntProvince;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $scope.updateStart = false;
            $scope.shopEditForm.represzip.$dirty = true;
            $scope.shopEditForm.represzip.$invalid = true;
            $scope.shopEditForm.represzip.$error.required = true;
            focus('represzip');
            return false;
        }else if($scope.store.dobYear != undefined || $scope.store.dobYear != ''){
            if($scope.store.dobDay.id >= 29 && $scope.store.dobMonth.id == 2){
                $scope.createStoreErrorMgs = $scope.i18n.shop_affiliation.detail.enter_correct_dob;
                $scope.createStoreError = true;
                $scope.createStoreLoader = false;
                $scope.updateStart = false;
                $scope.shopEditForm.dobmonth.$dirty = true;
                $scope.shopEditForm.dobmonth.$invalid = true;
                $scope.shopEditForm.dobmonth.$error.required = true;
                focus('dobmonth');
                return false;
            }
        } else if($scope.store.dobYear != undefined || $scope.store.dobYear != ''){
            var isLeap = new Date($scope.store.dobYear.id, 1, 29).getMonth() == 1;
            if(isLeap == false && $scope.store.dobDay.id >= 29 && $scope.store.dobMonth.id == 2){
                $scope.createStoreErrorMgs = $scope.i18n.shop_affiliation.detail.enter_correct_dob;
                $scope.createStoreError = true;
                $scope.createStoreLoader = false;
                $scope.updateStart = false;
                $scope.shopEditForm.dobyear.$dirty = true;
                $scope.shopEditForm.dobyear.$invalid = true;
                $scope.shopEditForm.dobyear.$error.required = true;
                focus('dobyear');
                return false;
            }
        }
        var dd = $scope.store.dobDay.id;
        var month = $scope.store.dobMonth.value +'-';
        var year = $scope.store.dobYear.id +'-';
        $scope.store.dob = year.concat(month,dd);

        opts.name = $scope.store.name;
        opts.business_name = $scope.store.business_name;
        opts.legal_status = $scope.store.legal_status.id;
        opts.vat_number = $scope.store.vat_number;
        opts.fiscal_code = $scope.store.fiscal_code;
        opts.email = angular.lowercase($scope.store.email);
        opts.phone = $scope.store.phone;
        opts.iban = $scope.store.iban;
        opts.sale_catid = $scope.store.storecategory.id;
        
        if($scope.store.subcategory != undefined || $scope.store.subcategory.id != '0') {
            opts.sale_subcatid = $scope.store.subcategory.id;
        } else {
            opts.sale_subcatid = null;
        }
        
        if($scope.keywordList != undefined || $scope.keywordList.length != '0') {
            opts.shop_keyword = $scope.keywordList.join();
        } else {
            opts.shop_keyword = []; 
        }
        opts.description = $scope.store.description;
        opts.business_country = $scope.store.regOfficeCountry.id;
        opts.business_region = $scope.store.business_region.id;
        opts.business_city = $scope.store.business_city;
        opts.province = $scope.store.province;
        opts.zip = $scope.store.zip;
        opts.business_address = $scope.store.business_address;
        
        opts.sale_country = $scope.store.sale_country.id;
        opts.sale_region = $scope.store.sale_region.id;
        opts.sale_city = $scope.store.sale_city;
        opts.sale_province = $scope.store.sale_province;
        opts.sale_zip = $scope.store.sale_zip;
        opts.sale_address = $scope.store.sale_address;
        opts.map_place = document.getElementById("mapplace").value;
        opts.latitude = document.getElementById("latitude").value; 
        opts.longitude = document.getElementById("longitude").value; 
        opts.sale_map = document.getElementById("mapplace").value;
        opts.sale_email = angular.lowercase($scope.store.sale_email);
        opts.sale_phone_number = $scope.store.sale_phone_number;
        opts.repres_fiscal_code = $scope.store.repres_fiscal_code;
        opts.repres_first_name = $scope.store.repres_first_name;
        opts.repres_last_name = $scope.store.repres_last_name;
        opts.repres_place_of_birth = $scope.store.repres_place_of_birth;
        opts.repres_dob = $scope.store.dob;
        opts.repres_email = angular.lowercase($scope.store.repres_email);
        opts.repres_phone_number = $scope.store.repres_phone_number;
        opts.repres_address = $scope.store.repres_address;
        opts.repres_province = $scope.store.repres_province;
        opts.repres_city = $scope.store.repres_city;
        opts.repres_zip = $scope.store.repres_zip;
        opts.referral_id = $scope.store.referral_info.id;
        opts.call_type = 3;
        opts.business_type = 'not in current use';
        opts.sale_description = 'not in current use';
        opts.allow_access = $scope.store.is_allowed;
        $scope.createStoreErrorMgs = ''; 
        StoreService.updateStore(opts, function(data) {
            if(data.code == 101) {
                $scope.updateStart = false;
                $scope.showEditForm = false;
                $scope.createStoreLoader = false;
                $scope.createGroupSuccess = true;
                $scope.createStoreSuccessMgs = $scope.i18n.albums.update_sucess;
                $timeout(function(){
                   $scope.createStoreSuccessMgs = ''; 
                }, 15000);
                $location.path("/shop/"+$scope.store.id+"/contract");
            } else if(data.code == 137){   
                $scope.createStoreErrorMgs = $scope.i18n.validation.broker_not_exists;
                $scope.updateStart = false;
                $scope.commonError = true;
                $scope.createStoreLoader = false;
                $timeout(function(){
                    $scope.commonError = false;
                }, 3000);
            } else if(data.code == 100){
                $scope.createStoreErrorMgs = $scope.i18n.validation.missed_param;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.updateStart = false;
                $scope.commonError = true;
                $scope.createStoreLoader = false;
                $timeout(function(){
                    $scope.commonError = false;
                }, 3000);
            } else if(data.code == 90){    
                $scope.createStoreErrorMgs = $scope.i18n.validation.account_inactive;
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.commonError = true;
                $scope.createStoreLoader = false;
                $timeout(function(){
                    $scope.commonError = false;
                }, 3000);
            } else if(data.code == 91){
                $scope.createStoreErrorMgs = $scope.i18n.validation.vat_exists;    
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.vatNumberInvalid = true;
                $timeout(function(){
                    $scope.vatNumberInvalid = false;
                }, 3000);
                focus('vatnumber');
            } else if(data.code == 126){
                $scope.createStoreErrorMgs = $scope.i18n.validation.invalid_store_forum_type;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.commonError = true;
                $scope.createStoreLoader = false;
                $timeout(function(){
                    $scope.commonError = false;
                }, 3000);
            } else if(data.code == 500){
                $scope.createStoreErrorMgs = $scope.i18n.validation.permission_denied;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.commonError = true;
                $scope.createStoreLoader = false;
                $timeout(function(){
                    $scope.commonError = false;
                }, 3000);
            } else if(data.code == 89){
                $scope.createStoreErrorMgs = $scope.i18n.validation.error_occured;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.commonError = true;
                $scope.createStoreLoader = false;
                $timeout(function(){
                    $scope.commonError = false;
                }, 3000);
            } else if(data.code == 165){
                $scope.createStoreErrorMgs = $scope.i18n.validation.vat_valid;    
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.vatNumberInvalid = true;
                $timeout(function(){
                    $scope.vatNumberInvalid = false;
                }, 3000);
                focus('vatnumber');
            } else if(data.code == 166){
                $scope.createStoreErrorMgs = $scope.i18n.validation.iban_valid;    
                $scope.createStoreError = false;
                $scope.updateStart = false;
                $scope.ibanNumberInvalid = true;
                $timeout(function(){
                    $scope.ibanNumberInvalid = false;
                }, 3000);
                focus('iban');
            } else {
                $scope.createStoreErrorMgs = data.message;  
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.commonError = true;
                $scope.createStoreLoader = false;
                $timeout(function(){
                    $scope.commonError = false;
                }, 3000);
            }
        });
    };

    $scope.searchCategory = function(currentLanguage){
        var opts = {};
        opts.lang_code = currentLanguage;
        opts.session_id = APP.currentUser.id;
        $scope.cancelCategoryRequest = false;
        opts.session_id = APP.currentUser.id;
        ProfileService.searchCatagory(opts,function(data){
            if(data.code === 101 && data.message === 'SUCCESS'){
                if(data.data.length > 0){
                    $scope.categories = data.data;
                }
            }
        });
    };
    $scope.searchCategory($scope.currentLanguage);

    // Search keyword for particular catagory
    var currentTimeout = null;
    var DELAY_TIME_BEFORE_POSTING = 300;

    $('#categoryKeyword').keypress(function(event) {
        if(currentTimeout) {
            $timeout.cancel(currentTimeout);
        }
        currentTimeout = $timeout(function(){
            if(event.which != 13){ 
                $scope.searchKeyword();
            }
        }, DELAY_TIME_BEFORE_POSTING)
    });

    $scope.keywords = [];
    $scope.searchKeyword = function(){
        var opts = {};
        opts.category_id = $scope.store.storecategory.id.toString();
        opts.keyword = $scope.store.keywords;
        opts.session_id = APP.currentUser.id;
        $scope.cancelKeywordRequest = false;
        $scope.showCatKeyLoading = true;
        ProfileService.searchCatagoryKeyword(opts,function(data){
            $scope.showCatKeyLoading = false;
            if(data.code === 101 && data.message === "SUCCESS"){
                if($scope.cancelKeywordRequest === false){
                    $scope.keywords =  data.data.keyword;
                }
            }
        });
    };

    $scope.keywordIndex = -1;
    $scope.keywordKeyDown=function(event){
        if(event.keyCode===40){
            event.preventDefault();
            if($scope.keywordIndex+1 !== $scope.keywords.length){
                $scope.keywordIndex++;
            }
        }
        else if(event.keyCode===38){
            event.preventDefault();
            if($scope.keywordIndex-1 !== -1){
                $scope.keywordIndex--;
            }
        }
        else if(event.keyCode===13){
           if($scope.keywords[$scope.keywordIndex] === undefined ){
               $scope.storeKeyword($scope.categoryKeyword);
           }else{
               $scope.storeKeyword($scope.keywords[$scope.keywordIndex]);
           }
        }
    };

    // Clear keyword List
    $scope.cancelKeywordRequest = false;
    $scope.clearKeyList = function(){
        $scope.cancelKeywordRequest = true;
        $timeout(function(){
            $scope.keywords = [];
        },500);
    }

    // Store Keyword
    $scope.categoryKeyword = "";
    $scope.keywordList = [];
    $scope.storeKeyword = function(index){
        $scope.keywords = [];
        $scope.keywordIndex = -1;
        $scope.categoryKeyword = "";
    //  $scope.categoryKeyword = index.name;
        if( typeof(index) === 'object'){
            if($scope.keywordList.indexOf(index.name) === -1){
                $scope.keywordList.push(index.name);
            }
        }else{
            if(index === '' || index === undefined ){
                return false;
            }else{
                if($scope.keywordList.indexOf(index) === -1){
                    $scope.keywordList.push(index);
                }
            }
        }
        
    };

    //Clear keyword array List
    $scope.clearKeywordList = function(){
        $timeout(function(){
            $scope.keywords = [];
        },500);
        
    };

    //Remove keyword from the array
    $scope.removeKeyword = function(index){
        var keyIndex = $scope.keywordList.indexOf(index);
        $scope.keywordList.splice(index,1);
    };
}]);

//Redirect user to shop edit when user loggedIn
app.controller('RedirectToShopEdit', ['$cookieStore', '$rootScope', 'ipCookie', '$scope', '$http', '$routeParams', '$location', '$timeout', 'StoreService', 'ProfileService', 'focus', function($cookieStore, $rootScope, ipCookie, $scope, $http, $routeParams, $location, $timeout, StoreService, ProfileService, focus) {
    if( ipCookie("loggedInUser") || ipCookie("access_token")) {
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_type = 2; 
        opts.limit_start = 0;
        opts.limit_size = 1;
        opts.lang_code = $scope.currentLanguage;
        opts.filter_type = 1;
        StoreService.getStore(opts, function(data) {
            if(data.code === 101) {
                $location.path('/edit/shop/'+data.data.stores[0].id);
            } else {
                $location.path('/');   
            }
        });
    } else {
        $location.path('/');
    }
}]);

//Redirect user to shop edit when user loggedIn
app.controller('AutoLoginFromMobileApp', ['$cookieStore', '$rootScope', 'ipCookie', '$scope', '$http', '$routeParams', '$location', '$timeout', 'ProfileService', 'UserService', function($cookieStore, $rootScope, ipCookie, $scope, $http, $routeParams, $location, $timeout, ProfileService, UserService) {
    $scope.userToken = $routeParams.tokenId;
    $scope.userId = $routeParams.userId;
    $rootScope.currentUser = {};
    APP.accessToken = $routeParams.tokenId;
    var opts3 = {};
    opts3.user_id = $routeParams.userId;
    opts3.profile_type = 4;
    UserService.getBasicProfile(opts3, function(data) {
        if(data.code == 101){
            $rootScope.currentUser = {
                "id":data.data.user_id,
                "username":data.data.email,
                "email":data.data.email,
                "enabled":true,
                "date_of_birth":data.data.date_of_birth,
                "firstname":data.data.firstname,
                "lastname":data.data.lastname,
                "gender":data.data.gender,
                "country":data.data.country_code,
                "profile_img":data.data.profile_img.original,
                "profile_img_thumb":data.data.profile_img.thumb,
                "cover_img":data.data.profile_cover_img.original,
                "cover_img_thumb":data.data.profile_cover_img.thumb,
                "citizen_profile":data.data.citizen_profile,
                "broker_profile":data.data.broker_profile,
                "store_profile":data.data.store_profile,
                "broker_profile_active":0,
                "current_language":data.data.current_language
            };
            APP.currentUser = $rootScope.currentUser;
            ipCookie("loggedInUser", $rootScope.currentUser, { expires: 365 });
            ipCookie("access_token", APP.accessToken, { expires: 3000 });
            $rootScope.isLoggedIn = true;
            $scope.selectlanguage(data.data.current_language);
            $rootScope.currentUser.basicProfile = data.data;

            //get users credit and the total income 
            var opts4 = {};
            opts4.idcard = $rootScope.currentUser.basicProfile.user_id;
            UserService.getCreditAndIncome(opts4, function(data) {
                var currentCredit = {};
                if(data.code == 101) {
                    currentCredit.totalCredit = (data.data.saldoc/1000000) ;
                    currentCredit.totCreditMicro = (data.data.saldorm) + (data.data.saldorc) ;
                    currentCredit.totalIncome = data.data.tot_income;
                    currentCredit.totalIncomeShow = data.data.tot_income;
                    $rootScope.currentUser.creditAndIncome = currentCredit;
                }
                else{
                    $rootScope.currentUser.creditAndIncome = data.data;
                }
            });

            $rootScope.allFriendTotal = 0;
            $rootScope.getCountOfAllTypeNotificaton();
            $scope.$parent.loggedIn = true;
            $location.path('/offer/1');
        } else {
           $location.path('/'); 
        }
    });

}]);
app.controller('shopOfferController', ['$scope', '$routeParams', 'OfferService', 'StoreService', '$timeout', function($scope, $routeParams, OfferService, StoreService, $timeout) {
	$scope.isLoadingwallet = false;
	$scope.storeId = $routeParams.id;
	$scope.citizenIncome = 0;
	$scope.gridActive 	 = '';
  	$scope.listActive 	 = 'active';
  	$scope.offer_type	 = 'card';
  	$scope.firstPage  	 = 10;
    $scope.itemsPerPage  = 10;
    $scope.range = []; 
    $scope.shop_id = [];

	$scope.getCitizenIncome = function(){
        var opts = {};
            opts["$collection"] = "sixc_bucks";
            opts["$filter"] = {"citizen_id" : String(APP.currentUser.id)};
            opts["$group"] = {"_id":null,"amount":{"$sum":"$amount"},"debit":{"$sum":"$debit"},"credit":{"$sum":"$credit"}};

        OfferService.getApplaneData(opts, function(data){
            if(data.status === "ok" && data.code === 200){
                if(data.response.result.length > 0){
                    if(data.response.result[0].amount != null){
                        $scope.citizenIncome = data.response.result[0].amount;
                    }
                }
            }
        });
    };
    $scope.getCitizenIncome();

    $scope.getcount = function(itemsPerPage){
        var opt = {};
            opt["$collection"] = "sixc_offers";
            var filter = {};
                filter["offer_type"] = $scope.offer_id;
                filter["shop_id"] = $scope.storeId;
            opt["$filter"] = filter;
            opt["$group"] = {"count":{"$sum":1},"_id":null};
            OfferService.getApplaneData(opt, function(data){
                if(data.status === "ok" && data.code === 200){
                    if(data.response.result.length > 0){
                        $scope.totalItems = Math.ceil(data.response.result[0].count/itemsPerPage); 
                        $scope.range = [];  
                        for (var i=1; i<=$scope.totalItems; i++) {
                            $scope.range.push(i);
                        }             
                    }
                }
            });
    };

    $scope.frindBoughtCount = function() {       
        var opts = {};
        opts = {"function":"UtilityService.friendsShoppingCount", "parameters":[{"asArray":true,"shop_id":$scope.shop_id,"citizen_id":String(APP.currentUser.id)}]}
        //calling the comment service to delete the selected comment 
        StoreService.frindboughtcount(opts, function(data){
            if(data.response === undefined || data.response === ''){
                $scope.frcount = [];
            } else {
                $timeout(function() {
                    $scope.$apply(function(){
                        $scope.frcount = data.response;   
                    });    
                }, 0);   
            }
        });
    };

    var option = {};
        option["$collection"] = "sixc_offers";
    
    $scope.getlistingData = function(itemsPerPage){
        $scope.range = []; 
        $scope.shop_id = [];
        $scope.noResultFound = false;
        $scope.offerlodar  = true;
        $scope.offerlistingObject = [];
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        var filter  = {};
            filter["offer_type"] = $scope.offer_id;
            filter["shop_id"] = $scope.storeId;
            filter["start_date"] = {"$lte":"$$CurrentDate"};
            filter["end_date"]   = {"$gte":"$$CurrentDate"};
        option["$limit"]   = itemsPerPage;
        option["$skip"]    = limit_start;
        option["$filter"]  = filter;

        OfferService.getApplaneData(option, function(data){
            $scope.offerlodar  = false;
            if(data.status === "ok" && data.code === 200){
                if(data.response.result.length > 0){
                    $scope.noResultFound = false;
                    $scope.offerlistingObject = data.response.result;
                    $scope.offerlistingObject.forEach(function(val,index){
                        $scope.shop_id.push(val.shop_id._id);
                    });
                    $scope.frindBoughtCount();
                    $scope.getcount(itemsPerPage);
                }else{
                    $scope.noResultFound = true;
                }
            }else{
               $scope.noResultFound = true;
            }
        });
    };

    $scope.OfferChange = function(type){
    	$scope.offer_type = type;
        if(type === 'card'){
            $scope.offer_id  = "551ce49e2aa8f00f20d93295";
        }else{
           $scope.offer_id   = "551ce49e2aa8f00f20d9328f";
        }
        $scope.getlistingData($scope.itemsPerPage);
    };

    $scope.OfferChange($scope.offer_type);
	
    $scope.getfrndlist = function(event,shopid){    
        $scope.friendlist = [];
        $scope.nofndlist = false;
        if( $(event.target).nextAll('ul.friend-list:first').is(':visible')){
             $(event.target).nextAll('ul.friend-list:first').hide();
        }else{
            $scope.frndlistloader = true;
            $(event.target).nextAll('ul.friend-list:first').show();
            var formData = {};
                formData.user_id = APP.currentUser.id;
                formData.shop_id = shopid;
            $scope.friendlist = [];
            //calling the comment service to delete the selected comment 
            StoreService.getfriendboughtonstores(formData, function(data){
                $scope.frndlistloader = false;
                if(data.code === 101 && data.data.friends.length > 0) {
                    $scope.nofndlist = false;
                    $scope.friendlist = data.data.friends;
                }else{
                    $scope.nofndlist = true;
                }
            });
        }
    };

    $scope.changePageMore = function(pageNo) {
        $scope.currentPage = pageNo;
        $scope.getlistingData($scope.itemsPerPage);
    };
    
    $scope.calculateprice = function(val,dis){
        var halfprice = val/2 ;
        var obc = {};
           obc.price_purchase = (val - (val * dis)/100); 
           obc.price_sixth    = halfprice;
        if($scope.citizenIncome < halfprice){
           obc.price_sixth    = $scope.citizenIncome; 
        }
           obc.onlyForYou    = obc.price_purchase - obc.price_sixth;
        return obc;
    };

    $scope.changeView = function(layout) {
        if(layout == 'grid'){
            $scope.gridActive = 'active'; 
            $scope.listActive = ''; 
        }else if(layout == 'list'){
            $scope.listActive = 'active'; 
            $scope.gridActive = '';
        }
    };

    $scope.setPage = function(number) {
        $scope.itemsPerPage = number;
        $scope.currentPage = 1;
        $scope.getlistingData($scope.itemsPerPage);
    };

    $scope.prevPageDisabled = function() {
        return $scope.currentPage === 1 ? "disabled" : "";
    };

    $scope.prevPage = function() {
        if ($scope.currentPage > 1) {
            $scope.currentPage--;
        }
        $scope.getlistingData($scope.itemsPerPage);
    };

    $scope.nextPage = function() {
        if ($scope.currentPage < $scope.totalItems) {
            $scope.currentPage++;
        }
        $scope.getlistingData($scope.itemsPerPage);
    };

    $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.totalItems ? "disabled" : "";
    };

    $scope.paginate = function() {
       $scope.currentPage = 1; 
    }

    $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.totalItems ? "disabled" : "";
    };

    $scope.buyCoupon = function(index, id){
        $scope['buyCouponbtn' + index]   = 1;
        $scope['buyCouponloder' + index] = true;

        var opts = {};
           opts = {"function" : "ApplyCouponBL.applyCoupon","parameters":[{"offer_id": String(id),"citizen_id":String(APP.currentUser.id)}]};
      
        OfferService.getApplaneInvoke(opts, function(data){
            if(data.response === undefined || data.response === ''){
                $scope['buyCouponErr' + index] = true;
            }else{
                if(data.status === "ok" && data.code === 200){
                    $scope['buyCouponSuccess' + index] = true;
                }else if (data.response === "Coupon is already purchased"){
                    $scope['buyCouponalready' + index] = true;
                }else{
                    $scope['buyCouponErr' + index] = true;
                }
            }
            $scope['buyCouponloder' + index] = false;
            $timeout(function() {
                $scope['buyCouponbtn' + index]     = 0;
                $scope['buyCouponloder' + index]   = false;
                $scope['buyCouponSuccess' + index] = false;
                $scope['buyCouponErr' + index]     = false;
                $scope['buyCouponalready' + index] = false;    
            }, 8000); 
        });
    };


}]);
app.controller('ShopTransactionController', ['$timeout','$scope', '$http', 'ShopTransactionService','StoreService', '$routeParams', 'focus', function ($timeout, $scope, $http, ShopTransactionService, StoreService, $routeParams, focus) {
	$scope.shopListLoader = true;
	$scope.isLoadTransaction =  false;
	$scope.isLoadMore = false;
	$scope.transactioStoreList = [];
	$scope.transShopId = $routeParams.shopId;
	$routeParams.id = $routeParams.shopId;
	$scope.storeMainId = $routeParams.id;
	$scope.transUserId = '';
	$scope.transAmount = '';
	$scope.errorMsg = '';
	$scope.errorCls = '';
	$scope.inValidMsg = '';
	$scope.totalSize = 0;
	$scope.myRes = 1;
	$scope.creditAmount = {};
	$scope.transactionSelect = {};
	$scope.totalSize = 0;
    $scope.firstPage = APP.store_transaction.end;
    $scope.itemsPerPage = APP.store_transaction.end;
    $scope.currentPage = 1;
    $scope.range = [];
    $scope.payRequest = false;
    $scope.approveReq = false;
        
    $scope.setStoreId = function(storeId){
		$scope.transShopId = storeId;
	}

	//calling function to get customer transaction for the open shop
	$scope.transactionlist= {};
	$scope.transactionObjectList = [];
	$scope.hasNext = true;
	$scope.getTransactions = function(itemsPerPage) {
		$scope.transactionSelect = {};
		$scope.creditAmount.amount = '';
		$scope.step = 1;
		$scope.notFound = false;
		$scope.errorMsg = '';
		$scope.errorCls = '';
		var limit_size = itemsPerPage;
		var limit_start = ($scope.currentPage-1)*itemsPerPage; 
		if($scope.transShopId == ''){
			$scope.errorMsg = $scope.i18n.shop_transaction.shop_not_selected;
			return false;
		}
		var opts = {};
		$scope.requestSending = true;
		if($scope.transactionlist.searchKey !== undefined  && $scope.transactionlist.searchKey !== ''){
			opts = {"$collection":APP.applaneTables.transaction,"$parameters":{},"$filter":{"$or":[{"citizen_id.name":{"$regex":".*"+$scope.transactionlist.searchKey+".*", $options: 'i'}},{"citizen_id._id":{"$regex":".*"+$scope.transactionlist.searchKey+".*", $options: 'i'}}],"status":{"$in":["Initiated","Pending"]},"shop_id._id":$scope.transShopId},"$limit":limit_size,"$skip":limit_start, "$sort":{"date":-1}};
		} else {
			opts = {"$collection":APP.applaneTables.transaction,"$parameters":{},"$filter":{"status":{"$in":["Pending","Initiated"]},"shop_id._id":$scope.transShopId},"$limit":limit_size,"$skip":limit_start, "$sort":{"date":-1}};
		}
		if ($scope.myRes === 1) {
			$scope.myRes = 0;
			ShopTransactionService.getTransactions(opts, function(data) {
				$scope.requestSending = false;
				$scope.isLoadMore = false;
				if(data.code == 200) {
					if(data.response.result !== undefined || data.response.result.length !== 0){
						if($scope.isLoadTransaction == false){
							$scope.transactionObjectList = [];
						}
						
						var tempopts = {};
	                    if($scope.transactionlist.searchKey !== undefined  && $scope.transactionlist.searchKey !== ''){
	                    	tempopts = {"$collection":APP.applaneTables.transaction,"$filter":{"$or":[{"citizen_id.name":{"$regex":".*"+$scope.transactionlist.searchKey+".*", $options: 'i'}},{"citizen_id._id":{"$regex":".*"+$scope.transactionlist.searchKey+".*", $options: 'i'}}],"status":{"$in":["Pending","Initiated"]},"transaction_type_id":"553209267dfd81072b176bbc","shop_id._id":$scope.transShopId},"$group":{"count":{"$sum":1},"_id":null}};
	                    } else {
	                    	tempopts = {"$collection":APP.applaneTables.transaction,"$filter":{"status":{"$in":["Pending","Initiated"]},"transaction_type_id":"553209267dfd81072b176bbc","shop_id._id":$scope.transShopId},"$group":{"count":{"$sum":1},"_id":null}};
	                    }
	                    
	                    ShopTransactionService.getTransactions(tempopts, function(data) {
	                    	if(data.code === 200) {
	                    		$scope.requestSending = false;
	                    		var count = 0;
	                    		if(data.response.result.length !== 0 && data.response.result !== undefined) {
	                    			count = data.response.result[0].count;
	                    		} 
                    			$scope.totalItems = Math.ceil(parseInt(count)/itemsPerPage); 
			                    $scope.range = [];  
			                    for (var i=1; i<=$scope.totalItems; i++) {

			                        $scope.range.push(i);
			                 	} 
	                    	}else if(data.status === "error") {
								$scope.step = 1;
					        	$scope.errorMsg = $scope.i18n.shop_transaction.txn_server_error;
								$scope.isLoadMore = false;
					            $scope.notFound = true;
					            $scope.requestSending = false;
					        }
	                    });
	                    $scope.transactionObjectList = data.response.result;
	                    $scope.isLoadTransaction = false;
					}
                    $scope.hasNext = data.response.dataInfo.hasNext;
                    $scope.myRes = 1;
				} else if(data.status === "error") {
					$scope.step = 1;
		        	$scope.errorMsg = $scope.i18n.shop_transaction.txn_server_error;
					$scope.isLoadMore = false;
		            $scope.notFound = true;
		            $scope.requestSending = false;
		        }

			});
		}
	}
	//calling 
	$scope.getTransactions($scope.itemsPerPage);
	
	//back to previous
	$scope.back = function() {
		$scope.errorMsg = '';
		$scope.errorCls = '';
		$scope.inValidMsg = '';
		$scope.step--;
	}

	// loading more transaction list
	$scope.loadMoreTransaction = function() {
	    $scope.isLoadTransaction = true;
        $scope.isLoadMore = true;
        $scope.getTransactions($scope.itemsPerPage);
         
    };

    // loading more transaction list
	$scope.searchTransaction = function() {
		$scope.hasNext =  true;
		$scope.currentPage = 1;
        $scope.transactionObjectList = [];
        $scope.getTransactions($scope.itemsPerPage);
        
    };

    // loading more transaction list
	$scope.getTransactionList = function() {
		$scope.hasNext =  true;
		$scope.currentPage = 1;
		$scope.transactionlist.searchKey = '';
		$scope.transactionObjectList = [];
        $scope.getTransactions($scope.itemsPerPage);
        
    };

    //function to get the transaction detail window
	$scope.getTransactionDetail = function() {
		$scope.notFound = false;
		$scope.errorMsg = '';
		$scope.errorCls = '';
		$scope.transactionObject = [];
		
		if($scope.transactionSelect.id === '' || $scope.transactionSelect.id === undefined){
			$scope.step = 1;
			$scope.errorMsg = $scope.i18n.shop_transaction.transaction_not_select;
			return false;
		} 
		$scope.requestSending = true;
		var opts = {};
		opts = {"$collection":APP.applaneTables.transaction,"$parameters":{},"$filter":{"_id":$scope.transactionSelect.id}}
		
		ShopTransactionService.getTransactionDetail(opts, function(data) {
			if(data.code === 200) {
				$scope.transactionObject = data.response.result[0];
				if($scope.transactionObject.status === 'Pending'){ // status pending from shop side
					$scope.step = 3;
				} else if($scope.transactionObject.status === 'Approved' || $scope.transactionObject.status === 'Rejected'){ // status Rejected or approved from shop side
					$scope.step = 6; //show only detail not any action can taken
				} else {
					$scope.step = 2;
				}
				$scope.requestSending = false;
			} else if(data.code === 300) {
				$scope.requestSending = false;
				$scope.transactionObject = {};
				$scope.errorMsg = $scope.i18n.shop_transaction.missed_parameter;
			} else if(data.status === "error") {
				$scope.step = 1;
	        	$scope.transactionObject = {};
				$scope.errorMsg = $scope.i18n.shop_transaction.txn_server_error;
				$scope.isLoadMore = false;
	            $scope.notFound = true;
	            $scope.requestSending = false;
	        }
		});
		
	};


    //function to accepte the payment amount
    $scope.paymentFormSubmitted = false;
	$scope.payAmount = function() {
		$scope.paymentFormSubmitted = true;
		$scope.payRequest = true;
		$scope.errorMsg = '';
		$scope.errorCls = '';
		$scope.inValidMsg = '';
		if($scope.creditAmount.amount === '' || $scope.creditAmount.amount === undefined){
			$scope.errorMsg = '';
			$scope.errorCls = '';
			$scope.inValidMsg = '';
			var regex = new RegExp(/^([0-9\.]+)$/);
			var tempReg =  new RegExp(/^\d{0,4}(\d\.\d?|\.\d)?\d?$/);
			if($scope.creditAmount.amount == '' || $scope.creditAmount.amount == undefined){
			$scope.step = 2;
			$scope.errorCls = 'has-error';
			$scope.inValidMsg = $scope.i18n.shop_transaction.enter_amount;
			$scope.payRequest = false;
			focus('payamount');
			return false;
			} else if (!regex.test($scope.creditAmount.amount)) {
			$scope.step = 2;
			$scope.errorCls = 'has-error';
			$scope.payRequest = false;
			focus('payamount');
			$scope.inValidMsg = $scope.i18n.shop_transaction.decimal_digit_only;
			return false;
			} else if (!tempReg.test($scope.creditAmount.amount)) {
			$scope.step = 2;
			$scope.errorCls = 'has-error';
			$scope.payRequest = false;
			focus('payamount');
			$scope.inValidMsg = $scope.i18n.shop_transaction.decimal_number_only;
			return false;
			}
		} else {
			$scope.requestSending = false;
			if($scope.transactionObject.do_transaction === "With Point") {
				opts = [{"$update":[{"_id":$scope.transactionSelect.id,"$set":{"transaction_value":$scope.creditAmount.amount,"status":"Pending"}}],"$collection":APP.applaneTables.transaction,"$fields":{"discount_details":1,"payble_value":1,"shot_value":1,"coupon_value":1,"dp_value":1,"upto_50_value":1,"new_upto_50_value":1,"upto_100_value":1}}];
			} else if($scope.transactionObject.do_transaction === "Without Point") {
				opts = [{"$update":[{"_id":$scope.transactionSelect.id,"$set":{"transaction_value":$scope.creditAmount.amount,"status":"Pending"}}],"$collection":APP.applaneTables.transaction}];
			}
			ShopTransactionService.updateTransactionObject(opts, function(data) {
				$scope.creditAmount.amount = undefined;
				if(data.code === 200) {
					$scope.payRequest = false;
					var tempopts = {};
					tempopts = {"$collection":APP.applaneTables.transaction,"$parameters":{},"$filter":{"_id":$scope.transactionSelect.id}}
					$scope.getTransactionDetail();
				} else if(data.status === "error") {
					$scope.step = 2;
		        	$scope.transactionCreditObject = {};
					$scope.errorMsg = $scope.i18n.shop_transaction.txn_server_error;
					$scope.notFound = true;
		            $scope.requestSending = false;
		            $scope.payRequest = false;
		        }
			});
		}
	};


	
	//opening transaction detal when coming from notification
	var txnObj = ShopTransactionService.getTransactionTab();
	if(txnObj.hasOwnProperty('tab')&&txnObj.hasOwnProperty('txnId')) {
		$scope.step = txnObj.tab;
		$scope.transactionSelect.id = txnObj.txnId;
		ShopTransactionService.setTransactionTab({});
		$scope.getTransactionDetail();
	} else {
		$scope.step = 1;
		$scope.transTransactionId = '';
	}

	
	/*calling approve credit service to payment in final stage
	* take response 1 for accept 2 for deny
	*/
	var userResponse = '';
	$scope.approveCredit = function(userResponse) {
		$scope.transactionApproveObject = {};
		$scope.approveReq = true;
		userResponse = userResponse;
		if(userResponse === '' || userResponse === undefined){
			$scope.step = 3;
			$scope.errorMsg = $scope.i18n.shop_transaction.no_response;
			return false;
		}
		$scope.requestSending = true;
		$scope.step = 3;
		var opts = {};
		if($scope.transactionObject.do_transaction === "With Point") {
			opts=[{"$update":[{"_id":$scope.transactionObject._id,"$set":{"status":$scope.TransResponse}}],"$collection":APP.applaneTables.transaction,"$fields":{"_id":1,"discount_details":1,"payble_value":1,"shot_value":1,"coupon_value":1,"dp_value":1,"upto_50_value":1,"new_upto_50_value":1,"upto_100_value":1}}];
		} else if($scope.transactionObject.do_transaction === "Without Point") {
			opts=[{"$update":[{"_id":$scope.transactionObject._id,"$set":{"status":$scope.TransResponse}}],"$collection":APP.applaneTables.transaction,"$fields":{"_id":1,"payble_value":1}}];
		}
		ShopTransactionService.updateTransactionObject(opts, function(data) {
			$scope.approveReq = false;
			if(data.code == 200) {
				var tempopts = {};
				tempopts = {"$collection":APP.applaneTables.transaction,"$parameters":{},"$filter":{"_id":data.response.sixc_transactions.$update[0]._id}}
			
				ShopTransactionService.getTransactionDetail(tempopts, function(data) {
					if(data.code == 200) {
						$scope.transactionApproveObject = data.response.result[0];
						if(userResponse === 1) {
							$scope.requestSending = false;
							$scope.step = 4;
						} else if(userResponse === 2){
							$scope.requestSending = false;
							$scope.step = 5;
						}	
					} else if(data.status == "error") {
						$scope.step = 1;
			        	$scope.transactionObject = {};
						$scope.errorMsg = $scope.i18n.shop_transaction.txn_server_error;
						$scope.notFound = true;
						$scope.requestSending = false;	
			        }
				});
			} else if(data.status === "error") {
				$scope.step = 3;
	        	$scope.transactionApproveObject = {};
				$scope.errorMsg = $scope.i18n.shop_transaction.txn_server_error;
				$scope.notFound = true;
				$scope.requestSending = false;	
	        }
		});
	};

	//cancel transaction in progess window
	$scope.cancelTransaction = function() {
		$scope.errorMsg = '';
		$scope.errorCls = '';
		$scope.TransResponse = "Rejected";
		$scope.approveCredit(2); //2 for cancel
	}

	//approve transaction in progess window
	$scope.confirmTransaction = function() {
		$scope.errorMsg = '';
		$scope.errorCls = '';
		$scope.TransResponse = "Approved";
		$scope.approveCredit(1); //1 for cancel
	}

    $scope.changePageMore = function(pageNo) {
        $scope.currentPage = pageNo;
        $scope.loadMoreTransaction();
    };

    $scope.prevPage = function() {
        if ($scope.currentPage > 1) {
            $scope.currentPage--;
        }
        $scope.loadMoreTransaction();
    };

    $scope.prevPageDisabled = function() {
        return $scope.currentPage === 1 ? "disabled" : "";
    };

    $scope.nextPage = function() {
        if ($scope.currentPage < $scope.totalItems) {
            $scope.currentPage++;
        }
       $scope.loadMoreTransaction();
    };

    $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.totalItems ? "disabled" : "";
    };

    $scope.setPage = function(number) {
        $scope.itemsPerPage = number;
        $scope.currentPage = 1;
        $scope.loadMoreTransaction($scope.itemsPerPage);
    };
}]);
app.controller('ShopTransactionHistoryController',['$timeout','$scope', '$http', 'ShopTransactionService','StoreService', '$routeParams', function ($timeout, $scope, $http, ShopTransactionService, StoreService, $routeParams) {
	$scope.step = 1;
	$scope.shopListLoader = true;
	$scope.isLoadTransaction =  false;
	$scope.transactionHistoryObjectList = [];
	$scope.transShopId = $routeParams.shopId;
	$routeParams.id = $routeParams.shopId;
	$scope.storeMainId = $routeParams.id;
	$scope.transUserId = '';
	$scope.errorMsg = '';
	$scope.totalSize = 0;
	$scope.myRes = 1;
	
	$scope.setStoreId = function(storeId){
		$scope.transShopId = storeId;
	}

	//check screen for mobile devicess to show corresponding layou
    $scope.loadMoreFunc = 'loadMoreTransaction()';
    $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
        $scope.windowHeight = newValue.h;
        $scope.windowWidth = newValue.w;
        if($scope.windowWidth <= '768'){
            $scope.isSmallScreen =  true; //declare in main controller
            $scope.loadMoreFunc = '';
        } else {
            $scope.isSmallScreen =  false; //declare in main controller
            $scope.loadMoreFunc = 'loadMoreTransaction()';
        }
    }, true);

	//calling function to get customer transaction for the open shop
	$scope.transactionlist= {};
	$scope.getHistoryList = function() {
		$scope.step = 1;
		$scope.notFound = false;
		$scope.errorMsg = '';
		var limit_start = 100;
		limit_start = limit_start + 5;
		if($scope.transShopId == ''){
			$scope.errorMsg = $scope.i18n.shop_transaction.shop_not_selected;
			return false;
		}
		
		$scope.requestSending = true;
		var opts = {};
		opts.shop_id = $scope.transShopId;
		$scope.transShopId = '551e6792236f510813100730'; // dummy id as applane doesnot contain any id
		if($scope.transactionlist.searchKey != undefined  && $scope.transactionlist.searchKey != ''){
			$scope.totalSize = 0;
			opts = {"$collection":"sixc_transactions","$parameters":{},"$filter":{"$and":[{"shop_id._id":$scope.transShopId, "status":"Initiated"},{"$or":[{"citizen_id.name":$scope.transactionlist.searchKey},{"citizen_id._id":$scope.transactionlist.searchKey}]}]},"$limit":limit_start,"$skip":0}
		} else {
			opts = {"$collection":"sixc_transactions","$parameters":{},"$filter":{"shop_id._id":$scope.transShopId, "status":"Initiated"},"$limit":limit_start,"$skip":0};
		}
		if ((($scope.totalSize > limit_start ) || $scope.totalSize == 0 ) && $scope.myRes == 1) {
			ShopTransactionService.getTransactionObjects(opts, function(data) {
				$scope.requestSending = false;
				$scope.myRes = 0;
				if(data.code == 200) {
					$scope.requestSending = false;
					$scope.isLoadMore = false;
					if(data.response.result != undefined || data.response.result.length != 0){
                        $scope.transactionHistoryObjectList = data.response.result;
                        $timeout(function(){
							$('#scroll-pane').perfectScrollbar('update');  // Update
						}, 100);
                    }
					$scope.totalSize = data.response.result.length;
					$scope.myRes = 1;
					if($scope.isLoadTransaction == false){
						$timeout(function(){
						$('#scroll-pane').perfectScrollbar();  // initiate
					}, 100);
					}
				} else if(data.code == 171) {
					$scope.transactionHistoryObjectList;
		            $scope.errorMsg = $scope.i18n.shop_transaction.missed_parameter;
		            $scope.notFound = true;
		            $scope.requestSending = false;
		            $scope.isLoadMore = false;
		        } else if(data.code == 172) {
					$scope.transactionHistoryObjectList;
		            $scope.errorMsg = $scope.i18n.shop_transaction.shop_status_not_valid;
		            $scope.notFound = true;
		            $scope.requestSending = false;
		            $scope.isLoadMore = false;
		        } else if(data.code == 173) {
					$scope.transactionHistoryObjectList;
		            $scope.errorMsg = $scope.i18n.shop_transaction.citizen_status_not_valid;
		            $scope.notFound = true;
		            $scope.requestSending = false;
		            $scope.isLoadMore = false;
		        } else if(data.code == 100) {
					$scope.transactionHistoryObjectList;
					$scope.errorMsg = $scope.i18n.shop_transaction.no_store_found;
		            $scope.notFound = true;
		            $scope.requestSending = false;
		            $scope.isLoadMore = false;
		        }
			});
		}
	}
	//calling 
	$scope.getHistoryList();
	
	//back to previous
	$scope.back = function() {
		$scope.step--;
	}

	// loading more transaction list
	$scope.loadMoreTransaction = function() {
        if($scope.totalSize !=0){
            $scope.isLoadTransaction = true;
            $scope.isLoadMore = false;
            $scope.getHistoryList();
        }
    };

	//function to get the transaction detail window
	//function to get the transaction detail window
	$scope.transactionSelect = {};
	$scope.getTransactionDetail = function() {
		$scope.notFound = false;
		$scope.errorMsg = '';
		$scope.transactionObject = [];
		if($scope.transactionSelect.id == '' || $scope.transactionSelect.id == undefined){
			$scope.step = 1;
			$scope.errorMsg = $scope.i18n.shop_transaction.transaction_not_select;
			return false;
		} 
		//$scope.requestSending = true;
		$scope.requestSending = false;
		$scope.step = 2;
		var opts = {};
		opts = {"$collection":"sixc_transactions","$parameters":{},"$filter":{"_id":$scope.transactionSelect.id}}
		ShopTransactionService.getTransactionDetail(opts, function(data) {
			$scope.requestSending = false;
			if(data.code == 200) {
				$scope.requestSending = false;
				$scope.transactionObject = data.response.result[0];
				$scope.myRes = 1;
			} else if(data.code == 300) {
				$scope.requestSending = false;
				$scope.transactionObject = {};
				$scope.errorMsg = $scope.i18n.shop_transaction.missed_parameter;
				$scope.myRes = 1;
			} 
		});
	};
}]);
app.controller('shopWalletController', ['$rootScope', '$scope', '$http', 'StoreWalletService', '$location', '$timeout', '$interval', '$routeParams', '$sce', 'StoreCreditCard', '$route', 'StoreService', '$filter', 'StorePaymentService', 'DateToMongoDate', 'storeShopHistorySelection', function($rootScope, $scope, $http, StoreWalletService, $location, $timeout, $interval, $routeParams, $sce, StoreCreditCard, $route, StoreService, $filter, StorePaymentService, DateToMongoDate, storeShopHistorySelection) {
	$scope.oneAtATime = true;
	isLoadingWallet = true;
	$scope.storeId = $routeParams.id;
    $scope.status = {
	    isFirstOpen: true,
	    isFirstDisabled: false
  	};
    
  	$scope.walletDetails = {};
  	$scope.pcardRes = 1;
  	$scope.shotsRes = 1;
  	$scope.mcardRes = 1;
  	$scope.pcardTotal = 0;
  	$scope.shotTotal = 0;
  	$scope.mcardTotal = 0;
  	$scope.userId = APP.currentUser.id;
  	$scope.pendingPayBtn = true;
    $scope.payRecurring = false;
    $scope.isShowForm = false; //close paypal form
    $scope.firstPage = APP.sale_history.end;
    $scope.itemsSaleHistoryPerPage = APP.sale_history.end;
    $scope.itemsPaypalPerPage = APP.sale_history.end;
    $scope.itemsCardsPerPage = APP.sale_history.end;

    $scope.getmastercardurl = function(){
        var opts = {};
        opts.profile_id = $scope.storeId;
        opts.user_id    = $scope.userId;
        opts.cancel_url = APP.payment.siteDomain + '#/shop/paycancel'; 
        opts.return_url = APP.payment.siteDomain + '#/shop/paysuccess'; 
        opts.payment_type = APP.card.add_type;

        StorePaymentService.getOneClickPaymentUrls(opts, function(data) {  
            if(data.code == 101) {
                if(data.data.url != '' ) {
                    $scope.storePaymentUrl =  data.data.url;
                } else { 
                    $scope.storePaymentUrl = '';
                } 
            } else { 
                $scope.storePaymentUrl = '';
            } 
        });
    };
    $scope.getmastercardurl();
    /* adding tab for shop walletsection*/
	$scope.tabs = [
		{ id:1},
		{ id:2},
		{ id:3},
		{ id:4},
		{ id:5},
		{ id:6}
	];

	$scope.currentTab;

    //function to set the sub tab for credit cards and paypal account listing
    $scope.subtabs = [
        { id:1},
        { id:2}
    ];

    $scope.currentSubTab;


    /*function to get list of paypal account
    * accept shopid, limit size and limit start
    */

    $scope.paypalAccountList = [];
    $scope.isInProgress = false;
    $scope.selectedAccount = [];
    $scope.selectedAccountIndex = 0;
    $scope.getPaypalAccounts = function(itemsPaypalPerPage) {
        $scope.storeData = StoreService.getStoreData();
        $scope.isInProgress = true;
        $scope.isBlockReq = 0;
        $scope.pagination = false;
        var limit_start = ($scope.currentPaypalPage -1) * itemsPaypalPerPage;
        var opts = {};
        opts.shop_id = $scope.storeData.id;
        opts.session_id = APP.currentUser.id;
        opts.limit_size = itemsPaypalPerPage;
        opts.limit_start = limit_start;
        if($scope.isBlockReq == 0 || $scope.firstLoad == 0){
            $scope.isBlockReq = 1;
            $scope.firstLoad == 1;
            StoreCreditCard.getPaypalAccounts(opts, function(data) { 
                $scope.isBlockReq = 0;
                if(data.code == 101) {
                    $scope.isInProgress = false; 
                    $scope.paypalAccountList = data.data.paypal_accounts;
                    $scope.total = data.data.paypal_count;
                    $scope.totalPaypalItems = Math.ceil(data.data.paypal_count/itemsPaypalPerPage); 
                    if(data.data.paypal_count > $scope.itemsPaypalPerPage){
                        $scope.range = [];
                        for (var i=1; i <= $scope.totalPaypalItems; i++) {
                            $scope.range.push(i);
                        }
                        $scope.pagination = true;
                    }else{
                        $scope.pagination = false;
                    }
                    if($scope.paypalAccountList.length == 0){
                        $scope.noContent = true;
                    }
                    angular.forEach( $scope.paypalAccountList,function(value, index){
                        if(value.default_status == 1){
                            $scope.selectedAccount[index] = true;
                            $scope.selectedAccountIndex = index;
                        }else{
                            $scope.selectedAccount[index] = false;
                        }
                    });

                } if(data.code == 100) {
                    $scope.msgClass = 'text-red';
                    $scope.isInProgress = false; 
                    $scope.message = $scope.i18n.store_wallet.paypal.param_missed;
                    $timeout(function(){
                        $scope.msgClass = '';
                        $scope.message = '';
                    }, 10000);
                } if(data.code == 1054) {
                    $scope.msgClass = 'text-red';
                    $scope.isInProgress = false; 
                    $scope.message = $scope.i18n.store_wallet.paypal.access_voilation;
                    $timeout(function(){
                        $scope.msgClass = '';
                        $scope.message = '';
                    }, 10000);
                } else {
                    $scope.isInProgress = false;
                    $scope.paypalAccountList = $scope.paypalAccountList;
                } 
            });
        } 
    };

    /*functio for paypal account apgination start*/
    $scope.currentPaypalPage = 1;
    $scope.loadMoreAccounts = function() {
        $scope.getPaypalAccounts($scope.itemsPaypalPerPage);
    } 

    $scope.changePaypalPageMore = function(pageNo) {
        $scope.currentPaypalPage = pageNo;
        $scope.loadMoreAccounts();
    };

    $scope.prevPaypalPage = function() {
        if ($scope.currentPaypalPage > 1) {
            $scope.currentPaypalPage--;
        }
        $scope.loadMoreAccounts();
    };

    $scope.prevPaypalPageDisabled = function() {
        return $scope.currentPaypalPage === 1 ? "disabled" : "";
    };

    $scope.nextPaypalPage = function() {
        if ($scope.currentPaypalPage < $scope.totalPaypalItems) {
            $scope.currentPaypalPage++;
        }
       $scope.loadMoreAccounts();
    };

    $scope.nextPaypalPageDisabled = function() {
        return $scope.currentPaypalPage === $scope.totalPaypalItems ? "disabled" : "";
    };

    $scope.setPaypalPage = function(number) {
        $scope.currentPaypalPage = number;
        $scope.loadMoreAccounts();
    };

    /*functio for paypal account apgination end*/

    //function to open paypal subscription form
    //End of payment method tab

    $scope.isActiveSubTab = function(subTabId) {
        if($scope.currentSubTab == subTabId){
          return true;
        } else {
          return false;
        }
    };

    $scope.getSubTabData = function(tabId) {
        $scope.pagination = false;
        $scope.currentPage = 0;
        switch(tabId) {
            case 2:
                $scope.currentSubTab = tabId;
                $scope.msgClass = '';
                $scope.message = '';
                $scope.getPaypalAccounts($scope.itemsPaypalPerPage);
                $scope.pendingPayment();
                break;
            default:
                $scope.msgClass = '';
                $scope.message = '';
                $scope.getCreditCard($scope.itemsCardsPerPage);
                $scope.pendingPayment();
                $scope.currentSubTab = 1;
                break;
        }
    };
	
    /*
  	 * payment history of the user
  	 * show the previous payment
  	 *	{"reqObj":{"user_id":23604,"shop_id":"23750"}}
  	 */
  	$scope.paymentDetail = [];
	var paymentHistory = function(){
		var reqObj = {
			"user_id" : APP.currentUser.id,
			"shop_id" : $scope.storeId,
			"limit_start" : APP.store_payment_pagination.start,
			"limit_size" : APP.store_payment_pagination.end
		}

		StoreWalletService.getPaymentHistory(reqObj, function(data) {
			$scope.paymentDetail = data.data;
		});
	};

	paymentHistory();
	$scope.sideshow = function() {
		$('.pay-pending-detail').slideToggle(500);
		$('a.slidemore').hide();
	}
	$('.slidehide').click(function(){
		$('.pay-pending-detail').slideUp(500);
		$('a.slidemore').show("slow");
	});

	$scope.loadmoreHistory = false;
	$scope.loadMorePaymentHistory = function(){
		if($scope.paymentDetail.previous_payment_success.length < $scope.paymentDetail.count){
			$scope.loadmoreHistory = true;
			var reqObj = {
				"user_id" : APP.currentUser.id,
				"shop_id" : $scope.storeId,
				"limit_start" : $scope.paymentDetail.previous_payment_success.length,
				"limit_size" :  APP.store_payment_pagination.end
			};

			StoreWalletService.getPaymentHistory(reqObj, function(data) {
				$scope.loadmoreHistory = false;
				angular.forEach(data.data.previous_payment_success,function(index){
					$scope.paymentDetail.previous_payment_success.push(index);
				});
			});
		}
	};
  	
    /**
    * sale tab start
    *
  	/* function to get the shop wallet*/

    $scope.discountBalance = 0.00;
    $scope.discountCredit = 0.00;
    $scope.turnOver = 0.00;
	$scope.loadShopWallet = false;
  	$scope.getShopWallet = function(){
        var opts =  {
                    "shopOpen":{
                        "$collection": APP.applaneTables.sixc_shopdp,
                        "$filter":{
                            "balance":{"$gt":0},
                            "shop_id": $scope.storeId
                        },
                        "$group":{
                            "credit":{
                                "$sum":"$credit"
                            },
                        "_id":null,
                        "$fields":false
                        }
                    },
                    "shopbalance":{
                        "$collection": APP.applaneTables.sixc_shopdp,
                        "$filter":{
                            "balance":{"$gt":0},
                            "shop_id": $scope.storeId
                        },
                        "$group":{
                            "balance":{
                                "$sum":"$balance"
                            },
                            "_id":null,
                            "$fields":false
                        }
                    },
                    "shopRevenue":{
                        "$collection": APP.applaneTables.sixc_transactions,
                        "$filter":{
                            "shop_id": $scope.storeId
                        },
                        "$group":{
                            "_id":null,
                            "total_income":{
                                "$sum":"$total_income"
                            },
                            "payble_value":{
                                "$sum":"$payble_value"
                            },
                            "new_upto_50_value":{
                                "$sum":"$new_upto_50_value"
                            },
                            "checkout_value":{
                                "$sum":"$checkout_value"
                            },
                            "$fields":false
                        }
                    }
                };
		//$scope.walletDetails = data;
		$scope.loadShopWallet = true;
		//StoreWalletService.getStoreWallet(opts, function(data) {
        StoreWalletService.getStoreWalletApplane(opts, function(data) {
			if(data.code == 200 && data.status == 'ok'){
				$scope.loadShopWallet = false;
				$scope.walletDetails =  data.response ;
                if($scope.walletDetails.shopOpen.result.length > 0){
                    $scope.discountCredit = $scope.walletDetails.shopOpen.result[0].credit;
                }else{
                    $scope.discountCredit = 0.00;
                }
                if($scope.walletDetails.shopbalance.result.length > 0){
                    $scope.discountBalance = $scope.walletDetails.shopbalance.result[0].balance;
                }else{
                    $scope.discountBalance = 0.00;
                }
                if($scope.walletDetails.shopRevenue.result.length > 0){
                    if($scope.walletDetails.shopRevenue.result[0].total_income != null){
                        $scope.turnOver = $scope.walletDetails.shopRevenue.result[0].total_income;
                    }
                }else{
                    $scope.turnOver = 0.00;
                }
			}else{
				$scope.loadShopWallet = false;
            }
		});
	};

    $scope.positionHistory = [];
    $scope.loadShopPrenium = false;
    $scope.shopPreniumHistory = function(){
        var opts = {
                "$collection":APP.applaneTables.sixc_shopdp,
                "$fields":{"value":1,"start_date":1,"end_date":1,"credit":1,"debit":1,"balance":1,"transactions_count":1,"transaction_ids":1},
                "$filter":{
                    "shop_id": $scope.storeId  // for testing use this is "55338df122493a7a6e970eef"
                },
                "$sort":{
                    "__history.__createdOn":-1
                },
                "$skip":0
            };
        $scope.loadShopPrenium = true;
        StoreWalletService.getShopPreniumHistoryApplane(opts, function(data) {
            if(data.code == 200 && data.status == 'ok'){
                $scope.loadShopPrenium = false;
                $scope.positionHistory = $scope.positionHistory.concat(data.response.result);
                if($scope.positionHistory.length > $scope.itemsPerPage){
                    $scope.list = 0;
                    $scope.list = $scope.positionHistory.length;
                    $scope.pagination = true;
                    $scope.range = [];
                    for (var i = 0; i < $scope.list/$scope.itemsPerPage; i++) {
                        $scope.range.push(i);
                    };
                }
            }else{
                $scope.loadShopPrenium = false;
            }
        });
    };

	//get onclick url for recurring payment
    $scope.payRecurringPayment = function() {
        $scope.message = undefined;
        var opts = {};
        opts.store_id = $scope.store_id;
        
        StoreCreditCard.getOnClickRecurringPayments(opts, function(data) {  
            if(data.code == 251) {
                $scope.msgClass = 'alert-info';
                $scope.message = $scope.i18n.store.payment.less_amount;
            } else if(data.code == 252){ 
                $scope.msgClass = 'alert-warning';
                $scope.message = $scope.i18n.store.payment.no_card;
            } else if (data.code == 253) {
                $scope.msgClass = 'alert-warning';
                $scope.message = $scope.i18n.store.payment.payment_fail;
            } else if (data.code == 101) {
                $scope.msgClass = 'alert-info';
                $scope.message = $scope.i18n.store.payment.payment_success;
            }
            $timeout(function(){
                $scope.msgClass = '';
                $scope.message = '';
            }, 10000);
        });
    }

    
    //function to get the pending payment url
    $scope.getOneClickPaymentUrls = function() {
        var opts = {};
        opts.profile_id = $scope.storeId;
        opts.user_id = $scope.userId;
        opts.payment_type = APP.card.add_type;
        opts.cancel_url = APP.payment.siteDomain + '/#/shop/payment/cancel'; 
        opts.return_url = APP.payment.siteDomain + '/#/shop/payment/success'; 
        StoreCreditCard.getOneClickPaymentUrls(opts, function(data) {  
            if(data.code != 251 && data.code != 300) {
                if(data.data.url != '' ) {
                    $scope.pendingPayBtn = false;
                    $scope.payRecurring = true;
                    $scope.storePendingPaymentUrl =  data.data.url;
                } else { 
                    $scope.pendingPayBtn = true;
                    $scope.payRecurring = false;
                    $scope.storePendingPaymentUrl = '';
                } 
            } else { 
                $scope.pendingPayBtn = true;
                $scope.payRecurring = false;
                $scope.storePendingPaymentUrl = '/#/shop/payment/success';
            } 
        });
    }

    $scope.getOneClickPaymentUrls();


    /* These method are for payment method tab
    *
    */

    /*function to get the list of credit cards for a shop
    * accept shopid, limit size and limit start
    */

    $scope.cardList = [];
    $scope.getCardList = false;
    $scope.selectedCard = [];
    $scope.selectedCardIndex = 0;
    $scope.getCreditCard = function(itemsCardsPerPage) {
        $scope.getCardList = true;
        $scope.isBlockReq = 0;
        $scope.pagination = false;
        var limit_start = ($scope.currentCardPage -1) * itemsCardsPerPage;
        var opts = {};
        opts.store_id = $scope.storeId;
        opts.session_id = APP.currentUser.id;
        opts.limit_size = itemsCardsPerPage;
        opts.limit_start = limit_start;
        if($scope.isBlockReq == 0 || $scope.firstLoad == 0){
            $scope.isBlockReq = 1;
            $scope.firstLoad == 1;
            StoreCreditCard.getCreditCardLists(opts, function(data) { 
                $scope.isBlockReq = 0;
                if(data.code == 101 && data.message == 'SUCCESS') {
                    $scope.getCardList = false;	
                    $scope.cardList = data.data;
                    $scope.total = data.data.count;
                    $scope.totalCardItems = Math.ceil(data.data.count/itemsCardsPerPage); 
                    if($scope.total > $scope.itemsCardsPerPage){
                        $scope.pagination = true;
                        $scope.range = [];
                        for (var i=1; i <= $scope.itemsCardsPerPage; i++) {
                            $scope.range.push(i);
                        };
                    }else{
                        $scope.pagination = false;
                    }
                    if($scope.cardList.length == 0){
                        $scope.noContent = true;
                    }
                    angular.forEach( $scope.cardList,function(value, index){
                        if(value.defaultflag == 1){
                        	$scope.selectedCard[index] = true;
                        	$scope.selectedCardIndex = index;
                        }else{
                        	$scope.selectedCard[index] = false;
                        }
                    });

                } else {
                    if($scope.cardList.length == 0){
                        //$scope.noContent = true;
                    }
                    $scope.getCardList = false;
                    $scope.msgClass = 'text-red';
                    $scope.cardList = $scope.cardList;
                } 
            });
        } 
    };


    /*functio for Card account apgination start*/
    $scope.currentCardPage = 1;
    $scope.loadMoreCards = function() {
        $scope.getCreditCard($scope.itemsCardsPerPage);
    } 

    $scope.changeCardPageMore = function(pageNo) {
        $scope.currentCardPage = pageNo;
        $scope.loadMoreCards();
    };

    $scope.prevCardPage = function() {
        if ($scope.currentCardPage > 1) {
            $scope.currentCardPage--;
        }
        $scope.loadMoreCards();
    };

    $scope.prevCardPageDisabled = function() {
        return $scope.currentCardPage === 1 ? "disabled" : "";
    };

    $scope.nextCardPage = function() {
        if ($scope.currentCardPage < $scope.totalCardItems) {
            $scope.currentCardPage++;
        }
       $scope.loadMoreCards();
    };

    $scope.nextCardPageDisabled = function() {
        return $scope.currentCardPage === $scope.totalCardItems ? "disabled" : "";
    };

    $scope.setCardPage = function(number) {
        $scope.currentCardPage = number;
        $scope.loadMoreCards();
    };

    /*functio for Card account apgination end*/
    
    /*function to delete the credit cards for a shop
    * accept contract id
    */
    $scope.inDelete = [];
    $scope.deleteCard = function(indx) {
        $scope.inDelete[indx] = true;
        $scope.message = '';
        var card = $scope.cardList[indx];
        var opts = {};
        opts.contract_id = card.contract_id;
        opts.session_id = APP.currentUser.id;
        StoreCreditCard.deleteCard(opts, function(data) {  
            if(data.code == 101) {
                $scope.msgClass = 'text-success';
                $scope.inDelete[indx] = false;
                $scope.cardList.splice(indx,1);
                
                if($scope.cardList.length === 0){
                    $route.reload();
                }else{
                    $scope.message = $scope.i18n.store.card.delete_success;
                    $timeout(function(){
                        $scope.msgClass = '';
                        $scope.message = '';
                    }, 10000);
                }
            } else { 
                $scope.msgClass = 'text-red';
                $scope.inDelete[indx] = false;
                $scope.message = data.message;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } 
        });
    };

    $scope.selectThisCard = function(index){
    	$scope.setDefaultCard(index,$scope.selectedCardIndex)
    };

    $scope.inProcess = [];
    $scope.setDefaultCard = function(newCardIndex, oldCardIndex) {
        var opts = {};
        opts.store_id = $scope.storeId;
        opts.session_id = APP.currentUser.id;
        opts.contract_id = $scope.cardList[newCardIndex].contract_id;
        var newIndx = $scope.cardList[newCardIndex].contract_id;
        var oldIndx = $scope.cardList[oldCardIndex].contract_id;
        $scope.inProcess[newCardIndex] = true;
        $scope.inProcess[oldCardIndex] = false
        StoreCreditCard.setDefaultCard(opts, function(data) {  
            if(data.code == 101) {
                $scope.inProcess[newCardIndex] = false;
                $scope.selectedCardIndex = newCardIndex;
                $scope.cardList[newCardIndex].defaultflag = 1;
                if(oldIndx != -1){
                    $scope.cardList[oldCardIndex].defaultflag = 0;
                }
                $scope.msgClass = 'text-success';
                $scope.message = $scope.i18n.store.card.success;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } else { 
                $scope.msgClass = 'text-red';
                $scope.inProcess[newCardIndex] = false;
                $scope.message = data.message;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } 
        });
    };


    $scope.pendingPayment = function(){
        var opts = {
            "$collection":APP.applaneTables.sixc_shop_income,
            "$filter":{
                "date":{
                    "$gte":"2015-04-15T00:00:00.000Z",
                    "$lt":"2015-04-16T00:00:00.000Z"
                },"shop_id":$scope.storeId
            }
        };
        /*StoreWalletService.getStoreWalletApplane(opts, function(data) {
            console.log(data);
        });*/
    };

    //End of payment method tab

    $scope.isActiveTab = function(tabId) {
		if($scope.currentTab == tabId){
	      return true;
	    } else {
	      return false;
	    }
    };

    /**
    *  coupon tab start
    *
    **/
    $scope.loadCoupon = false;
    $scope.couponRecord = [];
    $scope.firstLoad = true;
    /*$scope.couponLimit = $scope.itemsPerPage;*/
    $scope.skip = 0;
    $scope.getCoupon = function(startingDate, endingDate){
        $scope.couponLimit = $scope.itemsPerPage;
        $scope.filter = {
            "shop_id": $scope.storeId,
            "type":"551ce49e2aa8f00f20d9328f",
            "inactive":{
                "$in":[false,null]
            },
            "used_on":{
                "$exists":true
            },
            "balance" : {
                "$gt" : 0
            }
        };
        if($scope.firstLoad === false && $scope.dateApply === true){
            $scope.filter.to_date = {};
            if(startingDate !== null){
                $scope.filter.to_date["$gte"] = DateToMongoDate.dateToIso(startingDate);
            }
            if(endingDate !== null){
                $scope.filter.to_date["$lte"] = DateToMongoDate.dateToIso(endingDate);
            }
            $scope.dateApply = false;
        }else{
            $scope.firstLoad = false;
        }

        var couponReq = {
            "shop_wallet_upto100":{
                "$collection":APP.applaneTables.sixc_citizens_cards,
                "$fields":{
                    "credit":1,
                    "discount":1,
                    "unique_id":1,
                    "citizen_id":1,
                    "from_date":1,
                    "to_date":1,
                    "balance":1
                },
                "$filter": $scope.filter,
                "$sort":{
                    "to_date":-1
                },
                "$limit" : $scope.couponLimit,
                "$skip":$scope.skip
            },
            "shop_wallet_upto100_count":{
                "$collection":APP.applaneTables.sixc_citizens_cards,
                "$group":{
                    "count":{
                        "$sum":1
                    },
                    "_id":null,
                    "$fields":false
                },
                "$filter": $scope.filter
            }
        };

        if($scope.nameFilter === true){
            //$scope.filter.citizen_id = {};
            $scope.filter['$or'] = [{"citizen_id.name":{$regex: $scope.citizensName, $options: 'i'}},{"citizen_id._id":{$regex: $scope.citizensName, $options: 'i'}}];
        }

        if($scope.loadMoreCoupons == false){
            $scope.loadCoupon = true;
        }
        StoreWalletService.getStoreWalletCouponApplane(couponReq, function(data) {
            if(data.status === "ok" && data.code === 200){
                $scope.loadCoupon = false;
                $scope.loadMoreCoupons = false;
                $scope.couponRecord = data.response.shop_wallet_upto100.result;
                $scope.couponCount = 0;
                if(data.response.shop_wallet_upto100_count.result.length > 0){
                    $scope.couponCount = data.response.shop_wallet_upto100_count.result[0].count;
                    if(data.response.shop_wallet_upto100_count.result[0].count > $scope.itemsPerPage){
                        $scope.pagination  = true;
                        $scope.list = 0;
                        $scope.range = [];
                        $scope.list = $scope.couponCount - 1;
                        for (var i = 0; i < $scope.list/$scope.itemsPerPage; i++) {
                            $scope.range.push(i);
                        };
                    }
                }
                $scope.dateApply = false;
            }else{
                $scope.loadCoupon = false;
                $scope.loadMoreCoupons = false;
                $scope.dateApply = false;
            }
        });
    };

    $scope.loadMoreCoupons = false;
    $scope.loadMoreCoupon = function(index){
        sDate = [];
        eDate = [];
        if(index !== 0){
            $scope.skip = (index - 1) * $scope.itemsPerPage;
        }else{
            $scope.skip = 0;
        }
        $scope.couponLimit = $scope.itemsPerPage;
        if($scope.sArray != null | $scope.eArray != null){
            $scope.dateApply = true;
        }
        $scope.loadMoreCoupons = true;
        $scope.getCoupon($scope.sArray, $scope.eArray)
    };

    var sDate = [];
    var eDate = [];
    $scope.sArray = null, $scope.eArray = null;
    $scope.dateApply = false;
    $scope.applyFilter = function(dateObj, callFuntion, name){
        sDate = [];
        eDate = [];
        $scope.filter = {};
        $scope.skip = 0;
        if(dateObj.startDate !== null && dateObj.startDate !== undefined && dateObj.startDate != ''){ 
            $scope.sArray = dateObj.startDate;
            $scope.dateApply = true;
        }else{
            $scope.sArray = null;
        }
        if(dateObj.endDate !== null && dateObj.endDate !== undefined && dateObj.endDate != ''){
            $scope.eArray = dateObj.endDate;
            $scope.dateApply = true;
        }else{
            $scope.eArray = null;
        }
        $scope.citizensName = "";
        $scope.citizenName = "";

        if(name !== undefined || name !== ''){
            $scope.citizensName = name
            $scope.nameFilter = true;
        }else{
            $scope.citizensName = "";
            $scope.nameFilter = false;
        }

        $scope.pagination = false;
        $scope.list = 0;
        $scope.range = [];
        $scope.currentPage = 0;

        if(callFuntion === 'getCoupon'){
            if($scope.sArray === null && $scope.eArray === null && (name == undefined || name == "")){
                $scope.clearFilter();
                return false;
            }
            $scope.couponRecord = [];
            $scope.firstLoad = false;
            $scope.getCoupon($scope.sArray, $scope.eArray);
        } else if(callFuntion === 'getSaleHistory'){
            if($scope.sArray === null && $scope.eArray === null && (name == undefined || name == "")){
                $scope.clearFilter();
                return false;
            }
            $scope.transactionHistoryObjectList= [];
            $scope.firstLoad = false;
            $scope.getSaleHistory($scope.sArray, $scope.eArray);
        }
    };
    $scope.clearFilter = function(){
        $scope.date.startDate = null;
        $scope.date.endDate = null;
        $scope.couponName = "";
        $scope.currentPage = 0;
        $scope.range =[];
        $scope.list = 0;
        $scope.pagination =false;
        $scope.dateApply = false;
        $scope.firstLoad = true;
        $scope.citizensName = "";
        $scope.nameFilter = false;
        $scope.filter = {};
        $scope.sArray = null;
        $scope.eArray = null;
        angular.element("#cName").val("");
        $("#cName").val('');
        $("#cName").trigger('change');
        $scope.getCoupon(null, null);
        if($scope.currentTab === 5){
            $scope.getSaleHistory(null, null);
        }
    };

    DELAY_TIME_BEFORE_POSTING = 300;
    //var element = $('#search');
    currentTimeout = null;
    $scope.waitShop = function(name){
        if(currentTimeout) {
            $timeout.cancel(currentTimeout);
        }
        currentTimeout = $timeout(function(){
            $scope.searchShop(name.shopNameSearch);
        }, DELAY_TIME_BEFORE_POSTING);
        
    };
    $scope.shopNameSearch;
    $scope.searchShop = function(shopName){
        console.log(shopName);
    };

    $scope.downloadCsvFile = function(data){
        $scope.JSONToCSVConvertor(data, 'SaleHistory', true);
    };

    //Called from shop wallet sales history tab only
    $scope.downloaShopdHistorySaleCsvFile = function(JSONData){
        var finalArray = [];
        JSONData.forEach(function(data){
            var JSONobc = {};
            if(data.date != undefined){
                JSONobc["Date"] = $filter('date')(data.date, "dd-MM-yyyy");
            }else{
                JSONobc["Date"] = "";
            } 
            
            if(data.transaction_value != undefined){
                JSONobc["Total Transaction"] = data.transaction_value;
            }else{
                JSONobc["Total Transaction"] = "0";
            } 
           
            if(data.total_cardvalue_used != undefined){
                JSONobc["Shopping Card used"] = data.total_cardvalue_used;
            }else{
                JSONobc["Shopping Card used"] = "";
            }

            if(data.total_discountvalue_used != undefined){
                JSONobc["Discount"] = data.total_discountvalue_used;
            }else{
                JSONobc["Discount"] = "0";
            }

            if(data.payble_value != undefined){
                JSONobc["Cash Amount"] = data.payble_value;
            }else{
                JSONobc["Cash Amount"] = "0";
            }

            if(data.discount_details != undefined){
                var id = ""
                data.discount_details.forEach(function(details){
                    id += details.card_no + " , ";
                }); 
                JSONobc["Card Id"] = id;
            }else{
                JSONobc["Card Id"] = "";
            }

            if(data.citizen_id != undefined){
                JSONobc["Citizen Id"] = data.citizen_id._id;
            }else{
                JSONobc["Citizen Id"] = "";
            }   

            finalArray.push(JSONobc);
        });
        $scope.JSONToCSVConvertor(JSON.stringify(finalArray), 'Shop_Wallet_Sales_History_Report', true);
        /*var finalArray = [];
        for(var i = 0; i < JSONData.length; i++) {
        finalArray1 = {};
        finalArray1.SN = i+1;
        try{
            finalArray1.Citizen_ID = (JSONData[i].citizen_id)._id;
            finalArray1.Citizen_Name = (JSONData[i].citizen_id).name;
        } catch(err){
            finalArray1.Citizen_ID = '';
            finalArray1.Citizen_Name = '';
        }
        try{
            finalArray1.Transaction_Date = $filter('date')(JSONData[i].date, "dd-MM-yyyy");
        } catch(err){
            finalArray1.Transaction_Date = '';  
        }
        try{
            finalArray1.transaction_value = JSONData[i].transaction_value;
        } catch(err){
            finalArray1.transaction_value = '';
        }
        try{
            finalArray1.payble_value = JSONData[i].payble_value;
        } catch(err){
            finalArray1.payble_value = '';
        } 
        try{
            finalArray1.total_discountvalue_used = JSONData[i].total_discountvalue_used;
        } catch(err){
            finalArray1.total_discountvalue_used = '';
        }
        try{
            finalArray1.total_cardvalue_used = JSONData[i].total_cardvalue_used;
        } catch(err){
            finalArray1.total_cardvalue_used = '';
        }
        var ids = '';
        if(JSONData[i].discount_details !== undefined) {
            for(var n = 0; n < JSONData[i].discount_details.length; n++) {
                try{
                    ids += "Id= "+(JSONData[i].discount_details[n].type)._id;
                } catch(err){
                    ids += "Id= ''";  
                }
                try{
                    ids += " Type= "+JSONData[i].discount_details[n].type.name;
                } catch(err){
                    ids += " Type= ''";
                }
                try{
                    ids += " "+"Amount = "+JSONData[i].discount_details[n].amount;
                } catch(err){
                    ids += " "+"Amount = ''";
                }
                try{
                    //ids += " "+"card_id = "+JSONData[i].discount_details[n].card_id._id;
                } catch(err){
                    ids += " "+"card_id = ''";
                }
                try{
                    ids += " "+"Crad_No = "+JSONData[i].discount_details[n].card_id.card_no;
                } catch(err){
                    ids += " "+"Crad_No = ''";                
                }
                try{
                    ids += " "+"used_amount = "+JSONData[i].discount_details[n].used_amount;
                } catch(err){
                    ids += " "+"used_amount = ''"; 
                }
                try{
                    ids += " "+"balance_amount = "+JSONData[i].discount_details[n].balance_amount;
                } catch(err){
                    ids += " "+"balance_amount = ''";
                }
            }
        }
        finalArray1.IDS = ids;
        finalArray.push(finalArray1);
        }
        console.log('finalArray',finalArray);
        $scope.JSONToCSVConvertor(JSON.stringify(finalArray), 'Shop_Wallet_Sales_History_Report', true);*/
    };

    //Called from shop wallet history tab only
    $scope.downloadHistoryCsvFile = function(JSONData) {
        var finalArray = [];
        for(var i = 0; i < JSONData.length; i++) {
        finalArray1 = {};
        finalArray1.SN = i+1;
        try{
            finalArray1.Citizen_ID = (JSONData[i].citizen_id)._id;
            finalArray1.Citizen_Name = (JSONData[i].citizen_id).name;
        } catch(err){
            finalArray1.Citizen_ID = ' - ';
            finalArray1.Citizen_Name = ' - ';
        }
        try{
            finalArray1.Transaction_Date = $filter('date')(JSONData[i].date, "dd-MM-yyyy");
        } catch(err){
            finalArray1.Transaction_Date = ' - ';
        }
        try{
           finalArray1.Type = JSONData[i].discount_details.type.name; 
        }catch(err){
            finalArray1.Type = ' - ';
        }
        try{
           finalArray1.Amount = JSONData[i].discount_details.amount; 
        }catch(err){
            finalArray1.Amount = ' - ';
        }
        try{
           finalArray1.Card_No = JSONData[i].discount_details.card_id.card_no; 
        }catch(err){
            finalArray1.Card_No = ' - ';
        }
        finalArray.push(finalArray1);
        }
        $scope.JSONToCSVConvertor(JSON.stringify(finalArray), 'Shop_Wallet_History_Report', true);
    }

    /**
    *  Common meethod to download exel sheet of record
    *  This require a linear json object only
    */
    $scope.JSONToCSVConvertor = function(JSONData, ReportTitle, ShowLabel) {
        var arrData = typeof JSONData != 'object' ? JSON.parse(JSONData) : JSONData;
        var CSV = '';
        CSV += ReportTitle + '\r\n\n';
        var row,index;
        if (ShowLabel) {
            row = "";
            for ( index in arrData[0]) {
                row += index + ',';
            }
            row = row.slice(0, -1);
            CSV += row + '\r\n';
        }
        for (var i = 0; i < arrData.length; i++) {
            row = "";
            for ( index in arrData[i]) {
                row += '"' + arrData[i][index] + '",';
            }
            row.slice(0, row.length - 1);
            CSV += row + '\r\n';
        }
        if (CSV === '') {
            alert("Invalid data");
            return;
        }
        var fileName = '';
        fileName += ReportTitle.replace(/ /g,"_");
        var uri = 'data:text/csv;charset=utf-8,' + escape(CSV);
        var link = document.createElement("a");
        link.href = uri;
        link.setAttribute("href", uri);
        link.setAttribute("download",fileName + ".csv");        
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    //pagination start
    $scope.itemsPerPage = 10;
    $scope.currentPage = 0;
    $scope.pagination = false;
    $scope.list = 0;
    $scope.range = [];

    $scope.prevPage = function(page) {
        if ($scope.currentPage > 0) {
            $scope.currentPage--;
            if(page === 'coupon'){
                $scope.loadMoreCoupon($scope.currentPage);
            } else if(page === 'salehistory'){
                $scope.loadMoreSaleHistory($scope.currentPage);
            }
        }
    };

    $scope.prevPageDisabled = function() {
        return $scope.currentPage === 0 ? "disabled" : "";
    };

    $scope.pageCount = function() {
        if ($scope.list !== undefined) {
            return Math.ceil($scope.list/$scope.itemsPerPage)-1;
        }
    };

    $scope.nextPage = function(page) {
        if ($scope.currentPage < $scope.pageCount()) {
            $scope.currentPage++;
            if(page === 'coupon'){
                $scope.loadMoreCoupon($scope.currentPage + 1);
            } else if(page === 'salehistory'){
                $scope.loadMoreSaleHistory($scope.currentPage + 1);
            }
        }
    };

    $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.pageCount() ? "disabled" : "";
    };

    $scope.setPage = function(n) {
        $scope.currentPage = n;
    };

    // Pagination nation end

    /**
    *  end of  Common meethod to download exel sheet of record
    */

    //gershoppingcard data for shop wallet
    $scope.rangeCardHundred  = [];
    $scope.currentPageCardHundred = 1;
    $scope.firstPageCardHundred = APP.store_list_pagination.end;
    $scope.itemsPerPageCardHundred = 6;
    $scope.totalItemsCardHundred = 0;
    $scope.rangeCardFifty  = [];
    $scope.currentPageCardFifty = 1;
    $scope.firstPageCardFifty = APP.store_list_pagination.end;
    $scope.itemsPerPageCardFifty = 6;
    $scope.totalItemsCardFifty = 0;
    $scope.pageloader100 = false;
    $scope.pageloader50 = false;
    $scope.changePageMoreCardHundred  = function(pageNo) {
        $scope.pageloader100 = true;
        $scope.currentPageCardHundred  = pageNo;
        $scope.getShopWalletShoppingCard();
    };
    
    $scope.prevPageCardHundred  = function() {
        $scope.pageloader100 = true;
        if ($scope.currentPageCardHundred  > 1) {
            $scope.currentPageCardHundred --;
        }
        $scope.getShopWalletShoppingCard();
    };

    $scope.prevPageDisabledCardHundred  = function() {
        return $scope.currentPageCardHundred  === 1 ? "disabled" : "";
    };
    $scope.nextPageCardHundred  = function() {
        $scope.pageloader100 = true;
        if ($scope.currentPageCardHundred  < $scope.totalItemsCardHundred ) {
            $scope.currentPageCardHundred ++;
        }
        $scope.getShopWalletShoppingCard();
    };

    $scope.nextPageDisabledCardHundred  = function() {
        return $scope.currentPageCardFifty  === $scope.totalItemsCardFifty  ? "disabled" : "";
    };
    //for 50% pagination section
    $scope.changePageMoreCardFifty  = function(pageNo) {
        $scope.pageloader50 = true;
        $scope.currentPageCardFifty  = pageNo;
        $scope.getShopWalletShoppingCard();
    };
    
    $scope.prevPageCardFifty  = function() {
        $scope.pageloader50 = true;
        if ($scope.currentPageCardFifty  > 1) {
            $scope.currentPageCardFifty --;
        }
        $scope.getShopWalletShoppingCard();
    };

    $scope.prevPageDisabledCardFifty  = function() {
        return $scope.currentPageCardFifty  === 1 ? "disabled" : "";
    };
    $scope.nextPageCardFifty  = function() {
        $scope.pageloader50 = true;
        if ($scope.currentPageCardFifty  < $scope.totalItemsCardFifty ) {
            $scope.currentPageCardFifty ++;
        }
        $scope.getShopWalletShoppingCard();
    };

    $scope.nextPageDisabledCardFifty  = function() {
        return $scope.currentPageCardFifty  === $scope.totalItemsCardFifty  ? "disabled" : "";
    };
    $scope.shopwalletupto100count = 0;
    $scope.shopwalletupto50count = 0;
    $scope.walletloader = true;
    $scope.walletcontainer = false;
    $scope.noresult = false;
    $scope.filterObject = {};
    $scope.filterObject50 = {}
    $scope.filterObject['shop_id'] = String($scope.storeId);
    $scope.filterObject['type'] = "551ce49e2aa8f00f20d93295";
    $scope.filterObject['inactive'] = {
                                        "$in":[
                                        false,
                                        null
                                        ]
                                    }
    $scope.filterObject['used_on'] = {"$exists":true};
    $scope.filterObject['balance'] = {"$gt":0};
    $scope.filterObject50['shop_id'] = String($scope.storeId);
    $scope.filterObject50['type'] = "551ce49e2aa8f00f20d93293";
    $scope.filterObject50['inactive'] = {
                                        "$in":[
                                        false,
                                        null
                                        ]
                                    }
    $scope.filterObject50['used_on'] = {"$exists":true}
    $scope.filterObject50['balance'] = {"$gt":0};
    $scope.getShopWalletShoppingCard = function(){       
        
        var limit_start = ($scope.currentPageCardHundred -1)*$scope.itemsPerPageCardHundred;
        var limit_start_fifty = ($scope.currentPageCardFifty -1)*$scope.itemsPerPageCardFifty;
        var opts =  {
                        "shop_wallet_upto100":{
                            "$collection":"sixc_citizens_cards",
                            "$fields":{
                                "credit":1,
                                "card_no":1,
                                "card_code":1,
                                "citizen_id":1,
                                "from_date":1,
                                "to_date":1,
                                "balance":1
                                //"shop_id.name":1
                                //"citizen_id.name":1
                                },
                            "$filter": $scope.filterObject,
                            "$sort":{
                                "used_on":-1
                            },
                            "$limit":$scope.itemsPerPageCardHundred,
                            "$skip":limit_start
                        },
                        "shop_wallet_upto100_count":{
                                "$collection":"sixc_citizens_cards",
                                "$group":{
                                    "count":{
                                        "$sum":1
                                    },
                                "_id":null,
                                "$fields":false
                            },
                            "$filter":$scope.filterObject
                        },
                        "shop_wallet_upto50":{
                            "$collection":"sixc_citizens_cards",
                            "$fields":{
                                "credit":1,
                                "card_no":1,
                                "card_code":1,
                                "citizen_id":1,
                                "from_date":1,
                                "to_date":1,
                                "balance":1
                            },
                            "$filter":$scope.filterObject50,
                            "$sort":{
                                "used_on":-1
                            },
                            "$limit":$scope.itemsPerPageCardFifty,
                            "$skip":limit_start_fifty
                        },
                        "shop_wallet_upto50_count":{
                            "$collection":"sixc_citizens_cards",
                            "$group":{
                                "count":{
                                "$sum":1
                                },
                            "_id":null,
                            "$fields":false
                            },
                            "$filter":$scope.filterObject50
                        }
                };
        //StoreWalletService.getStoreWallet(opts, function(data) {
        StoreWalletService.getStoreWalletShoppingCard(opts, function(data) {
            $scope.walletloader = false;
            $scope.pageloader100 = false;
            $scope.pageloader50 = false;
             if(data.status === 'ok' && data.code === 200) {
                $scope.shopwalletupto100 = data.response.shop_wallet_upto100.result;
                if(data.response.shop_wallet_upto100_count.result.length > 0) {
                    $scope.shopwalletupto100count = data.response.shop_wallet_upto100_count.result[0].count;
                } else {
                    $scope.shopwalletupto100count = 0;
                }
                $scope.shopwalletupto50 = data.response.shop_wallet_upto50.result;
                if(data.response.shop_wallet_upto50_count.result.length > 0){
                    $scope.shopwalletupto50count = data.response.shop_wallet_upto50_count.result[0].count;
                } else {
                    $scope.shopwalletupto50count = 0;
                }
                $scope.totalItemsCardHundred = Math.ceil($scope.shopwalletupto100count/$scope.itemsPerPageCardHundred ); 
                $scope.totalItemsCardFifty = Math.ceil($scope.shopwalletupto50count/$scope.itemsPerPageCardFifty ); 
                $scope.rangeCardHundred = [];  
                $scope.rangeCardFifty = [];  
                for (var i=1; i<=$scope.totalItemsCardHundred ; i++) {
                    $scope.rangeCardHundred.push(i);
                } 
                for (var j=1; j<=$scope.totalItemsCardFifty ; j++) {
                    $scope.rangeCardFifty.push(j);
                }   
                $scope.pageloader100 = false;
                $scope.pageloader50 = false;
                $scope.walletcontainer = true;
            } else {
                $scope.rangeCardHundred = [];  
                $scope.rangeCardFifty = []; 
                $scope.shopwalletupto50count = 0;
                $scope.shopwalletupto100count = 0;
                $scope.walletcontainer = true;
            }           
        });
    };

    $scope.clearSearch = function(){
         $scope.currentPageCardHundred = 1;
        $scope.currentPageCardFifty = 1;
        $scope.walletloader = true;
        $('.from input').val('');
        $('.to input').val('');
        $('#searchtext').val('');
        $scope.filterObject = {};
        $scope.filterObject50 = {};
        $scope.filterObject['shop_id'] = String($scope.storeId);
        $scope.filterObject['type'] = "551ce49e2aa8f00f20d93295";
        $scope.filterObject['inactive'] = {
                                            "$in":[
                                            false,
                                            null
                                            ]
                                        }
        $scope.filterObject['used_on'] = {"$exists":true}
        $scope.filterObject['balance'] = {"$gt":0};
        $scope.filterObject50['shop_id'] = String($scope.storeId);
        $scope.filterObject50['type'] = "551ce49e2aa8f00f20d93293";
        $scope.filterObject50['inactive'] = {
                                            "$in":[
                                            false,
                                            null
                                            ]
                                        }
        $scope.filterObject50['used_on'] = {"$exists":true};
        $scope.filterObject50['balance'] = {"$gt":0};
        $scope.getShopWalletShoppingCard();
    }

    $scope.searchCardByCti = function(){
        $scope.currentPageCardHundred = 1;
        $scope.currentPageCardFifty = 1;
        $scope.walletloader = true;
        $scope.filterObject = {};
        $scope.filterObject50 = {};
        var fromInput = $('.from input').val();
        var toinput = $('.to input').val();
        var frInp = fromInput.split("-");
        var toInp = toinput.split("-");
        
        var newfromdate = DateToMongoDate.dateToIso(fromInput);
        var newtodate = DateToMongoDate.dateToIso(toinput);
        var searchdata = $('#searchtext').val();
        if(((fromInput !== undefined && fromInput !== '' || toinput !== undefined && toinput !== '')) && searchdata === '') {
            //console.log('it has date');
            if(frInp[0] !== undefined && frInp[0] !== ''){
                if($scope.filterObject['to_date']){
                  $scope.filterObject['to_date']["$gte"] = newfromdate;
                  $scope.filterObject50['to_date']["$gte"] = newfromdate;
                }else{
                  $scope.filterObject['to_date'] = {
                    "$gte" : newfromdate
                  }
                  $scope.filterObject50['to_date'] = {
                    "$gte" : newfromdate
                  }
                }
            }

            if(toInp[0] !== undefined && toInp[0] !== ''){
                if($scope.filterObject['to_date']){
                  $scope.filterObject['to_date']["$lte"] = newtodate;
                  $scope.filterObject50['to_date']["$lte"] = newtodate;
                }else{
                  $scope.filterObject['to_date'] = {
                    "$lte" : newtodate
                  }
                  $scope.filterObject50['to_date'] = {
                    "$lte" : newtodate
                  }
                }
            }
            $scope.filterObject['shop_id'] = String($scope.storeId);
            $scope.filterObject['type'] = "551ce49e2aa8f00f20d93295";
            $scope.filterObject['balance'] = {"$gt":0};
            $scope.filterObject50['shop_id'] = String($scope.storeId);
            $scope.filterObject50['type'] = "551ce49e2aa8f00f20d93293";
            $scope.filterObject50['balance'] = {"$gt":0};
            $scope.getShopWalletShoppingCard();
        }  else if((fromInput !== undefined && fromInput !== '' || toinput !== undefined && toinput !== '') && (searchdata !== '' && searchdata !== undefined)) {
            //console.log('all');
            //$scope.filterObject['citizen_id.name'] = {"$regex":".*"+searchdata+".*", $options: 'i'};
            //$scope.filterObject['$or'] = [{"citizen_id.name":{"$regex":".*"+searchdata+".*", $options: 'i'}},{"citizen_id._id":{"$regex":".*"+searchdata+".*", $options: 'i'}}];
            $scope.filterObject['$or'] = [{"citizen_id.name":{"$regex":".*"+searchdata+".*", $options: 'i'}},{"citizen_id._id":{"$regex":".*"+searchdata+".*", $options: 'i'}}];
            $scope.filterObject['shop_id'] = String($scope.storeId);
            $scope.filterObject['type'] = "551ce49e2aa8f00f20d93295";
            $scope.filterObject['inactive'] = {
                                                "$in":[
                                                false,
                                                null
                                                ]
                                            }
            $scope.filterObject['used_on'] = {"$exists":true}
            $scope.filterObject['balance'] = {"$gt":0};
            //$scope.filterObject50['citizen_id.name'] = {"$regex":".*"+searchdata+".*", $options: 'i'};
            //$scope.filterObject50['$or'] = [{"citizen_id.name":{"$regex":".*"+searchdata+".*", $options: 'i'}},{"citizen_id._id":{"$regex":".*"+searchdata+".*", $options: 'i'}}];
            $scope.filterObject50['$or'] = [{"citizen_id.name":{"$regex":".*"+searchdata+".*", $options: 'i'}},{"citizen_id._id":{"$regex":".*"+searchdata+".*", $options: 'i'}}];
            $scope.filterObject50['shop_id'] = String($scope.storeId);
            $scope.filterObject50['type'] = "551ce49e2aa8f00f20d93293";
            $scope.filterObject50['inactive'] = {
                                                "$in":[
                                                false,
                                                null
                                                ]
                                            }
            $scope.filterObject50['used_on'] = {"$exists":true};
            $scope.filterObject50['balance'] = {"$gt":0};
            if(frInp[0] !== undefined && frInp[0] !== ''){
                if($scope.filterObject['to_date']){
                  $scope.filterObject['to_date']["$gte"] = newfromdate;
                  $scope.filterObject50['to_date']["$gte"] = newfromdate;
                }else{;
                  $scope.filterObject['to_date'] = {
                    "$gte" : newfromdate
                  }
                  $scope.filterObject50['to_date'] = {
                    "$gte" : newfromdate
                  }
                }
            }

            if(toInp[0] !== undefined && toInp[0] !== ''){
                if($scope.filterObject['to_date']){
                  $scope.filterObject['to_date']["$lte"] = newtodate;
                  $scope.filterObject50['to_date']["$lte"] = newtodate;
                }else{
                  $scope.filterObject['to_date'] = {
                    "$lte" : newtodate
                  }
                  $scope.filterObject50['to_date'] = {
                    "$lte" : newtodate
                  }
                }
            }
            $scope.getShopWalletShoppingCard();
        } else if((fromInput === '' || toinput === '' ) && (searchdata !== '' && searchdata !== undefined)) {
            //console.log('input');
            //$scope.filterObject['citizen_id.name'] = {"$regex":".*"+searchdata+".*", $options: 'i'};
            //$scope.filterObject['$or'] = [{"citizen_id.name":{"$regex":".*"+searchdata+".*", $options: 'i'}},{"citizen_id._id":{"$regex":".*"+searchdata+".*", $options: 'i'}}];
            $scope.filterObject['$or'] = [{"citizen_id.name":{"$regex":".*"+searchdata+".*", $options: 'i'}},{"citizen_id._id":{"$regex":".*"+searchdata+".*", $options: 'i'}}];
            $scope.filterObject['shop_id'] = String($scope.storeId);
            $scope.filterObject['type'] = "551ce49e2aa8f00f20d93295";
            $scope.filterObject['inactive'] = {
                                                "$in":[
                                                false,
                                                null
                                                ]
                                            }
            $scope.filterObject['used_on'] = {"$exists":true};
            $scope.filterObject['balance'] = {"$gt":0};
            //$scope.filterObject50['$or'] = [{"citizen_id.name":{"$regex":".*"+searchdata+".*", $options: 'i'}},{"citizen_id._id":{"$regex":".*"+searchdata+".*", $options: 'i'}}];
            $scope.filterObject50['$or'] = [{"citizen_id.name":{"$regex":".*"+searchdata+".*", $options: 'i'}},{"citizen_id._id":{"$regex":".*"+searchdata+".*", $options: 'i'}}];
            //$scope.filterObject50['citizen_id.name'] = {"$regex":".*"+searchdata+".*", $options: 'i'};
            $scope.filterObject50['shop_id'] = String($scope.storeId);
            $scope.filterObject50['type'] = "551ce49e2aa8f00f20d93293";
            $scope.filterObject50['inactive'] = {
                                                "$in":[
                                                false,
                                                null
                                                ]
                                            }
            $scope.filterObject50['used_on'] = {"$exists":true};
            $scope.filterObject50['balance'] = {"$gt":0};
            $scope.getShopWalletShoppingCard();
        } else {
            $scope.clearSearch();
        }

    }

    /*var currentDate = new Date();
    var cDay = currentDate.getDate()
    var cMonth = currentDate.getMonth() + 1
    var cYear = currentDate.getFullYear()
    
    var endFilter = cYear + '-' + cMonth + '-' + cDay;
    var yesterdayDate = new Date('2000-01-01T00:00:00');
    var sDay = yesterdayDate.getDate()
    var sMonth = yesterdayDate.getMonth() + 1
    var sYear = yesterdayDate.getFullYear()
    
    var startFilter = sYear + '-' + sMonth + '-' + sDay;*/
    $scope.date = {"startDate": null, "endDate": null };


    //function to open paypal subscription form
    $scope.openPaypalForm = function() {
        $scope.paypalErrCls = '';
        $scope.paypalErrMsg = '';
        $scope.isShowForm = true;
    }

    //set the account as default
    $scope.selectThisAccount = function(index){
        $scope.setDefaultAccount(index,$scope.selectedAccountIndex)
    };

    $scope.inProcess = [];
    $scope.setDefaultAccount = function(newAccountIndx, oldAccountIndx) {
        $scope.storeData = StoreService.getStoreData();
        var opts = {};
        opts.shop_id = $scope.storeData.id;
        opts.session_id = APP.currentUser.id;
        opts.id = $scope.paypalAccountList[newAccountIndx].id;
        var newIndx = $scope.paypalAccountList[newAccountIndx].id;
        var oldIndx = $scope.paypalAccountList[oldAccountIndx].id;
        $scope.inProcess[newAccountIndx] = true;
        $scope.inProcess[oldAccountIndx] = false
        StoreCreditCard.setDefaultPaypalAccounts(opts, function(data) {  
            if(data.code == 101) {
                $scope.inProcess[newAccountIndx] = false;
                $scope.selectedAccountIndex = newAccountIndx;
                $scope.paypalAccountList[newAccountIndx].defaultflag = 1;
                if(oldIndx != -1){
                    $scope.paypalAccountList[oldAccountIndx].defaultflag = 0;
                }
                $scope.msgClass = 'text-success';
                $scope.message = $scope.i18n.store_wallet.paypal.set_default_success;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } else { 
                $scope.msgClass = 'text-red';
                $scope.inProcess[newAccountIndx] = false;
                $scope.message = $scope.i18n.store_wallet.paypal.failure;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } 
        });
    };

    /*function to delete the paypal accounts for a shop
    * accept id
    */
    $scope.inDelete = [];
    $scope.deleteAccount = function(indx) {
        $scope.storeData = StoreService.getStoreData();
        $scope.inDelete[indx] = true;
        $scope.message = '';
        var account = $scope.paypalAccountList[indx];
        var opts = {};
        opts.id = account.id;
        opts.shop_id = $scope.storeData.id;
        opts.session_id = APP.currentUser.id;
        StoreCreditCard.deletePaypalAccounts(opts, function(data) {  
            if(data.code == 101) {
                $scope.msgClass = 'text-success';
                $scope.inDelete[indx] = false;
                $scope.paypalAccountList.splice(indx,1);
                $scope.message = $scope.i18n.store_wallet.paypal.delete_success;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } else if(data.code == 100) {
                $scope.msgClass = 'text-red';
                $scope.inDelete[indx] = false;
                $scope.message = $scope.i18n.store_wallet.paypal.param_missed;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } else if(data.code == 1054) {
                $scope.msgClass = 'text-red';
                $scope.inDelete[indx] = false;
                $scope.message = $scope.i18n.store_wallet.paypal.access_voilation;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } else if(data.code == 1029) {
                $scope.msgClass = 'text-red';
                $scope.inDelete[indx] = false;
                $scope.message = $scope.i18n.store_wallet.paypal.failure;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } else { 
                $scope.msgClass = 'text-red';
                $scope.inDelete[indx] = false;
                $scope.message = $scope.i18n.store_wallet.paypal.failure;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } 
        });
    };
      
      //shop sale history start
      $scope.itemsSaleHistoryPerPage = APP.sale_history.end;
      //calling function to get customer transaction for the open shop
      $scope.transactionlist= {};
      $scope.transactionHistoryObjectList = [];
      $scope.hasNext = true;
      $scope.myRes = 1;
      $scope.historyLimit = 0;
      $scope.isLoadMore = false;
      $scope.getSaleHistory = function(startingDate, endingDate) {
        if($scope.isLoadMore == false){
            $scope.requestSending = true;
        }
        $scope.filter = {
            "shop_id._id": $scope.storeId,
            "status":"Approved",
            "transaction_type_id":{
                "$in":["553209267dfd81072b176bba", "553209267dfd81072b176bbc"]
            }
        };
        if($scope.firstLoad === false && $scope.dateApply === true){
            $scope.filter.date = {};
            if(startingDate !== null){
                $scope.filter.date["$gte"] = DateToMongoDate.dateToIso(startingDate);
            }
            if(endingDate !== null){
                $scope.filter.date["$lt"] = DateToMongoDate.dateToIso(endingDate);
            }
            $scope.dateApply = false;
        }else{
            $scope.firstLoad = false;
        }

        var saleHistoryReq = {
            "sale_history":{
                "$collection":APP.applaneTables.transaction,
                "$fields":{
                    "date":1,
                    "total_discountvalue_used":1,
                    "total_cardvalue_used":1,
                    "transaction_value":1,
                    "payble_value":1,
                    "citizen_id":1,
                    "discount_details":1
                },
                "$filter": $scope.filter,
                "$sort":{
                    "date":-1
                },
                "$limit" : $scope.historyLimit,
                "$skip":$scope.skip
            },
            "sale_history_count":{
                "$collection":APP.applaneTables.transaction,
                "$group":{
                    "count":{
                        "$sum":1
                    },
                    "_id":null,
                    "$fields":false
                },
                "$filter": $scope.filter
            }
        };

        if($scope.nameFilter === true){
            //$scope.filter.citizen_id = {};
            //$scope.filter["citizen_id.name"] = {"$regex":".*"+$scope.citizensName+".*", $options: 'i'};
            $scope.filter["$or"] = [{"citizen_id.name":{"$regex":".*"+$scope.citizensName+".*", $options: 'i'}},{"citizen_id._id":{"$regex":".*"+$scope.citizensName+".*", $options: 'i'}}];
        }

        StoreWalletService.getStoreWalletHistoryApplane(saleHistoryReq, function(data) {
            $scope.requestSending = false;
            $scope.isLoadMore = false;
            if(data.code == 200) {
                if(data.response.sale_history.result !== undefined || data.response.sale_history.result.length !== 0){
                    if($scope.isLoadSaleHistory == false){
                    $scope.transactionHistoryObjectList = [];
                    }
                    $scope.transactionHistoryObjectList = data.response.sale_history.result;
                    $scope.totalSaleHistoryItems = false;
                }
                if(data.response.sale_history_count.result.length > 0){
                    $scope.saleHistroyCount = data.response.sale_history_count.result[0].count;
                    if(data.response.sale_history_count.result[0].count > $scope.itemsPerPage){
                        $scope.pagination  = true;
                        $scope.list = 0;
                        $scope.list = $scope.saleHistroyCount;
                        $scope.range = [];
                        $scope.totalHistoryItems = Math.ceil($scope.list/$scope.itemsPerPage); 
                        for (var i = 0; i < $scope.totalHistoryItems; i++) {
                            $scope.range.push(i);
                        };
                    }
                }
                $scope.dateApply = false;
            } else if(data.status === "error") {
              $scope.step = 1;
              $scope.errorMsg = $scope.i18n.shop_transaction.txn_server_error;
              $scope.isLoadMore = false;
              $scope.notFound = true;
              $scope.requestSending = false;
            }
          });
        }
      // loading more sale history list
    $scope.isLoadSaleHistory = false;
    $scope.historyLimit = APP.sale_history.end;;
    $scope.loadMoreSaleHistory = function(index){
        sDate = [];
        eDate = [];
        if(index !== 0){
            $scope.skip = (index - 1) * APP.sale_history.end;
        }else{
            $scope.skip = 0;
        }
        $scope.historyLimit = APP.sale_history.end;
        if($scope.sArray != null | $scope.eArray != null){
            $scope.dateApply = true;
        }
        //$scope.currentPage = 0;
        $scope.isLoadMore = true;
        $scope.getSaleHistory($scope.sArray, $scope.eArray);
    };

    //function to close pay pal form
    $scope.closeForm  = function(){
        $scope.isLoadMore = false;
        $scope.loadMoreAccounts();
        $scope.paypal = {};
        $scope.isShowForm = false;
    };

    $scope.getData = function(tabId) {
        $scope.pagination = false;
        $scope.currentPage = 0;
        $scope.range = [];
        $scope.list = 0;
        switch(tabId) {
            case 1:
                $scope.positionHistory = [];
                $scope.getShopWallet();
                $scope.shopPreniumHistory();
                $scope.currentTab = tabId;
                $scope.date = {"startDate": null, "endDate": null };
                break;
            case 2:
                $scope.getShopWalletShoppingCard();
                $scope.currentTab = tabId;
                //$scope.getShoppingCard();
                $scope.date = {"startDate": null, "endDate": null };
                break;
            case 3:
                $scope.currentTab = tabId;
                $scope.couponRecord = [];
                $scope.list = [];
                $scope.firstLoad = true;
                $scope.date.startDate = null;
                $scope.date.endDate = null;
                $scope.couponName = "";
                $scope.dateApply = false;
                $scope.firstLoad = true;
                $scope.citizensName = "";
                $scope.citizenName = "";
                $scope.nameFilter = false;
                $scope.filter = {};
                $scope.sArray = null;
                $scope.eArray = null;
                $scope.skip = 0;
                $scope.date = {"startDate": null, "endDate": null };
                $scope.getCoupon(null, null);
                break;
            case 4:
                $scope.currentTab = tabId;
                //$scope.showHistory();
                $scope.date = {"startDate": null, "endDate": null };
                break;
            case 5:
                $scope.currentTab = tabId;
                $scope.nameFilter = false;
                $scope.citizensName = "";
                $scope.citizenName = "";
                $scope.date.startDate = null;
                $scope.date.endDate = null;
                $scope.itemsPerPage = APP.sale_history.end;
                $scope.filter = {};
                $scope.range = [];
                $scope.sArray = null;
                $scope.eArray = null;
                $scope.getSaleHistory(null, null);
                $scope.date = {"startDate": null, "endDate": null };
                break;
            case 6:
                $scope.currentTab = tabId;
                $scope.getSubTabData(1);
                //$scope.getCreditCard();
                $scope.pendingPayment();
                $scope.date = {"startDate": null, "endDate": null };
                break;
            default:
                $scope.getShopWallet();
                $scope.shopPreniumHistory();
                $scope.currentTab = 1;
                break;
        }
    };

    if(storeShopHistorySelection.getStorage() == true){
        $scope.currentTab = 5;
        storeShopHistorySelection.clearStorage();
        $scope.getData(5);
    }else{
        $scope.getData(1);
    }

      // // loading more sale history  list
      // $scope.searchSaleHistoryTransaction = function() {
      //   $scope.hasNext =  true;
      //   $scope.saleHistoryCurrentPage = 1;
      //   $scope.transactionHistoryObjectList = [];
      //   $scope.getSaleHistory($scope.itemsSaleHistoryPerPage);
      // };
}]);
app.controller('StoreController',['$scope', '$http', '$cookieStore', 'StoreService','ProfileService', '$timeout', function ($scope, $http, $cookieStore, StoreService,ProfileService, $timeout) {  
    $scope.storeListObject = [];
    $scope.storeMyList = [];
    $scope.storeAllList = [];
    $scope.totalSize = 0;
    $scope.myTotalSize = 0;
    $scope.storeLoading = true;
    $scope.viewAllActive = 'current';
    $scope.myStoreActive = '';
    $scope.tab = 'viewAll';
    $scope.notFound = false;
    $scope.allRes = 1;
    $scope.myRes = 1;
    $scope.firstPage = APP.store_list_pagination.end;
    $scope.itemsPerPage = APP.store_list_pagination.end;
    $scope.currentPage = 1;
    $scope.range = [];
    $scope.pagevalue = '';
    $scope.orderValue = 1;
    $scope.filterApply = 0;
    var shopRating = 0;
    $scope.affilationOn = false;
    var shopCategoryVal = '';
    var votestructure = ''; 
    var favoriteIcon = '';
    $scope.filterresult = false;
    $scope.friendtransaction = 0;
    $scope.currentLanguage = $cookieStore.get("activeLanguage");
    $scope.changePageMore = function(pageNo) {
        $scope.currentPage = pageNo;
        $scope.loadMore();
    };

    $scope.prevPage = function() {
        if ($scope.currentPage > 1) {
            $scope.currentPage--;
        }
        $scope.loadMore();
    };

    $scope.prevPageDisabled = function() {
        return $scope.currentPage === 1 ? "disabled" : "";
    };

    $scope.nextPage = function() {
        if ($scope.currentPage < $scope.totalItems) {
            $scope.currentPage++;
        }
       $scope.loadMore();
    };

    $scope.paginate = function() {
       $scope.currentPage = 1; 
    }

    $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.totalItems ? "disabled" : "";
    };

    $scope.setPage = function(number) {
        $scope.itemsPerPage = number;
        $scope.currentPage = 1;
        $scope.loadMore();
    };
    $scope.showStoreList = function(tab, itemsPerPage) {
        $scope.filterApply = 0;
        $scope.pagevalue = 'storeAll';
        $scope.searchText = '';
        $scope.storeMyList = [];
        $scope.tab = tab;
        $scope.viewAllActive = 'current';
        $scope.myStoreActive = '';
        var opts = {};
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        opts.user_id = APP.currentUser.id;
        opts.store_type = 1; 
        opts.limit_start = limit_start;
        opts.limit_size = itemsPerPage;
        opts.lang_code = $scope.currentLanguage;
        opts.filter_type = $scope.orderValue;
        if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
            $scope.storeLoading = true
            $scope.allRes = 0;
            StoreService.getStore(opts, function(data) {
                //console.log(data);
                $scope.filterresult = false;
                if(data.code == 101) {
                    $scope.allRes = 1;
                    $scope.totalSize = data.data.size;
                    $scope.storeListObject = data.data.stores;
                    $scope.totalItems = Math.ceil(data.data.size/itemsPerPage); 
                    $scope.range = [];  
                    for (var i=1; i<=$scope.totalItems; i++) {
                        $scope.range.push(i);
                    }             
                    $scope.storeLoading = false;
                    $scope.notFound = false;
                } else if(data.code == 121) {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                    $scope.myRes = 1; 
                }
                else {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                    $scope.myRes = 1; 
                }
            });
        }
    };
    $scope.myStId = [];
    $scope.locIndex = [];
    $scope.myStoreList = function(tab, itemsPerPage) {
        $scope.filterresult = true;
        $scope.locIndex = [];
        $scope.myStId = [];
        $scope.filterApply = 0;
        $scope.pagevalue = 'storeMy';
        $scope.searchText = '';
        $scope.storeAllList = [];
        $scope.tab = tab; 
        $scope.viewAllActive = '';
        $scope.myStoreActive = 'current';
        var opts = {};
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        opts.user_id = APP.currentUser.id;
        opts.store_type = 2; 
        opts.limit_start = limit_start;
        opts.limit_size = itemsPerPage;
        opts.lang_code = $scope.currentLanguage;
        opts.filter_type = $scope.orderValue;
        if ((($scope.myTotalSize > limit_start) || $scope.myTotalSize == 0 ) && $scope.myRes == 1) {
            $scope.storeLoading = true;
            $scope.myRes = 0; 
            StoreService.getStore(opts, function(data) {
                $scope.filterresult = false;
                $scope.range = []; 
                if(data.code == 101) {
                    $scope.myTotalSize = data.data.size;
                    $scope.myRes = 1; 
                    $scope.storeListObject = $scope.storeMyList = data.data.stores;
                    for (var j=0; j < data.data.stores.length; j++) {
                        $scope.myStId.push(data.data.stores[j].id); 
                    }
                    for(var k = 0; k < $scope.myStId.length; k++){
                        for (var n=0;n<locations.length; n++){
                            if(locations[n][8] == $scope.myStId[k]) {
                                 $scope.locIndex.push(n);
                            }
                            
                        }     
                    }
                    $scope.fireMyshopMarker($scope.locIndex);
                    $scope.totalItems = Math.ceil(data.data.size/itemsPerPage);  
                    for (var i=1; i<=$scope.totalItems; i++) {
                        $scope.range.push(i);
                    }  
                    $scope.notFound = false;
                    $scope.storeLoading = false;
                } else if(data.code == 121) {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                    $scope.myRes = 1; 
                    $scope.fireMyshopMarker($scope.locIndex);
                } else {
                    $scope.storeListObject =  [];
                    $scope.notFound = true;
                    $scope.storeLoading = false;
                    $scope.myRes = 1; 
                    $scope.fireMyshopMarker($scope.locIndex);
                }
                $scope.affilationOn = true;
            });
        }
    };

    $scope.orderBy = function() {
        $scope.filterApply = 1;
        $scope.loadMore();   
    }

    $scope.addressFilter = '';
    //$scope.showStoreList($scope.tab, $scope.itemsPerPage);
    $scope.loadMore = function() {
        var textVal = $scope.searchText ;
        var addressVal = $scope.addressFilter;
        if($scope.pagevalue == '' ){
            $scope.showStoreList($scope.tab, $scope.itemsPerPage);     
        } else if($scope.pagevalue == 'storeAll'){
            $scope.showStoreList($scope.tab, $scope.itemsPerPage); 
        } else if($scope.pagevalue == 'storeMy'){
            $scope.myStoreList($scope.tab,  $scope.itemsPerPage);
        } else if($scope.pagevalue == 'storeNameSearch'){
            $scope.searchStore('viewAll',  $scope.itemsPerPage);
        } else if($scope.pagevalue == 'storeAddSearch'){
            $scope.searchAddressShop($scope.storeIdArray);
        }
    };

    //getstorecredit
    $scope.getstorecredit = function(storeId) { 
       var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth();
        var yr = today.getFullYear();
        var date = new Date(yr,mm,dd);
        $scope.stId =  storeId;  
        var opts = {};
        opts = {"function":"UtilityService.shopWiseCitizenIncome", "parameters":[{"shop_id":[$scope.stId],"citizen_id":String(APP.currentUser.id),"date":String(date.toISOString())}]}
        //calling the comment service to delete the selected comment 
        StoreService.getstorecredit(opts, function(data){
            for (i = 0; i < locations.length; i++) {
                    if(locations[i][8] == storeId){
                        $scope.storeIndex = i;
                        break;
                    }
                }
            if(data.response === undefined || data.response === '' || data.response.length === 0){
                locations[$scope.storeIndex][9] = 0;
                $('.ca span').html($scope.format1(0, '€'));
            } else {
                locations[$scope.storeIndex][9] = data.response[0].total_credit;
                $('.ca span').html($scope.format1(data.response[0].total_credit, '€'));
            }
        });
    };

    //Get friend count on store
    $scope.frindBoughtCount = function(storeId) {       
        var opts = {};
        opts = {"function":"UtilityService.friendsShoppingCount", "parameters":[{"asArray":true,"shop_id":[storeId],"citizen_id":String(APP.currentUser.id)}]}
        //calling the comment service to delete the selected comment 
        StoreService.frindboughtcount(opts, function(data){
            for (i = 0; i < locations.length; i++) {
                    if(locations[i][8] == storeId){
                        $scope.storeIndex = i;
                        break;
                    }
                }
            if(data.response === undefined || data.response === ''){
                 locations[$scope.storeIndex][20] = 0;
                 $('.fr-num').html(0); 
                $scope.frcount = 0;   
            } else {
                locations[$scope.storeIndex][20] = data.response[0].count;
                $('.fr-num').html(data.response[0].count); 
            }
        });
    };

    //shop favorite
    $scope.shopIndex = '';
    $scope.favouritestores = function(id,element) {
        $scope.storeLoading = true;
        $scope.shopIndex = '';
        for (i = 0; i < locations.length; i++) {
            if(locations[i][8] == id){
                $scope.shopIndex = i;
                break;
            }
        }
        if($(element.target).hasClass('active')){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.store_id = id;
            StoreService.unfavouritestores(opts, function(data) {
                if(data.code == 101) {
                    $(element.target).removeClass('active');
                    locations[$scope.shopIndex][19] = 0;
                    if($scope.favAvailable == 1){
                        $scope.enableFilter();
                    } else {
                        $scope.storeLoading = false;
                    }
                } else {
                    $scope.storeLoading = false;
               }
               
            });
        } else {
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.store_id = id;
            StoreService.favouritestores(opts, function(data) {
                if(data.code == 101) {
                    $(element.target).addClass('active');
                    locations[$scope.shopIndex][19] = 1;
                    if($scope.favAvailable == 1){
                        $scope.enableFilter();
                    } else {
                        $scope.storeLoading = false;
                    }
                } else {
                    $scope.storeLoading = false;
                }
            });   
        }
        
    };

    $scope.listActive = 'active';
    $scope.changeView = function(layout) {
        if(layout == 'grid'){
            $scope.gridActive = 'active'; 
            $scope.listActive = ''; 
        } else if(layout == 'list'){
            $scope.listActive = 'active'; 
            $scope.gridActive = '';
        }
    };

    

    /*$scope.loadMore = function() {
        var chk = document.getElementById("shotfilter").checked;
        var dpchk = document.getElementById("dpfilter").checked;
        var mapAddSearch = $scope.addressFilter;
        if($scope.searchText === '' && mapAddSearch === '' && chk===false && dpchk ===false ) {         
            if($scope.tab == 'myStore') {
                $scope.storeAllList = [];
                $scope.myStoreList($scope.tab);
            } else {
                $scope.storeMyList = [];
                $scope.showStoreList($scope.tab);
            }
        } 
        if (mapAddSearch != ''){
            $scope.searchAddressShop($scope.storeIdArray);
        }
        
    };
    */
     /* function to cancel the service when accept new request
    * 
    */
    $scope.searchText ='';
    var DELAY_TIME_BEFORE_POSTING = 300;
    //var element = $('#search');
    var currentTimeout = null;

    $('#shopserchbox').keypress(function() {
    
      var model = $scope.searchText;
      //var poster = model($scope);
      if(currentTimeout) {
        $timeout.cancel(currentTimeout);
      }
      currentTimeout = $timeout(function(){
        if($scope.searchText.length == 0) {
        $scope.searchStore();
        }
      }, DELAY_TIME_BEFORE_POSTING)
    });

    $scope.searchRes = 0;
    $scope.searchTotalSize = 0;
    $scope.searchStore = function(tab, itemsPerPage) {
        $scope.pagevalue = 'storeNameSearch';
        $scope.searchRes = 0;
        $scope.storeLoading = true;
        $scope.viewAllActive = 'current';
        $scope.myStoreActive = '';
        var opts = {};
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        opts.user_id = APP.currentUser.id;
        $scope.tab = 'viewAll';
        if($scope.searchText.length >= 3 ){
            if(($scope.searchText === undefined || $scope.searchText === '') && $scope.searchRes == 1) {
                $scope.allRes = 1;
                $scope.storeMyList = [];
                $scope.storeAllList = [];
                $scope.showStoreList($scope.tab);
            }
            opts.business_name = ($scope.searchText === undefined ? '' : $scope.searchText); 
            opts.limit_start = limit_start;
            opts.lang_code = $scope.currentLanguage;
            opts.limit_size = itemsPerPage;
            if($scope.searchTotalSize > limit_start || $scope.searchTotalSize == 0) {
                StoreService.searchStore(opts, function(data) {
                    $scope.filterresult = false;
                    $scope.catebg = '';
                    $scope.subCateBg = '';
                    $scope.searchRes = 1;
                    if(data.code == 101) {
                        $scope.storeListObject =  data.data;
                        $scope.searchTotalSize = data.size;
                        $scope.totalItems = Math.ceil(data.size/itemsPerPage); 
                        $scope.range = []; 
                        for (var i=1; i<=$scope.totalItems; i++) {
                            $scope.range.push(i);
                        } 
                        $scope.storeLoading = false;
                        $scope.notFound = false;
                    } else if(data.code == 121) {
                        $scope.storeListObject =  [];
                        $scope.notFound = true;
                        $scope.storeLoading = false;
                    }
                    else {
                        $scope.storeListObject =  [];
                        $scope.notFound = true;
                        $scope.storeLoading = false;
                    }
                });
            }
        }
    };


    $scope.deleteStore = function(id, parentId) { 
        $("#store" + id).hide();
        $("#storedelete" + id).show();
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = id;
        //opts.store_type = (parentId) ? 2 : 1; condition changed on 14 jan
        opts.store_type = 1; // store type 1 for parent store delete
        StoreService.deleteStore(opts, function(data) {
            if(data.code == 101) {
                $(".storecoverid" + id).hide();
            } else {
                $("#store" + id).show();
                $("#storedelete" + id).hide();
            }
        });
    };

    $scope.deleteStoreGrid = function(id, parentId) { 
        $("#store" + id).hide();
        $("#storedelete" + id).show();
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = id;
       //opts.store_type = (parentId) ? 2 : 1; condition changed on 14 jan
        opts.store_type = 1; // store type 1 for parent store delete
        StoreService.deleteStore(opts, function(data) {
            if(data.code == 101) {
                /*var index = 0;
                angular.forEach($scope.storeListObject, function(idx) {
                    if(idx.id != id){
                        index = index + 1;
                    }else{
                        $scope.storeListObject.splice(index, 1);
                    }
                });*/
                $(".storecoverid" + id).hide();
                //$scope.storeListObject.splice(id, 1);
            } else {
                $("#store" + id).show();
                $("#storedelete" + id).hide();
            }
        });
    };

    //format euro currency
    $scope.format1 = function(n, currency) {
         n = Number(n);
        return currency + "" + n.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
    }

    //map functionality starts
    var mapArray = [];
    var locations = [];
    $scope.maploader = false;
    var i;
    var m ;
    var n = [];
    var shopIdArr = [];
    $scope.getmapstores = function(){
        $scope.maploader = true;
            var opts = {"user_id":APP.currentUser.id, "lang_code" : $scope.currentLanguage}; 
            StoreService.getmapstores(opts, function(data){
                //console.log('data'+data.data);
                if(data.code == 101) {
                    $scope.detail = data.data;
                    var mapArray = data.data;
                    for(var i=0; i<mapArray.length; i++) {
                        n.push(mapArray[i].name);
                        shopIdArr.push(mapArray[i].id);
                        var mi = new Array(mapArray[i].mapplace, mapArray[i].latitude,mapArray[i].longitude, mapArray[i].thumb_path, mapArray[i].name, mapArray[i].credit_status, mapArray[i].shot_status, mapArray[i].dp_status, mapArray[i].id, mapArray[i].credit_available, mapArray[i].catogory_id, mapArray[i].sub_category_id, mapArray[i].momosy_status, mapArray[i].card_status, mapArray[i].shop_rating, mapArray[i].shop_category, mapArray[i].shop_sub_category, mapArray[i].shop_keyword, mapArray[i].businessname,mapArray[i].is_fav, $scope.friendtransaction);
                            locations.push(mi);
                        }
                        $('.shop-map').show();
                        $scope.toggleFilterFalse();
                        $scope.initialize();
                        $scope.maploader = false;
                } else {                
                    $scope.maploader = false;                
                }
        });
    }

    $scope.getmapstores();

    var res = 1;
    $scope.searchTot = 0;
    //call service
    $scope.searchshoponmaps = function(arrCollection, req, itemSize){        
            //var opts = {"user_id":APP.currentUser.id,"shops":arrCollection};
            var opts = req;
            if(res==1){
            StoreService.searchshoponmaps(opts, function(data){
            $scope.filterresult = false;
            res=0;
            if(data.code == 101) {
                $scope.storeLoading = false;
                $scope.storeListObject = data.data.stores; 
                if($scope.storeListObject.length < 1) {
                    $scope.notFound = true;   
                } else {
                    $scope.notFound = false;   
                }
                res=1;
                $scope.searchTot = itemSize;
                $scope.totalItems = Math.ceil(itemSize/$scope.itemsPerPage); 
                $scope.range = [];  
                for (var i=1; i<=$scope.totalItems; i++) {
                    $scope.range.push(i);
                }    
            } else {    
                $scope.storeListObject = [];            
                $scope.notFound = true;   
                $scope.storeLoading = false;           
            }
        }); 
        }
    }

    var limit_starts = 0;
    var limit_end = 12;
    var idCollection = [];
    var sortArrayCollection = [];
    var sorttedId = [];
    $scope.filterArrayChange = '';
    $scope.searchAddressShop = function(arrCollection) {
        $scope.pagevalue = 'storeAddSearch';
        $scope.arrCollection = arrCollection;
        sortArrayCollection = [];
        sorttedId = [];
        if($scope.filterApply == 1){
            $scope.arrCollection = $scope.filterArrayChange;
        } else {
            $scope.filterArrayChange = '';
            $scope.filterArrayChange = $scope.arrCollection;
        }

        for (var i = 0; i < $scope.arrCollection.length; i++){
            for(var j = 0; j < locations.length; j++) {
                if(locations[j][8] == $scope.arrCollection[i]){
                    sortArrayCollection.push({'id' :locations[j][8], 'credit':locations[j][9], 'rating': locations[j][14]});
                }
            }
        }
        sortArrayCollection.sort(function(a, b) {
            if($scope.orderValue == 1){
                return b.credit - a.credit;
            } else {
                return b.rating - a.rating;
            }
        });

        for(var k=0; k<sortArrayCollection.length; k++){
            sorttedId.push(sortArrayCollection[k].id);
        }
        $scope.arrCollection = '';
        $scope.arrCollection = sorttedId;
        limit_starts = ($scope.currentPage-1)*$scope.itemsPerPage;
        limit_end = limit_starts + $scope.itemsPerPage;
        if($scope.searchTot > limit_starts || $scope.searchTot == 0 ) {
            $scope.storeLoading = true;
            idCollection = $scope.arrCollection;
            var tempArray = idCollection.slice(limit_starts,limit_end);
            var req = {"user_id":APP.currentUser.id,"shops":tempArray,"lang_code":$scope.currentLanguage};
            $scope.searchshoponmaps(arrCollection, req, $scope.arrCollection.length); 
        } 
        $scope.filterApply = 0;
    }
    /*search by store name starts*/
    //var n = ["Action Comics", "Detective Comics", "Superman", "Fantastic Four", "Amazing Spider-Man", "Batman Series", "Repoman Seeks", "Love Comics", "Anime Comics"];

    $scope.idArrays = [];
    $scope.allArrayIndex = [];
    //search text function
    var containsText = function (search) {
        var gotText = false;
        for (var i in locations) {
            var re = new RegExp(search, "ig");
            var nameS = re.test(locations[i][4]);
            var cateS = re.test(locations[i][15]);
            var subCateS = re.test(locations[i][16]);
            var busS = re.test(locations[i][18]);
            var keyS = re.test(locations[i][17]);
            if (nameS || cateS || subCateS || busS || keyS) {            
                if($scope.itemsArr.indexOf(locations[i][4]) == -1)
                {   
                    //if ($scope.itemsArr.length === 20) { break }
                    $scope.allArrayIndex.push(i);
                    $scope.itemsArr.push(locations[i][4]);
                    $scope.idArrays.push(shopIdArr[i]);
                }
                gotText = true;
            }
        }
        return gotText;
    };
    $scope.searchText = "";
    $scope.itemsSelectedArr = [];
    $scope.itemsArr = [];
    $scope.itemsDisplaPanel = false;
    $scope.searchMe = function (search) {
        $scope.itemsArr = [];
        $scope.idArrays = [];
        $scope.allArrayIndex = [];
        $scope.itemsDisplaPanel = false;
        if (search.length > 2) {
                
            var foundText = containsText(search);
            $scope.itemsDisplaPanel = (foundText) ? true : false;
            $scope.itemsDisplaPanelNone = (foundText) ? false : true;
            //$scope.shopNameOnKey();
        }
    };

    $('#pac-input').focus(function() {
       $scope.itemsDisplaPanel = false;
    });

    $('body').click(function() {
       $scope.itemsDisplaPanel = false;
       $scope.itemsDisplaPanelNone = false;
    });

    $scope.searchKey = '';
    $scope.itemsDisplaPanelNone = false;
    $scope.shopNameMarker = [];
    $scope.shopNameOnKey = function() {
        jQuery("#mapstoresearch").keydown(function(e) {
            $scope.currentPage = 1;
            if (e.keyCode == 38) { // up
                //console.log('keyup pressed');
                var selected = jQuery('.selected');
                jQuery(".mainshop").removeClass('selected');
                if (selected.prev().length == 0) {
                    selected.siblings().last().addClass('selected');
                    jQuery('.autocompletepanel').scrollTo('.selected');
                } else {
                    selected.prev().addClass('selected');
                    jQuery('.autocompletepanel').scrollTo('.selected');
                }
                $scope.searchKey = jQuery(".selected").children().html();
                jQuery("#mapstoresearch").val($scope.searchKey);
            }
            if (e.keyCode == 40) { // down
                //console.log('keydown');
                var selected = jQuery('.selected');
                jQuery(".mainshop").removeClass('selected');
                //console.log(selected.next().length+'ln');
                if (selected.next().length == 0) {
                    //selected.siblings().first().addClass('selected');
                    jQuery(".mainshop:first-child").addClass('selected');
                    jQuery('.autocompletepanel').scrollTo('.selected');  
                } else {
                    selected.next().addClass('selected');
                    jQuery('.autocompletepanel').scrollTo('.selected');
                }
                $scope.searchKey = jQuery(".selected").children().html();
                jQuery("#mapstoresearch").val($scope.searchKey);
            }
            if (e.keyCode == 13) { // enter
                $scope.itemsDisplaPanel = false;
                var selected = jQuery('.selected');
                if(selected.length != 0) {
                    $scope.itemSelectedData($scope.searchKey); 
                } else{
                    $scope.setShopNameMarker(null);
                    $scope.shopNameMarker = [];
                    $scope.storeIdArray = $scope.idArrays;
                    $scope.searchAddressShop($scope.idArrays);
                    //pin display on map
                    $scope.subcategories = '';
                    $scope.catebg = '';
                    $scope.subCateBg = '';
                    $scope.viewAllActive = '';
                    $scope.myStoreActive = '';
                    markerClusterer.setMap(null);
                    document.getElementById("shotfilter").checked = false;
                    document.getElementById("dpfilter").checked = false;
                    $scope.addressFilter = '';
                    $scope.setMyshop(null);
                    $scope.setFilterMarker(null);
                    $scope.setAllMap(null);
                    $scope.setRemoveAllMap(null);
                    $scope.setDpMarker(null);
                    $scope.setDpShotMarker(null);
                    $scope.filterfalse = $scope.filterfalse === 0 ? 1: 0;
                    if($scope.store != undefined) {
                      $scope.store.storecategory = '';  
                      $scope.store.subcategory = '';
                    }
                    $scope.cardAvailable = 0;
                    $scope.favAvailable = 0;
                    $scope.cateval = 'blank';
                    $scope.subCateVal = 'blank';
                    if($scope.allArrayIndex.length == 0) {
                        $('#results').html('<span>'+$scope.i18n.store.result_not_found+'</span>');
                    } else {
                        $('#results').html('<span>'+$scope.allArrayIndex.length+' '+$scope.i18n.store.result_found+'</span>');
                    }
                    var infowindow = new google.maps.InfoWindow();
                    var marker, i;
                    var pin = {
                        url: 'app/assets/images/green-pin.png'
                    };

                    var pin2 = {
                        url: 'app/assets/images/silver-pin.png'
                    }; 

                    for (var i = 0; i<$scope.allArrayIndex.length;i++){
                        var stIndex = $scope.allArrayIndex[i];
                        //console.log(locations[stIndex][8]+'id'+stIndex+'name'+locations[stIndex][4]);
                        
                        if(locations[stIndex][5] == 1) {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(locations[stIndex][1], locations[stIndex][2]),
                            map: map,
                            icon :pin2
                            });
                        } else {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(locations[stIndex][1], locations[stIndex][2]),
                            map: map,
                            icon :pin
                            });
                        }

                        marker.set('shopId', locations[stIndex][8]);
                        //content set here
                        //shopCategoryVal = '';
                        if(locations[stIndex][15] == null || locations[stIndex][15] == ''){
                            shopCategoryVal = "<div class='category-dec blank'></div>";
                        } else {
                            shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[stIndex][15]+"</div>";
                        }

                        votestructure = ''; 
                        var num = parseFloat(locations[stIndex][14]).toFixed(1);

                        for(var k = 0; k < 5; k++){
                            if((num <= (k+0.5)) && (num > (k+0.0))){
                                votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                            } else if(num >= (k+0.6)){
                                votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                            } else {
                                votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                            }
                        }

                        if(locations[stIndex][19] == 1){
                            favoriteIcon = "<span class='active'></span>";
                        } else {
                            favoriteIcon = "<span></span>";
                        }

                        if ((locations[stIndex][3] == '') || (locations[stIndex][3] == undefined)) {
                           var content = "<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[stIndex][8]+"'>"+locations[stIndex][4]+"</a></div><div>"+locations[stIndex][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[stIndex][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[stIndex][9], '€')+"</span></div></div></div></div>";
                        } else {
                            var content = "<div class='mappopup'><div class='pic-container'><img src='"+locations[stIndex][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[stIndex][8]+"'>"+locations[stIndex][4]+"</a></div><div>"+locations[stIndex][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[stIndex][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[stIndex][9], '€')+"</span></div></div></div></div>";   
                        }
                        $scope.firecreditshop = function(shopId) {
                          $scope.getstorecredit(shopId);  
                          $scope.frindBoughtCount(shopId);
                        }

                        google.maps.event.addListener(marker, 'click', (function(marker, content) {
                            return function() {
                                var shopmapid = this.get('shopId');
                                $scope.firecreditshop(shopmapid);
                                // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                                infowindow.setContent(content);
                                infowindow.open(map, marker);
                            }
                        })(marker, content));  
                        $scope.shopNameMarker.push(marker);
                    }
                }
            }

            if($scope.itemsDisplaPanel == false) {
                $scope.itemsDisplaPanelNone = false;
            } else {
               // $scope.itemsDisplaPanelNone = true;
            }
             
        });
    }

    $scope.shopNameOnKey();

    $scope.itemSelectedData = function (str) {
        jQuery(".mainshop").removeClass('selected');
        $scope.itemsDisplaPanel = false;
        $scope.searchText = str;
         $('#results').html('');
        var a = n.indexOf(str);
        $scope.markerpopup(a);
        $scope.searchText;
        var model = $scope.searchText;
        //var poster = model($scope);
        if(currentTimeout) {
            $timeout.cancel(currentTimeout);
        }
          currentTimeout = $timeout(function(){
            $scope.searchStore('viewAll', $scope.itemsPerPage);
          }, DELAY_TIME_BEFORE_POSTING)
            //return (str) ? $scope.itemsSelectedArr.push(str) : false;
        };

    $scope.itemSelectedDelet = function (sel) {
        var idx = $scope.itemsSelectedArr.indexOf(sel);
        if (idx !== -1) $scope.itemsSelectedArr.splice(idx, 1);
        $scope.itemsDisplaPanel = false;
    };


    //get Category
    $scope.searchCategory = function(currentLanguage){
            var opts = {};
            opts.lang_code = currentLanguage;
            opts.session_id = APP.currentUser.id;
            $scope.cancelCategoryRequest = false;
            opts.session_id = APP.currentUser.id;
            ProfileService.searchCatagory(opts,function(data){
                if(data.code === 101 && data.message === 'SUCCESS'){
                    if(data.data.length > 0){
                        $scope.categories = data.data;
                    }
                }
            });
    };

    //get subcategory
    $scope.cateval = 'blank';
    $scope.subCateVal = 'blank';
    $scope.catebg = '';
    $scope.getSubCategory = function(){
            $scope.subCateBg = '';
            $scope.subCateVal = 'blank';
         //console.log($scope.store.storecategory.id+'cate');
            //$scope.subcategories = '';
            if($scope.store.storecategory == null ) {
                $scope.catebg = '';
                $scope.enableKeyword = true;
                $scope.enableSubcategory = true;
                $scope.cateval = 'blank';
                $scope.subCateBg = '';
                $scope.subCateVal = 'blank';
                $scope.store.subcategory = '';
                $scope.enableFilter();            
            } else if($scope.store.storecategory.id != '' && $scope.store.storecategory.id != 0){
                //enable disable keyword box
                $scope.catebg = 'active';
                $scope.enableKeyword = false;
                $scope.enableSubcategory = false;
                var opts = {};
                opts.session_id = APP.currentUser.id;
                opts.lang_code = $scope.currentLanguage;
                opts.cat_id = $scope.store.storecategory.id;
                opts.session_id = APP.currentUser.id;
                $scope.cancelCategoryRequest = false;
                StoreService.getSubCategoryList(opts,function(data){
                    if(data.code === 101 && data.message === 'SUCCESS'){
                        $scope.subcategories = data.data;
                    }
                });
                $scope.cateval = $scope.store.storecategory.id;
                $scope.enableFilter($scope.store.storecategory.id);
            } else {
                    $scope.enableKeyword = true;
                    $scope.enableSubcategory = true;
            }
        };
    $scope.searchCategory($scope.currentLanguage); 

    $scope.shopSubCatogory = function(){
        $scope.subCateBg = '';
        if($scope.store.subcategory == null){
            $scope.subCateBg = '';
            $scope.subCateVal = 'blank';
            $scope.enableFilter('main');
        } else if( $scope.store.subcategory.id != '' && $scope.store.subcategory.id != 0){
            $scope.subCateBg = 'active';
            $scope.subCateVal = $scope.store.subcategory.id;
            $scope.enableFilter('main');
        }
    }  


    /*search by store name ends*/
    var arrId = [];
    var arrMarker = [];
    var geocoder = new google.maps.Geocoder();
    var circle = null;
    var gmarkers = [];
    var map;
    var arrMapresult = [];
    var arrShotMarker = [];
    var arrDpMarker = [];
    var arrDpnShotMarker = [];
    var arrSearchStore = [];
    var markerClusterer = null;
    $scope.storeIdArray = '';
    var filtermarker = [];
    var filterAllData = [];
    var filterArray = [];
    $scope.initialize = function () {
        document.getElementById("pac-input").value = '';
        var markers = [];
        var centerLatLng = new google.maps.LatLng(41.9000,12.4833);
        map = new google.maps.Map(document.getElementById('map-canvas'), {
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            zoom:6,
            center: centerLatLng
        });

        // Create the search box and link it to the UI element.
        var input = (document.getElementById('pac-input'));
        //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        var searchBox = new google.maps.places.SearchBox(
        /** @type {HTMLInputElement} */(input));
        // [START region_getplaces]
        // Listen for the event fired when the user selects an item from the
        // pick list. Retrieve the matching places for that item.
        google.maps.event.addListener(searchBox, 'places_changed', function() {
            // markerClusterer.clearMarkers();
            $scope.currentPage = 1;
            $scope.catebg = '';
            $scope.subCateBg = '';
            $scope.storeListObject = [];
            $scope.viewAllActive = 'current';
            $scope.myStoreActive = '';
            $scope.searchText = '';
            markerClusterer.setMap(null);
            $scope.rmFilters();
            filterAllData = [];
            document.getElementById("shotfilter").checked = false;
            document.getElementById("dpfilter").checked = false;
            var address = document.getElementById('pac-input').value;
            document.getElementById('pac-input').value = address;
            $scope.addressFilter = address;
            var radius = parseInt(50, 10)*1000;
            geocoder.geocode({ 'address': address}, function(results, status) {

                if (status == google.maps.GeocoderStatus.OK) {
                    var latitude = results[0].geometry.location.lat();
                    var longitude = results[0].geometry.location.lng();
                    var latlng = new google.maps.LatLng(latitude, longitude);            
                    var marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location
                    });
                    marker.setMap(null);
                    if (circle) circle.setMap(null);
                        circle = new google.maps.Circle({center:marker.getPosition(),                                 //radius: radius,
                                             //fillOpacity: 0.35,
                                            // fillColor: "#FF0000",
                                             strokeWeight: 0,
                                             map: map});
                    var bounds = new google.maps.LatLngBounds();
                    $('#results').html('');
                    arrMapresult.length = 0;
                    var arrId = [];
                    for (var i=0; i<gmarkers.length;i++) {
                        if (google.maps.geometry.spherical.computeDistanceBetween(gmarkers[i].getPosition(),marker.getPosition()) < radius) { 
                            arrId.push(locations[i][8]);
                            bounds.extend(gmarkers[i].getPosition())
                            gmarkers[i].setMap(map);
                            arrMapresult.push(gmarkers[i].getPosition());
                            var infowindow = new google.maps.InfoWindow();
                            var marker, i;
                            var pin = {
                                url: 'app/assets/images/silver-pin.png'
                            };
                            gmarkers[i].getPosition();
                            google.maps.event.addListener(marker, 'click', (function(marker, i) {
                                return function() {
                                    $scope.getstorecredit(locations[i][8]);
                                    $scope.frindBoughtCount(locations[i][8]);
                                    shopCategoryVal = '';
                                    favoriteIcon = '';
                                    if(locations[i][15] == null || locations[i][15] == ''){
                                        shopCategoryVal = "<div class='category-dec blank'></div>";
                                    } else {
                                        shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                                    }

                                    votestructure = ''; 
                                    var num = parseFloat(locations[i][14]).toFixed(1);

                                    for(var k = 0; k < 5; k++){
                                        if((num <= (k+0.5)) && (num > (k+0.0))){
                                            votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                        } else if(num >= (k+0.6)){
                                            votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                        } else {
                                            votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                        }
                                    }

                                    if(locations[i][19] == 1){
                                        favoriteIcon = "<span class='active'></span>";
                                    } else {
                                        favoriteIcon = "<span></span>";
                                    }


                                    if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                        infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                                    } else {
                                        infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                                    }
                                    infowindow.open(map, marker);
                            }
                            })(marker, i));
                        } else {
                              gmarkers[i].setMap(null);        
                        }
                    }    
                    limit_starts = 0;
                    limit_end = 12;
                    $scope.storeIdArray = arrId;
                    $scope.searchAddressShop(arrId);

                    if(arrMapresult.length == 0) {
                        bounds.extend(results[0].geometry.location);
                        $('#results').html('<span>'+$scope.i18n.store.result_not_found+'</span>');
                    } else {
                        $('#results').html('<span>'+arrMapresult.length+' '+$scope.i18n.store.result_found+'</span>');
                    }
                    map.fitBounds(bounds);
                    map.setZoom(9);
                } else {
                  alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        });
        // [END region_getplaces]
        // Bias the SearchBox results towards places that are within the bounds of the
        // current map's viewport.
        google.maps.event.addListener(map, 'bounds_changed', function() {
            var bounds = map.getBounds();
            searchBox.setBounds(bounds);
        });

        if (markerClusterer) {
              markerClusterer.clearMarkers();
        }
        var infowindow = new google.maps.InfoWindow();
        var marker, i;
        var pin = {
            url: 'app/assets/images/green-pin.png'
        };
        var pin2 = {
            url: 'app/assets/images/silver-pin.png'
        };
        for (i = 0; i < locations.length; i++) {
            if(locations[i][5] == 0){
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon :pin
                });
            } else {
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon :pin2
                });
            };
            google.maps.event.addListener(marker, 'click', (function(marker, i) {
                return function() {
                    $scope.getstorecredit(locations[i][8]);
                    $scope.frindBoughtCount(locations[i][8]);
                    shopCategoryVal = '';
                    favoriteIcon = '';
                    if(locations[i][15] == null || locations[i][15] == ''){
                        shopCategoryVal = "<div class='category-dec blank'></div>";
                    } else {
                        shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                    }

                    votestructure = ''; 
                    var num = parseFloat(locations[i][14]).toFixed(1);

                    for(var k = 0; k < 5; k++){
                        if((num <= (k+0.5)) && (num > (k+0.0))){
                            votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                        } else if(num >= (k+0.6)){
                            votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                        } else {
                            votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                        }
                    }
                    if(locations[i][19] == 1){
                        favoriteIcon = "<span class='active'></span>";
                    } else {
                        favoriteIcon = "<span></span>";
                    }

                    if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                        infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                    } else {
                        infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                    }              
                    infowindow.open(map, marker);
                }
            })(marker, i));
            arrMarker.push(marker);
            gmarkers.push(marker);
        }
        markerClusterer = new MarkerClusterer(map, arrMarker,{
            maxZoom : 12
        });
        
        google.maps.event.addListener(map, 'zoom_changed', function() {
        var zoomLevel = map.getZoom();    
        if(zoomLevel < 5) {
            //document.getElementById("shotfilter").checked = false;
            //document.getElementById("dpfilter").checked = false;
            //$scope.addressFilter = '';
            //$scope.searchText = '';
            if(circle != null) {
                circle.setMap(null);
            }
            //$('#results').html('');
           // markerClusterer.setMap(null);
            //$scope.setDpShotMarker(null);
            //$scope.setDpMarker(null);
            //$scope.setAllMap(null);
            //$scope.setAllShotMap(null);
            //$scope.setAllMap(map);
           // markerClusterer.setMap(map);
        }
      });
    }

    $scope.markerpopup = function(index) {
        $scope.viewAllActive = 'current';
        $scope.myStoreActive = '';
        document.getElementById("shotfilter").checked = false;
        document.getElementById("dpfilter").checked = false;
        $scope.setShopNameMarker(null);
        markerClusterer.setMap(null);
        $scope.setMyshop(null);
        $scope.setAllShotMap(null);
        $scope.setAllMap(null);
        $scope.setFilterMarker(null);
        $scope.setAllMap(map);
        $scope.setDpMarker(null);
        $scope.setDpShotMarker(null);
        if(circle != null) {
            circle.setMap(null);
        }
        $scope.cardAvailable = 0;
        $scope.favAvailable = 0;
        $scope.cateval = 'blank';
        $scope.subCateVal = 'blank';
        $scope.addressFilter = '';
        google.maps.event.trigger(arrMarker[index], 'click');
        map.setZoom(10);
    }

    $scope.setAllMap = function(map) {
        for (var i = 0; i < arrMarker.length; i++) {
            arrMarker[i].setMap(map);
            gmarkers[i].setMap(map);
        }
    }

    $scope.setRemoveAllMap = function(map) {
        for (var i = 0; i < arrSearchStore.length; i++) {
            arrSearchStore[i].setMap(map);
        }
    }

    $scope.setMyshop = function(map) {
        for (var i = 0; i < $scope.myShopMarker.length; i++) {
            $scope.myShopMarker[i].setMap(map);
        }
    }

    $scope.setShopNameMarker = function(map) {
        for (var i = 0; i < $scope.shopNameMarker.length; i++) {
            $scope.shopNameMarker[i].setMap(map);
        }
    }

    $scope.setAllShotMap = function(map) {
        for (var i = 0; i < arrShotMarker.length; i++) {
            arrShotMarker[i].setMap(map);
        }
    }

    $scope.setDpMarker = function(map) {
        for (var i = 0; i < arrDpMarker.length; i++) {
            arrDpMarker[i].setMap(map);
        }
    }
    $scope.setDpShotMarker = function(map) {
        for (var i = 0; i < arrDpnShotMarker.length; i++) {
            arrDpnShotMarker[i].setMap(map);
        }
    }
    $scope.setFilterMarker = function(map) {
        for (var i = 0; i < filtermarker.length; i++) {
            filtermarker[i].setMap(map);
        }
    }

    $scope.cardAvailable = 0;
    $scope.toggleCardAvailable = function() {
       $scope.cardAvailable = $scope.cardAvailable === 0 ? 1: 0;
       $scope.enableFilter(); 
    }

    $scope.favAvailable = 0;
    $scope.favArray = [];
    $scope.toggleShopFav = function() {
       $scope.favAvailable = $scope.favAvailable === 0 ? 1: 0;
       $scope.enableFilter();
    }

    $scope.rmFilters = function() {
        if($scope.myShopMarker != undefined) {
            $scope.setMyshop(null);
        }
        $scope.addressFilter = '';
        $scope.searchText = '';
        document.getElementById("shotfilter").checked = false;
        document.getElementById("dpfilter").checked = false;
        if($scope.store != undefined) {
            $scope.store.storecategory = '';  
            $scope.store.subcategory = '';
        }
        $scope.setShopNameMarker(null);
        $scope.cardAvailable = 0;
        $scope.favAvailable = 0;
        $scope.cateval = 'blank';
        $scope.subCateVal = 'blank';
        $scope.setFilterMarker(null);
        $scope.setAllMap(null);
        $scope.setRemoveAllMap(null);
        $scope.setDpMarker(null);
        $scope.setDpShotMarker(null); 
    }

    $scope.toggleFilterFalse = function() {
        $scope.subcategories = '';
        $scope.catebg = '';
        $scope.subCateBg = '';
        if($scope.myShopMarker != undefined) {
            $scope.setMyshop(null);
        }
        $scope.addressFilter = '';
        $scope.searchText = '';
        document.getElementById("shotfilter").checked = false;
        document.getElementById("dpfilter").checked = false;
        $scope.filterfalse = $scope.filterfalse === 0 ? 1: 0;
        if($scope.store != undefined) {
          $scope.store.storecategory = '';  
          $scope.store.subcategory = '';
        }
        $scope.cardAvailable = 0;
        $scope.favAvailable = 0;
        $scope.cateval = 'blank';
        $scope.subCateVal = 'blank';
        $scope.enableFilter(); 
    }

    $scope.stopFilters = function() {
        $scope.showStoreList($scope.tab, $scope.itemsPerPage);
        $scope.pagevalue = '';
        $scope.setAllMap(map);
    }

    $scope.myShopMarker = [];
    $scope.fireMyshopMarker = function(indexArray){
        $scope.setShopNameMarker(null);
        $scope.subcategories = '';
        $scope.catebg = '';
        $scope.subCateBg = '';
        markerClusterer.setMap(null);
        document.getElementById("shotfilter").checked = false;
        document.getElementById("dpfilter").checked = false;
        $scope.addressFilter = '';
        $scope.searchText = '';
        $scope.setMyshop(null);
        $scope.setFilterMarker(null);
        $scope.setAllMap(null);
        $scope.setRemoveAllMap(null);
        $scope.setDpMarker(null);
        $scope.setDpShotMarker(null);
        $scope.filterfalse = $scope.filterfalse === 0 ? 1: 0;
        if($scope.store != undefined) {
          $scope.store.storecategory = '';  
          $scope.store.subcategory = '';
        }
        $scope.cardAvailable = 0;
        $scope.favAvailable = 0;
        $scope.cateval = 'blank';
        $scope.subCateVal = 'blank';
        //$('#results').html('');
        if(indexArray.length == 0) {
            $('#results').html('<span>'+$scope.i18n.store.result_not_found+'</span>');
        } else {
            $('#results').html('<span>'+indexArray.length+' '+$scope.i18n.store.result_found+'</span>');
        }
        var infowindow = new google.maps.InfoWindow();
        var marker, i;
        var pin = {
            url: 'app/assets/images/green-pin.png'
        };

        var pin2 = {
            url: 'app/assets/images/silver-pin.png'
        };  
        for (var i = 0; i<indexArray.length;i++){
            var stIndex = indexArray[i];
            //console.log(locations[stIndex][5]+'core');
            
            if(locations[stIndex][5] == 1) {
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[stIndex][1], locations[stIndex][2]),
                map: map,
                icon :pin2
                });
            } else {
                marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[stIndex][1], locations[stIndex][2]),
                map: map,
                icon :pin
                });
            }

            google.maps.event.addListener(marker, 'click', (function(marker, i) {
                return function() {
                    $scope.getstorecredit(locations[stIndex][8]);
                    $scope.frindBoughtCount(locations[stindex][8]);
                    // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                    shopCategoryVal = '';
                    favoriteIcon = '';
                    if(locations[stIndex][15] == null || locations[stIndex][15] == ''){
                        shopCategoryVal = "<div class='category-dec blank'></div>";
                    } else {
                        shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[stIndex][15]+"</div>";
                    }

                    votestructure = ''; 
                    var num = parseFloat(locations[stIndex][14]).toFixed(1);

                    for(var k = 0; k < 5; k++){
                        if((num <= (k+0.5)) && (num > (k+0.0))){
                            votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                        } else if(num >= (k+0.6)){
                            votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                        } else {
                            votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                        }
                    }

                    if(locations[stIndex][19] == 1){
                        favoriteIcon = "<span class='active'></span>";
                    } else {
                        favoriteIcon = "<span></span>";
                    }

                    if ((locations[stIndex][3] == '') || (locations[stIndex][3] == undefined)) {
                        infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[stIndex][8]+"'>"+locations[stIndex][4]+"</a></div><div>"+locations[stIndex][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[stIndex][9], '€')+"</span></div></div></div></div>");
                    } else {
                        infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[stIndex][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[stIndex][8]+"'>"+locations[stIndex][4]+"</a></div><div>"+locations[stIndex][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[stIndex][9], '€')+"</span></div></div></div></div>");   
                    }


                    infowindow.open(map, marker);
                }
            })(marker, i));  
            $scope.myShopMarker.push(marker);
        }
    }

    $scope.cateval = 'blank';
    $scope.subCateVal = 'blank';
    //select box filter category
    $scope.searchAddStop = false;
    $scope.enableFilter = function() {
        $scope.filterresult = true;
        if(markerClusterer){
            markerClusterer.setMap(null);
        }
        $scope.viewAllActive = '';
        $scope.myStoreActive = '';
        document.getElementById("shotfilter").checked = false;
        document.getElementById("dpfilter").checked = false;
        $scope.addressFilter = '';
        $scope.searchText = '';
        $scope.setMyshop(null);
        $scope.setShopNameMarker(null);
        $scope.setAllMap(null);
        $scope.setFilterMarker(null);
        $scope.setAllShotMap(null);
        $scope.setDpMarker(null);
        $scope.setDpShotMarker(null);
        var infowindow = new google.maps.InfoWindow();
        filterArray = [];
        filterAllData = [];
        var marker, i;
        var pin = {
            url: 'app/assets/images/green-pin.png'
        };

        var pin2 = {
            url: 'app/assets/images/silver-pin.png'
        };  
        for (i = 0; i < locations.length; i++) {
            //filter with category (true) , subcategory(false), momosy card(fase)
            if((locations[i][10] == $scope.cateval && $scope.cateval != 'blank') && ($scope.subCateVal == 'blank') && ($scope.cardAvailable == 0) && ($scope.favAvailable == 0)) {
                //console.log('for maincate'+locations[i][8]+'id'+locations[i][10]+','+$scope.cateval+'sub'+locations[i][11]+','+$scope.subCateVal);
                if(locations[i][5] == 1) {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin2
                    });
                } else {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin
                    });
                }
            
                filterArray.push(locations[i][8]);
                var arrData = new Array(locations[i][0], locations[i][1], locations[i][2], locations[i][3], locations[i][4], locations[i][5], locations[i][6], locations[i][7], locations[i][8], locations[i][9], locations[i][10],locations[i][11], locations[i][12] );
                filterAllData.push(arrData);
                $scope.searchAddStop = false;
                google.maps.event.addListener(marker, 'click', (function(marker, i) {
                    return function() {
                        $scope.getstorecredit(locations[i][8]);
                        $scope.frindBoughtCount(locations[i][8]);
                        // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                        shopCategoryVal = '';
                        favoriteIcon = '';
                        if(locations[i][15] == null || locations[i][15] == ''){
                            shopCategoryVal = "<div class='category-dec blank'></div>";
                        } else {
                            shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                        }

                        votestructure = ''; 
                        var num = parseFloat(locations[i][14]).toFixed(1);

                        for(var k = 0; k < 5; k++){
                            if((num <= (k+0.5)) && (num > (k+0.0))){
                                votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                            } else if(num >= (k+0.6)){
                                votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                            } else {
                                votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                            }
                        }

                        if(locations[i][19] == 1){
                        favoriteIcon = "<span class='active'></span>";
                        } else {
                            favoriteIcon = "<span></span>";
                        }
                        if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                        } else {
                            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                        }
                        infowindow.open(map, marker);
                    }
                })(marker, i));  
                filtermarker.push(marker);
            } else if((locations[i][10] == $scope.cateval && $scope.cateval != 'blank') && (locations[i][11] == $scope.subCateVal && $scope.subCateVal != 'blank') && ($scope.cardAvailable == 0) && ($scope.favAvailable == 0)){
                //filter with category (true) , subcategory(true), momosy card(fase)
                if(locations[i][5] == 1) {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin2
                    });
                } else {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin
                    });
                }
            
                filterArray.push(locations[i][8]);
                var arrData = new Array(locations[i][0], locations[i][1], locations[i][2], locations[i][3], locations[i][4], locations[i][5], locations[i][6], locations[i][7], locations[i][8], locations[i][9], locations[i][10],locations[i][11], locations[i][12] );
                filterAllData.push(arrData);
                $scope.searchAddStop = false;
                google.maps.event.addListener(marker, 'click', (function(marker, i) {
                return function() {
                        $scope.getstorecredit(locations[i][8]);
                        $scope.frindBoughtCount(locations[i][8]);
                       // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                        shopCategoryVal = '';
                        favoriteIcon = '';
                        if(locations[i][15] == null || locations[i][15] == ''){
                            shopCategoryVal = "<div class='category-dec blank'></div>";
                        } else {
                            shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                        }

                        votestructure = ''; 
                        var num = parseFloat(locations[i][14]).toFixed(1);

                        for(var k = 0; k < 5; k++){
                            if((num <= (k+0.5)) && (num > (k+0.0))){
                                votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                            } else if(num >= (k+0.6)){
                                votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                            } else {
                                votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                            }
                        }

                        if(locations[i][19] == 1){
                            favoriteIcon = "<span class='active'></span>";
                        } else {
                            favoriteIcon = "<span></span>";
                        }

                        if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                        } else {
                            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                        }
                        infowindow.open(map, marker);
                }
                })(marker, i));  
                filtermarker.push(marker);
            } else if(($scope.cateval == 'blank') && ($scope.subCateVal == 'blank') && ($scope.cardAvailable == 1 && locations[i][12] == 1 ) && ($scope.favAvailable == 0)){
                //filter with category (false) , subcategory(false), momosy card(true)
                //console.log($scope.cateval+'ss'+$scope.subCateVal);
                if(locations[i][5] == 1) {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin2
                    });
                } else {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin
                    });
                }
            
                filterArray.push(locations[i][8]);
                var arrData = new Array(locations[i][0], locations[i][1], locations[i][2], locations[i][3], locations[i][4], locations[i][5], locations[i][6], locations[i][7], locations[i][8], locations[i][9], locations[i][10],locations[i][11], locations[i][12] );
                filterAllData.push(arrData);
                $scope.searchAddStop = false;
                google.maps.event.addListener(marker, 'click', (function(marker, i) {
                    return function() {
                            $scope.getstorecredit(locations[i][8]);
                            $scope.frindBoughtCount(locations[i][8]);
                           // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                            shopCategoryVal = '';
                            favoriteIcon = '';
                            if(locations[i][15] == null || locations[i][15] == ''){
                                shopCategoryVal = "<div class='category-dec blank'></div>";
                            } else {
                                shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                            }

                            votestructure = ''; 
                            var num = parseFloat(locations[i][14]).toFixed(1);

                            for(var k = 0; k < 5; k++){
                                if((num <= (k+0.5)) && (num > (k+0.0))){
                                    votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                } else if(num >= (k+0.6)){
                                    votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                } else {
                                    votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                }
                            }

                            if(locations[i][19] == 1){
                                favoriteIcon = "<span class='active'></span>";
                            } else {
                                favoriteIcon = "<span></span>";
                            }

                            if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                            } else {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                            }
                            infowindow.open(map, marker);
                    }
                })(marker, i));  
                filtermarker.push(marker);
            } else if((locations[i][10] == $scope.cateval && $scope.cateval != 'blank') && ($scope.subCateVal == 'blank') && ($scope.cardAvailable == 1 && locations[i][12] == 1 ) && ($scope.favAvailable == 0)){
                //filter with category (true) , subcategory(false), momosy card(true)
                //console.log('for cate+m card'+locations[i][8]+'id'+locations[i][10]+','+$scope.cateval+'sub'+locations[i][11]+','+$scope.subCateVal);
                if(locations[i][5] == 1) {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin2
                    });
                } else {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin
                    });
                }
            
                filterArray.push(locations[i][8]);
                var arrData = new Array(locations[i][0], locations[i][1], locations[i][2], locations[i][3], locations[i][4], locations[i][5], locations[i][6], locations[i][7], locations[i][8], locations[i][9], locations[i][10],locations[i][11], locations[i][12] );
                filterAllData.push(arrData);
                $scope.searchAddStop = false;
                google.maps.event.addListener(marker, 'click', (function(marker, i) {
                    return function() {
                            $scope.getstorecredit(locations[i][8]);
                            $scope.frindBoughtCount(locations[i][8]);
                            // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                            shopCategoryVal = '';
                            favoriteIcon = '';
                        if(locations[i][15] == null || locations[i][15] == ''){
                            shopCategoryVal = "<div class='category-dec blank'></div>";
                        } else {
                            shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                        }

                        votestructure = ''; 
                        var num = parseFloat(locations[i][14]).toFixed(1);

                        for(var k = 0; k < 5; k++){
                            if((num <= (k+0.5)) && (num > (k+0.0))){
                                votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                            } else if(num >= (k+0.6)){
                                votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                            } else {
                                votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                            }
                        }

                        if(locations[i][19] == 1){
                            favoriteIcon = "<span class='active'></span>";
                        } else {
                            favoriteIcon = "<span></span>";
                        }
                        if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                        } else {
                            infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                        }
                            infowindow.open(map, marker);
                    }
                })(marker, i));  
                filtermarker.push(marker);
            } else if((locations[i][10] == $scope.cateval && $scope.cateval != 'blank') && (locations[i][11] != $scope.subCateVal && $scope.subCateVal != 'blank') && ($scope.cardAvailable == 0) && ($scope.favAvailable == 0)){
                //cate(true) subcate (true not equal) momosy (true 0) 
                $scope.searchAddStop = false;
            } else if((locations[i][10] != $scope.cateval && $scope.cateval != 'blank') && ($scope.subCateVal == 'blank') && ($scope.cardAvailable == 0) && ($scope.favAvailable == 0)) {
                //cate(true not equal) subcate (true) momosy (true 0) 
                $scope.searchAddStop = false;
            } else if(($scope.cateval == 'blank') && ($scope.subCateVal == 'blank') && ($scope.cardAvailable == 1 && locations[i][12] == 0 ) && ($scope.favAvailable == 0)){           
                //cate(false) subcate (false) momosy (true 0) 
                $scope.searchAddStop = false;
            } else if((locations[i][10] == $scope.cateval && $scope.cateval != 'blank') && ($scope.subCateVal == 'blank') && ($scope.cardAvailable == 1 && locations[i][12] == 0 ) && ($scope.favAvailable == 0)){
                //filter with category (true) , subcategory(false), momosy card(true 0)
                $scope.searchAddStop = false;
            } else if((locations[i][10] == $scope.cateval && $scope.cateval != 'blank') && (locations[i][11] == $scope.subCateVal && $scope.subCateVal != 'blank') && ($scope.cardAvailable == 1 && locations[i][12] == 0 ) && ($scope.favAvailable == 0)){
                //filter with category (true) , subcategory(true), momosy card(true 0)
                $scope.searchAddStop = false;
            } else if((locations[i][10] == $scope.cateval && $scope.cateval != 'blank') && ($scope.subCateVal == 'blank') && ($scope.cardAvailable == 1 && locations[i][12] == 0 ) && ($scope.favAvailable == 1)){
                //filter with category (true) , subcategory(true), momosy card(true 0)
                $scope.searchAddStop = false;
            } else if(($scope.cateval == 'blank') && ($scope.subCateVal == 'blank') && ($scope.cardAvailable == 0) && ($scope.favAvailable == 1 && locations[i][19] == 0)){           
                //cate(false) subcate (false) momosy (true 0) 
                $scope.searchAddStop = false;
            } else if(($scope.cateval == 'blank') && ($scope.subCateVal == 'blank') && ($scope.cardAvailable == 1 && locations[i][12] == 0) && ($scope.favAvailable == 1 && locations[i][19] == 1)){           
                //cate(false) subcate (false) momosy (true 0) 
                $scope.searchAddStop = false;
            } else if((locations[i][10] == $scope.cateval && $scope.cateval != 'blank') && (locations[i][11] == $scope.subCateVal && $scope.subCateVal != 'blank') && ($scope.cardAvailable == 1 && locations[i][12] == 1 ) && ($scope.favAvailable == 0)){
                //filter with category (true) , subcategory(true), momosy card(true 1)
                if(locations[i][5] == 1) {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin2
                    });
                } else {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin
                    });
                }
            
                filterArray.push(locations[i][8]);
                var arrData = new Array(locations[i][0], locations[i][1], locations[i][2], locations[i][3], locations[i][4], locations[i][5], locations[i][6], locations[i][7], locations[i][8], locations[i][9], locations[i][10],locations[i][11], locations[i][12] );
                filterAllData.push(arrData);
                $scope.searchAddStop = false;
                google.maps.event.addListener(marker, 'click', (function(marker, i) {
                    return function() {
                            $scope.getstorecredit(locations[i][8]);
                            $scope.frindBoughtCount(locations[i][8]);
                           // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                            shopCategoryVal = '';
                            favoriteIcon = '';
                            if(locations[i][15] == null || locations[i][15] == ''){
                                shopCategoryVal = "<div class='category-dec blank'></div>";
                            } else {
                                shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                            }

                            votestructure = ''; 
                            var num = parseFloat(locations[i][14]).toFixed(1);

                            for(var k = 0; k < 5; k++){
                                if((num <= (k+0.5)) && (num > (k+0.0))){
                                    votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                } else if(num >= (k+0.6)){
                                    votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                } else {
                                    votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                }
                            }

                            if(locations[i][19] == 1){
                                favoriteIcon = "<span class='active'></span>";
                            } else {
                                favoriteIcon = "<span></span>";
                            }

                            if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                            } else {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                            }
                            infowindow.open(map, marker);
                    }
                })(marker, i));  
                filtermarker.push(marker);
            } else if((locations[i][10] == $scope.cateval && $scope.cateval != 'blank') && (locations[i][11] == $scope.subCateVal && $scope.subCateVal != 'blank') && ($scope.cardAvailable == 1 && locations[i][12] == 1 ) && ($scope.favAvailable == 1 && locations[i][19]== 1)){
                //filter with category (true) , subcategory(true), momosy card(true 1), fav (true)
                if(locations[i][5] == 1) {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin2
                    });
                } else {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin
                    });
                }
            
                filterArray.push(locations[i][8]);
                var arrData = new Array(locations[i][0], locations[i][1], locations[i][2], locations[i][3], locations[i][4], locations[i][5], locations[i][6], locations[i][7], locations[i][8], locations[i][9], locations[i][10],locations[i][11], locations[i][12] );
                filterAllData.push(arrData);
                $scope.searchAddStop = false;
                google.maps.event.addListener(marker, 'click', (function(marker, i) {
                    return function() {
                            $scope.getstorecredit(locations[i][8]);
                            $scope.frindBoughtCount(locations[i][8]);
                           // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                            shopCategoryVal = '';
                            favoriteIcon = ''
                            if(locations[i][15] == null || locations[i][15] == ''){
                                shopCategoryVal = "<div class='category-dec blank'></div>";
                            } else {
                                shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                            }

                            votestructure = ''; 
                            var num = parseFloat(locations[i][14]).toFixed(1);

                            for(var k = 0; k < 5; k++){
                                if((num <= (k+0.5)) && (num > (k+0.0))){
                                    votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                } else if(num >= (k+0.6)){
                                    votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                } else {
                                    votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                }
                            }

                            if(locations[i][19] == 1){
                                favoriteIcon = "<span class='active'></span>";
                            } else {
                                favoriteIcon = "<span></span>";
                            }

                            if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                            } else {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                            }
                            infowindow.open(map, marker);
                    }
                })(marker, i));  
                filtermarker.push(marker);
            } else if((locations[i][10] == $scope.cateval && $scope.cateval != 'blank') && (locations[i][11] == $scope.subCateVal && $scope.subCateVal != 'blank') && ($scope.cardAvailable == 0) && ($scope.favAvailable == 1 && locations[i][19]== 1)){
                //filter with category (true) , subcategory(true), momosy card(false), fav (true)
                if(locations[i][5] == 1) {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin2
                    });
                } else {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin
                    });
                }
            
                filterArray.push(locations[i][8]);
                var arrData = new Array(locations[i][0], locations[i][1], locations[i][2], locations[i][3], locations[i][4], locations[i][5], locations[i][6], locations[i][7], locations[i][8], locations[i][9], locations[i][10],locations[i][11], locations[i][12] );
                filterAllData.push(arrData);
                $scope.searchAddStop = false;
                google.maps.event.addListener(marker, 'click', (function(marker, i) {
                    return function() {
                            $scope.getstorecredit(locations[i][8]);
                            $scope.frindBoughtCount(locations[i][8]);
                           // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                            shopCategoryVal = '';
                            favoriteIcon = '';
                            if(locations[i][15] == null || locations[i][15] == ''){
                                shopCategoryVal = "<div class='category-dec blank'></div>";
                            } else {
                                shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                            }

                            votestructure = ''; 
                            var num = parseFloat(locations[i][14]).toFixed(1);

                            for(var k = 0; k < 5; k++){
                                if((num <= (k+0.5)) && (num > (k+0.0))){
                                    votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                } else if(num >= (k+0.6)){
                                    votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                } else {
                                    votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                }
                            }

                            if(locations[i][19] == 1){
                                favoriteIcon = "<span class='active'></span>";
                            } else {
                                favoriteIcon = "<span></span>";
                            }

                            if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                            } else {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                            }
                            infowindow.open(map, marker);
                    }
                })(marker, i));  
                filtermarker.push(marker);
            } else if((locations[i][10] == $scope.cateval && $scope.cateval != 'blank') && ($scope.subCateVal == 'blank') && ($scope.cardAvailable == 0 ) && ($scope.favAvailable == 1 && locations[i][19]== 1)){
                //filter with category (true) , subcategory(true), momosy card(true 1), fav (true)
                if(locations[i][5] == 1) {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin2
                    });
                } else {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin
                    });
                }
            
                filterArray.push(locations[i][8]);
                var arrData = new Array(locations[i][0], locations[i][1], locations[i][2], locations[i][3], locations[i][4], locations[i][5], locations[i][6], locations[i][7], locations[i][8], locations[i][9], locations[i][10],locations[i][11], locations[i][12] );
                filterAllData.push(arrData);
                $scope.searchAddStop = false;
                google.maps.event.addListener(marker, 'click', (function(marker, i) {
                    return function() {
                            $scope.getstorecredit(locations[i][8]);
                            $scope.frindBoughtCount(locations[i][8]);
                           // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                            shopCategoryVal = '';
                            favoriteIcon = '';
                            if(locations[i][15] == null || locations[i][15] == ''){
                                shopCategoryVal = "<div class='category-dec blank'></div>";
                            } else {
                                shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                            }

                            votestructure = ''; 
                            var num = parseFloat(locations[i][14]).toFixed(1);

                            for(var k = 0; k < 5; k++){
                                if((num <= (k+0.5)) && (num > (k+0.0))){
                                    votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                } else if(num >= (k+0.6)){
                                    votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                } else {
                                    votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                }
                            }

                            if(locations[i][19] == 1){
                                favoriteIcon = "<span class='active'></span>";
                            } else {
                                favoriteIcon = "<span></span>";
                            }

                            if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                            } else {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                            }
                            infowindow.open(map, marker);
                    }
                })(marker, i));  
                filtermarker.push(marker);
            } else if((locations[i][10] == $scope.cateval && $scope.cateval != 'blank') && ($scope.subCateVal == 'blank') && ($scope.cardAvailable == 1 &&  locations[i][12] == 0) && ($scope.favAvailable == 1 && locations[i][19]== 1)){
                //filter with category (true) , subcategory(true), momosy card(true 0), fav (true)
                if(locations[i][5] == 1) {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin2
                    });
                } else {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin
                    });
                }
            
                filterArray.push(locations[i][8]);
                var arrData = new Array(locations[i][0], locations[i][1], locations[i][2], locations[i][3], locations[i][4], locations[i][5], locations[i][6], locations[i][7], locations[i][8], locations[i][9], locations[i][10],locations[i][11], locations[i][12] );
                filterAllData.push(arrData);
                $scope.searchAddStop = false;
                google.maps.event.addListener(marker, 'click', (function(marker, i) {
                    return function() {
                            $scope.getstorecredit(locations[i][8]);
                            $scope.frindBoughtCount(locations[i][8]);
                           // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                            shopCategoryVal = '';
                            favoriteIcon = '';
                            if(locations[i][15] == null || locations[i][15] == ''){
                                shopCategoryVal = "<div class='category-dec blank'></div>";
                            } else {
                                shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                            }

                            votestructure = ''; 
                            var num = parseFloat(locations[i][14]).toFixed(1);

                            for(var k = 0; k < 5; k++){
                                if((num <= (k+0.5)) && (num > (k+0.0))){
                                    votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                } else if(num >= (k+0.6)){
                                    votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                } else {
                                    votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                }
                            }

                            if(locations[i][19] == 1){
                                favoriteIcon = "<span class='active'></span>";
                            } else {
                                favoriteIcon = "<span></span>";
                            }

                            if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                            } else {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                            }
                            infowindow.open(map, marker);
                    }
                })(marker, i));  
                filtermarker.push(marker);
            } else if($scope.cateval == 'blank' && ($scope.favAvailable == 1 && locations[i][19]== 1)){
                //filter with category (true) , subcategory(true), momosy card(true 0), fav (true)
                if(locations[i][5] == 1) {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin2
                    });
                } else {
                    marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
                    icon :pin
                    });
                }
                
                filterArray.push(locations[i][8]);
                var arrData = new Array(locations[i][0], locations[i][1], locations[i][2], locations[i][3], locations[i][4], locations[i][5], locations[i][6], locations[i][7], locations[i][8], locations[i][9], locations[i][10],locations[i][11], locations[i][12] );
                filterAllData.push(arrData);
                $scope.searchAddStop = false;
                google.maps.event.addListener(marker, 'click', (function(marker, i) {
                    return function() {
                            $scope.getstorecredit(locations[i][8]);
                            $scope.frindBoughtCount(locations[i][8]);
                           // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                            shopCategoryVal = '';
                            favoriteIcon = '';
                            if(locations[i][15] == null || locations[i][15] == ''){
                                shopCategoryVal = "<div class='category-dec blank'></div>";
                            } else {
                                shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                            }

                            votestructure = ''; 
                            var num = parseFloat(locations[i][14]).toFixed(1);

                            for(var k = 0; k < 5; k++){
                                if((num <= (k+0.5)) && (num > (k+0.0))){
                                    votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                } else if(num >= (k+0.6)){
                                    votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                } else {
                                    votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                }
                            }

                            if(locations[i][19] == 1){
                                favoriteIcon = "<span class='active'></span>";
                            } else {
                                favoriteIcon = "<span></span>";
                            }

                            if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                            } else {
                                infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                            }
                            infowindow.open(map, marker);
                    }
                })(marker, i));  
                filtermarker.push(marker);
            } else if($scope.cateval == 'blank' && $scope.cardAvailable == 0 && $scope.favAvailable == 0){
                //filter with category (false), subcategory(false), momosy card(false)
                $scope.catebg = '';
                $scope.subCateBg = '';
                markerClusterer = new MarkerClusterer(map, arrMarker, {
                //maxZoom: zoom,
                // gridSize: size
                // styles: styles[style]
                });
                $scope.searchAddStop = true;
                $scope.stopFilters();
                break;
            }
        }
        if($scope.searchAddStop == false) {
            //console.log(filterArray);
            if(filterArray.length == 0) {
                $('#results').html('<span>'+$scope.i18n.store.result_not_found+'</span>');
            } else {
                $('#results').html('<span>'+filterArray.length+' '+$scope.i18n.store.result_found+'</span>');
            }
            $scope.storeIdArray = filterArray;
            $scope.searchAddressShop(filterArray);
        } else {
                $('#results').html('');
        }
    }

    $scope.mapfilter = function() {
        if(markerClusterer){
            markerClusterer.setMap(null);
        }
        $scope.addressFilter = '';
        $scope.searchText = '';
        $scope.viewAllActive = '';
        $scope.myStoreActive = '';
        $scope.storeListObject = [];
        filterArray = [];
        var chk = document.getElementById("shotfilter").checked;
        var dpchk = document.getElementById("dpfilter").checked;
        $scope.setFilterMarker(null);
        if((chk == true) && (dpchk == false)){
            $scope.searchText = '';
            //markerClusterer.setMap(null);
            $scope.setShopNameMarker(null);
            $scope.setMyshop(null);
            $scope.setRemoveAllMap(null);
            $scope.setDpMarker(null);
            $scope.setAllMap(null);
            $scope.setDpShotMarker(null);
            var infowindow = new google.maps.InfoWindow();
            var marker, i;
            var pin = {
                url: 'app/assets/images/green-pin.png'
            };
            var pin2 = {
                url: 'app/assets/images/silver-pin.png'
            };
            if(filterAllData.length != 0 || $scope.cardAvailable == 1 || $scope.cateval != 'blank'){
            //console.log('filter apply');
                for (i = 0; i < filterAllData.length; i++) {
                    //console.log(filterAllData[i][6]+'listofids'+filterAllData[i][8]);
                    if(filterAllData[i][6] == 1){
                        if(filterAllData[i][5] == 1) {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(filterAllData[i][1], filterAllData[i][2]),
                            map: map,
                            icon :pin2
                            });
                        } else {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(filterAllData[i][1], filterAllData[i][2]),
                            map: map,
                            icon :pin
                            });
                        }
                        filterArray.push(filterAllData[i][8]);
                        google.maps.event.addListener(marker, 'click', (function(marker, i) {
                            return function() {
                                $scope.getstorecredit(locations[i][8]);
                                $scope.frindBoughtCount(locations[i][8]);
                               // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                                shopCategoryVal = '';
                                favoriteIcon = '';
                                if(locations[i][15] == null || locations[i][15] == ''){
                                    shopCategoryVal = "<div class='category-dec blank'></div>";
                                } else {
                                    shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                                }

                                votestructure = ''; 
                                var num = parseFloat(locations[i][14]).toFixed(1);

                                for(var k = 0; k < 5; k++){
                                    if((num <= (k+0.5)) && (num > (k+0.0))){
                                        votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                    } else if(num >= (k+0.6)){
                                        votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                    } else {
                                        votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                    }
                                }

                                if(locations[i][19] == 1){
                                    favoriteIcon = "<span class='active'></span>";
                                } else {
                                    favoriteIcon = "<span></span>";
                                }

                                if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                    infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                                } else {
                                    infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                                }
                                infowindow.open(map, marker);
                            }
                        })(marker, i));
                        arrShotMarker.push(marker);            
                    }      
                }
            } else {
                for (i = 0; i < locations.length; i++) {
                    if(locations[i][6] == 1){
                        if(locations[i][5] == 1) {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                            map: map,
                            icon :pin2
                            });
                        } else {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                            map: map,
                            icon :pin
                            });
                        }
                        
                        filterArray.push(locations[i][8]);
                        google.maps.event.addListener(marker, 'click', (function(marker, i) {
                            return function() {
                                $scope.getstorecredit(locations[i][8]);
                                $scope.frindBoughtCount(locations[i][8]);
                                // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                                shopCategoryVal = '';
                                favoriteIcon = '';
                                if(locations[i][15] == null || locations[i][15] == ''){
                                    shopCategoryVal = "<div class='category-dec blank'></div>";
                                } else {
                                    shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                                }

                                votestructure = ''; 
                                var num = parseFloat(locations[i][14]).toFixed(1);

                                for(var k = 0; k < 5; k++){
                                    if((num <= (k+0.5)) && (num > (k+0.0))){
                                        votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                    } else if(num >= (k+0.6)){
                                        votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                    } else {
                                        votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                    }
                                }

                                if(locations[i][19] == 1){
                                    favoriteIcon = "<span class='active'></span>";
                                } else {
                                    favoriteIcon = "<span></span>";
                                }

                                if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                    infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                                } else {
                                    infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                                }
                                infowindow.open(map, marker);
                            }
                        })(marker, i));
                        arrShotMarker.push(marker);                
                    }      
                }
            }
            //$scope.searchshoponmaps(filterArray);
            limit_starts = 0;
            limit_end = 12;
            $scope.storeIdArray = filterArray;
            $scope.searchAddressShop(filterArray);
            if(filterArray.length == 0) {
                $('#results').html('<span>'+$scope.i18n.store.result_not_found+'</span>');
            } else {
                $('#results').html('<span>'+filterArray.length+' '+$scope.i18n.store.result_found+'</span>');
            }
        //markerClusterer.clearMarkers();
        /* markerClusterer = new MarkerClusterer(map, arrShotMarker, {
              //maxZoom: zoom,
             // gridSize: size
             // styles: styles[style]
            });
        */
        } else if((dpchk == true) && (chk == false)){
            //markerClusterer.setMap(null);
            $scope.setShopNameMarker(null);
            $scope.setRemoveAllMap(null);
            $scope.setDpShotMarker(null);
            $scope.setAllMap(null);
            $scope.setAllShotMap(null);
            var infowindow = new google.maps.InfoWindow();
            var marker, i;
            var pin = {
                url: 'app/assets/images/green-pin.png'
            };
            var pin2 = {
                url: 'app/assets/images/silver-pin.png'
            };

            if(filterAllData.length != 0 || $scope.cardAvailable == 1 || $scope.cateval != 'blank'){
                for (i = 0; i < filterAllData.length; i++) {
                    if(filterAllData[i][7] == 1){
                        if(filterAllData[i][5] == 1) {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(filterAllData[i][1], filterAllData[i][2]),
                            map: map,
                            icon :pin2
                            });
                        } else {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(filterAllData[i][1], filterAllData[i][2]),
                            map: map,
                            icon :pin
                            });
                        }
                        
                        filterArray.push(filterAllData[i][8]);
                        google.maps.event.addListener(marker, 'click', (function(marker, i) {
                            return function() {
                                $scope.getstorecredit(locations[i][8]);
                                $scope.frindBoughtCount(locations[i][8]);
                               // infowindow.setContent("<div>Name : <a href='#/shop/view/"+filterAllData[i][8]+"'>"+filterAllData[i][4]+"</a></div><div>Address : "+filterAllData[i][0]+"</div>");
                                shopCategoryVal = '';
                                favoriteIcon = '';
                                if(locations[i][15] == null || locations[i][15] == ''){
                                    shopCategoryVal = "<div class='category-dec blank'></div>";
                                } else {
                                    shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                                }

                                votestructure = ''; 
                                var num = parseFloat(locations[i][14]).toFixed(1);

                                for(var k = 0; k < 5; k++){
                                    if((num <= (k+0.5)) && (num > (k+0.0))){
                                        votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                    } else if(num >= (k+0.6)){
                                        votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                    } else {
                                        votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                    }
                                }

                                if(locations[i][19] == 1){
                                    favoriteIcon = "<span class='active'></span>";
                                } else {
                                    favoriteIcon = "<span></span>";
                                }

                                if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                    infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                                } else {
                                    infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                                }
                                infowindow.open(map, marker);
                            }
                        })(marker, i));
                        arrDpMarker.push(marker);            
                    }  
                    //markerClusterer.clearMarkers();
                    /*
                    markerClusterer = new MarkerClusterer(map, arrDpMarker, {
                      //maxZoom: zoom,
                     // gridSize: size
                     // styles: styles[style]
                    }); */   
                }    
            } else {
                for (i = 0; i < locations.length; i++) {
                    if(locations[i][7] == 1){
                        if(locations[i][5] == 1) {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                            map: map,
                            icon :pin2
                            });
                        } else {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                            map: map,
                            icon :pin
                            });
                        }
                        
                        filterArray.push(locations[i][8]);
                        google.maps.event.addListener(marker, 'click', (function(marker, i) {
                            return function() {
                                $scope.getstorecredit(locations[i][8]);
                                $scope.frindBoughtCount(locations[i][8]);
                               // infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                                shopCategoryVal = '';
                                favoriteIcon = '';
                                if(locations[i][15] == null || locations[i][15] == ''){
                                    shopCategoryVal = "<div class='category-dec blank'></div>";
                                } else {
                                    shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                                }

                                votestructure = ''; 
                                var num = parseFloat(locations[i][14]).toFixed(1);

                                for(var k = 0; k < 5; k++){
                                    if((num <= (k+0.5)) && (num > (k+0.0))){
                                        votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                    } else if(num >= (k+0.6)){
                                        votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                    } else {
                                        votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                    }
                                }

                                if(locations[i][19] == 1){
                                    favoriteIcon = "<span class='active'></span>";
                                } else {
                                    favoriteIcon = "<span></span>";
                                }

                                if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                    infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                                } else {
                                    infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                                }
                                infowindow.open(map, marker);
                            }
                        })(marker, i));
                        arrDpMarker.push(marker);                
                    }  
                //markerClusterer.clearMarkers();
                /*
                markerClusterer = new MarkerClusterer(map, arrDpMarker, {
                  //maxZoom: zoom,
                 // gridSize: size
                 // styles: styles[style]
                }); */   
                }
            }    
            //$scope.searchshoponmaps(filterArray);
            limit_starts = 0;
            limit_end = 12;
            $scope.storeIdArray = filterArray;
            $scope.searchAddressShop(filterArray);
            if(filterArray.length == 0) {
                $('#results').html('<span>'+$scope.i18n.store.result_not_found+'</span>');
            } else {
                $('#results').html('<span>'+filterArray.length+' '+$scope.i18n.store.result_found+'</span>');
            }
        } else if((chk == true) && (dpchk == true)){
            $scope.searchText = '';
            //markerClusterer.setMap(null);
            $scope.setShopNameMarker(null);
            $scope.setDpShotMarker(null);
            $scope.setAllMap(null);
            $scope.setAllShotMap(null);
            var infowindow = new google.maps.InfoWindow();
            var marker, i;
            var pin = {
                url: 'app/assets/images/silver-pin.png'
            };
            var pin2 = {
                url: 'app/assets/images/silver-pin.png'
            };
            if(filterAllData.length != 0 || $scope.cardAvailable == 1 || $scope.cateval != 'blank') {
                //console.log('filter apply');
                for (i = 0; i < filterAllData.length; i++) {
                    if((filterAllData[i][7] == 1) || (filterAllData[i][6] == 1)){
                        if(filterAllData[i][5] == 1) {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(filterAllData[i][1], filterAllData[i][2]),
                            map: map,
                            icon :pin
                            });
                        } else {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(filterAllData[i][1], filterAllData[i][2]),
                            map: map,
                            icon :pin2
                            });
                        }
                          
                        filterArray.push(filterAllData[i][8]);
                        google.maps.event.addListener(marker, 'click', (function(marker, i) {
                            return function() {
                                $scope.getstorecredit(locations[i][8]);
                                $scope.frindBoughtCount(locations[i][8]);
                                //infowindow.setContent("<div>Name : <a href='#/shop/view/"+filterAllData[i][8]+"'>"+filterAllData[i][4]+"</a></div><div>Address : "+filterAllData[i][0]+"</div>");
                                shopCategoryVal = '';
                                favoriteIcon = '';
                                if(locations[i][15] == null || locations[i][15] == ''){
                                    shopCategoryVal = "<div class='category-dec blank'></div>";
                                } else {
                                    shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                                }

                                votestructure = ''; 
                                var num = parseFloat(locations[i][14]).toFixed(1);

                                for(var k = 0; k < 5; k++){
                                    if((num <= (k+0.5)) && (num > (k+0.0))){
                                        votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                    } else if(num >= (k+0.6)){
                                        votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                    } else {
                                        votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                    }
                                }

                                if(locations[i][19] == 1){
                                    favoriteIcon = "<span class='active'></span>";
                                } else {
                                    favoriteIcon = "<span></span>";
                                }

                                if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                    infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                                } else {
                                    infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                                }
                                infowindow.open(map, marker);
                            }
                        })(marker, i));
                        arrDpnShotMarker.push(marker);
                    } 
                    //markerClusterer.clearMarkers();
                    /*
                    markerClusterer = new MarkerClusterer(map, arrDpnShotMarker, {
                      //maxZoom: zoom,
                     // gridSize: size
                     // styles: styles[style]
                    }); */
                }
            } else {
                for (i = 0; i < locations.length; i++) {
                    if((locations[i][7] == 1) || (locations[i][6] == 1)){
                        if(locations[i][5] == 1) {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                            map: map,
                            icon :pin
                            });
                        } else {
                            marker = new google.maps.Marker({
                            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                            map: map,
                            icon :pin2
                            });
                        }

                        filterArray.push(locations[i][8]);          
                        google.maps.event.addListener(marker, 'click', (function(marker, i) {
                            return function() {
                                $scope.getstorecredit(locations[i][8]);
                                $scope.frindBoughtCount(locations[i][8]);
                                //infowindow.setContent("<div>Name : <a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>Address : "+locations[i][0]+"</div>");
                                shopCategoryVal = '';
                                favoriteIcon = '';
                                if(locations[i][15] == null || locations[i][15] == ''){
                                    shopCategoryVal = "<div class='category-dec blank'></div>";
                                } else {
                                    shopCategoryVal = "<div class='category-dec'><strong>Category</strong> : "+locations[i][15]+"</div>";
                                }

                                votestructure = ''; 
                                var num = parseFloat(locations[i][14]).toFixed(1);

                                for(var k = 0; k < 5; k++){
                                    if((num <= (k+0.5)) && (num > (k+0.0))){
                                        votestructure += "<li class='half'><img src='app/assets/images/star-blank.png'></li>";
                                    } else if(num >= (k+0.6)){
                                        votestructure += "<li class='active'><img src='app/assets/images/star-blank.png'></li>";
                                    } else {
                                        votestructure += "<li><img src='app/assets/images/star-blank.png'></li>";   
                                    }
                                }

                                if(locations[i][19] == 1){
                                    favoriteIcon = "<span class='active'></span>";
                                } else {
                                    favoriteIcon = "<span></span>";
                                }

                                if ((locations[i][3] == '') || (locations[i][3] == undefined)) {
                                    infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='app/assets/images/store-prod.jpg'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");
                                } else {
                                    infowindow.setContent("<div class='mappopup'><div class='pic-container'><img src='"+locations[i][3]+"'></div></div><div class='description'><div><a href='#/shop/view/"+locations[i][8]+"'>"+locations[i][4]+"</a></div><div>"+locations[i][0]+"</div>"+shopCategoryVal+"<div class='lower-cont'><div class='icon-section clearfix'><div class='favicon'>"+favoriteIcon+"</div><div class='fr-tr'><span class='img-fr'></span><span class='fr-num'>"+locations[i][20]+"</span></div></div><div class='vote-count'><ul>"+votestructure+"</ul><div class='vote-number ng-binding'>0 VOTES</div></div><div class='ca'>"+$scope.i18n.store.credit_available+" : <span>"+$scope.format1(locations[i][9], '€')+"</span></div></div></div></div>");   
                                }
                                infowindow.open(map, marker);
                            }
                        })(marker, i));
                        arrDpnShotMarker.push(marker);
                    } 
                    //markerClusterer.clearMarkers();
                    /*
                    markerClusterer = new MarkerClusterer(map, arrDpnShotMarker, {
                      //maxZoom: zoom,
                     // gridSize: size
                     // styles: styles[style]
                    }); */
                }
            }  
            //$scope.searchshoponmaps(filterArray);
            limit_starts = 0;
            limit_end = 12;
            $scope.storeIdArray = filterArray;
            $scope.searchAddressShop(filterArray);
                if(filterArray.length == 0) {
                    $('#results').html('<span>'+$scope.i18n.store.result_not_found+'</span>');
                } else {
                    $('#results').html('<span>'+filterArray.length+' '+$scope.i18n.store.result_found+'</span>');
                }
        } else {
            if(circle != null) {
                circle.setMap(null);
            }
            $('#results').html('');
            $scope.addressFilter = '';
            $scope.searchText = '';
            //markerClusterer.setMap(null);
            $scope.setDpMarker(null);
            $scope.setDpShotMarker(null);
            $scope.setRemoveAllMap(null);
            $scope.setAllShotMap(null);
            $scope.enableFilter();
            //markerClusterer.clearMarkers();
            /*
            markerClusterer = new MarkerClusterer(map, arrMarker, {
              //maxZoom: zoom,
             // gridSize: size
             // styles: styles[style]
            });*/
        }  
    }
    //Map functionality ends
}]);

//Create Store controller here
app.controller('CreateStoreController',['$scope', '$http', '$location', '$timeout', 'StoreService', '$rootScope', '$cookieStore', function ($scope, $http, $location, $timeout, StoreService, $rootScope, $cookieStore) {
    $scope.createStoreLoader = false;
    $scope.createStoreError = false;
    $scope.createStoreErrorMgs = "";  //$scope.i18n.storealbum.album_ErrorMgs
    $scope.store = {};

    var opts1 = {};
    StoreService.getCountryList(opts1, function(data) {
        if(data.code == 101) {
            $scope.countryList = data.data;
        }
    });
    
    //function to create the Store
    $scope.createStore = function() {
        // $scope.store.business_country
        $scope.createStoreLoader = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;

        if($scope.store.name == undefined || $scope.store.name == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_name;
            alert( $scope.createStoreErrorMgs );
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            return false;
        }else if($scope.store.business_name == undefined || $scope.store.business_name == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storename;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.legal_status == undefined || $scope.store.legal_status == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storestatus;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.business_type == undefined || $scope.store.business_type == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storetype;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.phone == undefined || $scope.store.phone == '' || isNaN($scope.store.phone) == true ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storenumber;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.email == undefined || $scope.store.email == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeemail;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.business_country == undefined || $scope.store.business_country == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storecountry;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.business_region == undefined || $scope.store.business_region == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeregion;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.business_city == undefined || $scope.store.business_city == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storecity;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.business_address == undefined || $scope.store.business_address == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeaddress;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.zip == '' || $scope.store.zip == undefined) {
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storezip;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.province == '' || $scope.store.province == undefined) {
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeprovince;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        } else if($scope.store.province.length < 2 || $scope.store.province.length > 2 ){
            $scope.createStoreErrorMgs = $scope.i18n.validation.province_length;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.vat_number == undefined || $scope.store.vat_number == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storevat;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.iban == undefined || $scope.store.iban == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storeiban;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if($scope.store.description == undefined || $scope.store.description == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storedesc;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        // }else if($scope.store.terms == '' || $scope.store.terms == undefined || $scope.store.terms == false) {
        //     $scope.createStoreErrorMgs = $scope.i18n.store.terms_condition_agree;
        //     $scope.createGroupError = true;
        //     $scope.createStoreLoader = false;
        //     return false;
        }else if((document.getElementById("latitude").value) == undefined || (document.getElementById("latitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storelat;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if((document.getElementById("longitude").value) == undefined || (document.getElementById("longitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storelog;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        }else if((document.getElementById("mapplace").value) == undefined || (document.getElementById("mapplace").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storemap;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
            return false;
        } else if($scope.store.referral_id != '' && $scope.store.referral_id != undefined) {
            if(isNaN($scope.store.referral_id)){
                $scope.createStoreErrorMgs = $scope.i18n.store.valid_ref_id;
                $scope.createStoreError = true;
                $scope.createStoreLoader = false;
                $timeout(function(){
                    $scope.createStoreErrorMgs = '';
                }, 15000);
                return false;
            }
        }    
        opts.name = $scope.store.name;
        opts.business_name = $scope.store.business_name;
        opts.legal_status = $scope.store.legal_status;
        opts.business_type = $scope.store.business_type;
        opts.phone = $scope.store.phone;
        opts.email = $scope.store.email;
        opts.business_country = $scope.store.business_country;
        opts.business_region = $scope.store.business_region;
        opts.business_city = $scope.store.business_city;
        opts.business_address = $scope.store.business_address;
        opts.zip = $scope.store.zip;
        opts.province = $scope.store.province;
        opts.vat_number = $scope.store.vat_number;
        opts.iban = $scope.store.iban;
        opts.description = $scope.store.description;
        opts.terms = $scope.store.terms;
        opts.referral_id = $scope.store.referral_id;
        opts.map_place = document.getElementById("mapplace").value;
        opts.latitude = document.getElementById("latitude").value; 
        opts.longitude = document.getElementById("longitude").value;
        opts.broker_id = $scope.store.broker_id;
        $scope.createStoreErrorMgs = '';
        StoreService.createStore(opts, function(data) {
            if(data.code == 101) {
                $scope.createStoreLoader = true;
                $rootScope.tempStoreId = data.data.store_id;
                // Put store id in cookie
                $cookieStore.put('tempStoreId',data.data.store_id);
                // now it will redirect to terms and condition $location.path("/myshops");
                $location.path("/shop/payment/2");
            } else if (data.code == 154) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.citizen_not_exists;
                $scope.createStoreError = true;
            }else if (data.code == 100) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.missed_param;
                $scope.createStoreError = true;
            }else if (data.code == 116) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.enter_businessname;
                $scope.createStoreError = true;
            }else if (data.code == 138) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.vat_exists;
                $scope.createStoreError = true;
            } else if (data.code == 85) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.account_inactive;
                $scope.createStoreError = true;
            } else if (data.code == 165) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.vat_valid;
                $scope.createStoreError = true;
            } else if (data.code == 166) {
                $scope.createStoreLoader = false;
                $scope.createStoreErrorMgs = $scope.i18n.validation.iban_valid;
                $scope.createStoreError = true;
            } else {
                $scope.createStoreLoader = false;
                $scope.createStoreError = true;
            }

            $timeout(function(){
                $scope.createStoreErrorMgs = '';
            }, 15000);
        });
    };

    $scope.resetStoreObject = function() {
        document.getElementById("mapplace").value = '';
        document.getElementById("latitude").value = ''; 
        document.getElementById("longitude").value = '';
        $scope.store = {};
    };

    $scope.loadMap = function() {
        $scope.map = {center: {latitude: 40.1451, longitude: -99.6680 }, zoom: 4 }
        $scope.options = {scrollwheel: false};
        $scope.marker = {
            id:0,
            coords: {
                latitude: 40.1451,
                longitude: -99.6680
            },
            options: { draggable: true },
            events: {
                dragend: function (marker, eventName, args) {
                    document.getElementById("latitude").value = marker.getPosition().lat();
                    document.getElementById("longitude").value = marker.getPosition().lng();
                    $scope.mapLocation(marker.getPosition().lat(), marker.getPosition().lng());
                }
            }
        }
    }

    $scope.mapLocation = function(mapLatitude, mapLogitude) {
        var geocoder;
        geocoder = new google.maps.Geocoder();
        var latlng = new google.maps.LatLng(parseFloat(mapLatitude), parseFloat(mapLogitude));
        geocoder.geocode({'latLng': latlng}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
                $('#mapplace').val(results[1].formatted_address);
            } else {
                alert($scope.i18n.storealbum.album_alert_msg);
            }
        } else {
            alert($scope.i18n.storealbum.album_alert_failed + status);
        }
        });
    };
    $scope.loadMap();

        $scope.initialize = function () {
        var mapOptions = {
            center: new google.maps.LatLng(-33.8688, 151.2195),
            zoom: 13
        };
        var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

        var input = (document.getElementById('pac-input'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        google.maps.event.addListener(autocomplete, 'place_changed', function() {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                return;
            }
            var countryPlace = autocomplete.getPlace();
            document.getElementById("latitude").value = countryPlace.geometry.location.k;
            document.getElementById("longitude").value = countryPlace.geometry.location.D;
            document.getElementById("mapplace").value = countryPlace.formatted_address;

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  
            }
            marker.setIcon(({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
        });

        function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);
    }
    $timeout(function(){
        $scope.initialize();
    }, 1000);
}]);

//Create Store controller here
app.controller('DeatilStoreController',['$rootScope', '$route', '$scope', '$http', '$sce', '$routeParams', '$location', '$timeout', 'StoreService', 'fileReader', 'ProfileService', 'focus', 'CommerialService', function ($rootScope, $route, $scope, $http, $sce, $routeParams, $location, $timeout, StoreService, fileReader, ProfileService, focus ,CommerialService) {
    $scope.$route = $route;
    $scope.storeMainId = $routeParams.id;
    var latitudeMap = 0;
    var longitudeMap = 0;
    $scope.keywordList = [];
    $scope.mobileAppUrl = '<li> Fits true to size. Take your normal size\r</li>';
    var tempcat = '';
    $scope.store = {}
    $scope.store.storecategory = '';
    $scope.store.sale_subcatid = '';
    $scope.legalForms = APP.legalForms;
    $scope.countries  = APP.countries;
    $scope.isMyShop = APP.currentUser.store_profile;
    $scope.regions = APP.regions;
    $scope.loadDetails = function() {
        $scope.storeLoading = true;
        $scope.updateStart = false;
        $scope.createStoreError = false;
        $scope.createStoreErrorMgs = ''; //$scope.i18n.storealbum.album_createStoreErrorMgs;
        $scope.showEditForm = false;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $routeParams.id;
        StoreService.getStoreDetail(opts, function(data) {
            if(data.code == 101) {
                if( data.data.owner_id == APP.currentUser.id && (data.data.new_contract_status === 0 )) {
                    $location.path("/edit/shop/"+data.data.id);
                } else if( data.data.owner_id == APP.currentUser.id && (data.data.credit_card_status == 1 && data.data.shop_status == 0 || data.data.credit_card_status == 0 && data.data.shop_status == 1 || data.data.credit_card_status == 0 && data.data.shop_status == 0)) {
                    $location.path("shop/"+data.data.id+"/contract");
                } else {
                    $scope.storeDetail = data.data;
                    $scope.store = $scope.storeDetail;
                    //set the shop name and shop id to get on other section of app
                    var tempopts = {};
                    tempopts.id = data.data.id;
                    tempopts.store_name = data.data.name;
                    tempopts.is_paypal_added = data.data.is_paypal_added;
                    tempopts.is_subscribed = data.data.is_subscribed;
                    StoreService.SetStoreData(tempopts);
                    $scope.store.confirmemail = $scope.storeDetail.email;
                    if($rootScope.mobileView == true){
                        img = null;
                        img = new Image();
                        img.src = $scope.storeDetail.cover_image_path;
                        if($scope.windowWidth <= '480'){
                            img.onload = function(){
                                if(img.width <= 910){
                                    if( $scope.storeDetail.y_cord != ""){
                                        if( $scope.storeDetail.y_cord > 100){
                                            $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 3;
                                        }else{
                                            $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 4;
                                        }
                                        $scope.mobileShopX_Cord = 0;
                                    }else{
                                        $scope.storeDetail.x_cord = 0;
                                        $scope.storeDetail.y_cord = 0;
                                        $scope.mobileShopX_Cord = 0;
                                        $scope.mobileShopY_Cord = 0;
                                    }
                                }else if(img.width > 910 && img.width <= 1300){
                                    if( $scope.storeDetail.x_cord != ""){
                                        if( $scope.storeDetail.x_cord > 100){
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 4;
                                        }else{
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 5;
                                        }
                                        $scope.mobileShopY_Cord = 0;
                                    }else{
                                        $scope.storeDetail.x_cord = 0;
                                        $scope.storeDetail.y_cord = 0;
                                        $scope.mobileShopX_Cord = 0;
                                        $scope.mobileShopY_Cord = 0;
                                    }
                                }else if(img.width > 1300 ){
                                    if( $scope.storeDetail.x_cord != ""){
                                        if( $scope.storeDetail.x_cord > 100){
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 5;
                                        }else{
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 6;
                                        }
                                        $scope.mobileShopY_Cord = 0;
                                    }else{
                                        $scope.storeDetail.x_cord = 0;
                                        $scope.storeDetail.y_cord = 0;
                                        $scope.mobileShopX_Cord = 0;
                                        $scope.mobileShopY_Cord = 0;
                                    }
                                }
                            }
                        }else if($scope.windowWidth > '480' && $scope.windowWidth <= '768'){
                            img.onload = function(){
                                if(img.width <= 910){
                                    if( $scope.storeDetail.y_cord != ""){
                                        if( $scope.storeDetail.y_cord > 100){
                                            $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 1.8;
                                        }else{
                                            $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 2;
                                        }
                                        $scope.mobileShopX_Cord = 0;
                                    }else{
                                        $scope.storeDetail.x_cord = 0;
                                        $scope.storeDetail.y_cord = 0;
                                        $scope.mobileShopX_Cord = 0;
                                        $scope.mobileShopY_Cord = 0;
                                    }
                                }else if(img.width > 910 && img.width < 1300){
                                    if( $scope.storeDetail.x_cord != ""){
                                        if( $scope.storeDetail.x_cord > 100){
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 2.00;
                                        }else{
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 2.20;
                                        }
                                        $scope.mobileShopY_Cord = 0;
                                    }else{
                                        $scope.storeDetail.x_cord = 0;
                                        $scope.storeDetail.y_cord = 0;
                                        $scope.mobileShopX_Cord = 0;
                                        $scope.mobileShopY_Cord = 0;
                                    }
                                }else if(img.width > 1300) {
                                    if( $scope.storeDetail.x_cord != ""){
                                        if( $scope.storeDetail.x_cord > 100){
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 2.80;
                                        }else{
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 3.00;
                                        }
                                        $scope.mobileShopY_Cord = 0;
                                    }else{
                                        $scope.storeDetail.x_cord = 0;
                                        $scope.storeDetail.y_cord = 0;
                                        $scope.mobileShopX_Cord = 0;
                                        $scope.mobileShopY_Cord = 0;
                                    }
                                }
                            }
                        }
                    }
                    
                    //seting kewyord list to show store data
                    if($scope.storeDetail.shop_keyword != '' && $scope.storeDetail.shop_keyword != undefined && $scope.storeDetail.shop_keyword != null){
                        $scope.keywordList = $scope.storeDetail.shop_keyword.split(',');
                    }
                    //seting dropdowns to show store data
                    var tempcat = $scope.storeDetail.sale_catid;
                    $scope.store.storecategory = {"id":parseInt($scope.storeDetail.sale_catid)};
                    $scope.getSubCategory();
                    $scope.store.subcategory = {"id":parseInt($scope.storeDetail.sale_subcatid)};
                    $scope.store.legal_status = {"id":$scope.storeDetail.legal_status};
                    $scope.store.regOfficeCountry = {"id":$scope.storeDetail.business_country};
                    $scope.store.sale_country = {"id":$scope.storeDetail.sale_country};
                    $scope.store.regOfficeCountry = {"id":$scope.storeDetail.business_country};
                    $scope.store.business_region = {"id":$scope.checkRegionExist(APP.regions, $scope.storeDetail.business_region)};
                    $scope.store.sale_region = {"id":$scope.checkRegionExist(APP.regions, $scope.storeDetail.sale_region)};
                    if($scope.store.repres_dob != '' && $scope.store.repres_dob != undefined && $scope.store.repres_dob != null) {
                        //console.log($scope.store.repres_dob.date.substring(0,10));
                        var DOB = $scope.store.repres_dob.substring(0,10);
                        var dtArray = DOB.split("-");
                        var dtDay = parseInt(dtArray[2]);
                        var dtMonth = parseInt(dtArray[1]);
                        var dtYear = parseInt(dtArray[0]);
                       
                        $scope.store.dobMonth = $scope.months[dtMonth-1];
                        $scope.store.dobYear = {"id":dtYear};
                        Leap(dtYear);
                        $scope.store.dobDay = dtDay;
                        //console.log(dtYear);
                    }
                    document.getElementById("latitude").value = $scope.storeDetail.latitude;
                    document.getElementById("longitude").value = $scope.storeDetail.longitude;
                    document.getElementById("mapplace").value = $scope.storeDetail.map_place;
                    $scope.aboutStore();
                    $scope.storeLoading = false;
                    latitudeMap = data.data.latitude;
                    longitudeMap = data.data.longitude;
                    angular.element('#pac-input').val(data.data.map_place);
                    if (($location.path().indexOf("/shop/edit") != -1) ||  ($location.path().indexOf("/shop/view") != -1)) {
                        $timeout(function() {
                          $scope.initialize();
                        },  1000); 
                       
                    } else {
                       $timeout(function() {
                          // $scope.initializeMaps();
                        },  1000); 
                    }
                    var storeData = {};
                    storeData.storeId = $scope.storeDetail.owner_id;
                    //call service to get mobile app
                    var mopts = {};
                    mopts.store_id = $scope.storeDetail.id;
                    mopts.session_id = APP.currentUser.id;
                    StoreService.getMobileAppUrl(mopts, function(data) {
                        if(data.code == 101) {
                            $scope.store.mobileAppUrl =  data.data.url;
                        } else {
                            $scope.store.mobileAppUrl = '';
                        }
                    });
                    //mobile app get url end here

                    StoreService.setStoreOwnerId(storeData, function(data) {            
                    });
                }
            } else {
                $scope.storeLoading = false;
                $scope.createStoreError = true;
            }
        });
    }

    $scope.checkRegionExist = function(p, k) {
        for(var i=0;i<p.length;i++){
            var obj = p[i];
            if (obj['id'] === k) {
                return k;
            }        
        }
        return undefined;
    }

    $scope.$watch('currentLanguage', function(newValue, oldValue) {
        $timeout(function(){
            $scope.months = $scope.i18n.profile.months;
        },400);
    });

    $scope.loadDetails();

    $scope.editStore = function() {
        $scope.createStoreLoader = false;
        $scope.store = $scope.storeDetail;
        //$scope.showEditForm = true;
        $scope.timelineActive = false;
        $scope.timelineActive1 = false;
        var opts = {};
        StoreService.getCountryList(opts, function(data) {
            if(data.code == 101) {
                $scope.countryList = data.data;

            }
        });
    };

    $scope.aboutStore = function() {
        $scope.store = $scope.storeDetail;
        var opts = {};
        StoreService.getCountryList(opts, function(data) {
            if(data.code == 101) {
                $scope.countryList = data.data;

            }
        });
    };
    
    $scope.vatNumberInvalid = false;
    $scope.ibanNumberInvalid = false;
    $scope.updateEditStore = function() {
        $scope.updateStart = true;
        $scope.formSubmitted = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $scope.store.id;
        if($scope.store.name == undefined || $scope.store.name == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.storename.$dirty = true;
            $scope.shopEditForm.storename.$invalid = true;
            $scope.shopEditForm.storename.$error.required = true;
            focus('storename');
            return false;
        } else if($scope.store.business_name == undefined || $scope.store.business_name == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.business_name.$dirty = true;
            $scope.shopEditForm.business_name.$invalid = true;
            $scope.shopEditForm.business_name.$error.required = true;
            focus('business_name');
            return false;
        } else if($scope.store.legal_status == undefined || $scope.store.legal_status == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.legal_status.$dirty = true;
            $scope.shopEditForm.legal_status.$invalid = true;
            $scope.shopEditForm.legal_status.$error.required = true;
            focus('legal_status');
            return false;
        } else if($scope.store.vat_number == undefined || $scope.store.vat_number == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.vatNumber.$dirty = true;
            $scope.shopEditForm.vatNumber.$invalid = true;
            $scope.shopEditForm.vatNumber.$error.required = true;
            focus('vatNumber');
            return false;
        } else if($scope.store.fiscal_code == undefined || $scope.store.fiscal_code == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.fiscalcode.$dirty = true;
            $scope.shopEditForm.fiscalcode.$invalid = true;
            $scope.shopEditForm.fiscalcode.$error.required = true;
            focus('fiscalcode');
            return false;
        } else if($scope.store.email == undefined || $scope.store.email == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.shopemail.$dirty = true;
            $scope.shopEditForm.shopemail.$invalid = true;
            $scope.shopEditForm.shopemail.$error.required = true;
            focus('shopemail');
            return false;
        } else if($scope.store.confirmemail == undefined || $scope.store.confirmemail == '' || ($scope.store.email !== $scope.store.confirmemail)){
            $scope.inputname = "confirmemail";
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.confirmemail.$dirty = true;
            $scope.shopEditForm.confirmemail.$invalid = true;
            $scope.shopEditForm.confirmemail.$error.required = true;
            focus('confirmemail');
            return false;
        } else if($scope.store.phone == undefined || $scope.store.phone == '' || isNaN($scope.store.phone) == true){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.shopphone.$dirty = true;
            $scope.shopEditForm.shopphone.$invalid = true;
            $scope.shopEditForm.shopphone.$error.required = true;
            focus('shopphone');
            return false;
        } else if($scope.store.iban == undefined || $scope.store.iban == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.iban.$dirty = true;
            $scope.shopEditForm.iban.$invalid = true;
            $scope.shopEditForm.iban.$error.required = true;
            focus('iban');
            return false;
        } else if($scope.store.storecategory == undefined || $scope.store.storecategory == ''){
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $scope.updateStart = false;
            $scope.shopEditForm.storecategory.$dirty = true;
            $scope.shopEditForm.storecategory.$invalid = true;
            $scope.shopEditForm.storecategory.$error.required = true;
            focus('storecategory');
            return false;
        } 
        // else if($scope.store.subcategory == undefined || $scope.store.subcategory == ''){
        //     $scope.createStoreErrorMgs = $scope.i18n.store.enter_storesubcategory;
        //     $scope.createStoreError = true;
        //     $scope.createStoreLoader = false;
        //     $timeout(function(){
        //         $scope.createStoreErrorMgs = '';
        //     }, 15000);
        //     return false;
        // } 
        else if($scope.store.description == undefined || $scope.store.description == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.description.$dirty = true;
            $scope.shopEditForm.description.$invalid = true;
            $scope.shopEditForm.description.$error.required = true;
            focus('description');
            return false;
        } else if($scope.store.regOfficeCountry == undefined || $scope.store.regOfficeCountry == ''){
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $scope.updateStart = false;
            $scope.shopEditForm.regofficecountry.$dirty = true;
            $scope.shopEditForm.regofficecountry.$invalid = true;
            $scope.shopEditForm.regofficecountry.$error.required = true;
            focus('regofficecountry');
            return false;
        } else if($scope.store.business_region.id == undefined || $scope.store.business_region.id == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.businessregion.$dirty = true;
            $scope.shopEditForm.businessregion.$invalid = true;
            $scope.shopEditForm.businessregion.$error.required = true;
            focus('businessregion');
            return false;
        } else if($scope.store.business_city == undefined || $scope.store.business_city == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.businesscity.$dirty = true;
            $scope.shopEditForm.businesscity.$invalid = true;
            $scope.shopEditForm.businesscity.$error.required = true;
            focus('businesscity');
            return false;
        } else if($scope.store.province == undefined || $scope.store.province == '' ){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.province.$dirty = true;
            $scope.shopEditForm.province.$invalid = true;
            $scope.shopEditForm.province.$error.required = true;
            focus('province');
            return false;
        }  else if($scope.store.province.length < 2 || $scope.store.province.length > 2 ){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.province.$dirty = true;
            $scope.shopEditForm.province.$invalid = true;
            $scope.shopEditForm.province.$error.required = true;
            focus('province');
            return false;
        } else if($scope.store.zip == undefined || $scope.store.zip == '' || $scope.store.zip.length < 5 || $scope.store.zip.length > 5 ){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.regofficezip.$dirty = true;
            $scope.shopEditForm.regofficezip.$invalid = true;
            $scope.shopEditForm.regofficezip.$error.required = true;
            focus('regofficezip');
            return false;
        } else if($scope.store.business_address == undefined || $scope.store.business_address == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.businessaddress.$dirty = true;
            $scope.shopEditForm.businessaddress.$invalid = true;
            $scope.shopEditForm.businessaddress.$error.required = true;
            focus('businessaddress');
            return false;
        }  else if($scope.store.sale_country == undefined || $scope.store.sale_country == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.salecountry.$dirty = true;
            $scope.shopEditForm.salecountry.$invalid = true;
            $scope.shopEditForm.salecountry.$error.required = true;
            focus('salecountry');
            return false;
        } else if($scope.store.sale_region.id == undefined || $scope.store.sale_region.id == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.saleregion.$dirty = true;
            $scope.shopEditForm.saleregion.$invalid = true;
            $scope.shopEditForm.saleregion.$error.required = true;
            focus('saleregion');
            return false;
        } else if($scope.store.sale_city == undefined || $scope.store.sale_city == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.salecity.$dirty = true;
            $scope.shopEditForm.salecity.$invalid = true;
            $scope.shopEditForm.salecity.$error.required = true;
            focus('salecity');
            return false;
        } else if($scope.store.sale_province == undefined || $scope.store.sale_province == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.saleprovince.$dirty = true;
            $scope.shopEditForm.saleprovince.$invalid = true;
            $scope.shopEditForm.saleprovince.$error.required = true;
            focus('saleprovince');
            return false;
        } else if($scope.store.sale_province.length < 2 || $scope.store.sale_province.length > 2){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.saleprovince.$dirty = true;
            $scope.shopEditForm.saleprovince.$invalid = true;
            $scope.shopEditForm.saleprovince.$error.required = true;
            focus('saleprovince');
            return false;
        }else if($scope.store.sale_zip == undefined || $scope.store.sale_zip == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.salezip.$dirty = true;
            $scope.shopEditForm.salezip.$invalid = true;
            $scope.shopEditForm.salezip.$error.required = true;
            focus('salezip');
            return false;
        } else if($scope.store.sale_zip.length < 5 || $scope.store.sale_zip.length > 5){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.salezip.$dirty = true;
            $scope.shopEditForm.salezip.$invalid = true;
            $scope.shopEditForm.salezip.$error.required = true;
            focus('salezip');
            return false;
        } else if($scope.store.sale_address == undefined || $scope.store.sale_address == ''){
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.saleaddress.$dirty = true;
            $scope.shopEditForm.saleaddress.$invalid = true;
            $scope.shopEditForm.saleaddress.$error.required = true;
            focus('saleaddress');
            return false;
        } else if((document.getElementById("latitude").value) == undefined || (document.getElementById("latitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storelat;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if((document.getElementById("longitude").value )== undefined || (document.getElementById("longitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storelog;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if((document.getElementById("mapplace").value) == undefined || (document.getElementById("mapplace").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_storemap;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            return false;
        } else if($scope.store.sale_email == undefined || $scope.store.sale_email == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_hqstoreemail;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.saleemail.$dirty = true;
            $scope.shopEditForm.saleemail.$invalid = true;
            $scope.shopEditForm.saleemail.$error.required = true;
            focus('saleemail');
            return false;
        } else if($scope.store.sale_phone_number == undefined || $scope.store.sale_phone_number == '' || isNaN($scope.store.sale_phone_number) == true){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_hqstorephone;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.salephonenumber.$dirty = true;
            $scope.shopEditForm.salephonenumber.$invalid = true;
            $scope.shopEditForm.salephonenumber.$error.required = true;
            focus('salephonenumber');
            return false;
        } else if($scope.store.repres_fiscal_code == undefined || $scope.store.repres_fiscal_code == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_legalTaxCode;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represfiscalcode.$dirty = true;
            $scope.shopEditForm.represfiscalcode.$invalid = true;
            $scope.shopEditForm.represfiscalcode.$error.required = true;
            focus('represfiscalcode');
            return false;
        } else if($scope.store.repres_first_name == undefined || $scope.store.repres_first_name == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_firstName;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represfname.$dirty = true;
            $scope.shopEditForm.represfname.$invalid = true;
            $scope.shopEditForm.represfname.$error.required = true;
            focus('represfname'); 
            return false;
        } else if($scope.store.repres_last_name == undefined || $scope.store.repres_last_name == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_lastName;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represlname.$dirty = true;
            $scope.shopEditForm.represlname.$invalid = true;
            $scope.shopEditForm.represlname.$error.required = true;
            focus('represlname'); 
            return false;
        } else if($scope.store.repres_place_of_birth == undefined || $scope.store.repres_place_of_birth == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_legalBirthPlace;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represdobplace.$dirty = true;
            $scope.shopEditForm.represdobplace.$invalid = true;
            $scope.shopEditForm.represdobplace.$error.required = true;
            focus('represdobplace'); 
            return false;
        } else if($scope.store.dobDay == undefined || $scope.store.dobDay == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntDd;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.dobday.$dirty = true;
            $scope.shopEditForm.dobday.$invalid = true;
            $scope.shopEditForm.dobday.$error.required = true;
            focus('dobday'); 
            return false;
        } else if($scope.store.dobMonth == undefined || $scope.store.dobMonth == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntMonth;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.dobmonth.$dirty = true;
            $scope.shopEditForm.dobmonth.$invalid = true;
            $scope.shopEditForm.dobmonth.$error.required = true;
            focus('dobmonth'); 
            return false;
        } else if($scope.store.dobYear == undefined || $scope.store.dobYear == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntYear;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.dobyear.$dirty = true;
            $scope.shopEditForm.dobyear.$invalid = true;
            $scope.shopEditForm.dobyear.$error.required = true;
            focus('dobyear'); 
            return false;
        } else if($scope.store.repres_email == undefined || $scope.store.repres_email == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_legalEmail;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represemail.$dirty = true;
            $scope.shopEditForm.represemail.$invalid = true;
            $scope.shopEditForm.represemail.$error.required = true;
            focus('represemail'); 
            return false;
        } else if($scope.store.repres_phone_number == undefined || $scope.store.repres_phone_number == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_legalPhone;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represphonenumber.$dirty = true;
            $scope.shopEditForm.represphonenumber.$invalid = true;
            $scope.shopEditForm.represphonenumber.$error.required = true;
            focus('represphonenumber'); 
            return false;
        } else if($scope.store.repres_address == undefined || $scope.store.repres_address == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntAddress;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            $scope.shopEditForm.represaddress.$dirty = true;
            $scope.shopEditForm.represaddress.$invalid = true;
            $scope.shopEditForm.represaddress.$error.required = true;
            focus('represaddress'); 
            return false;
        } else if($scope.store.repres_province == undefined || $scope.store.repres_province == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntProvince;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $scope.shopEditForm.represprovince.$dirty = true;
            $scope.shopEditForm.represprovince.$invalid = true;
            $scope.shopEditForm.represprovince.$error.required = true;
            focus('represprovince'); 
            return false;
        } else if($scope.store.repres_province.length < 2 || $scope.store.repres_province.length > 2 ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntProvince;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $scope.shopEditForm.represprovince.$dirty = true;
            $scope.shopEditForm.represprovince.$invalid = true;
            $scope.shopEditForm.represprovince.$error.required = true;
            focus('represprovince'); 
            return false;
        } else if($scope.store.repres_city == undefined || $scope.store.repres_city == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntCity;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $scope.updateStart = false;
            $scope.shopEditForm.represcity.$dirty = true;
            $scope.shopEditForm.represcity.$invalid = true;
            $scope.shopEditForm.represcity.$error.required = true;
            focus('represcity'); 
            return false;
        } else if($scope.store.repres_zip == undefined || $scope.store.repres_zip == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_permntZip;
            $scope.createStoreError = true;
            $scope.createStoreLoader = false;
            $scope.updateStart = false;
            $scope.shopEditForm.represzip.$dirty = true;
            $scope.shopEditForm.represzip.$invalid = true;
            $scope.shopEditForm.represzip.$error.required = true;
            focus('represzip'); 
            return false;
        } else if($scope.store.dobYear != undefined || $scope.store.dobYear != ''){
            if($scope.store.dobDay.id >= 29 && $scope.store.dobMonth.id == 2){
                $scope.createStoreErrorMgs = $scope.i18n.shop_affiliation.detail.enter_correct_dob;
                $scope.createStoreError = true;
                $scope.createStoreLoader = false;
                $scope.updateStart = false;
                $scope.shopEditForm.dobmonth.$dirty = true;
                $scope.shopEditForm.dobmonth.$invalid = true;
                $scope.shopEditForm.dobmonth.$error.required = true;
                focus('dobmonth'); 
                return false;
            }
        } else if($scope.store.dobYear != undefined || $scope.store.dobYear != ''){
            var isLeap = new Date($scope.store.dobYear.id, 1, 29).getMonth() == 1;
            if(isLeap == false && $scope.store.dobDay.id >= 29 && $scope.store.dobMonth.id == 2){
                $scope.createStoreErrorMgs = $scope.i18n.shop_affiliation.detail.enter_correct_dob;
                $scope.createStoreError = true;
                $scope.createStoreLoader = false;
                $scope.updateStart = false;
                $scope.shopEditForm.dobyear.$dirty = true;
                $scope.shopEditForm.dobyear.$invalid = true;
                $scope.shopEditForm.dobyear.$error.required = true;
                focus('dobyear');
                return false;
            }
        }
        var dd = $scope.store.dobDay;
        var month = $scope.store.dobMonth.value +'-';
        var year = $scope.store.dobYear.id +'-';
        $scope.store.dob = year.concat(month,dd);
        opts.name = $scope.store.name;
        opts.business_name = $scope.store.business_name;
        opts.legal_status = $scope.store.legal_status.id;
        opts.vat_number = $scope.store.vat_number;
        opts.fiscal_code = $scope.store.fiscal_code;
        opts.email = angular.lowercase($scope.store.email);
        opts.phone = $scope.store.phone;
        opts.iban = $scope.store.iban;
        opts.sale_catid = $scope.store.storecategory.id;
        
        if($scope.store.subcategory != undefined || $scope.store.subcategory.id != '0') {
            opts.sale_subcatid = $scope.store.subcategory.id;
        } else {
            opts.sale_subcatid = null;
        }
        
        if($scope.keywordList != undefined || $scope.keywordList.length != '0') {
            opts.shop_keyword = $scope.keywordList.join();
        } else {
            opts.shop_keyword = []; 
        }
        opts.description = $scope.store.description;
        opts.business_country = $scope.store.regOfficeCountry.id;
        opts.business_region = $scope.store.business_region.id;
        opts.business_city = $scope.store.business_city;
        opts.province = $scope.store.province;
        opts.zip = $scope.store.zip;
        opts.business_address = $scope.store.business_address;
        
        opts.sale_country = $scope.store.sale_country.id;
        opts.sale_region = $scope.store.sale_region.id;
        opts.sale_city = $scope.store.sale_city;
        opts.sale_province = $scope.store.sale_province;
        opts.sale_zip = $scope.store.sale_zip;
        opts.sale_address = $scope.store.sale_address;
        opts.map_place = document.getElementById("mapplace").value;
        opts.latitude = document.getElementById("latitude").value; 
        opts.longitude = document.getElementById("longitude").value; 
        opts.sale_map = document.getElementById("mapplace").value;
        opts.sale_email = angular.lowercase($scope.store.sale_email);
        opts.sale_phone_number = $scope.store.sale_phone_number;
        opts.repres_fiscal_code = $scope.store.repres_fiscal_code;
        opts.repres_first_name = $scope.store.repres_first_name;
        opts.repres_last_name = $scope.store.repres_last_name;
        opts.repres_place_of_birth = $scope.store.repres_place_of_birth;
        opts.repres_dob = $scope.store.dob;
        opts.repres_email = angular.lowercase($scope.store.repres_email);
        opts.repres_phone_number = $scope.store.repres_phone_number;
        opts.repres_address = $scope.store.repres_address;
        opts.repres_province = $scope.store.repres_province;
        opts.repres_city = $scope.store.repres_city;
        opts.repres_zip = $scope.store.repres_zip;
        opts.referral_id = $scope.store.referral_info.id;
        opts.call_type = 3;
        opts.business_type = 'not in current use';
        opts.sale_description = 'not in current use';
        opts.allow_access = $scope.store.is_allowed;
        $scope.createStoreErrorMgs = ''; 
        StoreService.updateStore(opts, function(data) {
            if(data.code == 101) {
                $scope.updateStart = false;
                $scope.showEditForm = false;
                $scope.createStoreLoader = false;
                $scope.createGroupSuccess = true;
                $scope.createStoreSuccessMgs = $scope.i18n.albums.update_sucess;
                $timeout(function(){
                   $scope.createStoreSuccessMgs = ''; 
                }, 15000);
                $location.path("/shop/edit/"+$scope.store.id);
            } else if(data.code == 137){   
                $scope.createStoreErrorMgs = $scope.i18n.validation.broker_not_exists;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.createStoreError = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 100){
                $scope.createStoreErrorMgs = $scope.i18n.validation.missed_param;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 90){    
                $scope.createStoreErrorMgs = $scope.i18n.validation.account_inactive;
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 91){
                $scope.createStoreErrorMgs = $scope.i18n.validation.vat_exists;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.vatNumberInvalid = true;
                $timeout(function(){
                    $scope.vatNumberInvalid = false;
                }, 3000);
                focus('vatNumber');
            } else if(data.code == 126){
                $scope.createStoreErrorMgs = $scope.i18n.validation.invalid_store_forum_type;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 500){
                $scope.createStoreErrorMgs = $scope.i18n.validation.permission_denied;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 89){
                $scope.createStoreErrorMgs = $scope.i18n.validation.error_occured;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            } else if(data.code == 165){
                $scope.createStoreErrorMgs = $scope.i18n.validation.vat_valid;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.vatNumberInvalid = true;
                $timeout(function(){
                    $scope.vatNumberInvalid = false;
                }, 3000);
                focus('vatNumber');
            } else if(data.code == 166){
                $scope.createStoreErrorMgs = $scope.i18n.validation.iban_valid;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.ibanNumberInvalid = true;
                $timeout(function(){
                    $scope.ibanNumberInvalid = false;
                }, 3000);
                focus('iban');
            } else {
                $scope.createStoreErrorMgs = data.message;  
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.createStoreError = false;
                $timeout(function(){
                   $scope.createStoreErrorMgs = ''; 
                }, 15000);
            }
        });
    };
    // Code for cancel payment in cartasi //
    if($location.search().txn_id){
        $scope.tranId = $location.search().txn_id;
       
        var formData = {};
        formData.user_id = APP.currentUser.id;
        formData.txn_id = $scope.tranId;
        formData.status = "CANCEL";
        CommerialService.returnPaymentCancel(formData, function(data) { 
        if(data.code == 101) {
           $location.search({});
        }else { 
          
        }
        
        });    
    };


    $scope.initializeMaps = function () {
        var myLatLng = new google.maps.LatLng(latitudeMap, longitudeMap);
        var mapOptions = {
           center: new google.maps.LatLng(latitudeMap, longitudeMap),
           zoom: 6
        };
       var map = new google.maps.Map(document.getElementById('map-canvas-second'),mapOptions);
       var marker = new google.maps.Marker({
           position: new google.maps.LatLng(latitudeMap, longitudeMap),
           map: map,
           title: $scope.store.map_place
        });
    };


    $('.member-store').click(function() {
        $(this).addClass('active');
        $('.store-invitations li').removeClass('active');
    });

    $scope.cancelEditStore = function() {
        $scope.showEditForm = false;
        $location.path("/shop/about/"+$scope.store.id);
        //$scope.store = {};
    };

    $scope.loadEditMap = function() { 
        $scope.map = {center: {latitude: 40.1451, longitude: -99.6680 }, zoom: 4 }
        $scope.options = {scrollwheel: false};
        $scope.marker = {
            id:0,
            coords: {
                latitude: 40.1451,
                longitude: -99.6680
            },
            options: { draggable: true },
            events: {
                dragend: function (marker, eventName, args) {
                    document.getElementById("latitude").value = marker.getPosition().lat();
                    document.getElementById("longitude").value = marker.getPosition().lng();
                    $scope.mapLocation(marker.getPosition().lat(), marker.getPosition().lng());
                }
            }
        }
    }
    $scope.loadEditMap();
    /*$scope.mapLocation = function(mapLatitude, mapLogitude) {
        var geocoder;
        geocoder = new google.maps.Geocoder();
        var latlng = new google.maps.LatLng(parseFloat(mapLatitude), parseFloat(mapLogitude));
        geocoder.geocode({'latLng': latlng}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
                $('#mapplace').val(results[1].formatted_address);
            } else {
                alert('No results found');
            }
        } else {
            alert('Geocoder failed due to: ' + status);
        }
        });
    };*/
    $scope.initialize = function () {
        var myLatlng = new google.maps.LatLng(latitudeMap, longitudeMap);
        var mapOptions = {
            center: new google.maps.LatLng(latitudeMap, longitudeMap),
            zoom: 8
        };
        var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

        var input = (document.getElementById('pac-input'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            position:myLatlng,
            anchorPoint: new google.maps.Point(0, -29)
        });

        google.maps.event.addListener(autocomplete, 'place_changed', function() {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                return;
            }
            var countryPlace = autocomplete.getPlace();
            document.getElementById("latitude").value = countryPlace.geometry.location.k;
            document.getElementById("longitude").value = countryPlace.geometry.location.D;
            document.getElementById("mapplace").value = countryPlace.formatted_address;

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  
            }
            marker.setIcon(({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
        });

        function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);
    }
    $scope.initializeWait = function(){
        $timeout(function() {
           // $scope.initialize();
        }, 1000);
    }

    $scope.showInvite = false;
    $scope.timelineActive = false;
    $scope.toggleInvite = function(){
       
        $scope.timelineActive = !$scope.timelineActive;
        $scope.uploadProfileImage = false;
        $scope.showInvite = !$scope.showInvite;
        $scope.timelineActive1 = false;
        $scope.showEditForm=false;
        //alert(timelineActive);
        
    }

    $scope.uploadProfileImage = false;
    $scope.toggleUploadImage = function() {
        $scope.showInvite = false;
        $scope.uploadProfileImage = !$scope.uploadProfileImage;
    };

    $scope.uploadStoreProfile = false;
    $scope.uploadProfileerror = false;
    $scope.uploadStoreProfileImage = function() { 
        $scope.uploadStoreProfile = true;
        var imageType = $scope.myFile['name'].substring($scope.myFile['name'].lastIndexOf(".") + 1);
        // Checking Extension
        if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
            $scope.uploadProfileErrorMsg = $scope.i18n.storealbum.album_uploadProfileErrorMsg;
            $scope.uploadStoreProfile = false;
            $scope.uploadProfileerror = true;
        } else {
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.store_id = $scope.storeDetail.id;
            StoreService.uploadStoreProfileimage(opts, $scope.myFile, function(data) {
                if(data.code == 101) {
                    $scope.uploadProfileImage = false;
                    $scope.uploadStoreProfile = false;
                    $scope.storeDetail.cover_image_path = data.data.cover_image_path;
                    $scope.storeDetail.profile_image_original = data.data.original_image_path;
                    //$scope.loadDetails();
                } else {
                    $scope.uploadStoreProfile = false;
                }

            });
        }

    };

    $scope.myFile = '';
    $scope.imageSrc = '';
    $scope.invalidCoverImage = false;
    if($scope.i18n.storealbum == undefined){
        $scope.invalidCoverImageMgs = "Please choose an image that is at least 910 pixels wide and at least 400 pixels tall";
    } else{
        $scope.invalidCoverImageMgs = $scope.i18n.storealbum.album_invalidCoverImageMgs;
    }
    
    $scope.getFile = function () {
        $scope.progress = 0;
        fileReader.readAsDataUrl($scope.file, $scope)
        .then(function(result) {
            $scope.myFile = $scope.file;
            $scope.imageSrc = result;
            var imageType = $scope.myFile['name'].substring($scope.myFile['name'].lastIndexOf(".") + 1);
            if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
                $scope.uploadProfileErrorMsg = $scope.i18n.storealbum.album_uploadProfileErrorMsg;
                $scope.uploadStoreProfile = false;
                $scope.uploadProfileerror = true;
            } else {
                $scope.uploadStoreProfile = false;
                $scope.uploadProfileerror = false;

                $scope.readImage($scope.myFile, function(data){
                if(data.length != 0 && data.width >= 910 && data.height >= 400){
                    $scope.uploadStoreProfileImage();
                }
                else { 
                    $("#invalidCoverImage").show();
                    $timeout(function(){
                        $("#invalidCoverImage").hide();
                    }, 4000);
                }
            });
            }
        });
    };

    //function to check upload image dimenstions
    $scope.readImage = function(file, callback) {
    var reader = new FileReader();
    var image  = new Image();
    reader.readAsDataURL(file);  
    reader.onload = function(_file) {
        var filedata = {};
        image.src    = _file.target.result;
        image.onload = function() {
            var w = this.width,
                h = this.height,
                t = file.type,                     
                n = file.name,
                s = ~~(file.size/1024) +'KB';
                filedata['width'] = w;
                filedata['height'] = h;
                callback(filedata);
        };
        image.onerror= function() {
            callback(filedata);
        };      
    };
    }
    $scope.timelineActive1=false;
    $scope.showAllStoreMember = false;
    $scope.showAllMembers = function() {
        $scope.showAllStoreMember = !$scope.showAllStoreMember;
        $scope.timelineActive1 = !$scope.timelineActive1;
        $scope.timelineActive = false;
        $scope.showEditForm=false;
    }; 

    // for category and subcategory of the shop edit
    // creating category drop down
    $scope.$watch('currentLanguage', function(newValue, oldValue) {
        $scope.searchCategory(newValue);
        if(tempcat != '' && tempcat != 0){
            $scope.getSubCategory();
        }
    });
    $scope.searchCategory = function(currentLanguage){
        var opts = {};
        opts.lang_code = currentLanguage;
        opts.session_id = APP.currentUser.id;
        $scope.cancelCategoryRequest = false;
        opts.session_id = APP.currentUser.id;
        ProfileService.searchCatagory(opts,function(data){
            if(data.code === 101 && data.message === 'SUCCESS'){
                if(data.data.length > 0){
                    $scope.categories = data.data;
                }
            }
        });
    };

    $scope.subcategoryLoader = false;
    $scope.getSubCategory = function(){
        $scope.subcategoryLoader = true;
        if($scope.store.storecategory.id != '' && $scope.store.storecategory.id != 0){
            // enable disable keyword box
            $scope.enableKeyword = false;
            $scope.enableSubcategory = false;
            var opts = {};
            opts.lang_code = $scope.currentLanguage;
            opts.cat_id = $scope.store.storecategory.id;
            opts.session_id = APP.currentUser.id;
            $scope.cancelCategoryRequest = false;
            StoreService.getSubCategoryList(opts,function(data){
                $scope.subcategoryLoader = false;
                if(data.code === 101 && data.message === 'SUCCESS'){
                    $scope.subcategories = data.data;
                }
            });
        }else{
                $scope.enableKeyword = true;
                $scope.enableSubcategory = true;
        }
    };

    $scope.searchCategory($scope.currentLanguage);
    //Clear keyword array List
    $scope.clearKeywordList = function(){
        $timeout(function(){
            $scope.keywords = [];
        },500);
        
    };

    //Remove keyword from the array
    $scope.removeKeyword = function(index){
        $scope.keywordList.splice(index,1);
    };

    $scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
    $scope.Result = 0;
    function Leap(Year){
        if ( (Year % 4) == 0){
            if ( (Year % 100) == 0) {
                $scope.Result = ( (Year % 400) == 0);
            }else{
                $scope.Result = 1;
            }
        }else{
            $scope.Result = 0;
        }
        $scope.monthChange();
    }

    $scope.$watch('store.dobYear', function(val){    
        if($scope.store.dobYear != undefined){        
            Leap(val.value);
        }
    });
      
    $scope.monthChange = function(){
        //$scope.leapYear = Leap($scope.years);
            if($scope.store.dobMonth === undefined || $scope.store.dobMonth === "" || $scope.store.dobMonth === null){
            }else{
                var normalValue = $scope.store.dobMonth.value-1;
                if(normalValue <= 6){ 
                    if(normalValue % 2 == 0){
                        $scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
                    }else if(($scope.store.dobMonth.value-1) == 1){
                            if($scope.Result){
                                $scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29];
                            }else{
                                $scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28];
                            }
                    }else{
                        $scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
                    }
                }else{
                    if(normalValue % 2 != 0){
                        $scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
                    }else {
                        $scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
                    }
                }
            }
    };
    $scope.getyears = function() {
        var currentYear = new Date().getFullYear();
        $scope.years = [];
        for (var i = 1914; i <= currentYear ; i++){
            $scope.years.push({"id":i,"value":i});
        }
    }
    $scope.getyears();
    //create data of birth drop dwon end
    // Search keyword for particular catagory
    var currentTimeout = null;
    var DELAY_TIME_BEFORE_POSTING = 300;

    $('#categoryKeyword').keypress(function(event) {
        if(currentTimeout) {
            $timeout.cancel(currentTimeout);
        }
        currentTimeout = $timeout(function(){
            if(event.which != 13){ 
                $scope.searchKeyword();
            }
        }, DELAY_TIME_BEFORE_POSTING)
    });

    $scope.keywords = [];
    $scope.searchKeyword = function(){
        var opts = {};
        opts.category_id = $scope.store.storecategory.id.toString();
        opts.keyword = $scope.store.keywords;
        $scope.cancelKeywordRequest = false;
        $scope.showCatKeyLoading = true;
        opts.session_id = APP.currentUser.id;
        ProfileService.searchCatagoryKeyword(opts,function(data){
            $scope.showCatKeyLoading = false;
            if(data.code === 101 && data.message === "SUCCESS"){
                if($scope.cancelKeywordRequest === false){
                    $scope.keywords =  data.data.keyword;
                }
            }
        });
    };

    $scope.keywordIndex = -1;
    $scope.keywordKeyDown=function(event){
        if(event.keyCode===40){
            event.preventDefault();
            if($scope.keywordIndex+1 !== $scope.keywords.length){
                $scope.keywordIndex++;
            }
        }
        else if(event.keyCode===38){
            event.preventDefault();
            if($scope.keywordIndex-1 !== -1){
                $scope.keywordIndex--;
            }
        }
        else if(event.keyCode===13){
           if($scope.keywords[$scope.keywordIndex] === undefined ){
                if($scope.store.keywords.trim() !== ''){
                   var opts = {};
                        opts.user_id = APP.currentUser.id;
                        opts.keyword = $scope.store.keywords;

                    ProfileService.addKeywords(opts,function(data){
                        // if(data.code === 101 && data.message === 'SUCCESS'){
                        // }
                    });
               }
               $scope.storeKeyword($scope.store.keywords);
           }else{
               $scope.storeKeyword($scope.keywords[$scope.keywordIndex]);
           }
        }
    };

    // Clear keyword List
    $scope.cancelKeywordRequest = false;
    $scope.clearKeyList = function(){
        $scope.cancelKeywordRequest = true;
        $timeout(function(){
            $scope.keywords = [];
        },500);
    }

    // Store Keyword
    $scope.store.keywords = "";
    $scope.keywordList = [];
    $scope.storeKeyword = function(index){
        $scope.keywords = [];
        $scope.keywordIndex = -1;
        $scope.store.keywords = "";
        if( typeof(index) === 'object'){
            if($scope.keywordList.indexOf(index.name) === -1){
                $scope.keywordList.push(index.name);
            }
        }else{
            if(index === '' || index === undefined ){
                return false;
            }else{
                if($scope.keywordList.indexOf(index) === -1){
                    $scope.keywordList.push(index);
                }
            }
        }
    };

    //Clear keyword array List
    $scope.clearKeywordList = function(){
        $timeout(function(){
            $scope.keywords = [];
        },500);
        
    };

    //Remove keyword from the array
    $scope.removeKeyword = function(index){
        var keyIndex = $scope.keywordList.indexOf(index);
        $scope.keywordList.splice(index,1);
    };

}]).filter('unsafe', function($sce) {
    return function(val) {
        return $sce.trustAsHtml(val);
    };
});

//Create Store controller here
app.controller('CreateChildStore',['$scope', '$http', '$routeParams', '$location', '$timeout', 'StoreService', function ($scope, $http, $routeParams, $location, $timeout, StoreService) {
    $scope.createStoreLoader = false;
    $scope.createStoreError = false;
    $scope.createStoreErrorMgs = "";
    $scope.store = {};

    var opts1 = {};
    StoreService.getCountryList(opts1, function(data) {
        if(data.code == 101) {
            $scope.countryList = data.data;
        }
    });
    $scope.createChildStore = function() { 
        var storeParentId = $routeParams.id;
        if($scope.store.phone == undefined || $scope.store.phone == ''){
            $scope.createStoreError = true;
            $scope.createStoreErrorMgs = $scope.i18n.storealbum.album_ErrorMgsphone;
            return false;
        }else if($scope.store.zip == undefined || $scope.store.zip == ''){
            $scope.createStoreError = true;
            $scope.createStoreErrorMgs = $scope.i18n.storealbum.album_ErrorMgszip;
            return false;
        }
        $scope.createStoreLoader = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.business_name = $scope.store.business_name;
        opts.parent_store_id = storeParentId;
        opts.legal_status = $scope.store.legal_status;
        opts.business_type = $scope.store.business_type;
        opts.phone = $scope.store.phone;
        opts.email = $scope.store.email;
        opts.business_country = $scope.store.business_country;
        opts.business_region = $scope.store.business_region;
        opts.business_city = $scope.store.business_city;
        opts.business_address = $scope.store.business_address;
        opts.zip = $scope.store.zip;
        opts.province = $scope.store.province;
        opts.vat_number = $scope.store.vat_number;
        opts.iban = $scope.store.iban;
        opts.description = $scope.store.description;
        opts.map_place = document.getElementById("mapplace").value;
        opts.latitude = document.getElementById("latitude").value; 
        opts.longitude = document.getElementById("longitude").value;
        
        StoreService.createChildStore(opts, function(data) {
            if(data.code == 101) {
                $scope.createStoreLoader = true;
                $location.path("/shop/view/"+storeParentId);
            } else {    
                $scope.createStoreLoader = false;
                $scope.createStoreError = true;
                $scope.createStoreErrorMgs = $scope.i18n.storealbum.album_ErrorMgs;

            }
        });
    };

    $scope.resetStoreObject = function() { 
        document.getElementById("mapplace").value = '';
        document.getElementById("latitude").value = ''; 
        document.getElementById("longitude").value = '';
        $scope.store = {};
    };

    $scope.updateChildStore = function() {
        //alert("update for call")
    };

    $scope.cancelChildStore = function() {
        $scope.showEditForm = false;
        $scope.editStoreObject = {};
    };
    /*$scope.loadMap = function() {
        $scope.map = {center: {latitude: 40.1451, longitude: -99.6680 }, zoom: 4 }
        $scope.options = {scrollwheel: false};
        $scope.marker = {
            id:0,
            coords: {
                latitude: 40.1451,
                longitude: -99.6680
            },
            options: { draggable: true },
            events: {
                dragend: function (marker, eventName, args) {
                    document.getElementById("latitude").value = marker.getPosition().lat();
                    document.getElementById("longitude").value = marker.getPosition().lng();
                    $scope.mapLocation(marker.getPosition().lat(), marker.getPosition().lng());
                }
            }
        }
    };

    $scope.mapLocation = function(mapLatitude, mapLogitude) {
        var geocoder;
        geocoder = new google.maps.Geocoder();
        var latlng = new google.maps.LatLng(parseFloat(mapLatitude), parseFloat(mapLogitude));
        geocoder.geocode({'latLng': latlng}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
                $('#mapplace').val(results[1].formatted_address);
            } else {
                alert('No results found');
            }
        } else {
            alert('Geocoder failed due to: ' + status);
        }
        });
    };

    $scope.loadMap();*/

    $scope.initialize = function () {
        var mapOptions = {
            center: new google.maps.LatLng(-33.8688, 151.2195),
            zoom: 8
        };
        var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

        var input = (document.getElementById('pac-input'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        google.maps.event.addListener(autocomplete, 'place_changed', function() {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                return;
            }
            var countryPlace = autocomplete.getPlace();
            document.getElementById("latitude").value = countryPlace.geometry.location.k;
            document.getElementById("longitude").value = countryPlace.geometry.location.D;
            document.getElementById("mapplace").value = countryPlace.formatted_address;

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  
            }
            marker.setIcon(({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
        });

        function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);
    }
    
    if(JSON.stringify(APP.currentUser) != "{}"){
        $timeout(function(){
            $scope.initialize();
        }, 1000);
    }
}]);

app.controller('StoreLeftController',['$scope', '$http', 'StoreService', function ($scope, $http, StoreService) {
        $scope.showLeftPanel = false;
        $scope.storeNotFound = false;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_type = 2;
        opts.limit_start = '';
        opts.limit_size = '';
        StoreService.getAllStoreWithChild(opts, function(data) {  
            if(data.code == 101) {
                if(data.data.stores.length != 0 ) {
                    $scope.storeLeftList =  data.data.stores;
                    $scope.storeNotFound = false;
                }
                else {
                    $scope.storeNotFound = true;
                    $scope.storeLeftList =  data.data.stores; 
                }
            } else if(data.code == 100) { 
                $scope.storeNotFound = true;
            } else {
                $scope.storeNotFound = true;
            }
            $scope.showLeftPanel = true;
        });
}]);

//Controller to handle the store notiication
app.controller('StoreNotificationController',['$scope', '$http', 'StoreService', function ($scope, $http, StoreService) {
    $scope.getStoreNotification = function() {
        $scope.NotificationFound = false;
        $scope.NotificationNotFound = false;
        opts = {};
        opts.user_id = APP.currentUser.id;
        StoreService.getStoreNotifications(opts, function(data) {
            if(data.code == 101) {
                if(data.data.length != 0) {
                    $scope.storeNotification = data.data;
                    $scope.NotificationFound = true;
                } else {
                    $scope.NotificationNotFound = true;
                }
            } else {
                $scope.NotificationNotFound = true;
            }
        });
    };

    $scope.getStoreNotification();
    $scope.AcceptRequest = function(storeId, requestId, id) {
        $("#noti-"+id).fadeOut(1000);
        opts = {};
        opts.user_id = APP.currentUser.id;
        opts.request_id = requestId;
        opts.store_id = storeId;
        opts.response = 1;
        StoreService.acceptDenyToStoreNotification(opts, function(data) {
            if(data.code == 101) {
                $scope.getStoreNotification();
            } else {

            }
        });
    };

    $scope.rejectRequest = function(storeId, requestId, id) { 
        $("#noti-"+id).fadeOut(1000);
        opts = {};
        opts.user_id = APP.currentUser.id;
        opts.request_id = requestId;
        opts.store_id = storeId;
        opts.response = 2;
        StoreService.acceptDenyToStoreNotification(opts, function(data) {
            if(data.code == 101) {
                $scope.getStoreNotification();
            } else {

            }
        });
    }; 

}]);

/**
* Controller for autocomplete functionality
*
*/
app.controller('AutocompleteController',['$scope', '$http', '$timeout', 'StoreService', function ($scope, $http, $timeout, StoreService) {
    $scope.searchLoading = false;
    $scope.msgAfterInvite = '';
    $scope.searchedUsers = [];
    $scope.searchUsers = function() {
        $scope.msgAfterInvite = '';
        $scope.searchLoading = true;
        if($scope.selectedCountries !== '') {
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.friend_name = ($scope.selectedCountries === undefined ? '' : $scope.selectedCountries);
            opts.limit_start = APP.user_list_pagination.start;
            opts.limit_size = APP.user_list_pagination.end;
            StoreService.searchUser(opts, function(data) {
                $scope.searchLoading = false;
                $scope.searchedUsers = [];
                if(data.code == 101) {
                    var response = data.data.users;
                    for(var i = 0; i < data.data.users.length; i++) {
                        var user = {};
                        user.capital = response[i].user_id;
                        user.country = response[i].user_name;
                        $scope.searchedUsers.push(user);
                    }
                } else {
                    $scope.searchedUsers = [];
                }
            });
        }
    }

    $scope.InviteSendButton = false;
    $scope.onSelectPart = function() {
        $scope.InviteSendButton = true;
    };
    $scope.onSelectPartCancel = function() {
        $scope.InviteSendButton = false;
        $scope.selectedCountries = '';
    };

    $scope.SentInviteFromStore = function() {
        $scope.searchLoading = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $scope.storeDetail.id;
        opts.friend_id = $scope.selectedCountries.capital;
        StoreService.inviteUserOnStore(opts, function(data) {
            $scope.searchLoading = false;
            $scope.InviteSendButton = false;
            $scope.selectedCountries = '';
            if(data.code = 101) {
                $scope.msgAfterInvite = $scope.i18n.storealbum.album_msgAfterInvite;
                $timeout(function(){
                    $scope.msgAfterInvite = '';
                }, 2000);
            } else if(data.code == 118) {
                $scope.msgAfterInvite = data.message;
                $timeout(function(){
                    $scope.msgAfterInvite = '';
                }, 2000);
            } else {
                $scope.msgAfterInvite = data.message;
                $timeout(function(){
                    $scope.msgAfterInvite = '';
                }, 2000);
            }
        });
    };

}]);

app.controller('MyShopController',['$scope', '$http', '$timeout', 'StoreService', '$location', '$routeParams', function ($scope, $http, $timeout, StoreService, $location, $routeParams) {
    $scope.storeListObject  = [];
    $scope.storeMyList      = [];
    $scope.storeAllList     = [];
    $scope.totalSize        = 0;
    $scope.myTotalSize      = 0;
    $scope.storeLoading     = true;
    $scope.notFound         = false;
    $scope.Res              = 1;
    $scope.listActive       = 'active';
    $scope.gridActive       = '';
    $scope.firstPage        = APP.store_list_pagination.end;
    $scope.itemsPerPage     = APP.store_list_pagination.end;
    $scope.currentPage      = 1;
    $scope.range            = [];
    $scope.affilateShop     = false;
    $scope.searchText       = '';
    if($routeParams.type == "1"){
        $scope.viewAllActive    = '';
        $scope.myStoreActive    = 'current';
        $scope.favShopActive    = '';
        $scope.tab              = 'myStore';
    }else{
        $scope.viewAllActive    = '';
        $scope.myStoreActive    = '';
        $scope.favShopActive    = 'current';
        $scope.tab              = 'favStore';
    }

    var DELAY_TIME_BEFORE_POSTING = 300;
    var currentTimeout = null;

    $scope.changePageMore = function(pageNo) {
        $scope.currentPage = pageNo;
        $scope.getShop($scope.tab, $scope.itemsPerPage);
    };
    
    $scope.prevPage = function() {
        if ($scope.currentPage > 1) {
            $scope.currentPage--;
        }
        $scope.getShop($scope.tab,  $scope.itemsPerPage);
    };

    $scope.paginate = function() {
       $scope.currentPage = 1; 
    }

    $scope.prevPageDisabled = function() {
        return $scope.currentPage === 1 ? "disabled" : "";
    };
    $scope.nextPage = function() {
        if ($scope.currentPage < $scope.totalItems) {
            $scope.currentPage++;
        }
        $('ul.pagination li.active:gt(3)').hide();
        $scope.getShop($scope.tab,  $scope.itemsPerPage);
    };

    $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.totalItems ? "disabled" : "";
    };

    $scope.setPage = function(number) {
        $scope.itemsPerPage = number;
        $scope.currentPage = 1;
        $scope.getShop($scope.tab,  $scope.itemsPerPage);
    };

    $scope.changeView = function(layout) {
        if(layout == 'grid'){
            $scope.gridActive = 'active'; 
            $scope.listActive = ''; 
        } else if(layout == 'list'){
            $scope.listActive = 'active'; 
            $scope.gridActive = '';
        }
    };

    $('#shopserchbox').keypress(function() {
        $scope.currentPage = 1; 
        var model = $scope.searchText;
        if(currentTimeout) {
            $timeout.cancel(currentTimeout);
        }
        currentTimeout = $timeout(function(){
            //if(model.length >= 2 || model.length == 0) {
                $scope.getShop($scope.tab,  $scope.itemsPerPage);
            //}
        }, DELAY_TIME_BEFORE_POSTING)
    });

    $scope.getShop = function(activeTab, itemsPerPage){
        $scope.viewAllActive    = '';
        $scope.myStoreActive    = '';
        $scope.favShopActive    = '';
        $scope.tab              = activeTab;
        var limit_start = ($scope.currentPage-1)*itemsPerPage;
        var opts = {};
            opts.user_id        = APP.currentUser.id;
            opts.search_text    = $scope.searchText;
            opts.lang_code      = $scope.activeLanguage;
            if(activeTab === 'myStore'){
                opts.store_type = 2;     
            }else{
                opts.store_type = 1;   
            }
            if(activeTab === 'favStore'){
                opts.only_in_favorite = 1;
            }else{
                opts.only_in_favorite = 0;
            }
            opts.limits = {};
            opts.limits.limit_start = limit_start;
            opts.limits.limit_size  = itemsPerPage; 

        if(activeTab === 'myStore'){
            $scope.myStoreActive    = 'current';
        }else if(activeTab === 'favStore'){
            $scope.favShopActive    = 'current';
        }else{
            $scope.viewAllActive    = 'current';
        }    
        
        if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.Res == 1) {
            $scope.storeLoading     = true
            StoreService.getShops(opts, function(data) {
                $scope.affilateShop = true;
                $scope.storeLoading = false;
                if(data.code == 101) {
                    $scope.Res = 1;
                    if(data.data.length > 0 || data.data["stores"] != undefined){
                        $scope.totalSize        = data.data.size;
                        $scope.storeListObject  =  $scope.storeAllList = data.data.stores;
                        $scope.totalItems       = Math.ceil(data.data.size/itemsPerPage); 
                        $scope.range = [];  
                        for (var i=1; i<=$scope.totalItems; i++) {
                            $scope.range.push(i);
                        }             
                        $scope.notFound  = false;
                    }else{
                        $scope.notFound  = true;
                        $scope.range     = [];
                        $scope.storeListObject = [];
                    }
                }else if(data.code == 121) {
                    $scope.storeListObject  =  [];
                    $scope.notFound         = true;
                    $scope.storeLoading     = false;
                    $scope.Res              = 1; 
                }
                else {
                    $scope.storeListObject  =  [];
                    $scope.notFound         = true;
                    $scope.storeLoading     = false;
                    $scope.Res              = 1; 
                }
            });
        }
    };


    $scope.deleteStore = function(id, parentId) { 
        $("#store" + id).hide();
        $("#storedelete" + id).show();
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = id;
        //opts.store_type = (parentId) ? 2 : 1; condition changed on 14 jan
        opts.store_type = 1; // store type 1 for parent store delete
        StoreService.deleteStore(opts, function(data) {
            if(data.code == 101) {
                $(".storecoverid" + id).hide();
            } else {
                $("#store" + id).show();
                $("#storedelete" + id).hide();
            }
        });
    };
    
    $scope.FavouriteStores = function(activeTab, storeId , element){
        var opts = {};
            opts.user_id  = APP.currentUser.id;
            opts.store_id = storeId;

            if($(element.target).hasClass('active')){
                StoreService.unfavouritestores(opts, function(data) {
                    if(data.code == 101){
                        $(element.target).removeClass('active');
                        if(activeTab == 'favStore') {
                            $scope.tab = 'favStore';
                            $scope.getShop($scope.tab, $scope.itemsPerPage);
                        }   
                    }
                });
            }else{
                StoreService.favouritestores(opts, function(data) {
                    if(data.code == 101){
                        $(element.target).addClass('active');
                        if(activeTab == 'favStore') {
                            $scope.tab = 'favStore';
                            $scope.getShop($scope.tab, $scope.itemsPerPage);
                        }
                    }
                });                    
            }
    };

    $scope.getShop($scope.tab, $scope.itemsPerPage);
}]);

app.controller('DetailStoreCoverController',['$rootScope', '$route', '$scope', '$http', '$sce', '$routeParams', '$location', '$timeout', 'StoreService', 'fileReader', 'ProfileService', 'storeShopHistorySelection', function ($rootScope, $route, $scope, $http, $sce, $routeParams, $location, $timeout, StoreService, fileReader ,ProfileService, storeShopHistorySelection) {
    $scope.$route = $route;
    $scope.storeMainId = $routeParams.id;
    var latitudeMap = 0;
    var longitudeMap = 0;
    $scope.isMyShop = APP.currentUser.store_profile;
    $scope.mobileAppUrl = '<li> Fits true to size. Take your normal size\r</li>';

    //Broadcast from storealbum controller
    $scope.$on('updateShopProfileCover', function(event, imgData) { 
        $scope.storeDetail.cover_image_path = imgData.cover_image_path;
        $scope.storeDetail.profile_image_original = imgData.original_image_path;
        $scope.storeDetail.media_id = imgData.media_id;
        $scope.coverLoadHide = false;
        $scope.fileUrl = "";
        $timeout(function(){
            $scope.repositionImage();
        },50);
     });
    $scope.loadalbumimages =function(){
     var opts = {};
        opts.store_id = $routeParams.id; 
        opts.session_id = APP.currentUser.id;
        opts.limit_start = APP.store_latest_images.start;
        opts.limit_size =  APP.store_latest_images.end;
        StoreService.getLatestAlbumList(opts, function(data) {
            if(data.code == 101) {
                $scope.storelatest =  data.data.media;
            } else {
                $scope.storelatest = '';
            }
            });
    };
    $scope.displayLoader = false;
    //shop follow service
    $scope.followshops = function() {
        $scope.displayLoader = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.shop_id = $scope.storeMainId;
        StoreService.followshops(opts, function(data) {
            $scope.displayLoader = false;
            if(data.code == 101) {
                $scope.followDisplay = 1;
            }
        });
    };

    $scope.unfollowshops = function() {
        $scope.displayLoader = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.shop_id = $scope.storeMainId;
        StoreService.unfollowshops(opts, function(data) {
            $scope.displayLoader = false;
            if(data.code == 101) {
                $scope.followDisplay = 0;
            }
        });
    };

    $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
        $scope.windowHeight = newValue.h;
        $scope.windowWidth = newValue.w;
        if($scope.windowWidth <= '780'){
            $rootScope.mobileView = true; //declare in main controller            
        } else {
            $rootScope.mobileView = false; //declare in main controller
        }
    }, true);
    var img = new Image();
    $scope.mobileShopX_Cord = 0;
    $scope.mobileShopY_Cord = 0;
    $scope.loadDetails = function() {
        $scope.storeLoading = true;
        $scope.updateStart = false;
        $scope.createStoreError = false;
        $scope.createStoreErrorMgs = ''; 
        $scope.showEditForm = false;
        $scope.countryList = APP.countries;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $routeParams.id;
        StoreService.getStoreDetail(opts, function(data) {
            if(data.code == 101) {
                    if( data.data.owner_id == APP.currentUser.id && (data.data.new_contract_status === 0 )) {
                    $location.path("/edit/shop/"+data.data.id);
                    } else if( data.data.owner_id == APP.currentUser.id && (data.data.credit_card_status == 1 && data.data.shop_status == 0 || data.data.credit_card_status == 0 && data.data.shop_status == 1 || data.data.credit_card_status == 0 && data.data.shop_status == 0)) {
                        $location.path("shop/"+data.data.id+"/contract");
                    } else {
                    $scope.storeDetail = data.data;
                    $scope.$broadcast('update_parent', $scope.storeDetail);
                    
                    $scope.store = $scope.storeDetail;
                    var tempopts = {};
                    tempopts.id = data.data.id;
                    tempopts.store_name = data.data.name;
                    tempopts.is_subscribed = data.data.is_subscribed;
                    tempopts.is_paypal_added = data.data.is_paypal_added;
                    StoreService.SetStoreData(tempopts);
                    if($scope.storeDetail.is_following == 1){
                        $scope.followDisplay = 1;
                    } else {
                        $scope.followDisplay = 0;
                    }
                    if($rootScope.mobileView == true){
                        img = null;
                        img = new Image();
                        img.src = $scope.storeDetail.cover_image_path;
                        img.onload = function(){
                            if($scope.windowWidth <= '480'){
                                if(img.width <= 910){
                                    if( $scope.storeDetail.y_cord != ""){
                                        if( $scope.storeDetail.y_cord > 100){
                                            $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 3;
                                        }else{
                                            $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 4;
                                        }
                                        $scope.mobileShopX_Cord = 0;
                                    }else{
                                        $scope.storeDetail.x_cord = 0;
                                        $scope.storeDetail.y_cord = 0;
                                        $scope.mobileShopX_Cord = 0;
                                        $scope.mobileShopY_Cord = 0;
                                    }
                                }else if(img.width > 910 && img.width <= 1300){
                                    if( $scope.storeDetail.x_cord != ""){
                                        if( $scope.storeDetail.x_cord > 100){
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 4;
                                        }else{
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 5;
                                        }
                                        $scope.mobileShopY_Cord = 0;
                                    }else{
                                        $scope.storeDetail.x_cord = 0;
                                        $scope.storeDetail.y_cord = 0;
                                        $scope.mobileShopX_Cord = 0;
                                        $scope.mobileShopY_Cord = 0;
                                    }
                                }else if(img.width > 1300){
                                    if( $scope.storeDetail.x_cord != ""){
                                        if( $scope.storeDetail.x_cord > 100){
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 5;
                                        }else{
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 6;
                                        }
                                        $scope.mobileShopY_Cord = 0;
                                    }else{
                                        $scope.storeDetail.x_cord = 0;
                                        $scope.storeDetail.y_cord = 0;
                                        $scope.mobileShopX_Cord = 0;
                                        $scope.mobileShopY_Cord = 0;
                                    }
                                }
                            }else if($scope.windowWidth > '480' && $scope.windowWidth <= '768'){
                                if(img.width <= 910){
                                    if( $scope.storeDetail.y_cord != ""){
                                        if( $scope.storeDetail.y_cord > 100){
                                            $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 1.8;
                                        }else{
                                            $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 2;
                                        }
                                        $scope.mobileShopX_Cord = 0;
                                    }else{
                                        $scope.storeDetail.x_cord = 0;
                                        $scope.storeDetail.y_cord = 0;
                                        $scope.mobileShopX_Cord = 0;
                                        $scope.mobileShopY_Cord = 0;
                                    }
                                }else if(img.width >  910 && img.width <=1300){
                                    if( $scope.storeDetail.x_cord != ""){
                                        if( $scope.storeDetail.x_cord > 100){
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 2.00;
                                        }else{
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 2.20;
                                        }
                                        $scope.mobileShopY_Cord = 0;
                                    }else{
                                        $scope.storeDetail.x_cord = 0;
                                        $scope.storeDetail.y_cord = 0;
                                        $scope.mobileShopX_Cord = 0;
                                        $scope.mobileShopY_Cord = 0;
                                    }
                                }else if(img.width > 1300){
                                    if( $scope.storeDetail.x_cord != ""){
                                        if( $scope.storeDetail.x_cord > 100){
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 2.80;
                                        }else{
                                            $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 3.00;
                                        }
                                        $scope.mobileShopY_Cord = 0;
                                    }else{
                                        $scope.storeDetail.x_cord = 0;
                                        $scope.storeDetail.y_cord = 0;
                                        $scope.mobileShopX_Cord = 0;
                                        $scope.mobileShopY_Cord = 0;
                                    }
                                }
                            }
                        }
                    }
                    $scope.aboutStore();
                    $scope.storeLoading = false;
                    latitudeMap = data.data.latitude;
                    longitudeMap = data.data.longitude;
                    if (($location.path().indexOf("/shop/edit") != -1) ||  ($location.path().indexOf("/shop/view") != -1) ) {
                        $timeout(function() {
                          // $scope.initialize();
                        },  1000); 
                       
                    } else {
                       $timeout(function() {
                          $scope.initializeMaps();
                        },  1000); 
                    }
                    //get dynamic values 
                    //get country name 
                    $scope.store.business_country = $scope.getCountryName(APP.countries, data.data.business_country);
                    $scope.store.legal_status = $scope.getLegalForm(APP.legalForms, data.data.legal_status);
                    $scope.store.sale_country = $scope.getCountryName(APP.countries, data.data.sale_country);
                    $scope.store.business_region = $scope.getRegionName(APP.regions, data.data.business_region);
                    $scope.store.sale_region = $scope.getRegionName(APP.regions, data.data.sale_region);
                    $scope.getShopCategory();
                    $scope.getShopSubCategory();
                    var storeData = {};
                    storeData.storeId = $scope.storeDetail.owner_id;
                    //call service to get mobile app
                    var mopts = {};
                    mopts.store_id = $scope.storeDetail.id;
                    mopts.session_id = APP.currentUser.id;
                    StoreService.getMobileAppUrl(mopts, function(data) {
                        if(data.code == 101) {
                            $scope.store.mobileAppUrl =  data.data.url;
                        } else {
                            $scope.store.mobileAppUrl = '';
                        }
                    });
                }
            } else {
                $scope.storeLoading = false;
                $scope.createStoreError = true;
            }
        });
    };

    $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
        $scope.windowHeight = newValue.h;
        $scope.windowWidth = newValue.w;
        if($scope.windowWidth <= '768'){
            if($rootScope.mobileView == true){
                $timeout(function(){
                    $scope.resizeMediaCoordinate();
                },1000);
            }
            $rootScope.mobileView = true; //declare in main controller         
        } else {
            $rootScope.mobileView = false; //declare in main controller
        }
    }, true);
    var img = new Image();
    $scope.mobileShopX_Cord = 0;
    $scope.mobileShopY_Cord = 0;

    $scope.resizeMediaCoordinate = function(){
        if($scope.storeDetail != undefined){
            img = null;
            img = new Image();
            img.src = $scope.storeDetail.cover_image_path;
            if($scope.windowWidth <= '480'){
                img.onload = function(){
                    if(img.width <= 910){
                        if( $scope.storeDetail.y_cord != ""){
                            if( $scope.storeDetail.y_cord > 100){
                                $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 3;
                            }else{
                                $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 4;
                            }
                            $scope.mobileShopX_Cord = 0;
                        }else{
                            $scope.storeDetail.x_cord = 0;
                            $scope.storeDetail.y_cord = 0;
                            $scope.mobileShopX_Cord = 0;
                            $scope.mobileShopY_Cord = 0;
                        }
                    }else if(img.width > 910 && img.width <= 1300){
                        if( $scope.storeDetail.x_cord != ""){
                            if( $scope.storeDetail.x_cord > 100){
                                $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 4;
                            }else{
                                $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 5;
                            }
                            $scope.mobileShopY_Cord = 0;
                        }else{
                            $scope.storeDetail.x_cord = 0;
                            $scope.storeDetail.y_cord = 0;
                            $scope.mobileShopX_Cord = 0;
                            $scope.mobileShopY_Cord = 0;
                        }
                    }else if(img.width > 1300){
                        if( $scope.storeDetail.x_cord != ""){
                            if( $scope.storeDetail.x_cord > 100){
                                $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 5;
                            }else{
                                $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 6;
                            }
                            $scope.mobileShopY_Cord = 0;
                        }else{
                            $scope.storeDetail.x_cord = 0;
                            $scope.storeDetail.y_cord = 0;
                            $scope.mobileShopX_Cord = 0;
                            $scope.mobileShopY_Cord = 0;
                        }
                    } 
                }
            }else if($scope.windowWidth > '480' && $scope.windowWidth <= '768'){
                img.onload = function(){
                    if(img.width <= 910){
                        if( $scope.storeDetail.y_cord != ""){
                            if( $scope.storeDetail.y_cord > 100){
                                $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 1.8;
                            }else{
                                $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 2;
                            }
                            $scope.mobileShopX_Cord = 0;
                        }else{
                            $scope.storeDetail.x_cord = 0;
                            $scope.storeDetail.y_cord = 0;
                            $scope.mobileShopX_Cord = 0;
                            $scope.mobileShopY_Cord = 0;
                        }
                    }else if(img.width > 910 && img.width <= 1300){
                        if( $scope.storeDetail.x_cord != ""){
                            if( $scope.storeDetail.x_cord > 100){
                                $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 2.00;
                            }else{
                                $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 2.20;
                            }
                            $scope.mobileShopY_Cord = 0;
                        }else{
                            $scope.storeDetail.x_cord = 0;
                            $scope.storeDetail.y_cord = 0;
                            $scope.mobileShopX_Cord = 0;
                            $scope.mobileShopY_Cord = 0;
                        }
                    }else if(img.width > 1300){
                        if( $scope.storeDetail.x_cord != ""){
                            if( $scope.storeDetail.x_cord > 100){
                                $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 2.80;
                            }else{
                                $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 3.00;
                            }
                            $scope.mobileShopY_Cord = 0;
                        }else{
                            $scope.storeDetail.x_cord = 0;
                            $scope.storeDetail.y_cord = 0;
                            $scope.mobileShopX_Cord = 0;
                            $scope.mobileShopY_Cord = 0;
                        }
                    }
                }
            }
        }
    };

    //Favorite shop
     $scope.favouritestores = function(id,element) {
        
        if($(element.target).hasClass('active')){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.store_id = id;
            StoreService.unfavouritestores(opts, function(data) {
                if(data.code == 101) {
                    $(element.target).removeClass('active');
                } else {

                }               
            });
        } else {
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.store_id = id;
            StoreService.favouritestores(opts, function(data) {
                if(data.code == 101) {
                    $(element.target).addClass('active');
                } else {
                    $scope.storeLoading = false;
                }
            });   
        }
        
    }

    $scope.loadDetails();
    $scope.loadalbumimages();
    $scope.getCountryName = function(p, k) {
        for(var i=0;i<p.length;i++){
            var obj = p[i];
            for(var key in obj){
                if (obj['id'] == k) {
                    return obj.country;
                }
            }
        }
    }
    $scope.getRegionName = function(p, k) {
        for(var i=0;i<p.length;i++){
            var obj = p[i];
            for(var key in obj){
                if (obj['id'] == k) {
                    return obj.region;
                }
            }
        }
        return k;
    }

    $scope.getLegalForm = function(p, k) {
        for(var i=0;i<p.length;i++){
            var obj = p[i];
            for(var key in obj){
                if (obj['id'] == k) {
                    return obj['value'];
                }
            }
        }
    }

    $scope.getShopCategory = function() {
      $scope.store.sale_catid = $scope.store.sale_catid;
      if($scope.store.sale_catid != '' && $scope.store.sale_catid != undefined){
        var catopts= {};
        catopts.lang_code = $scope.currentLanguage;
        catopts.cat_id = $scope.store.sale_catid;
        catopts.session_id = APP.currentUser.id;
        catopts.type = "show";
        catopts.session_id = APP.currentUser.id;
        ProfileService.getCategories(catopts, function(data) {
                        if(data.code == 101) {
                            $scope.store.categoryName =  data.data.category_name;
                        } else {
                            $scope.store.categoryName = '';
                        }
                    });

     } else {
        $scope.store.categoryName = '';
      }
    };
    $scope.getShopSubCategory = function() {
      $scope.store.sale_subcatid = $scope.store.sale_subcatid;
      if($scope.store.sale_subcatid != '' && $scope.store.sale_subcatid != undefined){
        var subopts= {};
        subopts.lang_code = $scope.currentLanguage;
        subopts.cat_id = $scope.store.sale_subcatid;
        subopts.session_id = APP.currentUser.id;
        subopts.type = "show";
        subopts.session_id = APP.currentUser.id;
        ProfileService.getCategories(subopts, function(data) {
                        if(data.code == 101) {
                            $scope.store.categorySubName =  data.data.category_name;
                        } else {
                            $scope.store.categorySubName = '';
                        }
                    });
      } else {
        $scope.store.categorySubName = '';
      }
    };
    $scope.editStore = function() {
        $scope.createStoreLoader = false;
        $scope.store = $scope.storeDetail;
        $scope.showEditForm = true;
        $scope.timelineActive = false;
        $scope.timelineActive1 = false;
        var opts = {};
        StoreService.getCountryList(opts, function(data) {
            if(data.code == 101) {
                $scope.countryList = data.data;

            }
        });
    };

    $scope.aboutStore = function() {
        $scope.store = $scope.storeDetail;
        var opts = {};
        StoreService.getCountryList(opts, function(data) {
            if(data.code == 101) {
                $scope.countryList = data.data;

            }
        });
    };
    $scope.updateStore = function() {
        $scope.updateStart = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $scope.store.id;
        if($scope.store.name == undefined || $scope.store.name == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_storename;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.business_name == undefined || $scope.store.business_name == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessname;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.business_type == undefined || $scope.store.business_type == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesstype;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.legal_status == undefined || $scope.store.legal_status == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesstatus;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.phone == undefined || $scope.store.phone == '' || isNaN($scope.store.phone) == true){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessnumber;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.email == undefined || $scope.store.email == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessemail;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.business_country == undefined || $scope.store.business_country.id == undefined || $scope.store.business_country.id == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesscountry;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.business_region == undefined || $scope.store.business_region == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessregion;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.business_city == undefined || $scope.store.business_city == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesscity;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.business_address == undefined || $scope.store.business_address == ''){
            $scope.createStoreErrorMgs = $scope.i18n.validation.enter_businessaddress;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.zip == undefined || $scope.store.zip == '' || $scope.store.zip.length < 2 || $scope.store.zip.length > 2 ){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesszip;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.province == undefined || $scope.store.province == '' ){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessprovince;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.province.length < 2 || $scope.store.province.length > 2 ){
            $scope.createStoreErrorMgs = $scope.i18n.validation.province_length;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.vat_number == undefined || $scope.store.vat_number == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessvat;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.iban == undefined || $scope.store.iban == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessiban;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.description == undefined || $scope.store.description == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessdesc;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if($scope.store.referral_info == '' || $scope.store.referral_info == undefined || $scope.store.referral_info.id == undefined || $scope.store.referral_info.id == ''){
            $scope.createStoreErrorMgs = $scope.i18n.store.enter_broker_id;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if((document.getElementById("latitude").value) == undefined || (document.getElementById("latitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesslat;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if((document.getElementById("longitude").value )== undefined || (document.getElementById("longitude").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businesslog;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } else if((document.getElementById("mapplace").value) == undefined || (document.getElementById("mapplace").value) == ''){
            $scope.createStoreErrorMgs = $scope.i18n.register.enter_businessmap;
            $scope.createGroupError = true;
            $scope.updateStart = false;
            return false;
        } 
        opts.name = $scope.store.name;
        opts.business_name = $scope.store.business_name;
        opts.parent_store_id = $scope.store.parent_store_id;
        opts.legal_status = $scope.store.legal_status;
        opts.business_type = $scope.store.business_type;
        opts.phone = $scope.store.phone;
        opts.email = $scope.store.email;
        opts.business_country = $scope.store.business_country;
        opts.business_region = $scope.store.business_region;
        opts.business_city = $scope.store.business_city;
        opts.business_address = $scope.store.business_address;
        opts.zip = $scope.store.zip;
        opts.province = $scope.store.province;
        opts.vat_number = $scope.store.vat_number;
        opts.iban = $scope.store.iban;
        opts.description = $scope.store.description;
        opts.referral_id = $scope.store.referral_info.id;
        opts.map_place = document.getElementById("mapplace").value;
        opts.latitude = document.getElementById("latitude").value; 
        opts.longitude = document.getElementById("longitude").value; 
        opts.allow_access = $scope.store.is_allowed; 
        StoreService.updateStore(opts, function(data) {
            if(data.code == 101) {
                $scope.updateStart = false;
                $scope.showEditForm = false;
                $scope.createStoreLoader = false;
                $location.path("/shop/edit/"+$scope.store.id);
            } else if(data.code == 137){   
                $scope.createStoreErrorMgs = $scope.i18n.validation.broker_not_exists;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.createStoreError = false;
            } else if(data.code == 100){
                $scope.createStoreErrorMgs = $scope.i18n.validation.missed_param;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
            } else if(data.code == 90){    
                $scope.createStoreErrorMgs = $scope.i18n.validation.account_inactive;
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
            } else if(data.code == 91){
                $scope.createStoreErrorMgs = $scope.i18n.validation.vat_exists;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
            } else if(data.code == 126){
                $scope.createStoreErrorMgs = $scope.i18n.validation.invalid_store_forum_type;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
            } else if(data.code == 500){
                $scope.createStoreErrorMgs = $scope.i18n.validation.permission_denied;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
            } else if(data.code == 89){
                $scope.createStoreErrorMgs = $scope.i18n.validation.error_occured;    
                $scope.createGroupError = true;
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
            } else {
                $scope.createStoreErrorMgs = data.message;    
                $scope.updateStart = false;
                $scope.createStoreLoader = false;
                $scope.createStoreError = false;
            }
        });
    };

    $scope.initializeMaps = function () {
        if (angular.element('#map-canvas-second').length ) {
                var myLatLng = new google.maps.LatLng(latitudeMap, longitudeMap);
                var mapOptions = {
                   center: new google.maps.LatLng(latitudeMap, longitudeMap),
                   zoom: 6
                };
                var map = new google.maps.Map(document.getElementById('map-canvas-second'),mapOptions);
                var marker = new google.maps.Marker({
                   position: new google.maps.LatLng(latitudeMap, longitudeMap),
                   map: map,
                   title: $scope.store.map_place
                });   
        }
    };


    $('.member-store').click(function() {
        $(this).addClass('active');
        $('.store-invitations li').removeClass('active');
    });

    $scope.cancelEdit = function() {
        $scope.showEditForm = false;
        $scope.store = {};
    };

    $scope.loadEditMap = function() { 
        $scope.map = {center: {latitude: 40.1451, longitude: -99.6680 }, zoom: 4 }
        $scope.options = {scrollwheel: false};
        $scope.marker = {
            id:0,
            coords: {
                latitude: 40.1451,
                longitude: -99.6680
            },
            options: { draggable: true },
            events: {
                dragend: function (marker, eventName, args) {
                    document.getElementById("latitude").value = marker.getPosition().lat();
                    document.getElementById("longitude").value = marker.getPosition().lng();
                    $scope.mapLocation(marker.getPosition().lat(), marker.getPosition().lng());
                }
            }
        }
    }
    $scope.loadEditMap();
    /*$scope.mapLocation = function(mapLatitude, mapLogitude) {
        var geocoder;
        geocoder = new google.maps.Geocoder();
        var latlng = new google.maps.LatLng(parseFloat(mapLatitude), parseFloat(mapLogitude));
        geocoder.geocode({'latLng': latlng}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
                $('#mapplace').val(results[1].formatted_address);
            } else {
                alert('No results found');
            }
        } else {
            alert('Geocoder failed due to: ' + status);
        }
        });
    };*/
    /*$scope.initialize = function () {
        var mapOptions = {
            center: new google.maps.LatLng(latitudeMap, longitudeMap),
            zoom: 8
        };
        var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

        var input = (document.getElementById('pac-input'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        google.maps.event.addListener(autocomplete, 'place_changed', function() {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                return;
            }
            var countryPlace = autocomplete.getPlace();
            document.getElementById("latitude").value = countryPlace.geometry.location.k;
            document.getElementById("longitude").value = countryPlace.geometry.location.B;
            document.getElementById("mapplace").value = countryPlace.formatted_address;

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  
            }
            marker.setIcon(({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
        });

        function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);
    }
    $scope.initializeWait = function(){
        $timeout(function() {
            $scope.initialize();
        }, 1000);
    }*/

    $scope.showInvite = false;
    $scope.timelineActive = false;
    $scope.toggleInvite = function(){
       
        $scope.timelineActive = !$scope.timelineActive;
        $scope.uploadProfileImage = false;
        $scope.showInvite = !$scope.showInvite;
        $scope.timelineActive1 = false;
        $scope.showEditForm=false;
     //   alert(timelineActive);
        
    }

    $scope.uploadProfileImage = false;
    $scope.toggleUploadImage = function() {
        $scope.showInvite = false;
        $scope.uploadProfileImage = !$scope.uploadProfileImage;
    };

    $scope.uploadStoreProfile = false;
    $scope.uploadProfileerror = false;
    $scope.newImage = false;
    $scope.uploadStoreProfileImage = function() { 
        $scope.uploadStoreProfile = true;
        var imageType = $scope.myFile['name'].substring($scope.myFile['name'].lastIndexOf(".") + 1);
        // Checking Extension
        if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
            $scope.uploadProfileErrorMsg = $scope.i18n.storealbum.album_uploadProfileErrorMsg;
            $scope.uploadStoreProfile = false;
            $scope.uploadProfileerror = true;
        } else {
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.store_id = $scope.storeDetail.id;
            StoreService.uploadStoreProfileimage(opts, $scope.myFile, function(data) {
                if(data.code == 101) {
                    $scope.newImage = true;
                    $scope.uploadProfileImage = false;
                    $scope.uploadStoreProfile = false;
                    $scope.storeDetail.cover_image_path = data.data.cover_image_thumb_path;
                    $scope.storeDetail.profile_image_original = data.data.original_image_path;
                    $scope.fileUrl = data.data.cover_image_thumb_path;
                    $scope.storeDetail.media_id =  data.data.media_id;
                    $scope.showCanves = true;
                    $scope.coverLoadHide = true;
                } else {
                    $scope.uploadStoreProfile = false;
                }

            });
        }

    };

    $scope.imageCropResult = null;
    $scope.imageCropResult2 = null;
    $scope.imageWidth = null;
    $scope.imageHeight = null;
    $scope.showImageCropper = false;
    $scope.showImageCropper2 = false;
    $scope.imageString = "";
    $scope.file ={};
    $scope.coverLoadHide = false;
    $scope.$watch('imageCropResult2', function(newVal) {
        if (newVal) {
            console.log('imageCropResult2', newVal);
        }
    });

    $scope.imageXPosition = 0;
    $scope.imageYPosition = 0;
    $scope.setImageCordinate = function(){
        $scope.storeDetail.x_cord = $rootScope.shop.x_cord * -1;
        $scope.storeDetail.y_cord = $rootScope.shop.y_cord * -1;
        $scope.saveCordinate();
    };

    $rootScope.shop = {};
    $scope.showCanves = false;
    $scope.repositionImage = function(){
        $scope.showCanves = true;
        $scope.fileUrl =  $scope.storeDetail.cover_image_path;
        if($scope.storeDetail.x_cord == 'NaN'){
             $scope.imageXPosition = 0;
             $scope.imageYPosition = 0;
              $scope.coverLoadHide = true;
        }else{
            $scope.imageXPosition = $scope.storeDetail.x_cord * -1;
            $scope.imageYPosition =  $scope.storeDetail.y_cord * -1;
            $scope.coverLoadHide = true;
        }
    };

    $scope.saveCordinate = function(){

        /*$scope.storeDetail.x_cord = $scope.imageXPosition * -1;
        $scope.storeDetail.y_cord = $scope.imageYPosition * -1;*/
        //$scope.coverLoadHide = false;
        $scope.hideUpdateCoverButton = true;
        $scope.showCanves = false;
        var opts = {};
        opts.session_id = APP.currentUser.id;
        opts.media_id = $scope.storeDetail.media_id
        opts.x = ""+($scope.storeDetail.x_cord)+"";
        opts.y = ""+($scope.storeDetail.y_cord)+"";
        StoreService.setStoreMediaCoordinate(opts,function(data){
            if(data.code == 101 && data.message == "SUCCESS"){
                $scope.storeDetail.x_cord = data.data.x_cord ;
                $scope.storeDetail.y_cord = data.data.y_cord ;
                $scope.coverLoadHide = false;
                $scope.file = null;
                $scope.fileUrl = null;
                $scope.hideUpdateCoverButton = false;
                $scope.showCanves = false;
                if($rootScope.mobileView == true){
                    img = null;
                    img = new Image();
                    img.src = $scope.storeDetail.cover_image_path;
                    if($scope.windowWidth <="480"){
                        if(img.width <= 910){
                            if( $scope.storeDetail.y_cord != ""){
                                if( $scope.storeDetail.y_cord > 100){
                                    $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 3;
                                }else{
                                    $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 4;
                                }
                                $scope.mobileShopX_Cord = 0;
                            }else{
                                $scope.storeDetail.x_cord = 0;
                                $scope.storeDetail.y_cord = 0;
                                $scope.mobileShopX_Cord = 0;
                                $scope.mobileShopY_Cord = 0;
                            }
                        }else if(img.width > 910 && img.width <= 1300){
                            if( $scope.storeDetail.x_cord != ""){
                                if( $scope.storeDetail.x_cord > 100){
                                    $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 4;
                                }else{
                                    $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 5;
                                }
                                $scope.mobileShopY_Cord = 0;
                            }else{
                                $scope.storeDetail.x_cord = 0;
                                $scope.storeDetail.y_cord = 0;
                                $scope.mobileShopX_Cord = 0;
                                $scope.mobileShopY_Cord = 0;
                            }
                        }else if(img.width > 1300){
                            if( $scope.storeDetail.x_cord != ""){
                                if( $scope.storeDetail.x_cord > 100){
                                    $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 5;
                                }else{
                                    $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 6;
                                }
                                $scope.mobileShopY_Cord = 0;
                            }else{
                                $scope.storeDetail.x_cord = 0;
                                $scope.storeDetail.y_cord = 0;
                                $scope.mobileShopX_Cord = 0;
                                $scope.mobileShopY_Cord = 0;
                            }
                        }
                    }else if($scope.windowWidth > '480' && $scope.windowWidth <= '768'){
                            if(img.width <= 910){
                                if( $scope.storeDetail.y_cord != ""){
                                    if( $scope.storeDetail.y_cord > 100){
                                        $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 1.8;
                                    }else{
                                        $scope.mobileShopY_Cord =  $scope.storeDetail.y_cord / 2;
                                    }
                                    $scope.mobileShopX_Cord = 0;
                                }else{
                                    $scope.storeDetail.x_cord = 0;
                                    $scope.storeDetail.y_cord = 0;
                                    $scope.mobileShopX_Cord = 0;
                                    $scope.mobileShopY_Cord = 0;
                                }
                            }else if(img.width > 910 && img.width <= 1300){
                                if( $scope.storeDetail.x_cord != ""){
                                    if( $scope.storeDetail.x_cord > 100){
                                        $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 2.00;
                                    }else{
                                        $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 2.20;
                                    }
                                    $scope.mobileShopY_Cord = 0;
                                }else{
                                    $scope.storeDetail.x_cord = 0;
                                    $scope.storeDetail.y_cord = 0;
                                    $scope.mobileShopX_Cord = 0;
                                    $scope.mobileShopY_Cord = 0;
                                }
                            }else if(img.width > 1300){
                                if( $scope.storeDetail.x_cord != ""){
                                    if( $scope.storeDetail.x_cord > 100){
                                        $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 2.80;
                                    }else{
                                        $scope.mobileShopX_Cord = $scope.storeDetail.x_cord / 3.00;
                                    }
                                    $scope.mobileShopY_Cord = 0;
                                }else{
                                    $scope.storeDetail.x_cord = 0;
                                    $scope.storeDetail.y_cord = 0;
                                    $scope.mobileShopX_Cord = 0;
                                    $scope.mobileShopY_Cord = 0;
                                }
                            }
                        }
                }
            }
        });
    };

    $scope.showcrossactive = true;
    $scope.showcrossactive1 = function(){
        $scope.showcrossactive = false;
    };

    $scope.showCoverOption = false;
    $scope.showCoverDropDown = function($event){
        $scope.showCoverOption = !$scope.showCoverOption;
        $event.stopPropagation();
    };

    window.onclick = function() {
        if ($scope.showCoverOption) {
            $scope.showCoverOption = false;
            $scope.$apply();
        }
    };



    $scope.myFile = '';
    $scope.imageSrc = '';
    $scope.invalidCoverImage = false;
    if($scope.i18n.storealbum === undefined){
        $scope.invalidCoverImageMgs = "Please choose an image that is at least 400 pixels wide and at least 200 pixels tall";
    } else {
        $scope.invalidCoverImageMgs = $scope.i18n.storealbum.album_invalidCoverImageMgs;
    }
    $scope.getFile = function () {
        $scope.progress = 0;
        fileReader.readAsDataUrl($scope.file, $scope)
        .then(function(result) {
            $scope.myFile = $scope.file;
            $scope.imageSrc = result;
            var imageType = $scope.myFile['name'].substring($scope.myFile['name'].lastIndexOf(".") + 1);
            if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
                $scope.uploadProfileErrorMsg = $scope.i18n.storealbum.album_uploadProfileErrorMsg;
                $scope.uploadStoreProfile = false;
                $scope.uploadProfileerror = true;
            } else {
                $scope.uploadStoreProfile = false;
                $scope.uploadProfileerror = false;

                $scope.readImage($scope.myFile, function(data){
                if(data.length != 0 && data.width >= 400 && data.height >= 200){
                    $scope.uploadStoreProfileImage();
                }
                else { 
                    $("#invalidCoverImage").show();
                    $timeout(function(){
                        $("#invalidCoverImage").hide();
                    }, 4000);
                }
            });
            }
        });
    };

    //function to check upload image dimenstions
    $scope.readImage = function(file, callback) {
    var reader = new FileReader();
    var image  = new Image();
    reader.readAsDataURL(file);  
    reader.onload = function(_file) {
        var filedata = {};
        image.src    = _file.target.result;
        image.onload = function() {
            var w = this.width,
                h = this.height,
                t = file.type,                     
                n = file.name,
                s = ~~(file.size/1024) +'KB';
                filedata['width'] = w;
                filedata['height'] = h;
                callback(filedata);
        };
        image.onerror= function() {
            callback(filedata);
        };      
    };
    }
    $scope.timelineActive1=false;
    $scope.showAllStoreMember = false;
    $scope.showAllMembers = function() {
        $scope.showAllStoreMember = !$scope.showAllStoreMember;
        $scope.timelineActive1 = !$scope.timelineActive1;
        $scope.timelineActive = false;
        $scope.showEditForm=false;
    }; 

    $scope.storeSelection = function(){
        storeShopHistorySelection.storeHistoryTab($scope.storeMainId);
    };

}]).filter('unsafe', function($sce) {
    return function(val) {
        return $sce.trustAsHtml(val);
    };
});

app.controller('HistoryStoreController',['$scope', '$http', '$routeParams', '$location', '$timeout', 'StoreService', function ($scope, $http, $routeParams, $location, $timeout, StoreService) {
   // $scope.$route = $route;
    $scope.storeAllList = [];
    $scope.storeHistoryDetail = [];
    $scope.totalSize = 0;
    $scope.notFound = false;
    $scope.allRes = 1;
    $scope.noHistory = false;
    $scope.storeMainId = $routeParams.id;
    $scope.storeLoading = true;
    $scope.showHistory = function() {
        var opts = {};
        var limit_start = $scope.storeAllList.length;
        opts.limit_start = limit_start;
        opts.limit_size = APP.store_list_pagination.end;
        opts.user_id = APP.currentUser.id;
        opts.shop_id = $scope.storeMainId;
      if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) {
          $scope.storeLoading = true;
          $scope.allRes = 0;
         StoreService.getStoreHistory(opts, function(data) {
            if(data.code == 101) {
                $scope.allRes = 1;
                $scope.totalSize = data.data.total;
                $scope.storeLoading = false;
                $scope.storeHistoryDetail =  $scope.storeAllList = $scope.storeAllList.concat(data.data.transactions);
                $scope.notFound = false;
                $scope.noHistory = true;
            } else {
                $scope.storeHistoryDetail =  [];
                $scope.storeLoading = false;
                $scope.notFound = true;
            } 
        });
     }  
    };
    $scope.showHistory();
    $scope.loadMore = function() {     
        $scope.showHistory();
      };
}]);
app.controller('StoreCreditCard', 
    ['$scope', '$http', 'StoreCreditCard', '$rootScope', '$location', '$routeParams', '$timeout',  
    function($scope, $http, StoreCreditCard, $rootScope, $location, $routeParams, $timeout) {

        $scope.storeId = $routeParams.id;
        $scope.userId = APP.currentUser.id;
        $rootScope.tempStoreId = $scope.storeId;
        //$scope.storeId = '23748';
        $scope.cardList = [];
        $scope.isLoadingCard = false;
        $scope.messsage = '';
        $scope.inProcess = [];
        $scope.inDelete = [];
        $scope.noContent = false;
        $scope.total = 0;
        $scope.firstLoad = 0;
        $scope.pendingPayBtn = true;
        $scope.payRecurring = false;
        
    /*function to get the list of credit cards for a shop
    * accept shopid, limit size and limit start
    */
    $scope.getCreditCard = function() {
        $scope.isLoadingCard = true;
        $scope.isBlockReq = 0;
        var opts = {};
        opts.store_id = $scope.storeId;
        opts.session_id = APP.currentUser.id;
        opts.limit_size = APP.store_credit_card_pagination.end;
        opts.limit_start = $scope.cardList.length;
        if(($scope.isBlockReq == 0 && $scope.total != $scope.cardList.length) || $scope.firstLoad == 0){
            $scope.isBlockReq = 1;
            $scope.firstLoad == 1;
            StoreCreditCard.getCreditCardLists(opts, function(data) { 
                $scope.isBlockReq = 0;
                if(data.code == 101) {
                    $scope.isLoadingCard = false;
                    $scope.cardList = $scope.cardList.concat(data.data);
                    $scope.total = data.data.count;
                    if($scope.cardList.length == 0){
                        $scope.noContent = true;
                    }
                } else {
                    if($scope.cardList.length == 0){
                        $scope.noContent = true;
                    }
                    $scope.isLoadingCard = false;
                    $scope.msgClass = 'alert-warning';
                    $scope.cardList = $scope.cardList;
                } 
            });
        } 
    };

    $scope.getCreditCard();

    /*function to set the default card value in scop
    * accept card object set the value in scope if defaultflag is true
    */

    $scope.setDefault = function(card) {
        if(card.defaultflag == 1){
            $scope.cardid = card.contract_id;
        }
    };
    
    $scope.$watch(function () {
        return $scope.cardid;
    },

    function (newValue, oldValue) {
        $scope.message = '';
        if(newValue != oldValue && oldValue != undefined){
            $scope.setDefaultCard(newValue,oldValue);
        }
    }, true);

    /*function to set the credit card as defalt
    * accept shopid, contract id
    */
    $scope.setDefaultCard = function(newCard,oldCard) {
        var opts = {};
        opts.store_id = $scope.storeId;
        opts.session_id = APP.currentUser.id;
        opts.contract_id = parseInt(newCard);
        var newIndx = $scope.cardList.map(function(d) { return d['contract_id']; }).indexOf(parseInt(newCard));
        var oldIndx = $scope.cardList.map(function(d) { return d['contract_id']; }).indexOf(parseInt(oldCard));
        $scope.inProcess[newIndx] = true;

        StoreCreditCard.setDefaultCard(opts, function(data) {  
            if(data.code == 101) {
                $scope.inProcess[newIndx] = false;
                $scope.cardList[newIndx].defaultflag = 1;
                if(oldIndx != -1){
                    $scope.cardList[oldIndx].defaultflag = 0;
                }
                $scope.msgClass = 'alert-info';
                $scope.message = $scope.i18n.store.card.success;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } else { 
                $scope.msgClass = 'alert-warning';
                $scope.inProcess[newIndx] = false;
                $scope.message = data.message;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } 
        });
    };

    /*function to delete the credit cards for a shop
    * accept contract id
    */
    $scope.deleteCard = function(indx) {
        $scope.inDelete[indx] = true;
        $scope.message = '';
        var card = $scope.cardList[indx];
        var opts = {};
        opts.contract_id = card.contract_id;
        opts.session_id = APP.currentUser.id;
        StoreCreditCard.deleteCard(opts, function(data) {  
            if(data.code == 101) {
                $scope.msgClass = 'alert-info';
                $scope.inDelete[indx] = false;
                $scope.cardList.splice(indx,1);
                $scope.message = $scope.i18n.store.card.delete_success;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } else { 
                $scope.msgClass = 'alert-warning';
                $scope.inDelete[indx] = false;
                $scope.message = data.message;
                $timeout(function(){
                    $scope.msgClass = '';
                    $scope.message = '';
                }, 10000);
            } 
        });
    };

    
    /*function to load more credit card
    *
    */
    $scope.loadMore = function() {
        $scope.isLoadingCard = true;
        $scope.getCreditCard();
    };

    // //get onclick url for recurring payment
    // $scope.payRecurringPayment = function() {
    //     $scope.message = undefined;
    //     var opts = {};
    //     opts.store_id = $scope.storeId;
        
    //     StoreCreditCard.getOnClickRecurringPayments(opts, function(data) {  
    //         if(data.code == 251) {
    //             $scope.msgClass = 'alert-info';
    //             $scope.message = $scope.i18n.store.payment.less_amount;
    //         } else if(data.code == 252){ 
    //             $scope.msgClass = 'alert-warning';
    //             $scope.message = $scope.i18n.store.payment.no_card;
    //         } else if (data.code == 253) {
    //             $scope.msgClass = 'alert-warning';
    //             $scope.message = $scope.i18n.store.payment.payment_fail;
    //         } else if (data.code == 101) {
    //             $scope.msgClass = 'alert-info';
    //             $scope.message = $scope.i18n.store.payment.payment_success;
    //         }
    //         $timeout(function(){
    //             $scope.msgClass = '';
    //             $scope.message = '';
    //         }, 10000);
    //     });
    // }

    
    // //function to get the pending payment url
    // $scope.getOneClickPaymentUrls = function() {
    //     var opts = {};
    //     opts.profile_id = $scope.storeId;
    //     opts.user_id = $scope.userId;
    //     opts.payment_type = APP.card.pending_type;
    //     opts.cancel_url = APP.payment.siteDomain + '/#/shop/payment/cancel'; 
    //     opts.return_url = APP.payment.siteDomain + '/#/shop/payment/success'; 

    //     StoreCreditCard.getOneClickPaymentUrls(opts, function(data) {  
    //         if(data.code != 251 && data.code != 300) {
    //             if(data.data.url != '' ) {
    //                 $scope.pendingPayBtn = false;
    //                 $scope.payRecurring = true;
    //                 $scope.storePendingPaymentUrl =  data.data.url;
    //             } else { 
    //                 $scope.pendingPayBtn = true;
    //                 $scope.payRecurring = false;
    //                 $scope.storePendingPaymentUrl = '';
    //             } 
    //         } else { 
    //             $scope.pendingPayBtn = true;
    //             $scope.payRecurring = false;
    //             $scope.storePendingPaymentUrl = '';
    //         } 
    //     });
    // }

    // $scope.getOneClickPaymentUrls();

}]);
app.controller('StorePaymentController', ['$scope', '$http', 'StorePaymentService', '$rootScope', '$location', '$routeParams', '$cookieStore', function ($scope, $http, StorePaymentService, $rootScope, $location, $routeParams, $cookieStore) {
    $scope.agree ='not_agreement'; //used in terms and contion button
    $scope.loadTerms = true;
    $scope.cardType = $routeParams.type;
    if($rootScope.tempStoreId == '' || $rootScope.tempStoreId == undefined){
        $scope.profileId = $routeParams.id;
    } else {
        $scope.profileId = $rootScope.tempStoreId;
        $cookieStore.put('tempStoreId',$rootScope.tempStoreId);
    }
        $scope.userId = APP.currentUser.id;
    if($scope.cardType == 2){
        $scope.paymentType = APP.card.add_type; //to add card in shop multiple card add
    } else if($scope.cardType == 1) {
        $scope.paymentType = APP.card.add_type; //'registration fee' for shop regirstration    
    } else {
        $scope.paymentType = APP.card.add_type;
    }
    
    var opts = {};
        opts.profile_id = $scope.profileId;
        opts.user_id    = $scope.userId;
        opts.cancel_url = APP.payment.siteDomain + '#/shop/paycancel'; 
        opts.return_url = APP.payment.siteDomain + '#/shop/paysuccess'; 
        opts.payment_type = $scope.paymentType;

    StorePaymentService.getOneClickPaymentUrls(opts, function(data) {  
        if(data.code == 101) {
            if(data.data.url != '' ) {
                $scope.loadTerms = false;
                $scope.storePaymentUrl =  data.data.url;
            } else { 
                $scope.loadTerms = false;
                $scope.storePaymentUrl = '';
            } 
        } else { 
            $scope.loadTerms = false;
            $scope.storePaymentUrl = '';
        } 
    });
}]);

app.controller('StorePaymentReturnController',['$scope','$http', 'StorePaymentService', '$rootScope', '$location',  '$routeParams', function ($scope, $http, StorePaymentService, $rootScope, $location,  $routeParams) {
    $scope.codTrans = $location.search().codTrans;
    $scope.amount = $location.search().importo;
    $scope.uniform = $location.search().divisa;
    $scope.outcome = $location.search().esito;
    $scope.descrizione = $location.search().descrizione;
    $scope.pan = $location.search().pan;
    $scope.profileId = $rootScope.tempStoreId;
    if($scope.outcome == 'OK'){
        $scope.backurl = APP.payment.siteDomain + '#/shop/view/'+$scope.profileId;
        $scope.success = true;
    }else{
        $scope.backurl = APP.payment.siteDomain + '#/';
        $scope.success = false; 
    }
}]);

app.controller('StorePaymentCancelController',['$scope','$http', 'StorePaymentService', '$rootScope', '$location',  '$routeParams',  function ($scope, $http, StorePaymentService, $rootScope, $location,  $routeParams) {
    $scope.codTrans = $location.search().codTrans;
    $scope.amount = $location.search().importo;
    $scope.uniform = $location.search().divisa;
    $scope.outcome = $location.search().esito;
    $scope.profileId = $rootScope.tempStoreId;
    $scope.backurl = APP.payment.siteDomain + '#/profiles';
}]);

app.controller('StoreRegistrationPaymentController', ['$scope','$http', 'StorePaymentService', 'UserService', 'saveUserPass', '$rootScope', '$location', 'StoreService', '$routeParams', function ($scope, $http, StorePaymentService, UserService, saveUserPass, $rootScope, $location, StoreService, $routeParams) {
    $scope.agree ='not_agreement'; //used in terms and contion button
    $scope.user.userName = saveUserPass.getUsername();
    $scope.user.password = saveUserPass.getPassword();
    $scope.loadTerms = true;
    $scope.profileId = $rootScope.tempStoreId;
    $scope.userId = $rootScope.tempUserId; 
    $scope.paymentType = APP.card.add_type; //it will add card
    
     var postData = {
        profile_id : $scope.profileId,
        user_id : $scope.userId,
        payment_type : $scope.paymentType,
        cancel_url : APP.payment.siteDomain + '#/shop/paycancel',
        return_url : APP.payment.siteDomain + '#/shop/paysuccess' 
    };
    
    StorePaymentService.getOneClickPaymentUrls(postData, function(data) {  
        if(data.code == 101) {
            if(data.data.url != '' ) {
                $scope.loadTerms = false;
                $scope.storePaymentUrl =  data.data.url;
            } else { 
                $scope.loadTerms = false;
                $scope.storePaymentUrl = '';
            } 
        } else { 
            $scope.loadTerms = false;
            $scope.storePaymentUrl = '';
        } 
    });
}]);
app.controller('StorePostController',['$scope', 'StorePostService', '$location', '$timeout', '$routeParams', 'StoreService', 'StoreCommentService', 'FileUploader' ,'ProfileService','TranslationService','$modal', '$log' , 'focus', function ($scope, StorePostService, $location, $timeout, $routeParams, StoreService, StoreCommentService, FileUploader ,ProfileService,TranslationService, $modal ,$log, focus) {
    if(!$scope.i18n.storealbum){
        TranslationService.getTranslationWithCallback($scope, $scope.activeLanguage, function(data){
           $scope.i18n = data; 
           $scope.postFileErrorMsg = $scope.i18n.storealbum.album_this_no;
        });
    }else{
        $scope.postFileErrorMsg = $scope.i18n.storealbum.album_this_no;
    }

    $scope.storeId = $routeParams.id;
    $scope.currentUserObj = APP.currentUser;
    $scope.storeOwnerId = StoreService.getStoreOwnerId();
    $scope.noComment = false;
    $scope.postErrMsg = '';
    $scope.myRes = 1;
    $scope.postContentStart = false;
    $scope.commentsShowLimit = [];
    $scope.totalSize = 0;
    $scope.textLimit = APP.post_charecter_limit;
    $scope.isSinglePostView = false;
    $scope.noContent = false; 
    $scope.storeData = '';
    $scope.posts = [];
    if($routeParams.postId != undefined && $routeParams.postId != ''){
      $scope.isSinglePostView = true;
    }

    //Create Store post 
    $scope.createPost = function(){
        var link_type;
        $scope.postContentStart = true;
        $scope.postContentLoader = true;
        var description = '';
        var src = '';
        $scope.postErrMsg = '';
        var filescount = $scope.imageSrc.length;
        /*Link Preview feature*/
        var descval = $("#preview_lp1").html();
        var href = $('#previewUrl_lp1').html();
        var textarea = $('#text_lp1').val();
        description = textarea;
        var regex = /src="([^"]+)"/;
        var src = description.split(regex)[1];
        if(src != undefined && src != ''){
            description = src;
        }
        description = escapeHtmlEntities(description);

        if(href == '') {
            link_type = "0";
        } else {
            description = "<p>"+description+"</p>";
            description += descval;
            link_type = "1";
        }
        
        if ((description == undefined || description == '') && filescount == 0) {
            $scope.postInProcess = false;
            $scope.postErrCls = 'text-red';
            $scope.postErrMsg = $scope.i18n.editprofile.attach_link;
            $scope.postContentStart = false;
            $scope.postContentLoader = false;
            $timeout(function(){
                $scope.postErrCls = '';
                $scope.postErrMsg = '';
            }, 15000);
            return false;
        }

        var opts = {};
        opts.store_id = $scope.storeId; //todo
        opts.post_title = $scope.i18n.storealbum.store_post_title; 
        opts.post_desc = description; 
        opts.user_id = $scope.currentUser.id; 
        opts.post_id = $scope.tempPostId;
        opts.post_type = "1";
        opts.youtube = '';
        opts.media_id = [];
        opts.link_type = link_type;

        var friendId = [];
        if($scope.storedFriend.length > 0){
            for (var i = 0; i < $scope.storedFriend.length; i++) {
                friendId.push($scope.storedFriend[i].user_info.id);
            };

            opts.tagged_friends = friendId.join();
        }else{
            opts.tagged_friends = "";
        }

        angular.forEach($scope.imageSrc, function(file) {
            opts.media_id.push(file.media_id);
        });
        StorePostService.createPost(opts, function(data){
            if(data.code == 101) {
                var newpost = {};
                $scope.storedFriend = [];
                $scope.showTagForm = false;
                newpost = data.data;
                newpost.comments = [];
                $scope.posts.unshift(newpost);
                $scope.noContent = false; 
                $scope.postInProcess = false;
                $scope.postErrMsg = "";
                $scope.postErrCls = '';
                uploader.data.post_id={};
                while(uploader.queue.length) {
                   uploader.queue[0].remove();
                }
                $scope.isImage = false;
                $scope.imgUpload = false;
                $scope.imageSrc = [];
                $scope.postFiles = [];
                $scope.uploadBox = false;
                $scope.postContentStart = false;
                $scope.postContentLoader = false;
                $scope.tempPostId = '';
                $('#text_lp1').val('');
                $('#text_lp1').attr("style", "");
                $timeout(function(){
                    $('#closePreview_lp1').trigger('click');
                }, 100);  
            } else {
                $scope.postInProcess = false;
                $scope.postErrMsg = $scope.i18n.editprofile.post_unable;
                $scope.postErrCls = 'text-red';
                $timeout(function(){
                    $scope.postErrCls = '';
                    $scope.postErrMsg = '';
                }, 15000);
                $scope.imageSrc = [];
                $scope.postFiles = [];
                $scope.isImage = false;
                $scope.imgUpload = false;
                $scope.isUpload = false;
                $scope.uploadBox = false;
                $scope.postContentStart = false;
                $scope.postContentLoader = false;
            }
        });
    };
     // Show Tag Column
    $scope.showTagForm = false;
    $scope.showTagCloumn = function(){
        if($scope.showTagForm === false){
            $scope.showTagForm = true;
            focus('shopTagFriend');
        }else{
            $scope.showTagForm = false;
        }
    };

    //focus on the tagged text box
    $scope.focusOnShopTag = function(){
        focus('shopTagFriend');
    };


    // Show the list of friend
    var DELAY_TIME_BEFORE_POSTING = 300;
    var currentTimeout = null;
    // angular.element('#searchTagFriend').keypress(function(event) {
    //     var model = $scope.searchText;
    //     if(currentTimeout) {
    //     $timeout.cancel(currentTimeout);
    //     }
    //     currentTimeout = $timeout(function(){
    //         if(event.which != 13){ 
    //             $scope.tagFriendSuggestion();
    //         }
    //     }, DELAY_TIME_BEFORE_POSTING)
    // });

    $scope.friends = [];
    // $scope.friendName ="";
    $scope.cancelFriendSearch = false;
    $scope.showSearchLoader = false;
    $scope.tagFriendSuggestion = function(friendName){
        $scope.cancelFriendSearch = false;
        $scope.showFriendList = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.friend_name = $('#shopTagFriend').val();
        opts.limit_start = 0;
        opts.limit_size =  APP.friend_list_pagination.end;
        $scope.showSearchLoader = true;
        ProfileService.searchFriends(opts,function(data){
            $scope.showSearchLoader = false;
            if($scope.cancelFriendSearch === false){
                $scope.friends = data.data.users;
            }
        })
    };

    // Store friend 
    $scope.storedFriend = [];
    $scope.dublicate = false;
    $scope.selectFriend = function(friendInfo){
        if(friendInfo === undefined){
            return;
        }else{
            $scope.dublicate = false;
            angular.forEach($scope.storedFriend,function(index){
                if(index.user_id === friendInfo.user_id){
                    $scope.dublicate = true;
                }
            });

            if($scope.dublicate === false){
                $scope.storedFriend.push(friendInfo);
                $scope.friends = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTaggIndex = -1;
                angular.element('#shopTagFriend').val("");
                $scope.showFriendList = false;
            }else{
                $scope.friends = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTaggIndex = -1;
                angular.element('#shopTagFriend').val("");
                $scope.showFriendList = false;
            }
        }
    };

    // stop the service for loading more service
    $scope.lostFormFocus = function(){
        $timeout(function(){
            $scope.friends = [];
            $scope.cancelFriendSearch = true;
            $scope.friendTaggIndex = -1;
            angular.element('#shopTagFriend').val("");
            $scope.showFriendList = false;
        },300);
    };

    // Remove selected friend
    $scope.removeTagFriend = function(friendIndex){
        //var index = $scope.storedFriend.indexOf(friendIndex);
        $scope.storedFriend.splice(friendIndex,1);
    };

    // Up down key control in search friend list
    $scope.friendTaggIndex = -1;
    $scope.keyUpDownControl = function(event, friendName){
        if(event.keyCode===40){
            // event.preventDefault();
            if($scope.friendTaggIndex+1 !== $scope.friends.length){
                $scope.friendTaggIndex++;
            }
        }else if(event.keyCode===38){
            // event.preventDefault();
            if($scope.friendTaggIndex-1 !== -1){
                $scope.friendTaggIndex--;
            }
        }else if(event.keyCode===13){
                $scope.selectFriend($scope.friends[$scope.friendTaggIndex]);
        }else if(!(event.keyCode>=65 && event.keyCode<=95)){
            return
        }else{
            $scope.tagFriendSuggestion(friendName);
        }
    };


    //modal for remove tag when user clicked on notifications
    $scope.showAllFriend = function(post_id, creater_info, allTagFriend){
        $scope.allTagFriends = allTagFriend;
        $scope.post_id = post_id;
        $scope.creater = creater_info;
        var modalInstance = $modal.open({
            template: '<div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3><div class="modal-popup-close" ng-click="closeModal()"></div> </div><div class="modal-body tag-frnd-modal"><ul><li data-ng-repeat="friend in allTagFriends"><span class="tag-img"><img title="" style="width:30px;height:30px" alt="No image available" data-ng-src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a href ng-click="viewFriendProile(friend.id)">{{friend.first_name}} {{friend.last_name}}</a></span><span data-ng-if="creater.id === currentUser.id || currentUser.id === friend.id" ng-click="RemoveTagFriend(friend, creater.id)" class="rmv-tag"><a href>{{i18n.profile_post.remove_tagged_friend}}</a></span></li></ul></div><div class="modal-footer"></div>',
            controller: 'ModalController',
            size: 'lg',
            scope: $scope,
        });

        modalInstance.result.then(function (selectedItem) {
        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        });
        $scope.viewFriendProile = function(friendId){
            modalInstance.dismiss('cancel');
            $location.path('/viewfriend/'+friendId);
        };
        $scope.RemoveTagFriend = function(friend, createrId){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.untag_user_id = friend.id;
            opts.post_id = $scope.post_id;
            StoreService.removeShopTagg(opts,function(data){
                if(data.code === 101){
                    var index = $scope.allTagFriends.indexOf(friend)
                    $scope.allTagFriends.splice(index,1);
                    if(createrId != APP.currentUser.id ){
                        modalInstance.close();
                    }
                    if($scope.allTagFriends.length === 0){
                        modalInstance.close();
                    }   
                } 
            });
        };
    };
    // function to get the post and comment of the post
    $scope.getPosts = function() {
        var limit_start = $scope.posts.length;
        var opts = {};
        opts.store_id = $scope.storeId;
        opts.user_id = $scope.currentUser.id;
        opts.limit_start = limit_start;
        opts.limit_size = APP.dashbord_pagination.end;
        if ((($scope.totalSize > limit_start ) || $scope.totalSize == 0 ) && $scope.myRes == 1) {
            $scope.myRes = 0;
            $scope.isLoading = true;
            // This service's function returns post
            StorePostService.listPost(opts, function(data){
                $scope.isLoading = false;
                if(data.code == 101)
                {
                    $scope.isLoading = false;
                    var items = data.data;
                    $scope.storeData = StoreService.getStoreData();
                    //StoreService.SetStoreData({});
                    if(items != undefined){
                        $scope.posts = $scope.posts.concat(items);    
                    }
                    $scope.totalSize = data.count;
                } 
                if ($scope.posts.length == 0){
                    $scope.noContent = true; 
                } 
                $scope.myRes = 1;
            });
        } 
    };
    
    //function to call initial loading
    // $scope.showShopPostList = function(){
        
    //     $scope.totalSize = 0;
    //     $scope.myRes = 1;
    //     $scope.noContent = false; 
    //     $scope.getPosts();
    // };

    // calling get post function on controller load
    //$scope.showShopPostList();

    $scope.loadMore = function() {
        if($scope.totalSize > $scope.posts.length){
            $scope.getPosts();
        }
    };

    
    //function to show all comment of the post
    $scope.showAllComment = function(postIndx) {
        $scope.commentInProcess = true;
        var post = $scope.posts[postIndx];
        var opts = {};
        opts.post_id = post.post_id;
        opts.user_id = $scope.currentUser.id;
        $scope.showLimitedComment(opts, postIndx);
    };

    
    //function to show limited comment of the post
    $scope.commentLoading = [];
    $scope.showLimitedComment = function(postIndx) {
        $scope.commentLoading[postIndx] =  true;
        $scope.showComments[postIndx] = true;
        var post = $scope.posts[postIndx];
        var opts = {};
        opts.post_id = post.post_id;
        opts.user_id = $scope.currentUser.id;
        $scope.getComments(opts, postIndx);
    };

    
    //funciton to delete single post
    $scope.deleteErrMsg = [];
    $scope.isDeletePost = [];
    $scope.deleteErrCls = [];
    $scope.deletePost = function(indx) {
        $scope.isDeletePost[indx] = true;
        var postData = {};
        postData = $scope.posts[indx];
        var formData = {};
        formData.user_id = $scope.currentUser.id;
        formData.post_id = postData.post_id;
        
        //calling the service to delete the selected post 
        StorePostService.deletePost(formData, function(data){
            if(data.code == 101) {
                $scope.posts.splice(indx, 1);
                if($scope.posts.length == 0){
                    $scope.noContent = true;
                }
                $scope.isDeletePost[indx] = false;
            } else {
                $scope.deleteErrCls[indx] = 'text-red';
                $scope.deleteErrMsg[indx]= $scope.i18n.dashboard.postcomment.delete_post_fail;
                $scope.isDeletePost[indx] = false;
            }
            $timeout(function(){
                $scope.deleteErrCls[indx] = '';
                $scope.deleteErrMsg[indx] = '';
                $scope.isDeletePost[indx] = false;
            }, 15000);
        });
    };

    //function to add image on user post
    $scope.isImage = false;
    $scope.isUpload = false;
    $scope.uploadBox = false; //previously used to hide the text area in first click of photo tab 
    $scope.addImage = function() {
        var href = $('#previewUrl_lp1').html();
        if(href != ''){
            $timeout(function(){
                $('#closePreview_lp1').click();
            }, 100);
        }
        $scope.isImage = true;
        $scope.imageSrc = [];
        $scope.postFiles = [];
        $scope.uploadBox = true;
        uploader.queue = [];
        $scope.isUpload = false;
    };
    $scope.addPost = function() { 
        $scope.isImage = false;
        $scope.imgUpload = false;
        $scope.uploadBox = false;
        $scope.isPost = true;
        $scope.imageSrc = [];
        $scope.postFiles = [];
    };

    

    //funciton to delete media of post 
    $scope.deleteMediaPost = function(postIndx,mediaIndx) {
        $scope.deletePostIndx = postIndx;
        var post = $scope.posts[postIndx];

        var opts = {};
        opts.user_id = $scope.currentUser.id;
        opts.session_id = APP.currentUser.id;
        opts.post_id = post.post_id;
        opts.media_id = post.media_info[mediaIndx].id;
       

        //calling the post service to delete media of the selected post 
        StorePostService.deleteMediaPost(opts, function(data){
            if(data.code == 101) {
                $scope.deletePostIndx = -1;
                $scope.posts[postIndx].media_info.splice(mediaIndx, 1);
            }
            else {
                $scope.deletePostIndx = -1;
                $scope.posts;
            }
        });
    };

    //function to create post
    $scope.editPostErrorMsg = [];
    $scope.updatePostInProcess = [];
    $scope.editPostErrorCls = [];
    $scope.saveUpdatePost = function(postIndx) {
        var opts = {};
        $scope.updatePostInProcess[postIndx] = true;
        var editPostText = escapeHtmlEntities($scope.updateBody[postIndx]); 
        var post = $scope.posts[postIndx];
        
        if (editPostText == undefined || editPostText == '') {
            $scope.updatePostInProcess[postIndx] = false;
            $scope.editPostErrorCls[postIndx] = 'text-red';
            $scope.editPostErrorMsg[postIndx] = $scope.i18n.editprofile.no_empty_status;
            $timeout(function(){
                $scope.editPostErrorCls[postIndx] = '';
                $scope.editPostErrorMsg[postIndx] = '';
            }, 15000);
            return false;
        } 
        var regex = /src="([^"]+)"/;
        var src = editPostText.split(regex)[1];
        if(src != undefined && src !='' ){
               editPostText = src; 
            }
        opts.user_id = $scope.currentUser.id;
        opts.store_id = $scope.storeId;
        opts.post_id = post.post_id;
        opts.post_title = post.store_post_title; //This dummy data as currently there is no field to accept the posttitle
        opts.post_desc = editPostText;
        opts.youtube = '';
        var myFile = '';
        var friendIdList = [];
        if($scope.postTaggedFriend[postIndx] && $scope.postTaggedFriend[postIndx].length > 0){
            angular.forEach($scope.postTaggedFriend[postIndx],function(index){
                friendIdList.push(index.id);
            });

            opts.tagged_friends = friendIdList.join();
        }else{
            opts.tagged_friends = "";
        }
        StorePostService.updatePost(opts, myFile, function(data){
            if(data.code == 101) {
                if($scope.postTaggedFriend[postIndx].length > 0){
                    post.tagged_friends_info = $scope.postTaggedFriend[postIndx];
                }else{
                    post.tagged_friends_info = "";
                }
                $scope.updatePostInProcess[postIndx] = false;
                $scope.editPostErrorCls[postIndx] = '';
                $scope.editPostErrorMsg[postIndx] = '';
                
                $scope.posts[postIndx].store_post_desc = editPostText;
                $scope.editPostText = '';
                $scope.activeEdit[postIndx] = false;
            } else {
                $scope.updatePostInProcess[postIndx] = false;
                $scope.editPostErrorCls[postIndx] = 'text-red';
                $scope.editPostErrorMsg[postIndx] = $scope.i18n.editprofile.post_unsaved;
            }
            $timeout(function(){
                $scope.editPostErrorCls[postIndx] = '';
                $scope.editPostErrorMsg[postIndx] = '';
            }, 15000);
        });
    };

    $scope.updateBody = [];
    $scope.activeEdit = [];
    $scope.updatePostInProcess = [];
    $scope.editPostErrorMsg = [];
    $scope.showTagLoading = [];
    $scope.postTaggedFriend = [];
    //funtion to open form to update post
    $scope.updatePost = function(postIndx) {
        $scope.editPostErrorMsg[postIndx]='';
        $scope.editPostErrorCls[postIndx]='';
        var post = $scope.posts[postIndx];
        //for resize the textarea
        autosize(document.querySelectorAll('.editpostbox'));
        var str = $.trim(post.store_post_desc.replace(/\n\n\n+/g, '\n\n'));
        var htmlstr = str.replace(/\n/g,'<br />');
        var height = $('<div style="display:block;" id="postedit-hidden-div"></div>')
        .html(htmlstr)
        .appendTo('#post_'+post.post_id)
        .height();     
        $('#editpost_'+post.post_id).css('height',height + 'px');
        str = $('#postedit-hidden-div').html(str).text();
        $('#postedit-hidden-div').remove();
        $scope.updateBody[postIndx] = str;
        $scope.activeEdit[postIndx] = true;
        //$scope.postTaggedFriend[postIndx] = post.tagged_friends_info;
        $scope.postTaggedFriend[postIndx] = [];
        angular.forEach(post.tagged_friends_info, function(val,indx){
            $scope.postTaggedFriend[postIndx].push(val);
        });
        $scope.showTagLoading[postIndx] = true;
        //focus('shopPostList'+postIndx);
        //set cursor start of textarea
        $timeout(function(){
            $('#editpost_'+post.post_id).putCursorAtStart();
        },200);
    };

    $scope.postListFocusShop = function(indx){
        focus('shopPostList'+indx);
    };

    // close the edit form on cancel
    $scope.cancelPost = function(postIndx) {
        $('#postedit-hidden-div').remove();
        $scope.updateBody[postIndx] = '';
        $scope.activeEdit[postIndx] = false;
        $scope.editPostErrorMsg[postIndx] = '';
        $scope.editPostErrorCls[postIndx]='';
        $scope.showTagLoading[postIndx] = false;
        $scope.postTaggedFriend = [];
    };

    // function to remove the tagged friend
    $scope.removePostTagFriend  = function(index, postIndex){
        $scope.postTaggedFriend[postIndex].splice(index,1);
    };

    // Add more friend in the post
    var currentTimeout = null;
    $scope.addMoreFriend = function(event, index){
        var DELAY_TIME_BEFORE_POSTING = 300;
        if(currentTimeout) {
            $timeout.cancel(currentTimeout);
        }
        currentTimeout = $timeout(function(){
            if(event.which != 13){ 
                $scope.searchMoreFriend(index);
            }
        }, DELAY_TIME_BEFORE_POSTING)
    };

    $scope.friends = [];
    $scope.showSearchFriendLoader = [];
    $scope.cancelFriendSearch = false;
    $scope.showSearchFriendList = [];
    $scope.searchMoreFriend = function(postIndx){
        $scope.searchFriend = $('.addMoreTagFriend'+postIndx).val();
        $scope.cancelFriendSearch = false;
        $scope.showSearchFriendList[postIndx] = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.friend_name = $scope.searchFriend;
        opts.limit_start = 0;
        $scope.friendTagIndex[postIndx] = -1;
        opts.limit_size =  APP.friend_list_pagination.end;
        $scope.showSearchFriendLoader[postIndx] = true;
        $scope.showTagLoading[postIndx] = true
        ProfileService.searchFriends(opts,function(data){
            $scope.showSearchFriendLoader[postIndx] = false;
            if($scope.cancelFriendSearch === false){
                if(data.data.users.length > 0){
                    $scope.friends[postIndx] = data.data.users;
                }
            }
        });
    };

    // Store friend 
    $scope.postTaggedFriend = [];
    $scope.dublicate = false;
    $scope.taggedSelectFriend = function(friendInfo, postIndex){
        if($scope.postTaggedFriend[postIndex]==undefined) $scope.postTaggedFriend[postIndex] = [];
        if(friendInfo === undefined){
            return
        }else{
            $scope.dublicate = false;
            angular.forEach($scope.postTaggedFriend[postIndex],function(index){
                if(index.id === friendInfo.user_id){
                    $scope.dublicate = true;
                }
            });

            if($scope.dublicate === false){
                $scope.postTaggedFriend[postIndex].push({"id":friendInfo.user_id, "first_name": friendInfo.user_info.first_name, "last_name": friendInfo.user_info.last_name,"profile_image": friendInfo.user_info.profile_image,"profile_image_thumb":friendInfo.user_info.profile_image_thumb});
                $scope.friends[postIndex] = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTagIndex[postIndex] = -1;
                angular.element('.addMoreTagFriend'+postIndex).val("");
                $scope.showSearchFriendList[postIndex] = false;
            }else{
                $scope.friends[postIndex] = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTagIndex[postIndex] = -1;
                angular.element('.addMoreTagFriend'+ postIndex).val("");
                $scope.showSearchFriendList[postIndex] = false;
            }
        }
    };

    // stop the service for loading more service
    $scope.lostFocus = function(postIndex){
        
        // $scope.friends = [];
        $timeout(function(){
            $scope.showFriendList = false;
            $scope.friends[postIndex] = [];
            $scope.cancelFriendSearch = true;
            $scope.friendTagIndex[postIndex] = -1;
            angular.element('.addMoreTagFriend'+ postIndex).val("");
            $scope.showSearchFriendList[postIndex] = false;
        },300);
    };

    // Up down key control in search friend list
    $scope.friendTagIndex = [];
    $scope.searchNevigateControl = function(event, index){
        if(event.keyCode===40){
            event.preventDefault();
            if($scope.friendTagIndex[index]+1 !== $scope.friends[index].length){
                $scope.friendTagIndex[index]++;
            }
        }else if(event.keyCode===38){
            event.preventDefault();
            if($scope.friendTagIndex[index]-1 !== -1){
                $scope.friendTagIndex[index]--;
            }
        }else if(event.keyCode===13){
                $scope.taggedSelectFriend($scope.friends[index][$scope.friendTagIndex[index]], index);
        }
    };

    $scope.getUserPostDetail = function(id) {
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.post_id = id;
        //calling the services to get the user post list
        if (($scope.totalSize == 0 ) && $scope.myRes == 1) {
            $scope.myRes = 0;
            ProfileService.getDashboardPostDetail(opts, function(data){
                if(data.code == 101) {
                    $scope.isLoadPost = false; 
                    var items = data.data.post;
                    if(items != undefined){
                        $scope.userPostList = $scope.userPostList.concat(items); 
                        $scope.noPostList = false; 
                    }
                    if($scope.userPostList.length==0){
                        $scope.noPostList = true; 
                    } 
                    $scope.totalSize = data.data.count;
                } else {
                    $scope.isLoadPost = false;
                    if ($scope.userPostList.length == 0){
                        $scope.noPostList = true; 
                    } 
                    $scope.userPostList;
                }
                $scope.myRes = 1;
            });
        } else {
            $scope.isLoadPost = false;
            if($scope.userPostList.length==0){
                $scope.noPostList = true; 
            } 
            $scope.userPostList;
        }
    };

    //function to call initial loading
    $scope.showUserPostList = function(){
        $scope.isLoadPost=true;
        $scope.totalSize = 0;
        $scope.myRes = 1;
        if($routeParams.postId ? $routeParams.postId : '') {
            $scope.getUserPostDetail($routeParams.postId);
        } else {
            $scope.getPosts();
        }
    };
   $scope.showUserPostList();

    $scope.imageSrc = [];
    $scope.postFiles = [];
    $scope.postImgLoader = [];
    $scope.tempPostId = '';
    var uploader = $scope.uploader = new FileUploader({
        url: APP.service.createStorePost+"?access_token="+APP.accessToken,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'method': 'POST'
            /*'Accept': 'text/json'*/
        },
        data:{
            'user_id': $scope.currentUser.id,
            'store_id': $scope.storeId,
            'post_title':"Not in use on frontend", //This dummy data as currently there is no field to accept the posttitle
            'post_desc':'',
            'youtube':'',
            'to_id': $scope.currentUser.id,
            'link_type':"0",
            'post_type':"0",
            'post_id': $scope.tempPostId
        },
        dataObjName:'reqObj',
        formDataName:'store_media[]'
    });

    // FILTERS
    uploader.filters.push({
        name: 'store_media[]',
        fn: function(item /*{File|FileLikeObject}*/, options) {
            var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
            return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
        }
    });

    uploader.onAfterAddingFile = function(fileItem) {
        $scope.postContentStart = true;
        uploader.data.post_id = $scope.tempPostId;
        var queueLen = uploader.queue.length-1;
        if(uploader.queue.length != 0){
            $scope.uploadBox = false;
            $scope.imgUpload = true;
        }
        $scope.postImgLoader[queueLen] = true;
        uploader.uploadItem(fileItem);
    };

    uploader.onSuccessItem = function(fileItem, response, status, headers) {
        var index = uploader.getIndexOfItem(fileItem);
        if(response.code == 101){
            $scope.imageSrc[index] = response.data;
            $scope.postImgLoader[index] = false;
            $scope.tempPostId = response.data.post_id;
            uploader.data.post_id = response.data.post_id;
        }
    };

    uploader.onCompleteAll = function() {
        $scope.postContentStart = false;
    }

    uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
        $scope.postErrMsg = $scope.i18n.storepost.incorrect_upload;
        $scope.postErrCls = 'text-red';
        $timeout(function(){
            $scope.postErrCls = '';
            $scope.postErrMsg = '';
        }, 15000);
    };

   
   

    //remove iamge from preview array
    $scope.removeImage = function(index) {
        var tempImg = $scope.imageSrc[index];
        $scope.imageSrc.splice(index, 1);
        var item = $scope.uploader.queue[index];
        item.remove();
        var opts = {};
        opts.user_id = $scope.currentUser.id;
        opts.session_id = APP.currentUser.id;
        opts.media_id = tempImg.media_id;
        opts.post_id = $scope.tempPostId;
        
        //calling the service to delete the selected post 
        StorePostService.deleteMediaPost(opts, function(data){
            if(data.code == 101) {
            } else {
                $scope.postErrCls = 'text-red';
                $scope.postErrMsg = $scope.i18n.dashboard.postcomment.remove_img_fail;
                $scope.imageSrc[index] = tempImg;
            }
            $timeout(function(){
                $scope.postErrCls = '';
                $scope.postErrMsg = '';
            }, 15000);
        });
    };
    //end image preview section-->

    //check screen for mobile devicess to show corresponding layou
        $scope.loadMoreFunc = 'loadMore()';
        $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
            $scope.windowHeight = newValue.h;
            $scope.windowWidth = newValue.w;
            if($scope.windowWidth <= '768'){
                $scope.isSmallScreen =  true; //declare in main controller
                $scope.loadMoreFunc = '';
            } else {
                $scope.isSmallScreen =  false; //declare in main controller
                $scope.loadMoreFunc = 'loadMore()';
            }
        }, true);
    
    $(".fancybox").fancybox();

}]).filter('unsafe', function($sce) {
    return function(val) {
        return $sce.trustAsHtml(val);
    };
});

app.controller('StoreAlbumController', ['$scope', 'StoreAlbumService', 'AlbumService', '$location', '$routeParams', 'StoreService', '$timeout', 'FileUploader', 'focus', function ($scope, StoreAlbumService, AlbumService, $location, $routeParams,StoreService, $timeout, FileUploader, focus) {    
    $scope.myValue = false;
    $scope.albloader = false;
    $scope.noAlbums = false;
    $scope.noPhotos = false;
    $scope.albumResponse = "";
    $scope.storeId = $routeParams.id;
    $scope.albumId = $routeParams.album_id;
    $scope.listload = false;
    $scope.listAlbum = [];
    $scope.totalSize = 0;
    $scope.allRes = 1
    $scope.viewalbum = [];
    $scope.totalSizeImg = 0;
    $scope.allResImg = 1;
    $scope.noResult = false;
    $scope.shopAlbumSubmitted = false;

    $scope.storeOwnerId = StoreService.getStoreOwnerId();
    $scope.uploadloader = false;
    //Create Store Album 
    $scope.createstorealbums = function(){
        $scope.shopAlbumSubmitted = true;
        if($scope.user.albumname === undefined || $scope.user.albumname === '') {
            $scope.storeAlbumForm.albumname.$dirty = true;
            $scope.storeAlbumForm.albumname.$invalid = true;
            $scope.storeAlbumForm.albumname.$error.required = true;
            focus('albumname');
            return false;
        } else if ($scope.user.albumdesc === undefined || $scope.user.albumdesc === '') {
            $scope.storeAlbumForm.albumdesc.$dirty = true;
            $scope.storeAlbumForm.albumdesc.$invalid = true;
            $scope.storeAlbumForm.albumdesc.$error.required = true;
            focus('albumdesc');
            return false; 
        } else {
            $scope.albumErrorResponse = '';
            $scope.albumErrResponse = false;
            $scope.createAlbumLoader = true;
            var opts = {};
            opts.session_id = APP.currentUser.id;
            opts.store_id = $scope.storeId; 
            opts.album_name = $scope.user.albumname; 
            opts.album_desc = $scope.user.albumdesc; 

            StoreAlbumService.createstorealbums(opts, function(data){
                $scope.createAlbumLoader = false;
                if(data.code == 101) {
                    $scope.shopAlbumSubmitted = false;
                    $scope.albumResponse = $scope.i18n.albums.album_created;;
                    $timeout(function() {
                            $scope.albumResponse = '';
                    }, 15000);
                    $scope.albloader = true;
                    $scope.listAlbum.length = 0;
                    $scope.storealbumlists('listing');
                    $scope.user = null;
                    $scope.myValue = false; 
                } else {
                    $scope.albumResponse = $scope.i18n.storealbum.album_wrong;
                    $timeout(function() {
                            $scope.albumErrorResponse = '';
                    }, 15000);
                }
            });
        }
    }

    $scope.editAlbumForm = false;
    $scope.updateUserAlbum = false;
    $scope.editAlbumData = {}
    $scope.editAlbum = function(albumName, albumDescription, albId) {
        $scope.editAlbumData.album_name = albumName;
        $scope.editAlbumData.album_description = albumDescription;
        $scope.editAlbumData.id = albId;
        $scope.editAlbumForm = !$scope.editAlbumForm;
    }

    $scope.closeEditForm = function() {
        $scope.editAlbumForm = !$scope.editAlbumForm;
        $scope.editAlbumData = {};
    }

    $scope.updateAlbum = function() {
        if($scope.editAlbumData.album_name === undefined || $scope.editAlbumData.album_name === '') {
            $scope.shopEditAlbumForm.editalbumname.$dirty = true;
            $scope.shopEditAlbumForm.editalbumname.$invalid = true;
            $scope.shopEditAlbumForm.editalbumname.$error.required = true;
            focus('editalbumname');
            return false;
        } else if ($scope.editAlbumData.album_description === undefined || $scope.editAlbumData.album_description === '') {
            $scope.shopEditAlbumForm.editalbumdesc.$dirty = true;
            $scope.shopEditAlbumForm.editalbumdesc.$invalid = true;
            $scope.shopEditAlbumForm.editalbumdesc.$error.required = true;
            focus('editalbumdesc');
            return false;
        } else {
            $scope.updateUserAlbum = true;
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.album_id = $scope.editAlbumData.id;
            opts.album_name = $scope.editAlbumData.album_name; 
            opts.album_desc = $scope.editAlbumData.album_description;
            opts.type = 'shop';
            AlbumService.updateAlbum(opts, function(data){
                $scope.updateUserAlbum = false;
                if(data.code == 101) {
                    $scope.editAlbumForm = !$scope.editAlbumForm;
                    $scope.listAlbum.length = 0;
                    $scope.storealbumlists('listing');
                    $scope.user = null;   
                    $scope.albumResponse = $scope.i18n.albums.album_updated;
                    $timeout(function() {
                            $scope.albumResponse = '';
                    }, 5000);   
                                                
                } else {
                    $scope.editAlbumForm = !$scope.editAlbumForm;
                    $scope.albumErrorResponse = $scope.i18n.albums.gone_wrong;
                    $timeout(function() {
                            $scope.albumErrorResponse = '';
                    }, 5000);
                }
            });
        } 
    }

    //Upload Store media 
    $scope.uploadstoremediaalbums = function(){
        if($scope.imagePrvSrc == undefined || $scope.imagePrvSrc.length == 0){
            $scope.fileNotValid = true;
            $scope.fileNotValidMsg = $scope.i18n.storealbum.image_first;
            $timeout(function(){
                    $scope.fileNotValidMsg = "";
                    $scope.fileNotValid = false;
            }, 15000);
            return false;
        }
        $scope.uploadloader = true;
        $('#addbutton').hide();
        var albumId = $routeParams.album_id;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $scope.storeId;
        opts.album_id = albumId;
        opts.post_type = 1;
        var filescount = $scope.imagePrvSrc.length;
        opts.media_id = [];
          angular.forEach($scope.imagePrvSrc, function(file) {
              opts.media_id.push(file.media_id);
        });
        $scope.fileNotValidMsg = "";
        $scope.fileNotValid = false;
        StoreAlbumService.uploadstoremediaalbumsfinal(opts, function(data){ 
           if(data.code == 101) {
                $scope.uploadloader = false;
                $('#addbutton').show();
                $scope.postFiles = [];
                $scope.imagePrvSrc = [];
                $timeout(function() {
                    $scope.albumResponse = '';
                }, 15000);
                $scope.viewalbum.length = 0;
                $scope.totalSizeImg = 0;
                $scope.allResImg = 1;   
                $scope.viewstorealbums('upload');
                $("input[type='file']").val('');
                $scope.imgUpload = false;
                uploader.queue = [];
           } else {
                $scope.uploadloader = false;
                $('#addbutton').show();
                $scope.fileNotValidMsg = data.message;
                $timeout(function() {
                    $scope.fileNotValidMsg = '';
                }, 15000);
           }
        });
    }

    $scope.fileNotValid = false;
    $scope.fileNotValidMsg = '';
    $scope.tempAlbumId = '';
    $scope.albumImgLoader = [];
    $scope.imagePrvSrc = [];
    
    // one by one file uploading section start-->
    var uploader =  $scope.uploader = new FileUploader({
          url: APP.service.uploadstoremediaalbums+"?access_token="+APP.accessToken,
          headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'method': 'POST'
              /*'Accept': 'text/json'*/
          },
          data:{
              'user_id': APP.currentUser.id,
              'album_id':$scope.albumId, 
              'store_id':$scope.storeId, 
              'post_type':"0"
          },
          dataObjName:'reqObj',
          formDataName:'store_media[]'
        });
        // FILTERS
        uploader.filters.push({
            name: 'store_media[]',
            fn: function(item /*{File|FileLikeObject}*/, options) {
                var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
            }
        });

        uploader.onAfterAddingFile = function(fileItem) {
            $scope.postContentStart = true;
            var queueLen = uploader.queue.length;
            if(uploader.queue.length != 0){
                $scope.uploadBox = false;
                $scope.imgUpload = true;
            }
            $scope.albumImgLoader[queueLen] = true;
            uploader.uploadItem(fileItem);
        };

        uploader.onSuccessItem = function(fileItem, response, status, headers) {
            var index = uploader.getIndexOfItem(fileItem);
            if(response.code == 101){
                $scope.imagePrvSrc[index] = response.data;
                $scope.albumImgLoader[index] = false;
            }
        };

        uploader.onCompleteAll = function() {
            $scope.postContentStart = false;
        }

        uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
            $scope.fileNotValid = true;
            $scope.fileNotValidMsg = $scope.i18n.albums.upload_media_invalid;
            $timeout(function(){
                $scope.fileNotValidMsg = '';
            }, 4000);
        };
        
    // one by one file uploading section end-->
    //remove iamge from preview array
    $scope.removeImage = function(index) {
        var tempImg = $scope.imagePrvSrc[index];
        $scope.imagePrvSrc.splice(index, 1);
        var item = $scope.uploader.queue[index];
        item.remove();
        var opts = {};
        opts.session_id = APP.currentUser.id;
        opts.store_id = $scope.storeId; //todo
        opts.album_id = albumId;
        opts.media_id = tempImg.media_id;
        //calling the service to delete the selected post 
        StoreAlbumService.deletealbummedias(opts, function(data){
            if(data.code == 101) {

            } else {
                $scope.imagePrvSrc[index] = tempImg;
                $timeout(function(){
                    $scope.albumErrMsg = data.message;
                }, 4000);
            }
        });
    };

    //Album Store Listing
    $scope.storealbumlists = function(type){
        $scope.noResult = false;
        var limit_start = $scope.listAlbum.length;
        if(type == 'delete') {
            $scope.albloader = false;
        } else if(type === 'listing') {
            $scope.albloader = false;
        } else {
            $scope.albloader = true;
        }  
            
        var opts = {};
        opts.store_id = $scope.storeId;
        opts.session_id = APP.currentUser.id;
        opts.limit_start = limit_start; 
        opts.user_id = APP.currentUser.id;
        opts.limit_size = 12;
        if ((( $scope.totalSize > limit_start) || $scope.totalSize == 0 ) && $scope.allRes == 1) { 
        $scope.listload = true;
        $scope.allRes = 0;
        StoreAlbumService.storealbumlists(opts, function(data){
            $scope.noResult = true;
            if(data.code == 101) {
                $scope.totalSize = data.data.size;
                $scope.allRes = 1;
                $scope.listAlbum = $scope.listAlbum.concat(data.data.album);   
                $scope.listload = false;
                //$scope.noAlbums = true;    
                $scope.albloader = false;  
                if(type == 'create') {
                    $scope.albumResponse = $scope.i18n.storealbum.album_response;
                } else if(type == 'delete') {
                    $scope.albumResponse = $scope.i18n.storealbum.album_del_response;
                } else {
                   //$scope.albumResponse = "";
                } 
                $timeout(function(){
                    $scope.albumResponse = "";
                },15000);
                $('.album-option').removeClass('album-blank');
                if($scope.totalSize == 0) {

                } else {
                    if(document.getElementById("albumname")){
                        $scope.user = {};     
                    }   
                } 
            }else {
                $scope.albloader = false; 
                $scope.listload = false;
            }
        });
    }
    }

    $scope.loadMore = function() {     
        $scope.storealbumlists('listing');
    };
    //Album Store Listing
    $scope.storepagealbumlists = function(){  

        $scope.albloader = true;
        var opts = {};
        opts.store_id = $scope.storeId;
        opts.session_id = APP.currentUser.id;
        opts.limit_start = 0; 
        opts.limit_size = 20; 
        StoreAlbumService.storealbumlists(opts, function(data){

            if(data.code == 101) {
                $scope.listPageAlbum = data.data.album;
                $scope.noAlbums = true;    
                $scope.albloader = false;    
            }else {
                $scope.albloader = false; 
            }
        });
    }
    //Delete Store Album 
    $scope.deletestorealbums = function(id){  
        //$scope.albloader = true;
        $scope.albumResponse = '';
        var opts = {};
        opts.session_id = APP.currentUser.id;
        opts.store_id = $scope.storeId; //todo
        opts.album_id = id;
        StoreAlbumService.deletestorealbums(opts, function(data){
               
            if(data.code == 101) {
                $scope.listAlbum.length = 0;
                $scope.totalSize = 0;
                $scope.allRes = 1;
                $scope.storealbumlists('delete');
                //$scope.albumResponse = data.message;
                $timeout(function() {
                        $scope.albumResponse = '';
                }, 15000);
            } else {
             
            }
        });
    }
    //View Store Album 
    $scope.albumDescription = "";
    $scope.viewstorealbums = function(type){
        var limit_start = $scope.viewalbum.length;
        if(type == 'delete') {
            $scope.albloader = false;  
        } else if(type === 'listing') {
            $scope.albloader = false;
        } else if(type === 'upload') {
            $scope.albloader = false;
        } else {
            $scope.albloader = true; 
        }
        
        var albumId = $routeParams.album_id;
        $scope.albumname = $routeParams.album_name;
        var opts = {};
        opts.store_id = $scope.storeId; //todo
        opts.album_id = albumId;
        opts.user_id = APP.currentUser.id;
        opts.limit_start = limit_start; 
        opts.limit_size = 12; 
        if ((( $scope.totalSizeImg > limit_start) || $scope.totalSizeImg == 0 ) && $scope.allResImg == 1) {
        $scope.listload = true;
        $scope.allResImg = 0;
        StoreAlbumService.viewstorealbums(opts, function(data){

            if(data.code == 101) {
                $scope.albloader = false;
                $scope.totalSizeImg = data.data.size;
                $scope.allResImg = 1;
                $scope.viewalbum = $scope.viewalbum.concat(data.data.media);
                $scope.albumDescription = data.data.album.description;
                $scope.albumDetails = data.data.album;
                $scope.listload = false; 
                $scope.noPhotos = true; 
                if(type == 'upload') {
                    $scope.albumResponse = $scope.i18n.storealbum.album_upload;
                } else if(type == 'delete') {
                    $scope.albumResponse = $scope.i18n.storealbum.album_del_success;
                } else {
                   $scope.albumResponse = "";
                }
                 $('.album-option').removeClass('album-blank');
            } else {
                $scope.albloader = false;
                $scope.noPhotos = true;
                $scope.listload = false; 
            }
        }); 
        } 
    }

    $scope.loadMoreImage = function() {  
    if($scope.totalSizeImg != 0) {   
        $scope.viewstorealbums('listing');
    }
    };
    //Delete Store Images from Album
    $scope.deletealbummedias = function(m_id, index){
        //$scope.albloader = true;
        var albumId = $routeParams.album_id;
        var opts = {};
        opts.session_id = APP.currentUser.id;
        opts.store_id = $scope.storeId; //todo
        opts.album_id = albumId;
        opts.media_id = m_id;
        StoreAlbumService.deletealbummedias(opts, function(data){

            if(data.code == 101) {
                //$scope.albumResponse = data.message;
                $timeout(function() {
                        $scope.albumResponse = '';
                }, 2000); 
                //$scope.viewstorealbums('delete');     
                $scope.viewalbum.splice(index, 1);   
            } else {
             
            }
        });  
    }
    //show form
    $scope.showAlbumForm = function() {
        $scope.myValue = true;
    }
    //Hide form
    $scope.closeForm = function() {
        $scope.myValue = false;
    }
    //$scope.storepagealbumlists();
    $scope.storealbumlists(); //initialization of album listing function
    $scope.storepagealbumlists(); //initialization of album listing function
    $scope.viewstorealbums('listing');
    $(".fancybox").fancybox();
    //image upload Page 
    $scope.redirectUrl = function(album_id, album_name) {
        if(album_name == '') {
           album_name = 'Untitled';
           $location.path("/album/shop/image/"+album_id+"/"+album_name+"/"+$scope.storeId);
        }
        else {
           $location.path("/album/shop/image/"+album_id+"/"+album_name+"/"+$scope.storeId); 
        }
    }

    /**
    * Function to set image as store profile image 
    */  
    $scope.setStoreProfileimage = function(id, imageId) { 
        $("#setStoreImageSubmit-"+id).hide();
        $("#setStoreImageloader-"+id).show();
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.store_id = $scope.storeId;
        opts.media_id = imageId;
        StoreService.setStoreProfileImage(opts, function(data) {
            if(data.code == 101) {
                $("#setStoreImageSubmit-"+id).show();
                $("#setStoreImageloader-"+id).hide();
                $scope.albumResponse = $scope.i18n.storealbum.album_updated;
                var imageData = data.data;
                $scope.$broadcast('updateShopProfileCover', imageData);
            } else {
                $("#setStoreImageSubmit-"+id).show();
                $("#setStoreImageloader-"+id).hide();
            }
        });
    };
    
}]);

app.controller('TopPublicShopController', ['$scope', '$http', 'TopLinkService', function ($scope, $http, TopLinkService) {
	$scope.storeLoading = true;
	$scope.listActive = 'active';
	$scope.gridActive = '';
	//get Top shop per revenue 
	$scope.getTopShopPerRevenue = function() {
		var opts = {};
		opts.limit_size = 50;
		TopLinkService.getTopShopPerRevenue(opts, function(data) {
			if(data.code == 101) {
				$scope.topShopPerRevenue = data.data;
				$scope.storeLoading = false;
			} else {
				$scope.topShopPerRevenue = {};
				$scope.storeLoading = false;
			}
		});
	};

	$scope.changeView = function(type) {
		if(type === 'list') {
			$scope.listActive = 'active';
			$scope.gridActive = '';
		} else {
			$scope.listActive = '';
			$scope.gridActive = 'active';
		}

	};

	$scope.getTopShopPerRevenue();
}]);

app.controller('TopLinkedCitizenController', ['$scope', '$http', 'TopLinkService', function ($scope, $http, TopLinkService) {
	$scope.citizenTopLinkLoader = true;
	$scope.listActive = 'active';
	$scope.gridActive = ''; 
	$scope.getTopCitizenTopLink = function() {
		var opts = {};
		opts.limit_start = 0;
		opts.limit_size = 50;
		TopLinkService.getTopLinkedCitizen(opts, function(data) {
			if(data.code == 101) {
				$scope.topLinkedCitizen = data.data.data;
				$scope.citizenTopLinkLoader = false;
			} else {
				$scope.topLinkedCitizen = {};
				$scope.citizenTopLinkLoader = false;
			}
		});
	};

	$scope.changeView = function(type) {
		if(type === 'list') {
			$scope.listActive = 'active';
			$scope.gridActive = '';
		} else {
			$scope.listActive = '';
			$scope.gridActive = 'active';
		}

	};

	$scope.getTopCitizenTopLink();
}]);

app.controller('TopCitizenIncomeController', ['$scope', '$http', 'TopLinkService', function ($scope, $http, TopLinkService) {
	$scope.topCitizenPerincomeLoader = true;
	$scope.listActive = 'active';
	$scope.gridActive = '';

	//get Top citizen per income 
	$scope.getTopCitizenPerIncome = function() {
		var opts = {};
		opts.limit_size = 50;
		TopLinkService.getTopCitizenPerIncome(opts, function(data) {
			if(data.code == 101) {
				$scope.topCitizenPerIncome = data.data;
				$scope.topCitizenPerincomeLoader = false;
			} else {
				$scope.topCitizenPerIncome = {};
				$scope.topCitizenPerincomeLoader = false;
			}
		});
	}

	$scope.changeView = function(type) {
		if(type === 'list') {
			$scope.listActive = 'active';
			$scope.gridActive = '';
		} else {
			$scope.listActive = '';
			$scope.gridActive = 'active';
		}

	};

	$scope.getTopCitizenPerIncome();
}]);
app.controller('TopCitizenAllController',['$scope', '$http', 'TopLinkService', 'fileReader', function ($scope, $http, TopLinkService, fileReader) {
	$scope.citizenTopLinkLoader = true;

	$scope.getTopCitizenTopLink = function() {
		var opts = {};
		opts.limit_start = 0;
		opts.limit_size = 50;
		TopLinkService.getTopLinkedCitizen(opts, function(data) {
			if(data.code == 101) {
				$scope.topLinkedCitizen = data.data.data;
				$scope.citizenTopLinkLoader = false;
			} else {
				$scope.topLinkedCitizen = {};
				$scope.citizenTopLinkLoader = false;
			}
		});
	}

	$scope.getTopCitizenTopLink();
}]);

app.controller('TopCitizenPerIncomeController',['$scope', '$http', 'TopLinkService', 'fileReader', function ($scope, $http, TopLinkService, fileReader) {
	$scope.topCitizenPerincomeLoader = true;

	//get Top citizen per income 
	$scope.getTopCitizenPerIncome = function() {
		var opts = {};
		opts.limit_size = 50;
		TopLinkService.getTopCitizenPerIncome(opts, function(data) {
			if(data.code == 101) {
				$scope.topCitizenPerIncome = data.data;
				$scope.topCitizenPerincomeLoader = false;
			} else {
				$scope.topCitizenPerIncome = {};
				$scope.topCitizenPerincomeLoader = false;
			}
		});
	}
	$scope.getTopCitizenPerIncome();
}]);

app.controller('TopShopPerRevenueController',['$scope', '$http', 'TopLinkService', 'fileReader', function ($scope, $http, TopLinkService, fileReader) {
	$scope.topShopPerRevenueLoader = true;

	$scope.getTopShopPerRevenue = function() {
		var opts = {};
		opts.limit_size = 50;
		TopLinkService.getTopShopPerRevenue(opts, function(data) {
			if(data.code == 101) {
				$scope.topShopPerRevenue = data.data;
				$scope.topShopPerRevenueLoader = false;
			} else {
				$scope.topShopPerRevenue = {};
				$scope.topShopPerRevenueLoader = false;
			}
		});	
	}

	$scope.getTopShopPerRevenue();
}]);

app.controller('InviteAffiliationController',['$scope', '$http', 'TopLinkService', '$timeout', '$log', 'TranslationService', function($scope, $http, TopLinkService, $timeout, $log, TranslationService) {
	if(!$scope.i18n.invite_affiliate){
        TranslationService.getTranslationWithCallback($scope, $scope.activeLanguage, function(data){
           $scope.i18n = data; 
           $scope.invitemessage = $scope.i18n.invite_affiliate.invited;
		   $scope.errorMsg = $scope.i18n.invite_affiliate.invite_error;
		   $scope.needEmail = $scope.i18n.invite_affiliate.email_need;
        });
    }else{
        $scope.invitemessage = $scope.i18n.invite_affiliate.invited;
		$scope.errorMsg = $scope.i18n.invite_affiliate.invite_error;
		$scope.needEmail = $scope.i18n.invite_affiliate.email_need;
    }
	$scope.active = {
		basicProfile : false,
		citizen_tutorial : false,
		shop_tutorial : false,
		invite_citizen : false,
		invite_shop : false,
	}
	$scope.toggleshoplist = false;
	$scope.activeThem = function(key){
		if(key === 'basicProfile'){
			$scope.toggleshoplist = !$scope.toggleshoplist;
		}else{
			$scope.toggleshoplist = false;
		}
		angular.forEach($scope.active,function(val, currKey){
			if(currKey === key){
				$scope.active[currKey] = true;
			}else{
				$scope.active[currKey] = false;
			}
		})
	}

	$scope.openFancyBox = function(type) {
		if(type == 1)
			$scope.inviteUrl = APP.base_url + "citizen_affiliation/" +APP.currentUser.id+"/"+type;
		else if(type == 2)
			$scope.inviteUrl = APP.base_url + "broker_affiliation/" +APP.currentUser.id +"/"+type;
		else if(type == 3)
			$scope.inviteUrl = APP.base_url + "shop_affiliation/" +APP.currentUser.id +"/"+type;

		var t = '<div id="citizeninvitepopup" class="modal-container">';
		t += '<div class="form-container"><div id="inviteduser" style="display:none;" class="success">'+$scope.invitemessage+'</div>';
		t += '<div id="notinviteduser" style="display:none;" class="inviteerror">'+$scope.errorMsg+'</div>';
		t += '<div id="needEmail" style="display:none;" class="inviteerror">'+$scope.needEmail+'</div><form >';
		t += '<ul><li><textarea elastic class="form-control bg-gray" name="to_emails" id="to_emails" type="text" placeholder="'+$scope.i18n.invite_affiliate.emails_with_commas+'" onkeypress="checkEmailField()"></textarea> </li>';
		t += '<li><input class="form-control bg-gray" name="inviteUrl" id="inviteUrl" value="'+$scope.inviteUrl+'" type="text" placeholder="'+$scope.inviteUrl+'" readonly/></li>';
		t += '<li><button id="requestSending" class="btn btn-primary" type="button" onclick="return inviteCAffiliationUser()" id="Submit">'+$scope.i18n.invite_affiliate.send_buttom+'</button>';
		t += '<div id="sendingloader" style="text-align: center; display:none;"><img alt="processing..." src="app/assets/images/proceed.gif"></div></li>';
		t += '</ul></form></div></div>';
		$.fancybox.open({ content: t, type: 'html' });
	}

	//section to invite the user from broker/citizen profile
	$scope.InviteAffiliationUser = function(emails, url) {
		$scope.requestSending = true;
		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.to_emails = emails.split(',');
		opts.affiliation_type = url.slice(-1); //1=>citizen, 2=>broker, 3=> shop
		opts.url = url;
		TopLinkService.inviteAffiliation(opts, function(data) {
			$("#requestSending").show();
			$("#sendingloader").hide();
			$scope.to_emails = '';
			$scope.requestSending = false;
			if(data.code == 101) {
				$("#inviteduser").show();
				$timeout(function(){
					$("#inviteduser").hide();
                }, 4000);
			} else {
				$("#notinviteduser").show();
				$timeout(function(){
					$("#notinviteduser").hide();
                }, 4000);
			}
		});
	};

}]);

function checkEmailField() {
	if(document.getElementById('to_emails').value != '') {
		$("#needEmail").hide();
	}
}
function inviteCAffiliationUser() {
	var emails  = document.getElementById('to_emails').value;
	var url = document.getElementById('inviteUrl').value;
	if(emails == '') {
		$("#needEmail").show();
		return false;
	}
	else {
		$("#requestSending").hide();
		$("#sendingloader").show();
		angular.element(document.getElementById('InviteAffiliationController')).scope().InviteAffiliationUser(emails, url);
	}
}

app.controller('ImportContactController', ['$scope','$http', '$rootScope','$route','TopLinkService', '$timeout', '$routeParams', '$location','$modal','TranslationService', function($scope, $http, $rootScope, $route, TopLinkService, $timeout, $routeParams, $location, $modal, TranslationService){
	$scope.inviteType = $routeParams.id;
	if(!$scope.i18n.invite_affiliate){
        TranslationService.getTranslationWithCallback($scope, $scope.activeLanguage, function(data){
           $scope.i18n = data; 
           $scope.invitemessage = $scope.i18n.invite_affiliate.invited;
		   $scope.errorMsg = $scope.i18n.invite_affiliate.invite_error;
		   $scope.needEmail = $scope.i18n.invite_affiliate.email_need;
        });
    }else{
        $scope.invitemessage = $scope.i18n.invite_affiliate.invited;
		$scope.errorMsg = $scope.i18n.invite_affiliate.invite_error;
		$scope.needEmail = $scope.i18n.invite_affiliate.email_need;
    }
	$scope.requestSending = false;
	$scope.invitedScuccess = false;
	$scope.notinviteduser = false;
	$scope.needinviteduser = false;
	var type = $routeParams.id;
	if(type == 1)
		$scope.inviteUrl = APP.base_url + "citizen_affiliation/" +APP.currentUser.id+"/"+type;
	else if(type == 2)
		$scope.inviteUrl = APP.base_url + "broker_affiliation/" +APP.currentUser.id +"/"+type;
	else if(type == 3)
		$scope.inviteUrl = APP.base_url + "shop_affiliation/" +APP.currentUser.id +"/"+type;
	$("#inviteUrl").val($scope.inviteUrl);

	$scope.validateEmail = function(field) {
	    var regex=/\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b/i;
	    return (regex.test(field)) ? true : false;
	}

	$scope.validateMultipleEmailsCommaSeparated = function(value) {
	    var result = value.split(",");
	    for(var i = 0;i < result.length;i++)
	    if(!$scope.validateEmail(result[i])) 
            return false;    		
	    return true;
	}

	$scope.cancelBack = function() {
		$location.path('/');
	}

	$scope.inviteBulkAffiliationUser = function() {
		$scope.requestSending = true;
		var emails = $("#to_emails").val();
		var url = $("#inviteUrl").val();
		var isValid = $scope.validateMultipleEmailsCommaSeparated(emails);

		if(emails == '') {
			$scope.needinviteduser = true;
			$scope.requestSending = false;
			$timeout(function(){
				$scope.needinviteduser = false;
            }, 4000);
		} if(!isValid) {
			$scope.needinviteduser = true;
			$scope.requestSending = false;
			$timeout(function(){
				$scope.needinviteduser = false;
            }, 4000);
		} else {
			var opts = {};
			opts.user_id = APP.currentUser.id;
			opts.to_emails = emails.split(',');
			opts.affiliation_type = url.slice(-1); //1=>citizen, 2=>broker, 3=> shop
			opts.url = url;
			TopLinkService.inviteAffiliation(opts, function(data) {
				$scope.requestSending = false;
				$("#to_emails").val("");
				if(data.code == 101) {
					$scope.invitedScuccess = true;
					$scope.requestSending = false;
					$timeout(function(){
						$scope.invitedScuccess = false;
	                }, 4000);
				} else {
					$scope.notinviteduser = true;
					$timeout(function(){
						$scope.notinviteduser = false;
	                }, 4000);
				}
			});
		}
	};

	$scope.checkFBforCloudSponge =function(){
		$scope.clodSpongeFB = false;
		$scope.FBGraphAPI = false;
		var currentDate = new Date();
		var expiryDate = new Date(2015,4,30);
		if(currentDate<expiryDate){
			$scope.clodSpongeFB = true;
		}else{
			$scope.FBGraphAPI = true;
		}
	}
	$scope.InviteFbFriends = function(){
		checkLoginForInvite(function(data){
			if(data!==null){
				getImageOfFriends(function(frndImg){
					if(frndImg!==null){
						var index=0;
						for(var i=0; i<frndImg.data.length;i++){
							var taggFrnd = frndImg.data[i];
							angular.forEach(data.data,function(appFrnd){
								if(taggFrnd.name == appFrnd.name){
									console.log(taggFrnd)
									appFrnd.imageURL = taggFrnd.picture.data.url;
									index++;
								}
							})
							if(index == data.data.length) {
									break;
							};
						}
					}
					$scope.allFriends = data.data;
					$scope.checkSlec =[];
					var modalInstance = $modal.open({
		                template: '<div id="friendModal" class="modal-header">'+
										'<h3 class="modal-title">People</h3>'+
										'<div class="modal-popup-close" ng-click="closeModal()"></div>' +
								'</div>'+
								'<div class="modal-body tag-frnd-modal">'+
									'<ul>'+
										'<li data-ng-repeat="friend in allFriends">'+
											'<span class="tag-img">'+
												'<img title="" style="width:30px;height:30px" alt="No image available" src="{{friend.imageURL}}">'+
											'</span>'+
											'<span class="tag-frnd-name">'+
													'<a href>{{friend.name}}</a>'+
											'</span>'+
											'<span class="rmv-tag">'+
													'<input type="checkbox" class="fbCheckbox" ng-init="friend.status = false" ng-click="friend.status = !friend.status">'+
											'</span>'+
										'</li>'+
									'</ul>'+
									'<button class="btn btn-primary" ng-click="getSelectedFrnd()">OK</button>'+
									// '<iframe ng-if="urlAvail" src="urlAvail"></iframe>'+
								'</div>'+
								'<div class="modal-footer">'+
								'</div>',
		                controller: 'ModalController',
		                size: 'lg',
		                scope: $scope,
		            });

		            modalInstance.result.then(function (selectedItem) {
		            }, function () {
		                // $log.info('Modal dismissed at: ' + new Date());
		            });
		            
		            $scope.getSelectedFrnd =function (){
		            	angular.forEach($scope.allFriends,function(frnd){
		            		// console.log(frnd)
		            		if(frnd.status){
		            			// $scope.urlAvail = frnd.link;
		            			var win = window.open(frnd.link); 
		            			window.location.repalce = frnd.link;
		            			setTimeout(function() {
		            				console.log(win.location.href)
		            			}, 5000);
		            			// $http({
		            			// 	method:'GET',
		            			// 	url:frnd.link,
		            			// 	headers : { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
		            			// 					'origin':'https://www.facebook.com',
		            			// 					'referer':frnd.link }
		            			// }).success(function(data){
		            			// 	console.log(data)
		            			// })
		            		}
		            	})
		            }
				})
			}
		});
	}
}]);


app.controller('UserController', ['$cookieStore', '$rootScope', 'ipCookie', '$scope', '$http', '$location', '$timeout', '$routeParams', 'UserService', 'saveUserPass', 'TopLinkService', '$remember', 'AffiliatedkService', 'AlbumService', 'verifyUser', 'EMAILPATTERN', 'focus', function($cookieStore, $rootScope, ipCookie, $scope, $http, $location, $timeout, $routeParams, UserService, saveUserPass, TopLinkService, $remember,AffiliatedkService ,AlbumService, verifyUser, EMAILPATTERN, focus) {
	$scope.emailPattern = EMAILPATTERN.emailPattern;
	$scope.fb_expire = false;
	$scope.loginStart = false;
	$scope.loginError = false;
	$scope.loginErrorMsg = '';
	$scope.signupStart = false;  
	$scope.sucessMessage = false;
	$scope.signUpSuccessMsg = "sucess";
	$scope.class = "sucess";
	$scope.isLoading = false;
	$scope.message = '';
	$scope.brokerloader = false;
	$scope.brokerMsg = '';
	$scope.brokerMsgerror = '';
	$scope.isreferralId = '';
	$scope.user = {};
	$scope.user.month = '';
	$scope.user.remember = false;
	$scope.months = $scope.i18n.Register_months;
    $scope.$watch('currentLanguage',function(newValue,oldValue){
        $timeout(function(){
            $scope.months = $scope.i18n.Register_months;
        }, 400 );
    });
	var fbdata;
	$scope.profileType = $routeParams.profileType;
    $scope.filtertypeId=$routeParams.typeId;
	$scope.brokerProfile = APP.profileType.brokerProfile;
	$scope.citizenProfile = APP.profileType.citizenProfile;
	if(TopLinkService.getAffiliationObject().hasOwnProperty("user_id")) {
		var affiliate = TopLinkService.getAffiliationObject();
		$scope.isreferralId = affiliate.user_id;
		$scope.referralId = affiliate.user_id;
		$scope.filtertypeId = affiliate.type;
		if($location.path().indexOf('registration') != -1){
			TopLinkService.setAffiliationObject({});
		}
	}
	$scope.getProfile = $location.path();
	
	if($scope.getProfile.indexOf('/profiles') !== -1){
		$scope.citizenProfileLoader = true; 
        var citizenOpts = {};
        citizenOpts.user_id = APP.currentUser.id;
        citizenOpts.profile_type = APP.profileType.citizenProfile; 
        UserService.getBasicProfile(citizenOpts, function(data){
            if(data.code == 101) {
              if(data.data.facebook_profile.expires <= 0) $scope.fb_expire = true;
              $scope.citizenProfileLoader = false;
              $scope.currentFullDate = new Date().getFullYear();
              $scope.fullCitizenProfile = data.data;
              $scope.showPersonalJobs = data.data.baisc_profile_info.jobDetails;
              var monthNum = parseInt($scope.fullCitizenProfile.baisc_profile_info.date_of_birth.date.substring(5,7));
			  $scope.birthmonth = $scope.months[monthNum - 1].name;
              $scope.emptyPersonalJobs = false;
              angular.forEach($scope.showPersonalJobs,function(index){
                if(index.visibility_type === 1 || index.visibility_type === 3){
                  $scope.emptyPersonalJobs = true;
                }
              });
              $scope.showPersonalEducation = data.data.baisc_profile_info.educationDetail;
              $scope.emptyPersonalEducation = false;
              angular.forEach($scope.showPersonalEducation,function(index){
                if(index.visibility_type === 1 || index.visibility_type === 3){
                  $scope.emptyPersonalEducation = true;
                }
              });

				if($scope.profileType == 1){
					$scope.emptyProfessionalJobs = false;
					angular.forEach($scope.showPersonalJobs,function(index){
						if(index.visibility_type === 2 || index.visibility_type === 3){
						  $scope.emptyProfessionalJobs = true;
						}
					});
					$scope.emptyProfessionalEducation = false;
					angular.forEach($scope.showPersonalEducation,function(index){
						if(index.visibility_type === 2 || index.visibility_type === 3){
						  $scope.emptyProfessionalEducation = true;
						}
					});
				}
            } else {                
              $scope.citizenProfileLoader = false;
            }
        });
     //Get Affilicate counts
    $scope.getAffiliateCounts = function() {  
        var opts = {};
        opts.user_id = APP.currentUser.id;  
        opts.session_id = APP.currentUser.id; 
        AffiliatedkService.getAllcounts(opts, function(data) {
            if(data.code == 101) {
                $scope.totalCounts = data.data;
            } 
        });
    };
    // Start function for the show album in profile page
        $scope.loaduseralbumimages =function(){
        $scope.noalbumimages = false;
        var opts = {};
        opts.user_id = APP.currentUser.id; 
        opts.friend_id = APP.currentUser.id; 
		opts.limit_start = 0; 
		opts.limit_size = 4;

        AlbumService.albumListing(opts, function(data){
            if(data.code == 101) {
                $scope.userlatestalbum =  data.data.albums;
                if($scope.userlatestalbum.length == 0  ){
                	$scope.noalbumimages = true;
                }
            }else {
                $scope.userlatestalbum = '';
            }
            });
    };
    
      // End function for the show album in profile page
	$scope.loaduseralbumimages();
    
    $scope.getAffiliateCounts();
   
	}

	//login video pop up
	$(".video-fancybox").fancybox();
	//Blank facebook reg
	$scope.facebookReg = function() {
		$('.button-section').hide();
		$('.fbmsg').hide();
		document.getElementById("emailReg").value = "";
		document.getElementById("fname").value = "";
		document.getElementById("lname").value = "";
  		document.getElementById("fbId").value = "";
  		$scope.user.fbId = "";
		$scope.user.firstName = "";
		$scope.user.lastName = "";
		$scope.user.userEmail = "";
	}

	$scope.convertString = function(stringAyyar){
		if(stringAyyar.length > 0){
			return stringAyyar.split(',');
		}else{
			return [];
		}
	};

	//yes option
	$scope.fbyes = function() {
		var postData = $scope.facebookdata;
		var opts = {
				
					facebook_id: postData.facebook_id, 
					user_id: postData.user_id,
					facebook_accesstoken: postData.facebook_accesstoken,
			};
			console.log('opts-',opts)
		UserService.mapfacebookuser(opts, function(data) {
			if(data.code == 101) {
				var fbId = data.data.facebook_id;
				var email = data.data.email;
				var fname = data.data.first_name;
				var lname = data.data.last_name;
				$scope.facebookLoginChk(fbId,email,fname,lname);
			} else {
				$scope.signUpSuccessMsg  = data.message;
			}		
		});
	}
	$scope.fbno = function() {
		$('.fbmsg').hide();
		$scope.fbloginmessage ="";
		$scope.signUpSuccessMsg = "";
		$('.button-section').hide();
	}
	//facebook login check
	$scope.facebookLoginChk = function(fbId,email,fname,lname,fb_access_token) {
		//$('.facebook-button').hide();
		$scope.fbloader = true;
		var postData = {
				reqObj: {
					facebook_id: fbId, 
					email: email,
					firstname: fname,
					lastname : lname
				}
			};

		var method = 'POST';
	            $http({
				method : "POST",
				url : APP.service.getFacebookLogin,
				data : postData,
				headers : { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }
			}).success( function(data, header){
				if(data.code == 99){
					$scope.fbloader = false;
					document.getElementById("emailReg").value = data.data.email;
					document.getElementById("fname").value = data.data.firstname;
					document.getElementById("lname").value = data.data.lastname;
					document.getElementById("fbId").value = "fb";
					document.getElementById("fbUserId").value = data.data.facebook_id;
					$scope.user.fbId = "fb";
					$scope.user.firstName = data.data.firstname;
					$scope.user.lastName = data.data.lastname;
					$scope.user.userEmail = data.data.email;
					$scope.user.fbUserId = data.data.facebook_id;
					$scope.user.access_token = fb_access_token;
					$scope.fbloginmessage = $scope.i18n.home.fbregistration_msg;
					$('.fbmsg').show();
				} else if(data.code == 101) {

					$scope.user.userName = data.data.username;
					$scope.user.password = "123456";
					fbdata = data.data;
					$scope.getFacebookLogin(fb_access_token);

				}
			}).error(function(data, status, header){
				
			});
	}
	
	//Facebook Login
	//login form submit: function service to get access_token and login success
	$scope.getFacebookLogin = function(fb_access_token) {
		if($scope.user.userName == undefined || $scope.user.userName == ''){
			$scope.loginError = true;
			$scope.loginErrorMsg = $scope.i18n.home.enter_your_email;
			return false;
		}else if($scope.user.password == undefined || $scope.user.password == ''){
			$scope.loginError = true;
			$scope.loginErrorMsg = $scope.i18n.home.six_digit_password;
			return false;
		}
		$scope.loginStart = true;
		$scope.loginError = false;
		var opts = {};
		opts = {
			reqObj: {
				client_id : APP.keys.client_id,
				client_secret : APP.keys.client_secret,
		        grant_type : APP.keys.grant_type,
				username : $scope.user.userName,
				fb_login : "true",
				password : $scope.user.password
			}
		};
		//call service to get access token
		UserService.getAccessToken(opts)
		.then(function(data) {
			APP.accessToken = data.data.access_token;
			APP.currentUser = fbdata;
			ipCookie("loggedInUser", fbdata, { expires: 365 });
			ipCookie("access_token", APP.accessToken, { expires: 3000 });					
			$rootScope.currentUser = fbdata;
			$scope.selectlanguage(APP.currentUser.current_language);
			$rootScope.isLoggedIn = true;
			var opts3 = {};
			opts3.user_id = APP.currentUser.id;
			opts3.profile_type = 4;
			UserService.getBasicProfile(opts3, function(data) {
				if(data.code == 101){
					$rootScope.currentUser.basicProfile = data.data;
				}	
				if(fb_access_token && data.data.facebook_profile.expires <=0){
					$scope.fb_expire = true
					//if accesstoken exist and and expire timepassed on call update access token 
					var opts = {}
					opts.user_id = APP.currentUser.id;
					opts.facebook_id = data.data.facebook_profile.id;
					opts.facebook_accesstoken = fb_access_token;
					UserService.updateFbAccessToken(opts, function(data){
						if(data.code == 101){
							$scope.fb_expire = false;
						}
					})
				}
				
				//get users credit and the total income 
				var opts4 = {};
				opts4.idcard = $rootScope.currentUser.basicProfile.user_id; 
				UserService.getCreditAndIncome(opts4, function(data){
					var currentCredit = {};
					if(data.code == 101) {
						currentCredit.totalCredit = (data.data.saldoc/1000000) ;
						currentCredit.totCreditMicro = (data.data.saldorm) + (data.data.saldorc) ;
						currentCredit.totalIncome = data.data.tot_income;
						currentCredit.totalIncomeShow = data.data.tot_income;
						$rootScope.currentUser.creditAndIncome = currentCredit;
					}else{
						$rootScope.currentUser.creditAndIncome = data.data;
					}
				});
				$rootScope.allFriendTotal = 0;
				$rootScope.getCountOfAllTypeNotificaton();
				$scope.$parent.loggedIn = true;
				var currentHitUrl = UserService.getHitUrl();
				if((TopLinkService.getIsAlreadyUserLogin()).yes) {
					var alreadyUserType = (TopLinkService.getIsAlreadyUserLogin()).profileType;
					TopLinkService.setIsAlreadyUserLogin({});
					$location.path("/shop/register/"+alreadyUserType);
				} else if($rootScope.currentUser.basicProfile.new_conract_status === 0) {
					$location.path("/edit/shop/"+$rootScope.currentUser.basicProfile.shop_id);
				} else if( currentHitUrl.length > 2 ) {
					UserService.setHitUrl('');
					$location.path(currentHitUrl);
				} else {
					$location.path("/profile");
				}
			});
			$scope.fbloader = false;

		}, function(error) {
			if(error.error === 'invalid_grant'){
				$scope.loginError = true;
				$scope.loginStart = false;
				$scope.loginErrorMsg = $scope.i18n.home.invalid_username;
			} else {
				$scope.loginError = true;
				$scope.loginStart = false;
				$scope.loginErrorMsg = $scope.i18n.home.server_not_responding;
			}
		});
	};
	
	//login form submit: function service to get access_token and login success
	$scope.loginFormSubmitted = false;
	$scope.getLogin = function() {
	$scope.loginFormSubmitted = true;
		if($scope.user.userName == undefined || $scope.user.userName == ''){
			$scope.loginError = true;
			$scope.user.email.$dirty = true;
            $scope.user.email.$invalid = true;
            $scope.user.email.$error.required = true;
            focus('loginEmail');
			return false;
		}else if($scope.user.password == undefined || $scope.user.password == ''){
			$scope.loginError = true;
			$scope.user.loginPassword.$dirty = true;
            $scope.user.loginPassword.$invalid = true;
            $scope.user.loginPassword.$error.required = true;
            focus('loginPassword');
			return false;
		}
		// set data for remember me
		if ($scope.user.remember) {
        	$remember('username', $scope.user.userName);
            $remember('password', $scope.user.password);
        } else {
            $remember('username', '');
            $remember('password', '');
            $scope.user.remember = false;

        }
		$scope.loginStart = true;
		$scope.loginError = false;
		var opts = {};
		opts = {
			reqObj: {
				client_id : APP.keys.client_id,
				client_secret : APP.keys.client_secret,
		        grant_type : APP.keys.grant_type,
				username : $scope.user.userName,
				password : $.base64.encode($scope.user.password)
			}
		};
		//call service to get access token
		UserService.getAccessToken(opts)
		.then(function(data) {
			APP.accessToken = data.data.access_token;
			var postData = {
				reqObj: {
					username: $scope.user.userName, 
					password: $.base64.encode($scope.user.password)
				}
			};
            var method = 'POST';
	            $http({
				method : "POST",
				url : APP.service.logins+"?access_token="+data.data.access_token,
				data : postData,
				headers : { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }
			})
            .success( function(data, header){
            	if(data.data && data.code != 100) {
            		APP.currentUser = data.data;
					ipCookie("loggedInUser", data.data, { expires: 365 });
					ipCookie("access_token", APP.accessToken, { expires: 3000 });
					$rootScope.currentUser = data.data;
					$rootScope.isLoggedIn = true;
					$scope.selectlanguage(APP.currentUser.current_language);
					var opts3 = {};
					opts3.user_id = APP.currentUser.id;
					opts3.profile_type = 4;
					UserService.getBasicProfile(opts3, function(data) {
						if(data.code == 101){
							$rootScope.currentUser.basicProfile = data.data;
						}	
						if(data.data.facebook_profile.expires <= 0) $scope.fb_expire = true;
						//get users credit and the total income 
						var opts4 = {};
						opts4.idcard = $rootScope.currentUser.basicProfile.user_id;
						UserService.getCreditAndIncome(opts4, function(data) {
							var currentCredit = {};
							if(data.code == 101) {
								currentCredit.totalCredit = (data.data.saldoc/1000000) ;
								currentCredit.totCreditMicro = (data.data.saldorm) + (data.data.saldorc) ;
								currentCredit.totalIncome = data.data.tot_income;
								currentCredit.totalIncomeShow = data.data.tot_income;
								//currentCredit.totalIncome = ((data.data.saldorc+data.data.saldorm)/1000000);
								$rootScope.currentUser.creditAndIncome = currentCredit;
							}
							else{
								$rootScope.currentUser.creditAndIncome = data.data;
							}
						});
						$rootScope.allFriendTotal = 0;
						$rootScope.getCountOfAllTypeNotificaton();
						$scope.$parent.loggedIn = true;
						var currentHitUrl = UserService.getHitUrl();
						if((TopLinkService.getIsAlreadyUserLogin()).yes) {
							var alreadyUserType = (TopLinkService.getIsAlreadyUserLogin()).profileType;
							TopLinkService.setIsAlreadyUserLogin({});
							$location.path("/shop/register/"+alreadyUserType);
						} else if($rootScope.currentUser.basicProfile.new_conract_status === 0) {
							$location.path("/edit/shop/"+$rootScope.currentUser.basicProfile.shop_id);
						} else if( currentHitUrl.length > 2 ) {
							UserService.setHitUrl('');
							$location.path(currentHitUrl);
						} else {
							$location.path("/profile");
						}
					});
				} else {
					$scope.loginError = true;
					$scope.loginStart = false;
					$scope.loginErrorMsg = $scope.i18n.home.invalid_username;
					$timeout(function(){
                    $scope.loginErrorMsg = '';
                    }, 15000);
				}
			})
			.error(function(data, status, header){
				if(status == 403){
					if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
						verifyUser.check();
						$scope.loginStart = false;					
		            }
				}else{
					$scope.loginError = true;
					$scope.loginStart = false;
					$scope.loginErrorMsg = $scope.i18n.home.invalid_username;
					$timeout(function(){
	                $scope.loginErrorMsg = '';
	                }, 15000);
				}
			});
		}, function(error) {
			if(error.error === 'invalid_grant'){
				$scope.loginError = true;
				$scope.loginStart = false;
				$scope.loginErrorMsg = $scope.i18n.home.invalid_username;
				$timeout(function(){
                $scope.loginErrorMsg = '';
                }, 15000);
			} else {
				$scope.loginError = true;
				$scope.loginStart = false;
				$scope.loginErrorMsg = $scope.i18n.home.server_not_responding;
				$timeout(function(){
                $scope.loginErrorMsg = '';
                }, 15000);
			}
		});
	};

	$scope.go = function( path ) {
		$location.path( path );
	};
	
	//Registration User
	$scope.months = $scope.i18n.Register_months;
    $scope.$watch('currentLanguage',function(newValue,oldValue){
        $timeout(function(){
            $scope.months = $scope.i18n.Register_months;
            $scope.user.month = '';
        }, 400 );
    });
  $scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];	
  	
  	$scope.Result = 0;
  	function Leap(Year){
		if ( (Year % 4) == 0){
			if ( (Year % 100) == 0)	{
				$scope.Result = ( (Year % 400) == 0);
			}else{
				$scope.Result = 1;
			}
		}else{
			$scope.Result = 0;
		}
		$scope.monthChange();
	}

	$scope.$watch('user.year',function(val){
  		Leap(val);
    });

  	$scope.monthChange = function(){
  		if($scope.user.month === undefined || $scope.user.month === "" || $scope.user.month === null){
    	}else{
    		var normalValue = $scope.user.month.value - 1;
	  		if(normalValue <= 6){ 
	  			if(normalValue % 2 == 0){
	  				$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
	  			}else if(normalValue == 1){
  					if($scope.Result){
	  					$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29];
	  				}else{
	  					$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28];
	  				}
	  			}else{
	 				$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
	  			}
	  		}else{
	  			if(normalValue % 2 != 0){
	  				$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
	  			}else {
	 				$scope.days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
	  			}
	  		}
	  	}
  	};

  	$scope.getyears = function() {
  		var currentYear = new Date().getFullYear();
		$scope.years = [];
		for (var i = 1914; i <= currentYear ; i++){
			$scope.years.push(i);
		}
  	};
  	
  	$scope.getyears();
  	$scope.countries = APP.countries;
	$scope.signUpSuccessMsg = "";
	$scope.showLoading = true;
	$scope.genderShow = false;
	// $scope.today = function() {
	// 	$scope.user.dob = new Date();
	// };
	//$scope.today();
	$scope.clear = function () {
		$scope.user.dob = null;
	};
	// Disable weekend selection
	$scope.disabled = function(date, mode) {
		return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
	};
	$scope.toggleMin = function() {
		$scope.minDate = $scope.minDate ? null : new Date();
	};
	$scope.toggleMin();
	$scope.formats = ['dd-MM-yyyy', 'dd-MM-yyyy', 'dd-MM-yyyy', 'shortDate'];
	$scope.format = $scope.formats[0];
	$scope.user.gender = 0;
	$scope.formSubmitted =  false;
	$scope.invalidSelectedDob = false;

  	$scope.registration = function(type) {
  		var currentDOB = new Date();
  		$scope.formSubmitted =  true;
       	var opts = {};
       	if($scope.user.userEmail === undefined || $scope.user.userEmail === '' ){
			$scope.user.emailReg.$dirty = true;
            $scope.user.emailReg.$invalid = true;
            $scope.user.emailReg.$error.required = true;
            focus('emailReg');
			return false;
		} else if($scope.user.userPassword === undefined || $scope.user.userPassword === ''){
       		$scope.user.pwdReg.$dirty = true;
            $scope.user.pwdReg.$invalid = true;
            $scope.user.pwdReg.$error.required = true;
            focus('pwdReg');
       		return false;
       	} else if($scope.user.firstName === undefined || $scope.user.firstName === '' ){
			$scope.user.fname.$dirty = true;
            $scope.user.fname.$invalid = true;
            $scope.user.fname.$error.required = true;
            focus('fname');
			return false;
		}else if($scope.user.lastName === undefined || $scope.user.lastName === '' ){
			$scope.user.lname.$dirty = true;
            $scope.user.lname.$invalid = true;
            $scope.user.lname.$error.required = true;
            focus('lname');
			return false;
		}else if($scope.user.month === undefined || $scope.user.month === '' ){
			$scope.user.dobmonth.$dirty = true;
            $scope.user.dobmonth.$invalid = true;
            $scope.user.dobmonth.$error.required = true;
            focus('dobmonth');
			return false;
		}else if($scope.user.day === undefined || $scope.user.day === '' ){
			$scope.user.dobday.$dirty = true;
            $scope.user.dobday.$invalid = true;
            $scope.user.dobday.$error.required = true;
            focus('dobday');
			return false;
		}else if($scope.user.year === undefined || $scope.user.year === '' ){
			$scope.user.dobyear.$dirty = true;
            $scope.user.dobyear.$invalid = true;
            $scope.user.dobyear.$error.required = true;
            focus('dobyear');
			return false;
		}else if($scope.user.year === currentDOB.getFullYear() && ($scope.user.month.value >= (currentDOB.getMonth()+1)) && ($scope.user.day > currentDOB.getDate())){
			$scope.invalidSelectedDob = true;
			focus('dobday');
			$timeout(function(){
				$scope.invalidSelectedDob = false;
			},2000);
        }else if($scope.user.gender === undefined || $scope.user.gender === 0){
			$scope.user.genreg.$dirty = true;
            $scope.user.genreg.$invalid = true;
            $scope.user.genreg.$error.required = true;
            focus('genreg');
			return false;
		}else if($scope.user.country === undefined || $scope.user.country.id === undefined || $scope.user.country.id === '' ){
			$scope.user.countryReg.$dirty = true;
            $scope.user.countryReg.$invalid = true;
            $scope.user.countryReg.$error.required = true;
            focus('countryReg');
			return false;
		}else if(type == 1 && ($scope.user.terms === 'false' || $scope.user.terms === undefined || $scope.user.terms === false || $scope.user.terms === '')) {
			$scope.user.termReg.$dirty = true;
            $scope.user.termReg.$invalid = true;
			$scope.user.termReg.$error.required = true;
			focus('termReg');
			return false;
		} 

		if($scope.user.fbId == 'fb' ){ 
		if(localStorage.getItem('CitizenAffiliatedObject')) {
			opts.referral_id = JSON.parse(localStorage.getItem('CitizenAffiliatedObject')).affiliator_id;
		}

		//opts.referral_id = $scope.referralId;
		opts.facebook_id = $scope.user.fbUserId;
       	opts.firstname = $scope.user.firstName;
       	opts.email = $scope.user.userEmail;
		opts.password = $.base64.encode($scope.user.userPassword);
		opts.lastname = $scope.user.lastName;
		//opts.birthday = $("#userdob").val(); 
        opts.birthday = $scope.user.day + '-' + $scope.user.month.value + '-' + $scope.user.year;
		opts.gender = $scope.user.gender;
		opts.country = $scope.user.country.id;
		opts.facebook_accesstoken = $scope.user.access_token;
		if( type != '')  
			opts.type = type;
		else
			opts.type = $routeParams.typeId;
		$scope.signupStart = true;
		$scope.showLoading = false;
		$scope.signUpSuccessMsg = "";
		UserService.getFacebookRegister(opts, function(data) {

			//alert(JSON.stringify(data));
			if(data.code == 101) {
				//Remove referral object from cookies
				localStorage.removeItem('CitizenAffiliatedObject');
				fbdata = data.data;
				$scope.sucessMessage = true;
				$scope.signupStart = false;
				$scope.user.userName = $scope.user.userEmail;
				$scope.user.password = "123456";
				$scope.getFacebookLogin();
			} else if(data.code == 98) {
				console.log(data.data)
				$scope.facebookdata = data.data;
				$scope.signUpSuccessMsg  = $scope.i18n.validation.user_exits;
				$('.button-section').show();
				$scope.showLoading = true;
			} else if(data.code == 154){
				$scope.signUpSuccessMsg  = $scope.i18n.validation.citizen_not_exists;
				$scope.showLoading = true;
			} else {
				$scope.signUpSuccessMsg  = data.message;
				$scope.showLoading = true;
			}
			$timeout(function(){
				$scope.signUpSuccessMsg = '';
			},15000);
		});

		} else {
		if(localStorage.getItem('CitizenAffiliatedObject')) {
			opts.referral_id = JSON.parse(localStorage.getItem('CitizenAffiliatedObject')).affiliator_id;
		}
       	opts.firstname = $scope.user.firstName;
       	opts.email 	  = $scope.user.userEmail;
		opts.password = $.base64.encode($scope.user.userPassword);
		opts.lastname = $scope.user.lastName;
		opts.birthday = $scope.user.day + '-' + $scope.user.month.value + '-' + $scope.user.year;
        opts.gender   = $scope.user.gender;
		opts.country  = $scope.user.country.id;
		if( type != '')  
			opts.type = type;
		else
			opts.type = $routeParams.typeId;
		$scope.signupStart = true;
		$scope.showLoading = false;
		$scope.signUpSuccessMsg = "";

		UserService.registration(opts, function(data) {
			if(data.code == 101) {
				//Remove referral object from cookies
				localStorage.removeItem('CitizenAffiliatedObject');
				if(data.data.profile_type == 1){
					$scope.sucessMessage = true;
					$scope.signupStart = false;
					$scope.user.userName = $scope.user.userEmail;
					$scope.user.password = $scope.user.userPassword;
					$scope.getLogin();
				}else if(data.data.profile_type == 3){
					var userId = data.data.user_id;
					saveUserPass.saveUserPassword($scope.user.userEmail,$scope.user.userPassword)
					$scope.showLoading = true;
					$rootScope.referral_id = $scope.referralId;
					$location.path( '/storeProfilestep/'+userId+'/3' );
				}else if(data.data.profile_type == 2){
					var userId = data.data.user_id;
					saveUserPass.saveUserPassword($scope.user.userEmail,$scope.user.userPassword)
					$scope.showLoading = true;
					$rootScope.referral_id = $scope.referralId;
					$location.path( '/brokerprofilestep/'+userId+'/2' );
				}
			} else if (data.code == 136) {
				$scope.signUpSuccessMsg = $scope.i18n.validation.user_exists;
			    $scope.showLoading = true;
			} else if(data.code == 154) {
				$scope.signUpSuccessMsg = $scope.i18n.validation.citizen_not_exists;
			    $scope.showLoading = true;
			} else if (data.code == 137) {
				$scope.signUpSuccessMsg  = $scope.i18n.validation.broker_not_exists;
				$scope.showLoading = true;
			} else if (data.code == 131) {
				$scope.signUpSuccessMsg  = $scope.i18n.validation.date_format_incorrect;
				$scope.showLoading = true;
			} else if (data.code == 100) {
				$scope.signUpSuccessMsg  = $scope.i18n.validation.missed_param;
				$scope.showLoading = true;
			} else if (data.code == 129) {
				$scope.signUpSuccessMsg  = $scope.i18n.validation.invalid_country_code;
				$scope.showLoading = true;
			} else if (data.code == 130) {
				$scope.signUpSuccessMsg  = $scope.i18n.validation.invalid_gender_type;
				$scope.showLoading = true;
			} else if (data.code == 133) {
				$scope.signUpSuccessMsg  = $scope.i18n.validation.invalid_profile_setting;
				$scope.showLoading = true;
			} else if (data.code == 143) {
				$scope.signUpSuccessMsg  = $scope.i18n.validation.referral_id_needed;
				$scope.showLoading = true;
			} else if (data.code == 135) {
				$scope.signUpSuccessMsg  = $scope.i18n.validation.email_invalid;
				$scope.showLoading = true;
			} else {
				$scope.signUpSuccessMsg  = data.message;
				$scope.showLoading = true;
			}

			$timeout(function(){
				$scope.signUpSuccessMsg = '';
			},15000);
		});
	}
	}

	//function to send token request for forget password
	$scope.msgcls = '';
	$scope.forgotPassword = function () {
		
		var formData = {};
		if ($scope.email == '' || $scope.email == undefined) {
			$scope.message = $scope.i18n.home.invalid_mail;
			$timeout(function(){
				$scope.message = '';
			}, 15000);
			$scope.msgcls = 'text-red text-center';
			return false;
		}

		$scope.isLoading = true;
		$scope.message = '';
		formData.username = $scope.email;
		//calling the services to sent forget password token
        UserService.forgotPassword(formData, function(data){
        	if (data.code == 105) {
        		$scope.msgcls = 'text-success text-center';
            	$scope.message = $scope.i18n.validation.email_sent;
            	$scope.isLoading = false;
            } else if (data.code == 107) {
            	$scope.message = $scope.i18n.validation.password_requested;
            	$scope.isLoading = false;
            	$scope.msgcls = 'text-success text-center';
            } else {
                $scope.isLoading = false;
                $scope.message = $scope.i18n.home.invalid_mail;
                // $scope.message = data.message;
                $scope.msgcls = 'text-red text-center';
            }
        });

        $timeout(function(){
			$scope.message = '';
			$scope.msgcls = '';
			$scope.email == '';
		}, 15000);
	};

	//function to reset the password from the token
	$scope.reset = {};
	$scope.reset.token = $rootScope.resetToken;
	$scope.requestPwdMessage = '';
	$scope.resetPassword = function () {
		$rootScope.requestPwdMessage = '';
		var formData = {};
		$scope.isLoading = true;
        $scope.reseterror = false;
		$scope.message = {};
		if ($scope.reset.token == '' || $scope.reset.token == undefined ) {
			$scope.message = $scope.i18n.passchange.enter_token;
			$scope.reseterror = true;
            $scope.isLoading = false;
            $timeout(function(){
				$scope.message = '';
			}, 15000);
            return false;
		}
		if ($scope.reset.password == '' || $scope.reset.password == undefined || $scope.reset.password.length <6) {
			$scope.message = $scope.i18n.validation.reset_password_invalid;
			$scope.reseterror = true;
            $scope.isLoading = false;
            $timeout(function(){
				$scope.message = '';
			}, 15000);
            return false;
		}
		if ($scope.reset.repassword == '' || $scope.reset.repassword == undefined || $scope.reset.repassword.length <6) {
			$scope.message = $scope.i18n.validation.password_match;
			$scope.reseterror = true;
            $scope.isLoading = false;
             $timeout(function(){
				$scope.message = '';
			}, 15000);
            return false;
		} else if($scope.reset.repassword != $scope.reset.password) {
			$scope.message = $scope.i18n.validation.password_match;
			$scope.reseterror = true;
            $scope.isLoading = false;
             $timeout(function(){
				$scope.message = '';
			}, 15000);
            return false;
		}
		formData.token = $scope.reset.token;
		formData.password = $scope.reset.password;
		$scope.message = "";
		//calling the services to sent forget password token
        UserService.resetPassword(formData, function(data){
        	$rootScope.requestPwdMessage = '';
        	if(data.code == 101) {
            	$scope.requestPwdMessage = $scope.i18n.home.reset_password_sucess;
            	$scope.reset = {};
            	$scope.isLoading = false;  	
            } else if(data.code == 113) {
                $scope.isLoading = false;
                $scope.reseterror = true;
                $scope.reset = {};
                $scope.message = $scope.i18n.validation.invalid_password;   
            } else if(data.code == 112) {
                $scope.message = $scope.i18n.validation.invalid_token;
                $scope.reseterror = true;
				$scope.isLoading = false;
                $scope.reset = {};
            } else if(data.code == 100) {
                $scope.isLoading = false;
                $scope.reset = {};
                $scope.message = $scope.i18n.validation.account_inactive;
                $scope.reseterror = true;     
            } else if(data.code == 108) {
                $scope.isLoading = false;
                $scope.reset = {};
                $scope.reseterror = true;
                $scope.message = $scope.i18n.validation.not_reset_password;      
            } else {
                $scope.isLoading = false;
                $scope.reset = {};
                $scope.reseterror = true;
                $scope.message = $scope.i18n.home.not_reset_password;  
            }
            $timeout(function(){
        		$scope.message = '';
        		$scope.requestPwdMessage = '';
        		$scope.reseterror = false;
            }, 15000);

        });
	};

	//<!--login user for payment of shop start-->

	//login form submit: function service to get access_token and login success
	$scope.getShopPaymentLogin = function() {

		if($scope.user.userName == undefined || $scope.user.userName == ''){
			$scope.loginError = true;
			$scope.loginErrorMsg = $scope.i18n.home.enter_your_email;
			return false;
		}else if($scope.user.password == undefined || $scope.user.password == ''){
			$scope.loginError = true;
			$scope.loginErrorMsg = $scope.i18n.home.six_digit_password;
			return false;
		}
		$scope.loginStart = true;
		$scope.loginError = false;
		var opts = {};
		opts = {
			reqObj: {
				client_id : APP.keys.client_id,
				client_secret : APP.keys.client_secret,
		        grant_type : APP.keys.grant_type,
				username : $scope.user.userName,
				password : $scope.user.password
			}
		};
		//call service to get access token
		UserService.getAccessToken(opts)
		.then(function(data) {
			APP.accessToken = data.data.access_token;
			var postData = {
				reqObj: {
					username: $scope.user.userName, 
					password: $scope.user.password
				}
			};
            var method = 'POST';
	            $http({
				method : "POST",
				url : APP.service.logins+"?access_token="+data.data.access_token,
				data : postData,
				headers : { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }
			})
            .success( function(data, header){
            	if(data.data && data.code != 100) {
					APP.currentUser = data.data;
					ipCookie("loggedInUser", data.data, { expires: 365 });
					ipCookie("access_token", APP.accessToken, { expires: 3000 });
					$rootScope.currentUser = data.data;
					$rootScope.isLoggedIn = true;
					$scope.selectlanguage(APP.currentUser.current_language);
					var opts3 = {};
					opts3.user_id = APP.currentUser.id;
					opts3.profile_type = 4;
					UserService.getBasicProfile(opts3, function(data) {
						if(data.code == 101)
							$rootScope.currentUser.basicProfile = data.data;

						//get users credit and the total income 
						var opts4 = {};
						opts4.idcard = $rootScope.currentUser.basicProfile.user_id;
						UserService.getCreditAndIncome(opts4, function(data) {
							if(data.code == 101) {
								var currentCredit = {};
								currentCredit.totalCredit = (data.data.saldoc/1000000);
								currentCredit.totCreditMicro = (data.data.saldorm) + (data.data.saldorc);
								currentCredit.totalIncome = data.data.tot_income ;
                                currentCredit.totalIncomeShow = (data.data.saldorm) + (data.data.saldorc) ;
								$rootScope.currentUser.creditAndIncome = currentCredit;
							}
						});
					});
					$scope.$parent.loggedIn = true;
					$location.path('/shop/register/payment');
				} else {
					$scope.loginError = true;
					$scope.loginStart = false;
					$scope.loginErrorMsg = $scope.i18n.home.invalid_username;
				}
			})
			.error(function(data, status, header){
				$scope.loginError = true;
				$scope.loginStart = false;
				$scope.loginErrorMsg = $scope.i18n.home.invalid_username;
			});
		}, function(error) {
			if(error.error === 'invalid_grant'){
				$scope.loginError = true;
				$scope.loginStart = false;
				$scope.loginErrorMsg = $scope.i18n.home.invalid_username;
			} else {
				$scope.loginError = true;
				$scope.loginStart = false;
				$scope.loginErrorMsg = $scope.i18n.home.server_not_responding;
			}
		});
	};

	//Registration Broker Multiprofile
	$scope.brokerloader = false;
	$scope.regisMessageClass = '';
    $scope.registerMultiProfile = function(){
    	//$scope.brokerloader = true;
        var opts = {};
        opts.user_id = $routeParams.userId;
        opts.phone = $scope.user.phone; 
        opts.iban = $scope.user.iban; 
		opts.type = $routeParams.typeId;
		opts.referral_id = $rootScope.referral_id;
		if(opts.type == 3){
			if($scope.user.name == undefined || $scope.user.name == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_storename;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.business_name == undefined || $scope.user.business_name == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businessname;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.business_type == undefined || $scope.user.business_type == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businesstype;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.legal_status == undefined || $scope.user.legal_status == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businesstatus;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.phone == undefined || $scope.user.phone == '' || isNaN($scope.user.phone) == true){
				$scope.brokerMsg = $scope.i18n.register.enter_businessnumber ;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.email == undefined || $scope.user.email == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businessemail;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.country == undefined || $scope.user.country.id == undefined || $scope.user.country.id == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businesscountry;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.business_region == undefined || $scope.user.business_region == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businessregion;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.business_city == undefined || $scope.user.business_city == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businesscity;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.business_address == undefined || $scope.user.business_address == ''){
				$scope.brokerMsg = $scope.i18n.validation.enter_businessaddress;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.zip == undefined || $scope.user.zip == '' || $scope.user.zip.length < 5 || $scope.user.zip.length > 5 ){
				$scope.brokerMsg = $scope.i18n.register.enter_businesszip;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.province == undefined || $scope.user.province == '' ){
				$scope.brokerMsg = $scope.i18n.register.enter_businessprovince;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.province.length < 2 || $scope.user.province.length > 2 ){
				$scope.brokerMsg = $scope.i18n.validation.province_length;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.vat_number == undefined || $scope.user.vat_number == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businessvat;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.iban == undefined || $scope.user.iban == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businessiban;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.description == undefined || $scope.user.description == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businessdesc;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if((document.getElementById("lat").value) == undefined || (document.getElementById("lat").value) == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businesslat;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if((document.getElementById("lon").value )== undefined || (document.getElementById("lon").value) == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businesslog;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if((document.getElementById("mapplace").value) == undefined || (document.getElementById("mapplace").value) == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businessmap;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} 
			/*else if($scope.user.terms == 'false' || $scope.user.terms == undefined || $scope.user.terms == false || $scope.user.terms == '') {
			    $scope.brokerMsg = $scope.i18n.register.terms_condition_agree;
			    return false;
			}*/
			opts.email = $scope.user.email;
			opts.description = $scope.user.description;
			opts.name = $scope.user.name;
			opts.business_name = $scope.user.business_name;
			opts.legal_status = $scope.user.legal_status;
			opts.business_type = $scope.user.business_type;
			opts.business_country = $scope.user.country.id;
			opts.business_region = $scope.user.business_region;
			opts.business_city = $scope.user.business_city;
			opts.business_address = $scope.user.business_address;
			opts.zip = $scope.user.zip;
			opts.province = $scope.user.province;
			opts.vat_number = $scope.user.vat_number;
                        opts.call_type = 1; 
		}else{

			if($scope.user.phone == undefined || $scope.user.phone == '' || isNaN($scope.user.phone) == true){
				$scope.brokerMsg = $scope.i18n.broker.enter_brokernumber ;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.fiscal == undefined || $scope.user.fiscal == ''){
				$scope.brokerMsg = $scope.i18n.broker.enter_brokerfiscal;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.iban == undefined || $scope.user.iban == ''){
				$scope.brokerMsg = $scope.i18n.broker.enter_brokeriban;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if((document.getElementById("lat").value) == undefined || (document.getElementById("lat").value) == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businesslat;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if((document.getElementById("lon").value )== undefined || (document.getElementById("lon").value) == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businesslog;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if((document.getElementById("mapplace").value) == undefined || (document.getElementById("mapplace").value) == ''){
				$scope.brokerMsg = $scope.i18n.register.enter_businessmap;
				$scope.regisMessageClass = "text-red fl";
				$timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
				return false;
			} else if($scope.user.terms == '' || $scope.user.terms == undefined || $scope.user.terms == false || $scope.user.terms == '') {
			    $scope.brokerMsg = $scope.i18n.register.terms_condition_agree;
			    $scope.regisMessageClass = "text-red fl";
			    $timeout(function(){
	        		$scope.brokerMsg = "";
		        	$scope.regisMessageClass = '';
		        },15000);
			    return false;
			}

			opts.vat_number = $scope.user.vat; 
			opts.fiscal_code = $scope.user.fiscal;
            opts.call_type = 1; 
		}
			opts.latitude = document.getElementById("lat").value;
			opts.longitude = document.getElementById("lon").value;
			opts.map_place = document.getElementById("mapplace").value;
			$scope.brokerloader = true;
            $scope.brokerMsg = "";
        	UserService.registerMultiProfile(opts, function(data){
	        	if(data.code == 101) {
		        	//$scope.brokerloader = false;
		        	$scope.brokerMsg = data.message;
		        	$scope.regisMessageClass = "text-success fl";
		        	$rootScope.tempStoreId = data.data.store_id;
		        	$rootScope.tempUserId = $routeParams.userId;
		        	//set the value in cookie
		        	$cookieStore.put('tempStoreId',data.data.store_id);
		        	$cookieStore.put('tempUserId',$routeParams.userId);

		        	$scope.user.userName = saveUserPass.getUsername();
		        	$scope.user.password = saveUserPass.getPassword();
		        	saveUserPass.clearUserPass();
		        	if(opts.type == 3){
		        		$scope.getShopPaymentLogin();
		        	} else {
						$scope.getLogin();	        		
		        	}
		        } else if (data.code == 137) {
		        	$scope.brokerMsg = $scope.i18n.validation.broker_not_exists;
		        	$scope.brokerloader = false;
		        	$scope.regisMessageClass = "text-red fl";
		        } else if (data.code == 111) {
		        	$scope.brokerMsg = $scope.i18n.validation.user_id_required;
		        	$scope.brokerloader = false;
		        	$scope.regisMessageClass = "text-red fl";
		        } else if (data.code == 132) {
		        	$scope.brokerMsg = $scope.i18n.validation.invalid_profile_type;
		        	$scope.brokerloader = false;
		        	$scope.regisMessageClass = "text-red fl";
		        } else if (data.code == 133) {
		        	$scope.brokerMsg = $scope.i18n.validation.user_not_exists;
		        	$scope.brokerloader = false;
		        	$scope.regisMessageClass = "text-red fl";
		        } else if (data.code == 143) {
		        	$scope.brokerMsg = $scope.i18n.validation.referral_id_needed;
		        	$scope.brokerloader = false;
		        	$scope.regisMessageClass = "text-red fl";
		        } else if (data.code == 165) {
		        	$scope.brokerMsg = $scope.i18n.validation.vat_valid;
		        	$scope.brokerloader = false;
		        	$scope.regisMessageClass = "text-red fl";
		        } else if (data.code == 166) {
		        	$scope.brokerMsg = $scope.i18n.validation.iban_valid;
		        	$scope.brokerloader = false;
		        	$scope.regisMessageClass = "text-red fl";
		        } else if (data.code == 138) {
		        	$scope.brokerMsg = $scope.i18n.validation.vat_exists;
		        	$scope.brokerloader = false;
		        	$scope.regisMessageClass = "text-red fl";
		        } else {
	                $scope.brokerloader = false;
	                // $scope.brokerMsg = data.message;
	                $scope.brokerMsg = data.message;
	                $scope.regisMessageClass = "text-red fl";
	            }
	        $timeout(function(){
	        	$scope.brokerMsg = "";
	        	$scope.regisMessageClass = '';
	        },15000);
        });
    }
    

	//function to cancel from forgot password and redirecting to login page
	$scope.cancelForgotPassword = function () {
		$location.path('/');
	};
	//Displaying Map with lat long feature
	/*	$scope.mapsection = function() {
			var mapLatitude;
			var mapLogitude;
	        $scope.map = {center: {latitude: 40.1451, longitude: -99.6680 }, zoom: 4 }
	        $scope.options = {scrollwheel: false};
	        $scope.marker = {
	            id:0,
	            coords: {
	                latitude: 40.1451,
	                longitude: -99.6680
	            },
	            options: { draggable: true },
	            events: {
	                dragend: function (marker, eventName, args) {
	                	document.getElementById("lat").value = marker.getPosition().lat();
	                	document.getElementById("lon").value = marker.getPosition().lng();
	                	mapLatitude = marker.getPosition().lat();
	                	mapLogitude = marker.getPosition().lng();
	                	$scope.maplocation(mapLatitude, mapLogitude);
	                }
	            }
	        }
	    }

	    $scope.maplocation = function(mapLatitude, mapLogitude) {
	    	var geocoder;
			geocoder = new google.maps.Geocoder();
	  		var lat = parseFloat(mapLatitude);
	  		var lng = parseFloat(mapLogitude);
	  		var latlng = new google.maps.LatLng(lat, lng);
	  		geocoder.geocode({'latLng': latlng}, function(results, status) {
	    	if (status == google.maps.GeocoderStatus.OK) {
	      		if (results[1]) {
	       			$('#mapplace').val(results[1].formatted_address);
	      		} else {
	        	alert('No results found');
	      		}
	    	} else {
	      	alert('Geocoder failed due to: ' + status);
	    	}
	  		});
	    }

	    $scope.mapsection();*/

    $scope.initialize = function () {
		var mapOptions = {
			center: new google.maps.LatLng(-33.8688, 151.2195),
			zoom: 13
		};
		var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

		var input = (document.getElementById('pac-input'));

		var types = document.getElementById('type-selector');
		map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
		map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

		var autocomplete = new google.maps.places.Autocomplete(input);
		autocomplete.bindTo('bounds', map);

		var infowindow = new google.maps.InfoWindow();
		var marker = new google.maps.Marker({
			map: map,
			anchorPoint: new google.maps.Point(0, -29)
		});

		google.maps.event.addListener(autocomplete, 'place_changed', function() {
			infowindow.close();
			marker.setVisible(false);
			var place = autocomplete.getPlace();
			if (!place.geometry) {
				return;
			}
			var countryPlace = autocomplete.getPlace();
			document.getElementById("lat").value = countryPlace.geometry.location.k;
			document.getElementById("lon").value = countryPlace.geometry.location.D;
			document.getElementById("mapplace").value = countryPlace.formatted_address; //address_components[0].long_name;

			if (place.geometry.viewport) {
				map.fitBounds(place.geometry.viewport);
			} else {
				map.setCenter(place.geometry.location);
				map.setZoom(17);  
			}
			marker.setIcon(({
				url: place.icon,
				size: new google.maps.Size(71, 71),
				origin: new google.maps.Point(0, 0),
				anchor: new google.maps.Point(17, 34),
				scaledSize: new google.maps.Size(35, 35)
			}));
			marker.setPosition(place.geometry.location);
			marker.setVisible(true);

			var address = '';
			if (place.address_components) {
				address = [
				(place.address_components[0] && place.address_components[0].short_name || ''),
				(place.address_components[1] && place.address_components[1].short_name || ''),
				(place.address_components[2] && place.address_components[2].short_name || '')
				].join(' ');
			}

			infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
			infowindow.open(map, marker);
		});

		function setupClickListener(id, types) {
			var radioButton = document.getElementById(id);
		}

		setupClickListener('changetype-all', []);
		setupClickListener('changetype-establishment', ['establishment']);
		setupClickListener('changetype-geocode', ['geocode']);
	}

	angular.element('#map-canvas').ready(function() {
		if (($location.path().indexOf("/storeProfilestep") != -1)) {
		    $timeout(function() {
		      $scope.initialize();
		    },  2000);
		}
	});

	// set the value for login and password for remember me
	$scope.rememberMe = function() {
		if (($remember('username') !== null && $remember('password') !== null) && ($remember('username') !== '' && $remember('password') !== '')) {
			$scope.user.remember = true;
	        $scope.user.userName = $remember('username');
	        $scope.user.password = $remember('password');
	    }
	}
}]);


// Controller for handing the comment related operation
app.controller('CreateBrokerController',['$scope', '$location', '$timeout', 'CreateBrokerService', 'ProfileImageService', function($scope, $location, $timeout, CreateBrokerService, ProfileImageService) {

    ///Creater Broker in citizen Multiprofile 
    $scope.createBroker = function() {
    	if($scope.user.phone == undefined || $scope.user.phone == ''){
    		$scope.brokerMsg = $scope.i18n.broker.enter_brokernumber;
    		$timeout(function(){
				$scope.brokerMsg = "";
			}, 4000);
    		return false;
    	} else if($scope.user.vat == undefined || $scope.user.vat == ''){
    		$scope.brokerMsg = $scope.i18n.broker.enter_brokervat;
    		$timeout(function(){
				$scope.brokerMsg = "";
			}, 4000);
    		return false;
    	} else if($scope.user.fiscal == undefined || $scope.user.fiscal == ''){
    		$scope.brokerMsg = $scope.i18n.broker.enter_brokerfiscal;
    		$timeout(function(){
				$scope.brokerMsg = "";
			}, 4000);
    		return false;
    	} else if($scope.user.iban == undefined || $scope.user.iban == ''){
    		$scope.brokerMsg = $scope.i18n.broker.enter_brokeriban;
    		$timeout(function(){
				$scope.brokerMsg = "";
			}, 4000);
    		return false;
    	} else if($scope.user.referral_id == undefined || $scope.user.referral_id == ''){
    		$scope.brokerMsg = $scope.i18n.broker.enter_brokerrefferal;
    		$timeout(function(){
				$scope.brokerMsg = "";
			}, 4000);
    		return false;
    	} else if(document.getElementById('mapplace').value == undefined || document.getElementById('mapplace').value == ''){
    		$scope.brokerMsg = $scope.i18n.broker.enter_brokermapplace;
    		$timeout(function(){
				$scope.brokerMsg = "";
			}, 4000);
    		return false;
    	} else if(document.getElementById('lon').value == undefined || document.getElementById('lon').value == ''){
    		$scope.brokerMsg = $scope.i18n.broker.enter_brokerlog;
    		$timeout(function(){
				$scope.brokerMsg = "";
			}, 4000);
    		return false;
    	} else if(document.getElementById('lat').value == undefined || document.getElementById('lat').value == ''){
    		$scope.brokerMsg = $scope.i18n.broker.enter_brokerlat;
    		$timeout(function(){
				$scope.brokerMsg = "";
			}, 4000);
    		return false;
    	} else 

    	$scope.brokerloader = true;
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.phone = $scope.user.phone; 
        opts.vat_number = $scope.user.vat; 
        opts.fiscal_code = $scope.user.fiscal;
        opts.iban = $scope.user.iban;
        opts.referral_id = $scope.user.referral_id; 
        opts.map_place = document.getElementById('mapplace').value;
        opts.latitude = document.getElementById('lat').value; 
        opts.longitude = document.getElementById('lon').value; 
        opts.type = 2; 
        opts.call_type = 2; 
        CreateBrokerService.createBroker(opts, function(data){
        	//$location.path('/profile');
            if(data.code == 101) {
            	$scope.brokerloader = false;
        		$scope.brokerMsg = $scope.i18n.broker.broker_success;  
        		 $scope.viewmultiprofiles();
        		$timeout(function() {
        			$scope.brokerMsg = "";   
        			$location.path('/profile');
        		}, 2000);
            } else if(data.code == 137) {
            	$scope.brokerloader = false;
        		$scope.brokerMsgerror = $scope.i18n.validation.broker_not_exists;; 
        		$timeout(function(){
				$scope.brokerMsgerror = "";
				}, 4000);
            } else {
                $scope.brokerloader = false;
        		$scope.brokerMsgerror = data.message; 
        		$timeout(function(){
				$scope.brokerMsgerror = "";
				}, 4000);
            }
        });
    }


    $scope.viewmultiprofiles = function(){

        $scope.albloader = true; 
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.profile_type = 4; 
        ProfileImageService.viewmultiprofiles(opts, function(data){
            if(data.code == 101) {
                $scope.albloader = false; 
                $scope.picloader = false;
                $scope.propic = true; 
                $rootScope.currentUser.basicProfile = data.data;
            } else {                
                $scope.propic = true; 
                $scope.picloader = false;
                
            }
        });
    }


    $scope.initialize = function () {
		var mapOptions = {
			center: new google.maps.LatLng(-33.8688, 151.2195),
			zoom: 13
		};
		var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);

		var input = (document.getElementById('pac-input'));

		var types = document.getElementById('type-selector');
		map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
		map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

		var autocomplete = new google.maps.places.Autocomplete(input);
		autocomplete.bindTo('bounds', map);

		var infowindow = new google.maps.InfoWindow();
		var marker = new google.maps.Marker({
			map: map,
			anchorPoint: new google.maps.Point(0, -29)
		});

		google.maps.event.addListener(autocomplete, 'place_changed', function() {
			infowindow.close();
			marker.setVisible(false);
			var place = autocomplete.getPlace();
			if (!place.geometry) {
				return;
			}
			var countryPlace = autocomplete.getPlace();
			document.getElementById("lat").value = countryPlace.geometry.location.k;
			document.getElementById("lon").value = countryPlace.geometry.location.D;
			document.getElementById("mapplace").value = countryPlace.formatted_address;

			if (place.geometry.viewport) {
				map.fitBounds(place.geometry.viewport);
			} else {
				map.setCenter(place.geometry.location);
				map.setZoom(17);  
			}
			marker.setIcon(({
				url: place.icon,
				size: new google.maps.Size(71, 71),
				origin: new google.maps.Point(0, 0),
				anchor: new google.maps.Point(17, 34),
				scaledSize: new google.maps.Size(35, 35)
			}));
			marker.setPosition(place.geometry.location);
			marker.setVisible(true);

			var address = '';
			if (place.address_components) {
				address = [
				(place.address_components[0] && place.address_components[0].short_name || ''),
				(place.address_components[1] && place.address_components[1].short_name || ''),
				(place.address_components[2] && place.address_components[2].short_name || '')
				].join(' ');
			}

			infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
			infowindow.open(map, marker);
		});

		function setupClickListener(id, types) {
			var radioButton = document.getElementById(id);
		}

		setupClickListener('changetype-all', []);
		setupClickListener('changetype-establishment', ['establishment']);
		setupClickListener('changetype-geocode', ['geocode']);
	}
	$timeout(function(){
		$scope.initialize();
	}, 1000);

}]);

app.controller('MessageNotifiController',['$cookieStore', '$rootScope', '$scope', '$http', '$location', '$timeout', '$interval', 'ProfileService', 'UserService', 'threadAndPass', function($cookieStore, $rootScope, $scope, $http, $location, $timeout, $interval, ProfileService, UserService, threadAndPass) {
	$rootScope.showNewMessageList = false;
    $scope.newMessageShow = false;
	$scope.messageNoti = [];
	$scope.cancelUnreadRequest = 0;
	$scope.loadingUnreadMssage = false;
	$scope.count = 0;
	$scope.noMesasge = true;
	$scope.scopeVar1 = false;
	$rootScope.listUnReadMessages = function(){
		$scope.newMessageShow = false;
		$scope.loadingUnreadMssage = true;
		var opts = {};
		opts.user_id = APP.currentUser.id;
		opts.is_view = "1";
		opts.limit_start = "0";
		opts.limit_size = "10";
		ProfileService.listUnReadMessages(opts, function(data){
            if(data.code == 101) {
        		$scope.cancelUnreadRequest = 1;
            	$scope.messageNoti = data.data;
            	$scope.newMessageShow = true;
            	$scope.loadingUnreadMssage = false;
            	var count = $scope.messageNoti.length;
            	if(count > 0){
            		$scope.count = count;
            	}else {
            	//	$scope.messageNoti = {No message}
            		$scope.noMesasge = false;
            	}
            }else {
            	$scope.newMessageShow = true;
            	$scope.loadingUnreadMssage = false;
            }
            $rootScope.getCountOfAllTypeNotificaton();
        });
	}
	$scope.blockUiClick = function(even){
		if(even.target.nodeName!=='IMG'){
			var temp=$rootScope.toggleSearch
			$rootScope.toggleSearch=null
	        setTimeout(function(){
				$rootScope.toggleSearch=temp
			},100)
	    }
	}
	$scope.showAllMessage = function($event) {
		if($event != undefined){
			$event.stopPropagation();
		}
		var temp=$rootScope.toggleSearch
		$rootScope.toggleSearch=null
		setTimeout(function(){
			$rootScope.toggleSearch=temp
		},100);
		$rootScope.groupNotificationList = false;
		$rootScope.showNotificationList = false;
		$rootScope.showFriendNotificationList=false;
		$rootScope.loadGroupNotification = false;
		$rootScope.showNewMessageList = !$rootScope.showNewMessageList;
		$scope.scopeVar1 = !$scope.scopeVar1;
        $scope.scopeVar2 = false;
        $scope.scopeVar = false;
        $scope.scopeVar3 = false;
        if($scope.scopeVar1){
			$rootScope.listUnReadMessages();
        }else{
        	$rootScope.getCountOfAllTypeNotificaton();
        }
	};

    $scope.NotificationMessageOut = function(){
     $rootScope.showNewMessageList = false;
     $scope.scopeVar1 = false;
    }; 
	$scope.closeDrop = function(){
		$rootScope.showNewMessageList = !$rootScope.showNewMessageList;
	}

	$scope.markReadAllMessages = function(){
		var opts = {};
		opts.user_id = APP.currentUser.id;
		MessageService.markReadAllMessages(opts, function(data){
            if(data.code == 100) {
  				$scope.newMessageShow = false;
            } else {
            
            }
        });
	}

	$scope.readMessage = function(threadId){   
        var opts = {};
        opts.session_id = APP.currentUser.id;
        opts.thread_id = threadId;
        ProfileService.readMessage(opts, function(data){
            if(data.code == 101) {
            }
            else {
            }
        });
    }

	$scope.storeThreadAndFriendId = function(threadId, friendId){
		//var opts = {};
		//if(threadId != 0){
			threadAndPass.saveThreadAndFriend(threadId, friendId);
		/*} else {
			 threadAndPass.saveThreadAndFriend(messageId, friendId);
		}*/
	}
}]);

app.controller('SkillController',['$cookieStore', '$rootScope', 'ipCookie', '$scope', 'ProfileService', function($cookieStore, $rootScope, ipCookie, $scope,ProfileService ) {
	$scope.loadSkill = true;
	$scope.getSkills = function(){
    	var opts = {};
    	opts.user_id = APP.currentUser.id;
    	ProfileService.getUserSkills(opts,function(data){
    		$scope.loadSkill = false;
    		if(data.code === 101 && data.message === "SUCCESS"){
    			if(data.data.skills.skills.length > 0){
    				$scope.storeSkills = data.data.skills.skills.split(',');
    			}
    		}
    	});
    };
    $scope.getSkills();
}]);

app.controller('userWalletController',['$rootScope', '$scope', '$http', 'UserWalletService', '$location', '$timeout', '$interval', '$routeParams', 'storeHistorySelection', function($rootScope, $scope, $http, UserWalletService, $location, $timeout, $interval, $routeParams, storeHistorySelection) {
	$scope.oneAtATime = true;
	$scope.isLoadingWallet = true;
	$scope.isLoadPcard = false;
	$scope.isLoadMcard = false;
	$scope.isLoadShot = false;
	$scope.noPcard = false;
	$scope.noMcard = false;
	$scope.noShot = false;
	$scope.userId = APP.currentUser.id;
	$scope.status = {
	    isFirstOpen: false,
	    isFirstDisabled: false
  	};

  	if(storeHistorySelection.getStoreage() == true){
  		$scope.tabChoose = 'history';
  		storeHistorySelection.clearStorage();
  	}else{
  		$scope.tabChoose = 'credits'
  	}
  	$scope.walletDetails = {};
  	$scope.pcardRes = 1;
  	$scope.shotsRes = 1;
  	$scope.mcardRes = 1;
  	$scope.pcardTotal = 0;
  	$scope.shotTotal = 0;
  	$scope.mcardTotal = 0;
  	
  	/* function to get the citizen wallet*/
  	$scope.getCitizenWallet = function(){
  		var opts = {};
		opts.user_id = $scope.userId;
		opts.shots_needed = APP.citizenWallet.shots_needed;
		opts.purchase_card_needed = APP.citizenWallet.purchase_card_needed;
		opts.momosy_card_needed = APP.citizenWallet.momosy_card_needed;
		opts.total_credit_available_needed = APP.citizenWallet.total_credit_available_needed;
		opts.total_citizen_income_needed = APP.citizenWallet.total_citizen_income_needed;
		opts.discount_position_needed = APP.citizenWallet.discount_position_needed;
		opts.purchase_card_limit_start = APP.citizenWallet.purchase_card_limit_start;
		opts.purchase_card_limit_size = APP.citizenWallet.purchase_card_limit_size;
		opts.shots_card_limit_start = APP.citizenWallet.shots_card_limit_start;
		opts.shots_card_limit_size = APP.citizenWallet.shots_card_limit_size;
		opts.momosy_card_limit_start = APP.citizenWallet.momosy_card_limit_start;
		opts.momosy_card_limit_size = APP.citizenWallet.momosy_card_limit_size;
		
		UserWalletService.getCitizenWallet(opts, function(data) {
			$scope.isLoadingWallet = false;
			if(data.code == 101) {
				$scope.walletDetails = data.data;
				$scope.pcardTotal = data.data.purchase_cards.total;
				$scope.shotTotal = data.data.shots.total;
				$scope.mcardTotal = data.data.momosy_cards.total;
				if($scope.walletDetails.purchase_cards.purchase_card.length == 0){
					$scope.noPcard = true;
				}
				if($scope.walletDetails.shots.shot.length == 0){
					$scope.noShot = true;
				}
				if($scope.walletDetails.momosy_cards.momosy_card.length == 0){
					$scope.noMcard = true;
				}
			} else {
				$scope.walletDetails = [];
			}
		});
	}

	$scope.getCitizenWallet();

	/*function to load More PurchaseCard
	* load only PurchaseCard
	*/
	$scope.loadMorePurchaseCard = function(){
		var opts = {};
		opts.user_id = $scope.userId;
		opts.shots_needed = 0; //no need to load shot
		opts.purchase_card_needed = APP.citizenWallet.purchase_card_needed;
		opts.momosy_card_needed = 0; //no need to load momosy card
		opts.total_credit_available_needed = 0;
		opts.total_citizen_income_needed = 0;
		opts.discount_position_needed = 0;
		opts.purchase_card_limit_start = $scope.walletDetails.purchase_cards.purchase_card.length;
		opts.purchase_card_limit_size = APP.citizenWallet.purchase_card_limit_size;
		opts.shots_card_limit_start = APP.citizenWallet.shots_card_limit_start;
		opts.shots_card_limit_size = APP.citizenWallet.shots_card_limit_size;
		opts.momosy_card_limit_start = APP.citizenWallet.momosy_card_limit_start;;
		opts.momosy_card_limit_size = APP.citizenWallet.momosy_card_limit_size;

		if(($scope.pcardRes == 1 && $scope.pcardTotal > $scope.walletDetails.purchase_cards.purchase_card.length)){
			$scope.pcardRes = 0;
			$scope.isLoadPcard = true;
			UserWalletService.getCitizenWallet(opts, function(data) {
				$scope.pcardRes = 1;
				$scope.isLoadPcard = false;
				if(data.code == 101) {
					$scope.walletDetails.purchase_cards.purchase_card = $scope.walletDetails.purchase_cards.purchase_card.concat(data.data.purchase_cards.purchase_card);
					$scope.pcardTotal = data.data.purchase_cards.total;
				} 
			});
		}
	}

	/*function to load More shots
	*load only shots
	*/
	$scope.loadMoreShots = function(){
		var opts = {};
		opts.user_id = $scope.userId;
		opts.shots_needed = APP.citizenWallet.shots_needed;
		opts.purchase_card_needed = 0;
		opts.momosy_card_needed = 0;// load only shots 
		opts.total_credit_available_needed = 0;
		opts.total_citizen_income_needed = 0;
		opts.discount_position_needed = 0;
		opts.purchase_card_limit_start = APP.citizenWallet.purchase_card_limit_start;
		opts.purchase_card_limit_size = APP.citizenWallet.purchase_card_limit_size;
		opts.shots_card_limit_start = $scope.walletDetails.shots.shot.length;
		opts.shots_card_limit_size = APP.citizenWallet.shots_card_limit_size;
		opts.momosy_card_limit_start = APP.citizenWallet.momosy_card_limit_start;;
		opts.momosy_card_limit_size = APP.citizenWallet.momosy_card_limit_size;

		if(($scope.shotsRes == 1 && $scope.shotTotal > $scope.walletDetails.shots.shot.length)){
			$scope.shotsRes = 0;
			$scope.isLoadShot = true;
			UserWalletService.getCitizenWallet(opts, function(data) {
				$scope.shotsRes = 1;
				$scope.isLoadShot = false;
				if(data.code == 101) {
					$scope.walletDetails.shots.shot= $scope.walletDetails.shots.shot.concat(data.data.shots.shot);
					$scope.shotTotal = data.data.shots.total;
				} 
			});
		}
	}

	/*function to load More momosy card
	*load only momosy card
	*/
	$scope.loadMoreMomosyCard = function(){
		var opts = {};
		opts.user_id = $scope.userId;
		opts.shots_needed = 0; 
		opts.purchase_card_needed = 0;
		opts.momosy_card_needed = APP.citizenWallet.momosy_card_needed;
		opts.total_credit_available_needed = 0;
		opts.total_citizen_income_needed = 0;
		opts.discount_position_needed = 0;
		opts.purchase_card_limit_start = APP.citizenWallet.purchase_card_limit_start;
		opts.purchase_card_limit_size = APP.citizenWallet.purchase_card_limit_size;
		opts.shots_card_limit_start = APP.citizenWallet.shots_card_limit_start;
		opts.shots_card_limit_size = APP.citizenWallet.shots_card_limit_size;
		opts.momosy_card_limit_start = $scope.walletDetails.momosy_cards.momosy_card.length;
		opts.momosy_card_limit_size = APP.citizenWallet.momosy_card_limit_size;
		
		if(($scope.mcardRes == 1 && $scope.mcardTotal > $scope.walletDetails.momosy_cards.momosy_card.length)){
			$scope.mcardRes = 0;
			$scope.isLoadMcard = true;
			UserWalletService.getCitizenWallet(opts, function(data) {
				$scope.mcardRes = 1;
				$scope.isLoadMcard = false;
				if(data.code == 101) {
					$scope.walletDetails.momosy_cards.momosy_card = $scope.walletDetails.momosy_cards.momosy_card.concat(data.data.momosy_cards.momosy_card);
					$scope.mcardTotal = data.data.momosy_cards.total;
				} 
			});
		}
	}

	//for citizene income with pagination
	$scope.firstPage = APP.citizenWallet.limit_start;
    $scope.itemsPerPage = APP.citizenWallet.limit_size;
    $scope.currentPage = 1;
    $scope.range = [];
    $scope.pagevalue = '';
    $scope.changePageMore = function(pageNo) {
        $scope.currentPage = pageNo;
        $scope.citizenIncome();
    };

    $scope.prevPage = function() {
        if ($scope.currentPage > 1) {
            $scope.currentPage--;
        }
        $scope.citizenIncome();
    };

    $scope.prevPageDisabled = function() {
        return $scope.currentPage === 1 ? "disabled" : "";
    };

    $scope.nextPage = function() {
        if ($scope.currentPage < $scope.totalItems) {
            $scope.currentPage++;
        }
       $scope.citizenIncome();
    };

    $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.totalItems ? "disabled" : "";
    };

    $scope.setPage = function(number) {
        $scope.itemsPerPage = number;
        $scope.currentPage = 1;
        $scope.citizenIncome();
    };

    /* function to get the citizen wallet*/
  	$scope.citizenIncome = function(){
  		var limit_start = ($scope.currentPage-1)*$scope.itemsPerPage;
  		var opts = {};
		opts.user_id = $scope.userId;
		opts.limit_start = limit_start;
		opts.limit_size = $scope.itemsPerPage;
		
		UserWalletService.getCitizenIncomes(opts, function(data) {
			$scope.isLoadingWallet = false;
			if(data.code == 101) {
				$scope.incomeDetails = data.data.citizen_income;
				$scope.totalItems = Math.ceil(data.data.total/$scope.itemsPerPage); 
                    $scope.range = [];  
                    for (var i=1; i<=$scope.totalItems; i++) {
                        $scope.range.push(i);
                    }  
			} else {
				$scope.incomeDetails = [];
			}
		});
	}

	$scope.citizenIncome();
}]);
app.controller('VerifyController',['$location', '$scope', 'UserService', '$modalStack', function($location, $scope, UserService, $modalStack) {
    TrailExpiredModal   = false;
    $scope.verfiyLoader = true;
    $scope.error        = false;
    $scope.message      = '';
    $scope.resend       = false;
    
    $scope.verify = function(){
        var queryParam = $location.search();
        var opts = new Object();
            opts.verify_token = (queryParam.token === undefined ? '' : queryParam.token);
            opts.user_email   = (queryParam.email === undefined ? '' : queryParam.email);

        UserService.verifyAccount(opts, function(data){
            $scope.verfiyLoader = false;
            $scope.error        = true;
            if(data.code === 101){
                $scope.error   = false;
                $scope.message = $scope.i18n.verify_user.success1;
            }else if(data.code === 1003){
                $scope.message = $scope.i18n.verify_user.error2;
            }else if(data.code === 1035){
                $scope.message = $scope.i18n.verify_user.error1;
            }else if(data.code === 1047 || data.code == 1001){
                $scope.message = $scope.i18n.verify_user.error3;
            }else if(data.code === 1048){
                $scope.message = $scope.i18n.verify_user.error4;
                $scope.resend  = true;
            }else{
                $scope.message = $scope.i18n.verify_user.success;
                $scope.error   = false;
            }
        });
    };

    $scope.verify();
}]);

app.controller('VerifyModal',['$scope', '$modalInstance', function($scope, $modalInstance) {
        $scope.closeModal = function () {
            TrailExpiredModal = true;
            $modalInstance.dismiss('cancel');
        };
}]);

app.controller('ResendLink',['$scope', 'UserService', '$timeout', function($scope, UserService, $timeout) {
    
    $scope.Resendlink = function(){
        var formData = {};
        var filter = /^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
        
        if ($scope.email === '' || $scope.email === undefined) {
            $scope.emailmessage = $scope.i18n.store.enter_storeemail;
            $scope.hasemailerror = true;
            $timeout(function(){
                $scope.emailmessage = '';
            }, 10000);
            return false;
        }
        
        $scope.isLoading = true;
        $scope.message   = '';
        $scope.emailmessage = '';
        $scope.hasemailerror = false;
        formData.email   = $scope.email;
        
        UserService.resendverificationmail(formData, function(data){
            $scope.isLoading = false;
            $scope.hasemailerror = false;
            if (data.code == 101) {
                $scope.msgcls    = 'text-success text-center';
                $scope.message   = $scope.i18n.validation.email_sent;
            } else if (data.code == 1021) {
                $scope.message   = $scope.i18n.validation.user_not_exists;
                $scope.msgcls    = 'text-red text-center';
            } else if (data.code == 1035) {
                $scope.message   = $scope.i18n.validation.error_occured;
                $scope.msgcls    = 'text-red text-center';
            } else if (data.code == 1046) {
                $scope.message   = $scope.i18n.verify_user.success;
                $scope.msgcls    = 'text-success text-center';
            } else if (data.code == 1047) {
                $scope.message   = $scope.i18n.verify_user.error4;
                $scope.msgcls    = 'text-red text-center';
            }else{
                $scope.message   = $scope.i18n.verify_user.error1;
                $scope.msgcls    = 'text-red text-center';
            }
        });

        $timeout(function(){
            $scope.message = '';
            $scope.msgcls  = '';
            $scope.email   = '';
        }, 10000);
    };
}]);

app.directive('allImgModal',['$timeout', '$location', function($timeout, $location) 
{
    return {
        restrict: 'A',
        scope : true,
        controller : function ($scope,$modal,$log, ProfileService, AlbumService, $routeParams)
        {
            $scope.createModal = function(index, viewalbum, leng, mainId, type,userdetails) 
            {
                $scope.parent_id    = mainId;
                $scope.parent_type  = type;
                $scope.media_index  = index;
                $scope.leng         = leng
                $scope.pre_visible  = true;
                $scope.next_visible = true;
                $scope.modal_loader = false;
                $scope.friendTagIndex = 0;
                $scope.tagged_Friends = [];
                $scope.UpdateTag      = false;
                $scope.TagLoader      = false;
                $scope.friends        = [];
                $scope.cancelFriendSearch = false;
                $scope.showSearchLoader   = false;
                $scope.dublicate = false;
                $scope.toBelong = false;
                $scope.tagged_collection = []
                $scope.untagg_friend = {}
                $scope.choose = false;
                if($scope.viewalbum && $scope.viewalbum.length == 0)  $scope.viewalbum = viewalbum
                if(!$scope.viewalbum) $scope.viewalbum = viewalbum
                
                if(index === 0) $scope.pre_visible = false;
                if((leng-1)=== index) $scope.next_visible = false;


                $scope.tagged_friends_arry = function(index){
                    $scope.tagged_Friends = [];
                    if($scope.tagged_collection[index] === undefined){
                        angular.forEach($scope.viewalbum[index].tagged_friends_info, function(obj){
                            obj.user_id = obj.id;
                            obj.user_info = {};
                            obj.user_info.first_name = obj.first_name;
                            obj.user_info.last_name = obj.last_name;
                            $scope.tagged_Friends.push(obj)
                        });
                        $scope.tagged_collection[index] = $scope.tagged_Friends;
                    }else{
                       $scope.tagged_Friends = $scope.tagged_collection[index]
                    }
                    $scope.untagg_friend = JSON.parse(JSON.stringify($scope.tagged_Friends));
                };

                $scope.putFocus = function(){
                    document.getElementById('searchTagFriend').focus();
                }

                if($scope.parent_type === 'dashboard_post')
                {
                   $scope.media_id   = viewalbum[index].id;
                   $scope.img_src    = $scope.viewalbum[index].media_link;
                   $scope.img_date   = $scope.viewalbum[index].create_date.date;
                   $scope.user_id    = userdetails.id;
                   $scope.user_profile_image_thumb = userdetails.profile_image_thumb;
                   $scope.user_name = userdetails.first_name + ' ' + userdetails.last_name;

                }else if($scope.parent_type === 'user_profile_album_photo' || $scope.parent_type === 'club_album_photo' || $scope.parent_type === 'store_media' || $scope.parent_type === 'friend_album' || $scope.parent_type === 'friend_tagged_photos' || $scope.parent_type === 'user_tagged_photos' || $scope.parent_type === 'shop_post' || $scope.parent_type === 'club_post'){
                   $scope.media_id   = $scope.viewalbum[index].id;
                   $scope.img_src    = $scope.viewalbum[index].media_path;
                   $scope.user_id    = APP.currentUser.id;
                   $scope.user_profile_image_thumb = APP.currentUser.profile_img_thumb;
                   $scope.user_name = APP.currentUser.firstname + ' ' + APP.currentUser.lastname;
                   
                   if($scope.parent_type === 'club_album_photo'){
                        $scope.img_date   = '';
                        $scope.is_member= userdetails.is_member;
                        //console.log($scope.is_member);
                   }else{
                        if($scope.parent_type === 'user_profile_album_photo'){
                            $scope.tagged_friends_arry(index);
                            $scope.img_date   = userdetails[0].created_at.date;
                        }else if($scope.parent_type === 'store_media'){
                            $scope.img_date   = $scope.viewalbum[index].create_on.date;
                        }else{
                            $scope.img_date   = '' ;  
                        }
                        
                   }
                   if($scope.parent_type === 'friend_tagged_photos' || $scope.parent_type === 'user_tagged_photos'){
                        $scope.index = index;
                        $scope.toBelong = true;
                        if($routeParams.id && $scope.viewalbum[index].creater_id){
                            $scope.toBelong = undefined;
                        }else{
                            $scope.toBelong = true;
                        }

                        if ($scope.viewalbum[index].creater_id===APP.currentUser.id) $scope.toBelong = true;
                   }
                   
                }

                var modalInstance = $modal.open({
                    templateUrl: "app/views/img_modal.html",
                    controller: 'ModalController',
                    backdrop: 'static',
                    'static': true,
                    size: 'lg',
                    scope: $scope,
                });

                modalInstance.result.then(function (selectedItem) {
                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                    $scope.tagged_Friends = [];
                    $scope.UpdateTag      = false;
                });

                $scope.untagg = function(type){
                    $scope.modal_loader = true;
                    var opts ={};
                    opts.user_id = APP.currentUser.id;
                    opts.untag_user_id = $routeParams.id? $routeParams.id : APP.currentUser.id;
                    opts.media_id = $scope.viewalbum[$scope.index].id;
                    
                    AlbumService.removeTaggedPhoto(opts,function(data){
                        
                        if(data.code===101){
                            modalInstance.close();
                            var tempIndex = $scope.tagged_photo.indexOf($scope.viewalbum[$scope.index])
                            $scope.tagged_photo.splice(tempIndex,1)
                            // console.log($scope.album,$scope.photo_of_you)
                            if($scope.tagged_photo.length == 0){
                                $scope.album = true;// this code and after this code is not showing any modification
                                $scope.photo_of_you =false;//value set at modal is not reflecting at page
                                $("#taggedPhoto").addClass("ng-hide");//that why I added jquery to do the work
                                $("#albumColl").removeClass("ng-hide");
                            }
                        }else{
                            $scope.modal_loader = false;
                        }
                    })
                }

                $scope.change_image = function (index, viewablum, leng,id,type,changetype){
                    // 
                  $scope.pre_visible  = true;
                  $scope.modal_loader = true;
                  $scope.next_visible = true;
                  $scope.img_src = "";
                  $scope.media_index  = (changetype == 'pre' ? index - 1 : index + 1);
                  if($scope.media_index === 0) $scope.pre_visible = false;
                  if((leng-1) === $scope.media_index) $scope.next_visible = false;
                  
                  if($scope.parent_type === 'dashboard_post'){
                       $scope.media_id   = $scope.viewalbum[$scope.media_index].id;
                       $scope.img_src    = $scope.viewalbum[$scope.media_index].media_link;
                       $scope.img_date   = $scope.viewalbum[$scope.media_index].create_date.date;
                    }else if($scope.parent_type === 'user_profile_album_photo' || $scope.parent_type === 'club_album_photo' || $scope.parent_type === 'store_media' || $scope.parent_type === 'friend_album' ||  $scope.parent_type === 'friend_tagged_photos' || $scope.parent_type === 'user_tagged_photos' || $scope.parent_type === 'shop_post' || $scope.parent_type === 'club_post'){
                       $scope.media_id   = $scope.viewalbum[$scope.media_index].id;
                       $scope.img_src    = $scope.viewalbum[$scope.media_index].media_path;
                       $scope.user_id    = APP.currentUser.id;
                       $scope.user_profile_image_thumb = APP.currentUser.profile_img_thumb;
                       $scope.user_name = APP.currentUser.firstname + ' ' + APP.currentUser.lastname;
                       if($scope.parent_type === 'user_profile_album_photo'){
                            $scope.img_date   = userdetails[0].created_at.date;
                            $scope.tagged_friends_arry($scope.media_index);
                       }
                       if($scope.parent_type === 'friend_tagged_photos' || $scope.parent_type === 'user_tagged_photos'){
                            
                            $scope.toBelong = true;
                            if($routeParams.id && $scope.viewalbum[$scope.media_index].creater_id){
                                $scope.toBelong = undefined;
                            }else{
                                $scope.toBelong = true;
                            }
                            if ($scope.viewalbum[$scope.media_index].creater_id===APP.currentUser.id) $scope.toBelong = true;
                       }
                    }
                    $timeout(function(){
                        $scope.modal_loader = false
                    },1000);
                }

                $scope.tagFriendSuggestion = function(event, friendname){
                    if(event.keyCode===40){
                        event.preventDefault();
                        if($scope.friendTagIndex+1 !== $scope.friends.length){
                            $scope.friendTagIndex++;
                        }
                    }else if(event.keyCode===38){
                        event.preventDefault();
                        if($scope.friendTagIndex-1 !== -1){
                            $scope.friendTagIndex--;
                        }
                    }else if(event.keyCode===13){
                           if($scope.friends.length > 0  && $scope.friendTagIndex!==-1) $scope.selectFriend($scope.friends[$scope.friendTagIndex]);
                    }
                    if($('#searchTagFriend').val().trim()==="") $scope.showFriendList = false;
                    if(!(event.keyCode>=65 && event.keyCode<=95)) return;
                    $scope.cancelFriendSearch = false;
                    var opts = {};
                    opts.user_id = APP.currentUser.id;
                    friendname ? opts.friend_name = friendname : opts.friend_name = "";
                    opts.session_id = APP.currentUser.id;
                    opts.limit_start = 0;
                    opts.limit_size =  APP.friend_list_pagination.end;
                    $scope.showSearchLoader = true;

                    ProfileService.searchFriends(opts,function(data){
                        $scope.showSearchLoader = false;
                        if($scope.cancelFriendSearch === false){
                            if(data.data.users.length>0) $scope.showFriendList = true;
                            else $scope.showFriendList = false;
                            $scope.friends = data.data.users;
                        }
                    })
                };
                
                $scope.Tagtoggle = function(){
                    $scope.UpdateTag = !$scope.UpdateTag;
                }

                $scope.taggService = function(){
                    var pre_visible_status = $scope.pre_visible;
                    var next_visible_status = $scope.next_visible;
                    $scope.pre_visible = false;
                    $scope.next_visible = false;
                    var opts = {};
                    opts.user_id = APP.currentUser.id;
                    opts.album_id = $scope.parent_id;
                    opts.post_type = 1;
                    opts.media_id = [$scope.media_id];
                    var frnd_array = []
                    angular.forEach($scope.tagged_Friends,function(index){
                        frnd_array.push(index.user_id);
                    });
                    opts.tagged_friends = frnd_array.join(',')
                    $scope.UpdateTag = false;
                    $scope.TagLoader = true;
                    if($scope.tagged_Friends.length > 0 ){
                       AlbumService.photoTaging(opts,function(data){
                            if(data.code === 101){
                                $scope.choose = true;
                                $scope.TagLoader = false;
                                angular.forEach($scope.tagged_Friends,function(obj){
                                    if(!obj.first_name) obj.first_name = obj.user_info.first_name;
                                    if(!obj.last_name) obj.last_name = obj.user_info.last_name;
                                });
                                
                                $scope.untagg_friend = JSON.parse(JSON.stringify($scope.tagged_Friends));
                            }
                            $scope.pre_visible = pre_visible_status;
                            $scope.next_visible = next_visible_status;
                            $scope.viewalbum[$scope.media_index].tagged_friends_info = $scope.untagg_friend
                        }) 
                   }else{
                        if($scope.untagg_friend.length > 0){
                            var friend_id = [];
                            
                            angular.forEach($scope.untagg_friend, function(friend){
                                id_on = friend.id ? friend.id : friend.user_info.id;
                                friend_id.push(id_on)
                            })
                            var opts ={};
                            opts.user_id = APP.currentUser.id;
                            opts.untag_user_id = friend_id.join(',');
                            opts.media_id = $scope.media_id;

                            AlbumService.removeTaggedPhoto(opts,function(data){
                                if(data.code===101){
                                    $scope.viewalbum[$scope.media_index].tagged_friends_info = $scope.untagg_friend
                                }else{
                                }
                            })
                            $scope.untagg_friend = [];
                            $scope.TagLoader = false;
                            $scope.pre_visible = pre_visible_status;
                            $scope.next_visible = next_visible_status;                            
                        }else{
                            $scope.TagLoader = false;
                            $scope.pre_visible = pre_visible_status;
                            $scope.next_visible = next_visible_status; 
                        }
                   }
                    
                }

                $scope.selectFriend = function(friendInfo){
                    $scope.dublicate = false;
                    $scope.choose = false;  
                    angular.forEach($scope.tagged_Friends,function(index){
                        if(index.user_id === friendInfo.user_id){
                            $scope.dublicate = true;
                        }
                    });

                    if($scope.dublicate === false){
                        $scope.tagged_Friends.push(friendInfo);
                        $scope.friends = [];
                        $scope.cancelFriendSearch = true;
                        $scope.friendTagIndex = -1;
                        angular.element('#searchTagFriend').val("");
                        $scope.showFriendList = false;
                    }else{
                        $scope.friends = [];
                        $scope.cancelFriendSearch = true;
                        $scope.friendTagIndex = -1;
                        angular.element('#searchTagFriend').val("");
                        $scope.showFriendList = false;
                    }
                };
                
                // stop the service for loading more service
                $scope.lostFocus = function(){
                    $timeout(function(){
                        $scope.friends = [];
                        $scope.cancelFriendSearch = true;
                        $scope.friendTagIndex = -1;
                        angular.element('#searchTagFriend').val("");
                        $scope.showFriendList = false;
                    },300);
                };
                // Remove selected friend
                $scope.removeTagFriend = function(friendIndex){
                    $scope.tagged_Friends.splice(friendIndex,1);
                    if($scope.tagged_Friends.length===0) {
                      $scope.choose = true;  
                    }
                };

                
                $scope.getFile = function () {
                    /*var tempopts = {};
                        tempopts.user_id = APP.currentUser.id;
                        tempopts.postid = attrs.postId;
                        tempopts.body = scope.i18n.editprofile.comment_image_test;
                        tempopts.comment_type = '0';
                        tempopts.image_id = '';
                        tempopts.comment_id = '';
                    var len = scope.commentFiles.length;
                    ProfileService.createDashboardCommentImage(tempopts, scope.commentFiles[0], function(data){
                        if(data.code == 101) {
                            scope.comment_id = data.data.id;
                            scope.imgSrc.push(data.data);
                            scope.image_id.push(data.data.media_id);
                            tempopts.comment_id = scope.comment_id;
                            scope.selectInProgress.splice(0,1);
                            for(j=1; j < len; j++){
                                ProfileService.createDashboardCommentImage(tempopts, scope.commentFiles[j], function(data){
                                    if(data.code == 101) {
                                        scope.comment_id = data.data.id;
                                        scope.imgSrc.push(data.data);
                                        scope.image_id.push(data.data.media_id);
                                        scope.selectInProgress.splice(0,1);
                                    }else{
                                        scope.commentErrCls = 'text-red';
                                        scope.commentErrMsg = scope.i18n.dashboard.postcomment.upload_media_fail;
                                    }
                                });
                            }
                        }else{
                            scope.commentErrCls = 'text-red';
                            scope.commentErrMsg = scope.i18n.dashboard.postcomment.upload_media_fail;
                        }
                    });
                    setTimeout(function(){
                        scope.commentErrCls = '';
                        scope.commentErrMsg = '';
                    }, 15000);
                    */
                };

                $scope.removeImage = function(index) {
                    /*var tempMedia = scope.image_id[index];
                    var opts = {};
                        opts.user_id = APP.currentUser.id;
                        opts.postid = attrs.postId;
                        opts.image_id = tempMedia;
                    ProfileService.deleteDashboardMediaComments(opts, function(data){
                      if(data.code == 101) {
                        scope.imgSrc.splice(index, 1);
                        scope.isInProgress.splice(index, 1);
                        if(scope.imgSrc.length == 0){
                            scope.commentFiles == [];
                            scope.file = [];
                        }
                        scope.image_id.splice(index, 1);
                        if(scope.imgSrc.length == 0){
                            scope.selectInProgress = [];
                            scope.showImgSelect = true;
                            scope.showPreview = false;
                        }
                      } else {
                        scope.showImgSelect = true;
                        scope.showPreview = true;
                        scope.commentErrCls = 'text-red';
                        scope.commentErrMsg = scope.i18n.dashboard.postcomment.remove_img_fail;
                      }
                        setTimeout(function(){
                        scope.commentErrCls = '';
                        scope.commentErrMsg = '';
                        }, 15000);
                    });*/
                };

                $scope.addComment = function(){
                    /*scope.postIndx = attrs.postIndx;
                    scope.comments = attrs.loadComment;
                    scope.finalCommentInProcess = true;
                    scope.commentErrMsg = "";
                    scope.commentErrCls = '';
                    var filescount = scope.imgSrc.length;
                    if ((scope.commentText == undefined  || scope.commentText == '') && filescount == 0) {
                        scope.finalCommentInProcess = false;
                        scope.commentErrCls = 'text-red';
                        scope.commentErrMsg = scope.i18n.editprofile.photo_update;
                        setTimeout(function(){
                            scope.commentErrCls = '';
                            scope.commentErrMsg = '';
                        },15000);
                        return false;
                    }
                    var opts = {};
                    opts.user_id = APP.currentUser.id;
                    opts.postid = attrs.postId;
                    opts.body = scope.commentText;
                    opts.media_id = [];
                    opts.comment_id = "";
                    if(scope.image_id.length != 0){
                      opts.media_id = scope.image_id;
                    }
                    if(scope.comment_id != ''){
                      opts.comment_id = scope.comment_id;  
                    }
                    opts.comment_type = '1';
                    ProfileService.createDashboardCommentFinal(opts, function(data){
                        if(data.code == 101) {
                            scope.commentText = '';
                            scope.post.comments.push(data.data);
                            scope.finalCommentInProcess = false;
                            scope.commentErrMsg = '';
                            scope.commentErrCls = '';
                            scope.commentText = '';
                            scope.commentFiles = [];
                            scope.imgSrc = [];
                            scope.file = [];
                            scope.showPreview = false;
                            scope.showImgSelect = true;
                            scope.comment_id = '';
                        } else {
                            scope.finalCommentInProcess = false;
                            scope.commentErrCls = 'text-red';
                            scope.commentErrMsg = scope.i18n.editprofile.comment_no_post;
                            scope.commentFiles = [];
                            scope.imgSrc = [];
                            scope.file = []
                            scope.showPreview = false;
                            scope.showImgSelect = true;
                            scope.comment_id = '';
                        }
                        setTimeout(function(){
                            scope.commentErrCls = '';
                            scope.commentErrMsg = '';
                        }, 15000);
                    });*/
                };

                $scope.rateThisAlbum = function(rating, album_id, type){
                var update = "";
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.type = 'club_album';
                opts.type_id = album_id;
                opts.rate = rating;
                
                if($scope.albumDetails.is_rated){
                    update = "update";
                }else{
                    update = "add";
                }
                $scope.waitRateResponse = true;
                ProfileService.rateThis(opts, update, function(data){
                    if(data.code === 101 && data.message === "SUCCESS"){
                        $scope.albumDetails.avg_rate = data.data.avg_rate;
                        $scope.albumDetails.no_of_votes = data.data.no_of_votes;
                        $scope.albumDetails.is_rated = true;
                    }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                        $scope.albumDetails.current_user_rate = 0;
                        $scope.albumDetails.is_rated = true;
                    }
                    $scope.waitRateResponse = false;
                });
            };
            $scope.waitRateResponse = false;
            $scope.ratePicture = function(rating, picture_id, mediaIndex){
                    var update = "";
                    var opts = {};
                    opts.user_id = APP.currentUser.id;
                    if($scope.parent_type == 'friend_album'){
                        opts.type = 'user_profile_album_photo'
                    }else {
                        opts.type = $scope.parent_type;
                    }
                    opts.type_id = picture_id;
                    opts.rate = rating;
                    if($scope.viewalbum[mediaIndex].is_rated){
                        update = "update";
                    }else{
                        update = "add";
                    }
                    $scope.waitRateResponse = true;
                    ProfileService.rateThis(opts, update, function(data){
                        if(data.code === 101 && data.message === "SUCCESS"){
                            $scope.viewalbum[mediaIndex].avg_rate = data.data.avg_rate;
                            $scope.viewalbum[mediaIndex].no_of_votes = data.data.no_of_votes;
                            $scope.viewalbum[mediaIndex].is_rated = true;
                        }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                            $scope.viewalbum[mediaIndex].current_user_rate = 0;
                            $scope.viewalbum[mediaIndex].is_rated = true;
                        }
                        $scope.waitRateResponse = false;
                    });
                };
            $scope.removeRating = function(pictureIndex , mediaIndex){
                var opts = {};
                opts.user_id = APP.currentUser.id;
                if($scope.parent_type == 'friend_album'){
                    opts.type = 'user_profile_album_photo'
                }else {
                    opts.type = $scope.parent_type;
                }
                opts.type_id = pictureIndex;
                if($scope.waitRateResponse === false){
                    $scope.waitRateResponse = true;
                }else{
                    return;
                }
                ProfileService.removeRating(opts,function(data){
                    if(data.code == 101 && data.message == "SUCCESS"){
                        $scope.viewalbum[mediaIndex].current_user_rate = 0;
                        $scope.viewalbum[mediaIndex].avg_rate = data.data.avg_rate;
                        $scope.viewalbum[mediaIndex].no_of_votes = data.data.no_of_votes;
                        $scope.viewalbum[mediaIndex].is_rated = false;
                    }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                        $scope.viewalbum[mediaIndex].current_user_rate = 0;
                        $scope.viewalbum[mediaIndex].is_rated = false;
                    }
                $scope.waitRateResponse = false;
                });
            };

            $scope.findPeopleRate = function(id, count_Vote){
                if(count_Vote === 0 ){
                    return false;
                }
                var opts = {};
                $scope.ratedUsers = {};
                var modalInstance = $modal.open({
                            templateUrl: 'app/views/find_people.html',
                            controller: 'ModalController',
                            size: 'lg',
                            scope: $scope,
                });
                $scope.showPeopleLoader = true;
                if($scope.parent_type == 'friend_album'){
                    opts.type = 'user_profile_album_photo'
                }else {
                    opts.type = $scope.parent_type;
                }
                opts.type_id = id;
                opts.session_id = APP.currentUser.id;
                ProfileService.findPeople(opts,function(data){
                    if(data.code == 101 && data.message == "SUCCESS"){
                        $scope.showPeopleLoader = false;
                        $scope.ratedUsers = data.data.users_rated;
                        if(data.data.users_rated.length == 0){
                            $scope.message = $scope.i18n.dashboard.no_vote;
                        }
                    }else{
                        $scope.showPeopleLoader = false;
                    }
                });
                modalInstance.result.then(function (selectedItem) {
                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });

                $scope.viewFriendProile = function(friendId){
                    modalInstance.dismiss('cancel');
                    $location.path('/viewfriend/'+friendId);
                };
            };
            //
            $scope.averageRating = function(rating){
                return new Array(Math.ceil(rating));
            };

            $scope.blankStar = function(rating){
                if((5-Math.ceil(rating)) > 0){
                    return new Array(5-Math.ceil(rating));
                }else{
                    return 0;
                }
            };

            $scope.max = 5;
            $scope.isReadonly = false;
            $scope.viewUserProfile = function(friendId){
                if(friendId == APP.currentUser.id){
                    modalInstance.dismiss('cancel');
                    $location.path('profiles');
                }else{
                    modalInstance.dismiss('cancel');
                    $location.path('/viewfriend/'+friendId);
                }
            };

            /*  $scope.rateThis = function(value, id, index){
                $scope.ratePost(value, id, index);
            };*/
            
            $scope.ratingStates = [
                {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
            ];
            }
        }
    };
}]);


app.directive('rateMe',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
    return {
            templateUrl: 'app/views/rating_star_comment.html',
            restrict: "E",
            scope: true,
            controller : function($scope, $modal, $log, ProfileService){
                $scope.hovering = function(value) {
                    $scope.overStar = value;
                    $scope.percent = 100 * (value / $scope.max);
                };
                $scope.averageVoting = 0;
                $scope.vote_count = 0;
                $scope.waitRateResponse = false;
                $scope.findPeopleRate = function(id, type, count_Vote){
                    if(count_Vote === 0 ){
                        return false;
                    }
                    var opts = {};
                    $scope.ratedUsers = {};
                    var modalInstance = $modal.open({
                                templateUrl: 'app/views/find_people.html',
                                controller: 'ModalController',
                                size: 'lg',
                                scope: $scope,
                    });
                    $scope.showPeopleLoader = true;
                    opts.type = type;
                    opts.type_id = id;
                    opts.session_id = APP.currentUser.id;
                    ProfileService.findPeople(opts,function(data){
                        if(data.code == 101 && data.message == "SUCCESS"){
                            $scope.showPeopleLoader = false;
                            $scope.ratedUsers = data.data.users_rated;
                            if(data.data.users_rated.length == 0){
                                $scope.message = $scope.i18n.dashboard.no_vote;
                            }
                        }else{
                            $scope.showPeopleLoader = false;
                        }
                    });
                    modalInstance.result.then(function (selectedItem) {
                    }, function () {
                        $log.info('Modal dismissed at: ' + new Date());
                    });

                    $scope.viewFriendProile = function(friendId){
                        modalInstance.dismiss('cancel');
                        $location.path('/viewfriend/'+friendId);
                    };
                };

                $scope.rateComment = function(rating, comment_id, postIndex, commentIndex){
                    var update = "";
                    var opts = {};
                    opts.user_id = APP.currentUser.id;
                    opts.type = "dashboard_post_comment";
                    opts.type_id = comment_id;
                    opts.rate = rating;
                    if($scope.userPostList[postIndex].comments[commentIndex].is_rated){
                        update = "update";
                    }else{
                        update = "add";
                    }
                    $scope.waitRateResponse = true;
                    ProfileService.rateThis(opts, update, function(data){
                        if(data.code === 101 && data.message === "SUCCESS"){
                            $scope.userPostList[postIndex].comments[commentIndex].avg_rate = data.data.avg_rate;
                            $scope.userPostList[postIndex].comments[commentIndex].no_of_votes = data.data.no_of_votes;
                            $scope.userPostList[postIndex].comments[commentIndex].is_rated = true;
                        }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                            $scope.userPostList[postIndex].comments[commentIndex].current_user_rate = 0;
                            $scope.userPostList[postIndex].comments[commentIndex].is_rated = true;
                        }
                        $scope.waitRateResponse = false;
                    });
                };

                $scope.removeCommentRating = function(comment_id, postIndx, indx){
                    var opts = {};
                    opts.user_id = APP.currentUser.id;
                    opts.type = "dashboard_post_comment";
                    opts.type_id = comment_id;
                    if($scope.WaitDeleteResponse === false){
                        $scope.WaitDeleteResponse = true;
                        $scope.waitRateResponse = true;
                    }else{
                        return;
                    }
                    ProfileService.removeRating(opts,function(data){
                        if(data.code == 101 && data.message == "SUCCESS"){
                            $scope.userPostList[postIndx].comments[indx].current_user_rate = 0;
                            $scope.userPostList[postIndx].comments[indx].avg_rate = data.data.avg_rate;
                            $scope.userPostList[postIndx].comments[indx].no_of_votes = data.data.no_of_votes;
                            $scope.userPostList[postIndx].comments[indx].is_rated = false;
                        }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                            $scope.userPostList[postIndx].comments[indx].current_user_rate = 0;
                            $scope.userPostList[postIndx].comments[indx].is_rated = false;
                        }
                    $scope.WaitDeleteResponse = false;
                    $scope.waitRateResponse = false;
                    });
                };

                $scope.averageRating = function(rating){
                    return new Array(Math.ceil(rating));
                };

                $scope.blankStar = function(rating){
                    if((5-Math.ceil(rating)) > 0){
                        return new Array(5-Math.ceil(rating));
                    }else{
                        return 0;
                    }
                };

                $scope.max = 5;
                $scope.isReadonly = false;

                /*  $scope.rateThis = function(value, id, index){
                    $scope.ratePost(value, id, index);
                };*/

                $scope.ratingStates = [
                    {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'}
                ];
            },
            link: function (scope, element, attrs) {
            }
      }
}]);
app.directive('rateAlbumDir',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
    return {
        templateUrl: 'app/views/rating_star_album.html',
        restrict: "E",
        scope: true,
        controller : function($scope, $modal, $log, ProfileService){
            $scope.hovering = function(value) {
                $scope.overStar = value;
                $scope.percent = 100 * (value / $scope.max);
            };
            $scope.averageVoting = 0;
            $scope.vote_count = 0;
            $scope.waitRateResponse = false;
            $scope.findPeopleRate = function(id, type, count_Vote){
                //console.log(count_Vote);
                if(count_Vote === 0 ){
                    return false;
                }
                var opts = {};
                $scope.ratedUsers = {};
                var modalInstance = $modal.open({
                            templateUrl: 'app/views/find_people.html',
                            controller: 'ModalController',
                            size: 'lg',
                            scope: $scope,
                });
                $scope.showPeopleLoader = true;
                opts.type = type;
                opts.type_id = id;
                opts.session_id = APP.currentUser.id;
                ProfileService.findPeople(opts,function(data){
                    if(data.code == 101 && data.message == "SUCCESS"){
                        $scope.showPeopleLoader = false;
                        $scope.ratedUsers = data.data.users_rated;
                        if(data.data.users_rated.length == 0){
                            $scope.message = $scope.i18n.dashboard.no_vote;
                        }
                    }else{
                        $scope.showPeopleLoader = false;
                    }
                });
                modalInstance.result.then(function (selectedItem) {
                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });

                $scope.viewFriendProile = function(friendId){
                    modalInstance.dismiss('cancel');
                    $location.path('/viewfriend/'+friendId);
                };
            };

            $scope.rateThisAlbum = function(rating, album_id, type){
                var update = "";
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.type = type;
                opts.type_id = album_id;
                opts.rate = rating;
                
                if($scope.albumDetails.is_rated){
                    update = "update";
                }else{
                    update = "add";
                }
                $scope.waitRateResponse = true;
                ProfileService.rateThis(opts, update, function(data){
                    if(data.code === 101 && data.message === "SUCCESS"){
                        $scope.albumDetails.avg_rate = data.data.avg_rate;
                        $scope.albumDetails.no_of_votes = data.data.no_of_votes;
                        $scope.albumDetails.is_rated = true;
                    }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                        $scope.albumDetails.current_user_rate = 0;
                        $scope.albumDetails.is_rated = true;
                    }
                    $scope.waitRateResponse = false;
                });
            };

            $scope.removeAlbumRating = function(albumIndex){
                //console.log($scope.waitRateResponse);
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.type = "user_profile_album";
                opts.type_id = albumIndex;
                if($scope.waitRateResponse === false){
                    $scope.waitRateResponse = true;
                }else{
                    return;
                }
                ProfileService.removeRating(opts,function(data){
                    if(data.code == 101 && data.message == "SUCCESS"){
                        $scope.albumDetails.current_user_rate = 0;
                        $scope.albumDetails.avg_rate = data.data.avg_rate;
                        $scope.albumDetails.no_of_votes = data.data.no_of_votes;
                        $scope.albumDetails.is_rated = false;
                    }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                        $scope.albumDetails.current_user_rate = 0;
                        $scope.albumDetails.is_rated = false;
                    }
                $scope.waitRateResponse = false;
                });
            };
            //console.log("hiiii" + rating );
            $scope.averageRating = function(rating){
                return new Array(Math.ceil(rating));
            };

            $scope.blankStar = function(rating){
                if((5-Math.ceil(rating)) > 0){
                    return new Array(5-Math.ceil(rating));
                }else{
                    return 0;
                }
            };

            $scope.max = 5;
            $scope.isReadonly = false;

/*            $scope.rateThis = function(value, id, index){
                $scope.ratePost(value, id, index);
            };*/

            $scope.ratingStates = [
                {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
            ];
        },
        link: function (scope, element, attrs) {
            

        }
    }
}]);
app.directive('rateMeClub',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
    return {
        templateUrl: 'app/views/ratingStarClub.html',
        restrict: "E",
        scope: true,
        controller : function($scope, $modal, $log, ProfileService){
            $scope.hovering = function(value) {
                $scope.overStar = value;
                $scope.percent = 100 * (value / $scope.max);
            };
            $scope.avg_rate = true;
            $scope.vote_count =0
            $scope.averageVoting = 0;
            $scope.vote_count = 0;
            $scope.waitRateResponse = false;
            $scope.findPeopleRate = function(id, count_Vote){
                if(count_Vote === 0 ){
                    return false;
                }
                var opts = {};
                $scope.ratedUsers = {};
                var modalInstance = $modal.open({
                            templateUrl: 'app/views/find_people.html',
                            controller: 'ModalController',
                            size: 'lg',
                            scope: $scope,
                });
                $scope.showPeopleLoader = true;
                opts.type = "club_post_comment";
                opts.type_id = id;
                opts.session_id = APP.currentUser.id;
                ProfileService.findPeople(opts,function(data){
                    if(data.code == 101 && data.message == "SUCCESS"){
                        $scope.showPeopleLoader = false;
                        $scope.ratedUsers = data.data.users_rated;
                        if(data.data.users_rated.length == 0){
                            $scope.message = $scope.i18n.dashboard.no_vote;
                        }
                    }else{
                        $scope.showPeopleLoader = false;
                    }
                });
                modalInstance.result.then(function (selectedItem) {
                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });

                $scope.viewFriendProile = function(friendId){
                    modalInstance.dismiss('cancel');
                    $location.path('/viewfriend/'+friendId);
                };
            };

            $scope.rateComment = function(rating, comment_id, postIndex, commentIndex){
                var update = "";
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.type = "club_post_comment";
                opts.type_id = comment_id;
                opts.rate = rating;
                if($scope.posts[postIndex].comments[commentIndex].is_rated){
                    update = "update";
                }else{
                    update = "add";
                }
                $scope.waitRateResponse = true;
                ProfileService.rateThis(opts, update, function(data){
                    if(data.code === 101 && data.message === "SUCCESS"){
                        $scope.posts[postIndex].comments[commentIndex].avg_rate = data.data.avg_rate;
                        $scope.posts[postIndex].comments[commentIndex].no_of_votes = data.data.no_of_votes;
                        $scope.posts[postIndex].comments[commentIndex].is_rated = true;
                    }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                        $scope.posts[postIndex].comments[commentIndex].current_user_rate = 0;
                        $scope.posts[postIndex].comments[commentIndex].is_rated = true;
                    }
                    $scope.waitRateResponse = false;
                });
            };

            $scope.removeCommentRating = function(comment_id, postIndx, indx){
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.type = "club_post_comment";
                opts.type_id = comment_id;
                if($scope.WaitDeleteResponse === false){
                    $scope.WaitDeleteResponse = true;
                    $scope.waitRateResponse = true;
                }else{
                    return;
                }
                ProfileService.removeRating(opts,function(data){
                    if(data.code == 101 && data.message == "SUCCESS"){
                        $scope.posts[postIndx].comments[indx].current_user_rate = 0;
                        $scope.posts[postIndx].comments[indx].avg_rate = data.data.avg_rate;
                        $scope.posts[postIndx].comments[indx].no_of_votes = data.data.no_of_votes;
                        $scope.posts[postIndx].comments[indx].is_rated = false;
                    }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                        $scope.posts[postIndx].comments[indx].current_user_rate = 0;
                        $scope.posts[postIndx].comments[indx].is_rated = false;
                    }
                $scope.WaitDeleteResponse = false;
                $scope.waitRateResponse = false;
                });
            };

            $scope.averageRating = function(rating){
                return new Array(Math.ceil(rating));
            };

            $scope.blankStar = function(rating){
                if((5-Math.ceil(rating)) > 0){
                    return new Array(5-Math.ceil(rating));
                }else{
                    return 0;
                }
            };

            $scope.max = 5;
            $scope.isReadonly = false;

            /*  $scope.rateThis = function(value, id, index){
                $scope.ratePost(value, id, index);
            };*/

            $scope.ratingStates = [
                {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
            ];
        },
        link: function (scope, element, attrs) {
            

        }
    }
}]);
    
app.directive('rateShopComment',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
    return {
        templateUrl: 'app/views/ratingStarClub.html',
        restrict: "E",
        scope: true,
        controller : function($scope, $modal, $log, ProfileService){
            $scope.hovering = function(value) {
                $scope.overStar = value;
                $scope.percent = 100 * (value / $scope.max);
            };
            $scope.avg_rate = true;
            $scope.vote_count =0
            $scope.averageVoting = 0;
            $scope.vote_count = 0;
            $scope.waitRateResponse = false;
            $scope.WaitDeleteResponse = false ;
            $scope.findPeopleRate = function(id, count_Vote){
                if(count_Vote === 0 ){
                    return false;
                }
                var opts = {};
                $scope.ratedUsers = {};
                var modalInstance = $modal.open({
                            templateUrl: 'app/views/find_people.html',
                            controller: 'ModalController',
                            size: 'lg',
                            scope: $scope,
                });
                $scope.showPeopleLoader = true;
                opts.type = "store_post_comment";
                opts.type_id = id;
                opts.session_id = APP.currentUser.id;
                ProfileService.findPeople(opts,function(data){
                    if(data.code == 101 && data.message == "SUCCESS"){
                        $scope.showPeopleLoader = false;
                        $scope.ratedUsers = data.data.users_rated;
                        if(data.data.users_rated.length == 0){
                            $scope.message = $scope.i18n.dashboard.no_vote;
                        }
                    }else{
                        $scope.showPeopleLoader = false;
                    }
                });
                modalInstance.result.then(function (selectedItem) {
                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });

                $scope.viewFriendProile = function(friendId){
                    modalInstance.dismiss('cancel');
                    $location.path('/viewfriend/'+friendId);
                };
            };

            $scope.rateComment = function(rating, comment_id, postIndex, commentIndex){
                var update = "";
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.type = "store_post_comment";
                opts.type_id = comment_id;
                opts.rate = rating;
                if($scope.posts[postIndex].comments[commentIndex].is_rated){
                    update = "update";
                }else{
                    update = "add";
                }
                $scope.waitRateResponse = true;
                ProfileService.rateThis(opts, update, function(data){
                    if(data.code === 101 && data.message === "SUCCESS"){
                        $scope.posts[postIndex].comments[commentIndex].avg_rate = data.data.avg_rate;
                        $scope.posts[postIndex].comments[commentIndex].no_of_votes = data.data.no_of_votes;
                        $scope.posts[postIndex].comments[commentIndex].is_rated = true;
                    }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                        $scope.posts[postIndex].comments[commentIndex].current_user_rate = 0;
                        $scope.posts[postIndex].comments[commentIndex].is_rated = true;
                    }
                    $scope.waitRateResponse = false;
                });
            };

            $scope.removeCommentRating = function(comment_id, postIndx, indx){
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.type = "store_post_comment";
                opts.type_id = comment_id;
                if($scope.WaitDeleteResponse === false){
                    $scope.WaitDeleteResponse = true;
                    $scope.waitRateResponse = true;
                }else{
                    return;
                }
                ProfileService.removeRating(opts,function(data){
                   if(data.code == 101 && data.message == "SUCCESS"){
                        $scope.posts[postIndx].comments[indx].current_user_rate = 0;
                        $scope.posts[postIndx].comments[indx].avg_rate = data.data.avg_rate;
                        $scope.posts[postIndx].comments[indx].no_of_votes = data.data.no_of_votes;
                        $scope.posts[postIndx].comments[indx].is_rated = false;
                    }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                        $scope.posts[postIndx].comments[indx].current_user_rate = 0;
                        $scope.posts[postIndx].comments[indx].is_rated = false;
                    }
                $scope.WaitDeleteResponse = false;
                $scope.waitRateResponse = false;
                });
            };

            $scope.averageRating = function(rating){
                return new Array(Math.ceil(rating));
            };

            $scope.blankStar = function(rating){
                if((5-Math.ceil(rating)) > 0){
                    return new Array(5-Math.ceil(rating));
                }else{
                    return 0;
                }
            };

            $scope.max = 5;
            $scope.isReadonly = false;

/*            $scope.rateThis = function(value, id, index){
                $scope.ratePost(value, id, index);
            };*/

            $scope.ratingStates = [
                {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
            ];
        },
        link: function (scope, element, attrs) {
            

        }
    }
}]);

app.controller('rateAlbum',['$scope', '$modal', '$log', '$location', 'ProfileService', function($scope, $modal, $log, $location, ProfileService){

        $scope.hovering = function(value) {
            $scope.overStar = value;
            $scope.percent = 100 * (value / $scope.max);
        };

        $scope.averageVoting = 0;
        $scope.vote_count = 0;
        $scope.waitRateResponse = false;
        $scope.findPeopleRate = function(id, type, count_Vote){
            if(count_Vote === 0 ){
                return false;
            }
            var opts = {};
            $scope.ratedUsers = {};
            var modalInstance = $modal.open({
                        templateUrl: 'app/views/find_people.html',
                        controller: 'ModalController',
                        size: 'lg',
                        scope: $scope,
            });
            $scope.showPeopleLoader = true;
            opts.type = type;
            opts.type_id = id;
            opts.session_id = APP.currentUser.id;
            ProfileService.findPeople(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.showPeopleLoader = false;
                    $scope.ratedUsers = data.data.users_rated;
                    if(data.data.users_rated.length == 0){
                        $scope.message = $scope.i18n.dashboard.no_vote;
                    }
                }else{
                    $scope.showPeopleLoader = false;
                }
            });
            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });

            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
        };

        $scope.averageRating = function(rating){
            return new Array(Math.ceil(rating));
        };

        $scope.blankStar = function(rating){
            if((5-Math.ceil(rating)) > 0){
                return new Array(5-Math.ceil(rating));
            }else{
                return 0;
            }
        };

        $scope.max = 5;
        $scope.isReadonly = false;

        $scope.ratingStates = [
            {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
        ];
}]);
app.directive('rateAlbumDirClub',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
    return {
        templateUrl: 'app/views/rating_star_album_club.html',
        restrict: "E",
        scope: true,
        controller : function($scope, $modal, $log, ProfileService){
            $scope.hovering = function(value) {
                $scope.overStar = value;
                $scope.percent = 100 * (value / $scope.max);
            };
            $scope.averageVoting = 0;
            $scope.vote_count = 0;
            $scope.waitRateResponse = false;
            $scope.findPeopleRate = function(id, type, count_Vote){
                if(count_Vote === 0 ){
                    return false;
                }
                var opts = {};
                $scope.ratedUsers = {};
                var modalInstance = $modal.open({
                            templateUrl: 'app/views/find_people.html',
                            controller: 'ModalController',
                            size: 'lg',
                            scope: $scope,
                });
                $scope.showPeopleLoader = true;
                opts.type = 'club_album';
                opts.type_id = id;
                opts.session_id = APP.currentUser.id;
                ProfileService.findPeople(opts,function(data){
                    if(data.code == 101 && data.message == "SUCCESS"){
                        $scope.showPeopleLoader = false;
                        $scope.ratedUsers = data.data.users_rated;
                        if(data.data.users_rated.length == 0){
                            $scope.message = $scope.i18n.dashboard.no_vote;
                        }
                    }else{
                        $scope.showPeopleLoader = false;
                    }
                });
                modalInstance.result.then(function (selectedItem) {
                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });

                $scope.viewFriendProile = function(friendId){
                    modalInstance.dismiss('cancel');
                    $location.path('/viewfriend/'+friendId);
                };
            };

            $scope.rateThisAlbum = function(rating, album_id, type){
                var update = "";
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.type = 'club_album';
                opts.type_id = album_id;
                opts.rate = rating;
                
                if($scope.albumDetails.is_rated){
                    update = "update";
                }else{
                    update = "add";
                }
                $scope.waitRateResponse = true;
                ProfileService.rateThis(opts, update, function(data){
                    if(data.code === 101 && data.message === "SUCCESS"){
                        $scope.albumDetails.avg_rate = data.data.avg_rate;
                        $scope.albumDetails.no_of_votes = data.data.no_of_votes;
                        $scope.albumDetails.is_rated = true;
                    }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                        $scope.albumDetails.current_user_rate = 0;
                        $scope.albumDetails.is_rated = true;
                    }
                    $scope.waitRateResponse = false;
                });
            };

            $scope.removeAlbumRating = function(albumIndex){
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.type = "club_album";
                opts.type_id = albumIndex;
                if($scope.waitRateResponse === false){
                    $scope.waitRateResponse = true;
                }else{
                    return;
                }
                ProfileService.removeRating(opts,function(data){
                    if(data.code == 101 && data.message == "SUCCESS"){
                        $scope.albumDetails.current_user_rate = 0;
                        $scope.albumDetails.avg_rate = data.data.avg_rate;
                        $scope.albumDetails.no_of_votes = data.data.no_of_votes;
                        $scope.albumDetails.is_rated = false;
                    }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                        $scope.albumDetails.current_user_rate = 0;
                        $scope.albumDetails.is_rated = false;
                    }
                $scope.waitRateResponse = false;
                });
            };
            //console.log("hiiii" + rating );
            $scope.averageRating = function(rating){
                return new Array(Math.ceil(rating));
            };

            $scope.blankStar = function(rating){
                if((5-Math.ceil(rating)) > 0){
                    return new Array(5-Math.ceil(rating));
                }else{
                    return 0;
                }
            };

            $scope.max = 5;
            $scope.isReadonly = false;

/*            $scope.rateThis = function(value, id, index){
                $scope.ratePost(value, id, index);
            };*/
            
            $scope.ratingStates = [
                {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
            ];
        },
        link: function (scope, element, attrs) {
            

        }
    }
}]);
app.directive('rateAlbumDirShop',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
    return {
        templateUrl: 'app/views/rating_star_album_club.html',
        restrict: "E",
        scope: true,
        controller : function($scope, $modal, $log, ProfileService){
            $scope.hovering = function(value) {
                $scope.overStar = value;
                $scope.percent = 100 * (value / $scope.max);
            };
            $scope.averageVoting = 0;
            $scope.vote_count = 0;
            $scope.waitRateResponse = false;
            $scope.findPeopleRate = function(id, type, count_Vote){
                if(count_Vote === 0 ){
                    return false;
                }
                var opts = {};
                $scope.ratedUsers = {};
                var modalInstance = $modal.open({
                            templateUrl: 'app/views/find_people.html',
                            controller: 'ModalController',
                            size: 'lg',
                            scope: $scope,
                });
                $scope.showPeopleLoader = true;
                opts.type = 'store_album';
                opts.type_id = id;
                opts.session_id = APP.currentUser.id;
                ProfileService.findPeople(opts,function(data){
                    if(data.code == 101 && data.message == "SUCCESS"){
                        $scope.showPeopleLoader = false;
                        $scope.ratedUsers = data.data.users_rated;
                        if(data.data.users_rated.length == 0){
                            $scope.message = $scope.i18n.dashboard.no_vote;
                        }
                    }else{
                        $scope.showPeopleLoader = false;
                    }
                });
                modalInstance.result.then(function (selectedItem) {
                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });

                $scope.viewFriendProile = function(friendId){
                    modalInstance.dismiss('cancel');
                    $location.path('/viewfriend/'+friendId);
                };
            };

            $scope.rateThisAlbum = function(rating, album_id, type){
                var update = "";
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.type = 'store_album';
                opts.type_id = album_id;
                opts.rate = rating;
                
                if($scope.albumDetails.is_rated){
                    update = "update";
                }else{
                    update = "add";
                }
                $scope.waitRateResponse = true;
                ProfileService.rateThis(opts, update, function(data){
                    if(data.code === 101 && data.message === "SUCCESS"){
                        $scope.albumDetails.avg_rate = data.data.avg_rate;
                        $scope.albumDetails.no_of_votes = data.data.no_of_votes;
                        $scope.albumDetails.is_rated = true;
                    }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                        $scope.albumDetails.current_user_rate = 0;
                        $scope.albumDetails.is_rated = true;
                    }
                    $scope.waitRateResponse = false;
                });
            };

            $scope.removeAlbumRating = function(albumIndex){
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.type = "store_album";
                opts.type_id = albumIndex;
                if($scope.waitRateResponse === false){
                    $scope.waitRateResponse = true;
                }else{
                    return;
                }
                ProfileService.removeRating(opts,function(data){
                    if(data.code == 101 && data.message == "SUCCESS"){
                        $scope.albumDetails.current_user_rate = 0;
                        $scope.albumDetails.avg_rate = data.data.avg_rate;
                        $scope.albumDetails.no_of_votes = data.data.no_of_votes;
                        $scope.albumDetails.is_rated = false;
                    }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                        $scope.albumDetails.current_user_rate = 0;
                        $scope.albumDetails.is_rated = false;
                    }
                $scope.waitRateResponse = false;
                });
            };
            //console.log("hiiii" + rating );
            $scope.averageRating = function(rating){
                return new Array(Math.ceil(rating));
            };

            $scope.blankStar = function(rating){
                if((5-Math.ceil(rating)) > 0){
                    return new Array(5-Math.ceil(rating));
                }else{
                    return 0;
                }
            };

            $scope.max = 5;
            $scope.isReadonly = false;

/*            $scope.rateThis = function(value, id, index){
                $scope.ratePost(value, id, index);
            };*/
            
            $scope.ratingStates = [
                {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
            ];
        },
        link: function (scope, element, attrs) {
            

        }
    }
}]);


var linkDirectives = angular.module('linkDirectives', []);

//header directive
linkDirectives.directive('header', function() {
    return {
        templateUrl: 'app/views/header.html',
        restrict: 'E'
    };
});

linkDirectives.directive('publicHeader', function() {
    return {
        templateUrl: 'app/views/public_header.html',
        restrict: 'E'
    };
});

linkDirectives.directive('confirmClick', function() {
    return {
        link: function (scope, element, attrs) {
           
            // setup a confirmation action on the scope
            scope.confirmClick = function(msg) {
               msg = msg || attrs.confirmClick || scope.i18n.msg_directive.delete_item;
                // return true/false to continue/stop the ng-click
                return confirm(msg);
            }
        }
    }
});

linkDirectives.directive('elastic', [
    '$timeout',
    function($timeout) {
      return {
        restrict: 'A',
        link: function($scope, element) {
          var resize = function() {
            return element[0].style.height = "" + element[0].scrollHeight + "px";
          };
          element.on("blur keyup change", resize);
          $timeout(resize, 0);
        }
      };
    }
  ]);

linkDirectives.directive('headerLogout', function() {
    return {
        //controller: 'LoginController',
        controller : 'UserController',
        templateUrl: 'app/views/headerLogout.html',
        restrict: 'E'
    };
});

linkDirectives.directive('footerLogout', function() {
    return {
        templateUrl: 'app/views/logout_footer.html',
        restrict: 'E'
    };
});

linkDirectives.directive('topLink', function() {
    return {
        //controller : 'TopLinkController',
        templateUrl: 'app/views/toplinks.html',
        restrict: 'E'
    };
});

linkDirectives.directive('homeTopLink', function() {
    return {
        //controller : 'TopLinkController',
        templateUrl: 'app/views/home_toplink.html',
        restrict: 'E'
    };
});

linkDirectives.directive('publicRightPanel', function() {
    return {
        //controller : 'TopLinkController',
        templateUrl: 'app/views/public_right_panel.html',
        restrict: 'E'
    };
});

linkDirectives.directive('fileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;
            
            element.bind('change', function(){
                scope.$apply(function(){
                    modelSetter(scope, element[0].files[0]);
                });
            });
        }
    };
}]);

//Displaying the group details: Directive
linkDirectives.directive('groupView', function() {
    return {
        templateUrl: 'app/views/group_detail.html',
        controller: 'GroupDetailController',
        restrict: 'E'
    };
});
 //Displaying the cover album  details: Directive
linkDirectives.directive('groupViewAlbum', function() {
    return {
        templateUrl: 'app/views/club_cover.html',
        controller: 'GroupDetailController',
        restrict: 'E'
    };
});
//Displaying the profile notfication
linkDirectives.directive('allNotificationPanel', function() {
  return {
    templateUrl: 'app/views/all_notification.html',
    controller : 'AllNotiController',
    restrict: 'E'
  }
});

//Displaying the profile notfication
linkDirectives.directive('groupNotificationPanel', function() {
  return {
    templateUrl: 'app/views/all_group_notification.html',
    controller : 'AllGroupNotiController',
    restrict: 'E'
  }
});

// Displaying the friend request in profile right panel
linkDirectives.directive('allNotificationFriendPanel', function() {
  return {
    templateUrl: 'app/views/all_notification_friend.html',
    controller : 'AllNotiFriendController',
    restrict: 'E'
  }
});

//Displaying the profile notfication
linkDirectives.directive('userCoverProfilePanel', function() {
  return {
    templateUrl: 'app/views/user_cover_profile.html',
    controller : 'UserCoverProfileController',
    restrict: 'E'
  }
});

//Displaying the profile notfication
linkDirectives.directive('groupCoverProfilePanel', function() {
  return {
    templateUrl: 'app/views/group_cover.html',
    controller : 'GroupDetailController',
    restrict: 'E'
  }
});

linkDirectives.directive('rightLink', function() {
  return {
    templateUrl: 'app/views/right_links.html',
    restrict: 'E'
  }
});

//Displaying the friend profile notfication
linkDirectives.directive('friendCoverProfilePanel', function() {
  return {
    templateUrl: 'app/views/friend_cover_page.html',
    controller : 'FriendCoverProfileController',
    restrict: 'E'
  }
});


//Displaying the profile notfication
linkDirectives.directive('friendList', function() {
  return {
    templateUrl: 'app/views/friend_list.html',
    controller : 'FriendController',
    restrict: 'E'
  }
});

linkDirectives.directive('myRefresh',function($location,$route){ 
    return function(scope, element, attrs) {
        element.bind('click',function(){
            if(element[0] && element[0].href && element[0].href === $location.absUrl()){
                window.location.reload(true);
            }
        });
    }
}); 

//Displaying the MY shop list: Directive
linkDirectives.directive('myshopList', function() {
    return {
        templateUrl: 'app/views/myshop_list.html',
        restrict: 'E'
    };
});

//Displaying the store list: Directive
linkDirectives.directive('storeList', function() {
    return {
        templateUrl: 'app/views/store_list.html',
        restrict: 'E'
    };
});
//Displaying the store list in home: Directive
linkDirectives.directive('storeListHome', function() {
    return {
        templateUrl: 'app/views/store_list_home.html',
        restrict: 'E'
    };
});

//Displaying the store grid in home: Directive
linkDirectives.directive('storeGridHome', function() {
    return {
        templateUrl: 'app/views/store_grid_home.html',
        restrict: 'E'
    };
});

//Displaying the store list: Directive
linkDirectives.directive('storeprofile', function() {
    return {
        controller:'DetailStoreCoverController',
        templateUrl: 'app/views/store_cover_profile.html',
        restrict: 'E'
    };
});
//Displaying the store cover page without login: Directive
linkDirectives.directive('storeprofilehome', function() {
    return {
        controller:'BLDetailCoverController',
        templateUrl: 'app/views/store_cover_home_profile.html',
        restrict: 'E'
    };
});

//Displaying the my shop grid: Directive
linkDirectives.directive('myshopGrid', function() {
    return {
        templateUrl: 'app/views/myshop_grid.html',
        restrict: 'E'
    };
});

//Displaying the consumer post list for store detail
linkDirectives.directive('allconsumer', function() {
  return {
      templateUrl: 'app/views/consumer_post_list.html',
      restrict: 'E'
  }
});

//Displaying the store grid: Directive
linkDirectives.directive('storeGrid', function() {
    return {
        templateUrl: 'app/views/store_grid.html',
        restrict: 'E'
    };
});

//Displaying the store List: Directive
linkDirectives.directive('pshopListHome', function() {
    return {
        templateUrl: 'app/views/public_shop_list.html',
        restrict: 'E'
    };
});

//Displaying the store Grid: Directive
linkDirectives.directive('pshopGridHome', function() {
    return {
        templateUrl: 'app/views/public_shop_grid.html',
        restrict: 'E'
    };
});

//Displaying the linked citizen List: Directive
linkDirectives.directive('lcitizenListHome', function() {
    return {
        templateUrl: 'app/views/public_linked_citizen_list.html',
        restrict: 'E'
    };
});

//Displaying the linked citizen List: Directive
linkDirectives.directive('lcitizenGridHome', function() {
    return {
        templateUrl: 'app/views/public_linked_citizen_grid.html',
        restrict: 'E'
    };
});

//Displaying the linked citizen List: Directive
linkDirectives.directive('cincomeListHome', function() {
    return {
        templateUrl: 'app/views/public_citizen_income_list.html',
        restrict: 'E'
    };
});

//Displaying the linked citizen List: Directive
linkDirectives.directive('cincomeGridHome', function() {
    return {
        templateUrl: 'app/views/public_citizen_income_grid.html',
        restrict: 'E'
    };
});

//Displaying the profile notfication
app.directive('profileRightPanel', function() {
  return {
    restrict: 'E',
     templateUrl: 'app/views/profile_right_panel.html'
  }
});

//Displaying the profile notfication
app.directive('storeLeftPanel', function() {
  return {
    restrict: 'E',
     templateUrl: 'app/views/store_left_panel.html'
  }
});

//Displaying the profile notfication
app.directive('storeNotificationPanel', function() {
  return {
    restrict: 'E',
     templateUrl: 'app/views/store_notifications.html'
  }
});

//Displaying the profile notfication
app.directive('clubNotificationPanel', function() {
  return {
    restrict: 'E',
     templateUrl: 'app/views/club_notification.html'
  }
});
//Displaying the club notification on dashboard
app.directive('clubNotificationPanelDashboard', function() {
  return {
    restrict: 'E',
     templateUrl: 'app/views/club_notification_dashboard.html'
  }
});


//Displaying the profile notfication
app.directive('clubSpecificNotificationPanel', function() {
  return {
    restrict: 'E',
     templateUrl: 'app/views/clubsnotification.html'
  }
});

//Displaying the group grid: Directive
linkDirectives.directive('groupGrid', function() {
    return {
        restrict: 'E',
        templateUrl: 'app/views/group_grid.html'
    }
});

//Displaying the group list: Directive
linkDirectives.directive('groupList', function() {
    return {
        restrict: 'E',
        templateUrl: 'app/views/group_list.html'
    }
});

//Displaying the group list of friend: Directive
linkDirectives.directive('groupListFriend', function() {
    return {
        restrict: 'E',
        templateUrl: 'app/views/group_list_friend.html'
    }
});
//Displaying the group list of friend: Directive
linkDirectives.directive('groupGridFriend', function() {
    return {
        restrict: 'E',
        templateUrl: 'app/views/group_grid_friend.html'
    }
});

//To post form on enter: Directive
linkDirectives.directive('submitEnter', function() {
    return {
        restrict: 'A',
        link: function (scope, elem, attrs) {
            elem.bind("keydown keypress", function(event) {
                if(event.which === 13) {
                    scope.$apply(function(){
                        scope.$eval(attrs.submitEnter);
                    });
                    event.preventDefault();
                }
            });
        }
    };
});

//To close form on escp: Directive
linkDirectives.directive('cancelEsc', function() {
    return {
        restrict: 'A',
        link: function (scope, elem, attrs) {
            elem.bind("keydown keypress", function(event) {
                if(event.which === 27) {
                    scope.$apply(function(){
                        scope.$eval(attrs.cancelEsc);
                    });
                    event.preventDefault();
                }
            });
        }
    };
});

//map directive
linkDirectives.directive('map', function() {
    return {
        templateUrl: 'app/views/map.html',
        restrict: 'E'
    };
});

linkDirectives.directive('autocompleteMap', function() {
    return {
        templateUrl: 'app/views/google_map.html',
        restrict: 'E'
    };
});


linkDirectives.directive('messageNotification', function() {
    return {
        restrict: 'E',
        templateUrl: 'app/views/message_notification.html',
        controller: 'MessageNotifiController',
    };
});


//Displaying the post form for store detail
app.directive('storePostForm', function() {
  return {
      restrict: 'E',
      link: function (scope, iElement, iAttrs) {
        $($('#lp1').linkPreview()).appendTo(iElement[0]);
      },
      templateUrl: 'app/views/store_post_form.html'
  }
});



//Displaying the post list for store detail
app.directive('storePostList', function() {
  return {
      restrict: 'E',
      controller: function ($scope, StorePostService, $location, $timeout, $routeParams, StoreService, StoreCommentService, FileUploader ,ProfileService,$modal ,$log){
        //funciton to delete single comment
        $scope.delCommentErrMsg = [];
        $scope.delCommentErrCls = [];
        $scope.editCommentText = [];
        $scope.activeCommentEdit = [];
        $scope.isEditComment = [];
        $scope.commentErrorMsg = [];
        $scope.commentErrorCls = [];
        $scope.commentInProcess = [];
        $scope.showComments = [];
       
        $(document).click(function(){
             $("ul.actions-drop-action").hide();
        });

        $scope.toggleEdit = function($event){
            $event.stopPropagation();
            if($($event.currentTarget).next('ul.actions-drop-action').is(':visible')){
                $($event.currentTarget).next('ul.actions-drop-action').hide();
            }else{
                $("ul.actions-drop-action").hide();
                $($event.currentTarget).next('ul.actions-drop-action').show(); 
            }
        };

        $scope.deleteComment = function(postIndx, indx) {
            var indx = indx;
            var commentData = $scope.posts[postIndx].comments[indx];
            var comments = [];
            $scope.deleteCommentIndx = commentData.id;
            var post = $scope.posts[postIndx];

            var formData = {};
            formData.user_id = $scope.currentUser.id;
            formData.comment_id = commentData.id;

            //calling the comment service to delete the selected comment 
            StoreCommentService.deleteComment(formData, function(data){
                if(data.code == 101) {
                    $scope.delCommentErrMsg[commentData.id] = '';
                    $scope.delCommentErrCls[commentData.id] = '';
                    $scope.deleteCommentIndx = -1;
                    var opts = {};
                    opts.post_id = post.post_id;
                    opts.user_id = $scope.currentUser.id;
                    $scope.posts[postIndx].comments.splice(indx,1);
                    $scope.posts[postIndx].comment_count--;
                }
                else {
                    $scope.delCommentErrMsg[commentData.id] = $scope.i18n.dashboard.postcomment.delete_comment_fail;
                    $scope.delCommentErrCls[commentData.id] = 'text-red';
                    $scope.deleteCommentIndx = -1;
                    $scope.posts;
                }
                $timeout(function(){
                    $scope.delCommentErrCls[commentData.id] = '';
                    $scope.delCommentErrMsg[commentData.id] = '';
                }, 15000);
            });
        };
        //funciton to delete single comment
        $scope.deleteMediaComment = function(comment, postIndx, mediaIndx) {
            //TODO:: media index need to be come dynamic for multiple medias
            var commentData = comment;
            var post = $scope.posts[postIndx];
            $scope.deleteCommentIndx = commentData.id;
            
            var formData = {};
            formData.user_id = $scope.currentUser.id;
            formData.comment_id = commentData.id;
            formData.comment_media_id = commentData.comment_media_info[0].id;

            //calling the comment service to delete the selected comment 
            StoreCommentService.deleteMediaComment(formData, function(data){
                if(data.code == 101) {
                    $scope.deleteCommentIndx = -1;
                    var opts = {};
                    opts.post_id = post.post_id;
                    opts.user_id = $scope.currentUser.id;
                    $scope.getComments(opts, postIndx);
                }
                else {
                    $scope.deleteCommentIndx = -1;
                    $scope.posts;
                }
            });
        };

        //funtion to open form to update comment
    $scope.updateComment = function(postIndx, indx) {
        $("#commentBoxId-"+postIndx).hide();
        $scope.commentInProcess[postIndx] = true;
        $scope.commentErrorMsg[postIndx] = '';
        $scope.commentErrorCls[postIndx]= '';
        var comment = $scope.posts[postIndx].comments[indx];
        var indx = indx;
        $scope.activeCommentEdit[postIndx]= comment.id;
        $scope.isEditComment[postIndx] = false;
        $scope.editCommentText[postIndx]=comment.comment_text;
    }

        //function to edit a comment
        $scope.editComment = function(postIndx, indx) {
            var opts = {};
            var post = $scope.posts[postIndx];
            var comment = $scope.posts[postIndx].comments[indx];
            var newText = $scope.editCommentText[postIndx];
            var indx = indx;
            $scope.isEditComment[postIndx] = true;
            $scope.commentErrorMsg[postIndx]= '';
            
            if(newText == undefined || newText == '') {
                $scope.isEditComment[postIndx]= false;
                $scope.commentErrorCls[postIndx] = 'text-red';
                $scope.commentErrorMsg[postIndx] = $scope.i18n.editprofile.no_empty_comment;
                $timeout(function(){
                    $scope.commentErrorCls[postIndx] = '';
                    $scope.commentErrorMsg[postIndx] = '';
                }, 15000);
                return false;
            } 

            opts.user_id = $scope.currentUser.id;
            opts.post_id = post.post_id;
            opts.comment_id = comment.id;
            opts.comment_author = comment.comment_user_info.id;
            opts.youtube_url = comment.youtube_url;
            opts.comment_text = newText;
            
            StoreCommentService.updateComment(opts, function(data){
                if(data.code == 101) {
                    $scope.posts[postIndx].comments[indx].comment_text = newText;
                    $scope.activeCommentEdit[postIndx] = '';
                    $scope.commentErrorCls[postIndx] = '';
                    $scope.commentErrorMsg[postIndx] = '';
                    $scope.commentInProcess[postIndx] = false;
                    $scope.editCommentText[postIndx] = '';
                    $("#commentBoxId-"+postIndx).show();
                    $scope.isEditComment[postIndx] = false;
                } else {
                    $scope.commentInProcess[postIndx] = false;
                    $scope.isEditComment[postIndx] = false;
                    $scope.commentErrorCls[postIndx] = 'text-red';
                    $scope.commentErrorMsg[postIndx]= $scope.i18n.editprofile.not_posted;
                    $("#commentBoxId-"+postIndx).show();
                }
                $timeout(function(){
                        $scope.commentErrorCls[postIndx] = '';
                        $scope.commentErrorMsg[postIndx] = '';
                    }, 15000);
            });
        };

        //funtion to close the edit form to cancel comment
        $scope.cancelEditComment = function(postIndx, indx) {
            $scope.commentInProcess = [];
            $scope.commentInProcess[postIndx] = false;
            $scope.activeCommentEdit[postIndx] = [];
            $scope.activeCommentEdit[postIndx][indx] = -1;
            $scope.editCommentText[postIndx]='';
            $scope.commentErrorCls[postIndx] = '';
            $scope.commentErrorMsg[postIndx] = '';
            $("#commentBoxId-"+postIndx).show();
        };

        $scope.allCommentLoad = [];
        $scope.showAllComments = function(postIndx) {
            $scope.allCommentLoad[postIndx] = true;
            var post = $scope.posts[postIndx];
            var opts = {};
            opts.post_id = post.post_id;
            opts.user_id = $scope.currentUser.id;
            $scope.getComments(opts, postIndx);
            $scope.showComments[postIndx] = true;
        };
        // function to get the post and comment of the post
        $scope.comments = [];
        $scope.getComments = function(opts, postIndx) {
            $scope.comments[postIndx] = [];
            
            // This service's function returns post
            StoreCommentService.listComment(opts, function(data){
                if(data.code == 100)
                {
                    $scope.posts[postIndx].comments = data.data.comment;
                    $scope.allCommentLoad[postIndx] = false;
                        if($scope.comments[postIndx].length  != 0 ) {
                            $scope.noComment = true;
                        }
                } else {
                    $scope.allCommentLoad[postIndx] = true;
                }
            });
        };


      },
      templateUrl: 'app/views/store_post_list.html'
  }
});

//Displaying the comment post form for store detail
app.directive('storeCommentForm',['StoreCommentService', 'fileReader', '$timeout', function(StoreCommentService, fileReader, $timeout) {
  return {
    restrict: 'E',
    templateUrl: 'app/views/store_comment_form.html',
    scope : false,
    link : function(scope, elem, attrs){
      scope.showPreview = false;
      scope.comment_id = '';
      scope.image_id = [];
      scope.imgSrc = [];
      scope.isInProgress = [];
      scope.commentFiles = [];
      scope.selectInProgress = [];
      scope.commentErrMsg = '';
      scope.commentErrCls = '';
      scope.imgRes = 1;
      scope.getFile = function () {
        var tempopts = {};
        tempopts.comment_author = APP.currentUser.id;
        tempopts.post_id = attrs.postId;
        tempopts.session_id = APP.currentUser.id;
        tempopts.body = scope.i18n.editprofile.comment_image_test;
        tempopts.post_type = '0';
        tempopts.comment_id = '';
        var len = scope.commentFiles.length;
        StoreCommentService.createCommentWithImage(tempopts, scope.commentFiles[0], function(data){
            if(data.code == 101) {
                scope.comment_id = data.data.comment_id;
                scope.imgSrc.push(data.data);
                scope.image_id.push(data.data.media_id);
                tempopts.comment_id = scope.comment_id;
                scope.selectInProgress.splice(0,1);
                for(j=1; j < len; j++){
                    StoreCommentService.createCommentWithImage(tempopts, scope.commentFiles[j], function(data){
                        if(data.code == 101) {
                            scope.comment_id = data.data.comment_id;
                            scope.imgSrc.push(data.data);
                            scope.image_id.push(data.data.media_id);
                            scope.selectInProgress.splice(0,1);
                        }else{
                          scope.commentErrCls = 'text-red';
                          scope.commentErrMsg = scope.i18n.dashboard.postcomment.upload_media_fail;
                        }
                    });
                }
            }else{
              scope.commentErrCls = 'text-red';
              scope.commentErrMsg = scope.i18n.dashboard.postcomment.upload_media_fail;
            }
        });
        setTimeout(function(){
            scope.commentErrCls = '';
            scope.commentErrMsg = '';
        }, 15000);
      };
      //remove iamge from preview array
      scope.removeImage = function(index) {
        scope.imgSrc.splice(index, 1);
        scope.isInProgress.splice(index, 1);
        if(scope.imgSrc.length == 0){
          scope.commentFiles == [];
          scope.file = [];
          scope.showImgSelect = true;
          scope.showPreview = false;
        }
      };

      scope.res = 0;
      scope.addComment = function(){
        scope.postIndx = attrs.postIndx;
        scope.comments = attrs.loadComment;
        scope.finalCommentInProcess = true;
        scope.commentErrMsg = "";
        scope.commentErrMsg = "";
        scope.commentErrCls = '';
        var filescount = scope.imgSrc.length;

        if ((scope.commentText === undefined || scope.commentText === '') && filescount === 0) {
            scope.finalCommentInProcess = false;
            scope.commentErrCls = 'text-red';
            scope.commentErrMsg = scope.i18n.editprofile.photo_update;
            setTimeout(function(){
              scope.commentErrCls = '';
              scope.commentErrMsg = '';
            }, 15000);
            return false;
        } 

        var opts = {};
        opts.comment_author = APP.currentUser.id;
        opts.post_id = attrs.postId;
        opts.comment_text = scope.commentText;
        opts.media_id = [];
        opts.session_id = APP.currentUser.id;
        opts.youtube_url='';
        opts.comment_id = "";
        if(scope.image_id.length != 0){
          opts.media_id = scope.image_id;
        }
        if(scope.comment_id != ''){
          opts.comment_id = scope.comment_id;  
        }
        opts.post_type = '1';

        opts.tagging = scope.taggedObject; // for taggedObject
        if(scope.res == 0){
            scope.res = 1;
            StoreCommentService.createComment(opts, function(data){
                scope.res = 0;
              if(data.code == 101) {
                scope.finalCommentInProcess = false;
                scope.commentErrMsg = '';
                scope.commentErrCls = '';
                scope.commentText = '';
                scope.post.comments.push(data.data.comment);
                scope.post.comment_count++;
                scope.commentFiles = [];
                scope.imgSrc = [];
                scope.showPreview = false;
                scope.showImgSelect = true;
                scope.comment_id = '';
              } else {
                scope.finalCommentInProcess = false;
                scope.commentErrCls = 'text-red';
                scope.commentErrMsg = scope.i18n.editprofile.comment_no_post;
                scope.commentFiles = [];
                scope.imgSrc = [];
                scope.showPreview = false;
                scope.showImgSelect = true;
                scope.comment_id = '';
              }
            });
            $timeout(function(){
                scope.commentErrCls = '';
                scope.commentErrMsg = '';
            }, 15000);
          };
        }
    }
  };
}]);

//Displaying the comment post form for store detail
app.directive('clickEdit',['$compile', function($compile) {
  return {
    restrict: 'E',
    link : function(scope, elem, attrs){
        elem.bind('click', function() {
        var newtemp;
        newtemp = angular.element('<edit-form></edit-form>');
        elem.parent().parent().find('.store-comment-profile-upload').html($compile(newtemp)(scope));
      });
    }
  }
}]);

//Displaying the comment post form for store detail
app.directive('editForm', function($compile) {
  return {
    restrict: 'E',
    templateUrl: 'app/views/store_post_editform.html'
  }
});

//Displaying the comment post form for store detail
app.directive('clickDelete',[function($compile) {
  return {
    restrict: 'A',
    scope:{
      deleteMethod:'&'
    },
    link : function(scope, elem, attrs){
        elem.bind('click', function() {
         scope.$apply(scope.deleteMethod); 
      });
    }
  }
}]);

app.directive('infiniteScrolls', [ "$window", function ($window) {
        return {
            link:function (scope, element, attrs) {
                var offset = parseInt(attrs.threshold) || 0;
                var e = element[0];
                element.bind('scroll', function () {
                  if (e.scrollTop  == 0 && e.scrollHeight != e.offsetHeight) {
                      scope.$apply(attrs.infiniteScrolls);
                  }
                });
            }
        };
}]);

app.directive("ngFileSelect",function(){
  return {
    link: function($scope,el){
     el.bind("change", function(e){
        $scope.file = (e.srcElement || e.target).files[0];
        $scope.getFile();
      })
    }
  }
});

app.directive("ngCoverSelect",function(){
  return {
    link: function($scope,el){
     el.bind("change", function(e){
        $scope.file = (e.srcElement || e.target).files[0];
        //$scope.getFile();
      })
    }
  }
});

app.directive("ngIdCardFile",function(){
  return {
    link: function($scope,el){
     el.bind("change", function(e){
        $scope.idCardFile = (e.srcElement || e.target).files[0];
        $scope.getIdCardFile();
      })
    }
  }
});

app.directive("ngSsnFileSelect",function(){
  return {
    link: function($scope,el){
     el.bind("change", function(e){
        $scope.ssnFile = (e.srcElement || e.target).files[0];
        $scope.getSsnFile();
      })
    }
  }
});

//directive for multifileselect
app.directive("ngMultiFileSelect",function(){
  return {
    link: function($scope,el){
     el.bind("change", function(e){
        $scope.file = (e.srcElement || e.target).files;
        $scope.getFile();
      })
    }
  }
});

// //directive for profile post section 
// //it is rediscribed because it the ngfileselect is override in profile view page
app.directive("ngProfileFileSelect",function(){
  return {
    link: function($scope,el){
     el.bind("change", function(e){
        $scope.files = (e.srcElement || e.target).files;
        $scope.inputEl = e.target;
        $scope.getProfileFile();
      })
    }
  }
});

//directive for multifileselect
app.directive("ngProfileCommentMultiFileSelect",function(){
  return {
    link: function($scope,el){
     el.bind("change", function(e){
        $scope.file = (e.srcElement || e.target).files[0];
        $scope.getFile();
      })
    }
  }
});

app.directive('fileSelect',['$timeout', function($timeout) {
  var template = '<input type="file" name="files" class="search-botton" multiple />';
  return function( scope, elem, attrs ) {
    scope.showImgSelect = true;
    var selector = $( template );
    elem.append(selector);
    selector.bind('click', function( event ) {
      scope.fileUpload = [];
      scope.showPreview = false;
      scope.comment_id = '';
      scope.image_id = [];
      scope.imgSrc = [];
      scope.isInProgress = [];
      scope.selectInProgress = [];
      scope.commentFiles = []
      scope.commentErrMsg = '';
      this.value = null;
    });
    selector.bind('change', function( event ) {
      scope.$apply(function() {
        scope[ attrs.fileSelect ] = event.originalEvent.target.files;
        var imgFileCount = scope[ attrs.fileSelect ].length;
        var reject = 0;
        var correct = 0;
        if(imgFileCount >= 1) {
          for(var i = 0; i < imgFileCount; i++) {
            var imageType = scope[ attrs.fileSelect ][i]['name'].substring(scope[ attrs.fileSelect ][i]['name'].lastIndexOf(".") + 1).toLowerCase();
            if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
              scope.commentErrCls = 'text-red';
              scope.commentErrMsg = scope.i18n.editprofile.media_incorrect;
              reject++;
            }else {
                correct++;
                scope.first = true;
                scope.imgRes = 1;
                scope.showPreview = true;
                scope.isInProgress.push(true);
                scope.selectInProgress.push(true);
                scope.commentFiles.push(scope[ attrs.fileSelect ][i]);
            }
            if((reject + correct) == imgFileCount && correct != 0){
                  scope.getFile(scope.commentFiles);
            }
          }
        }
      });
      setTimeout(function(){
        scope.commentErrCls = '';
        scope.commentErrMsg = '';
      }, 15000);
    });
  };
}]);

//focus directive
app.directive('focusMe', function () {
    return {
        restrict: 'A',
        link: function (scope, element, attr) {
            scope.$watch(attr.focusMe, function (n, o) {
                if (n != 0 && n) {
                    element[0].focus();
                }
            });
        }
    };
});

/*app.directive('eventFocus', function(focus) {
    return function(scope, elem, attr) {
      elem.on(attr.eventFocus, function() {
        focus(attr.eventFocusId);
      });
      scope.$on('$destroy', function() {
        element.off(attr.eventFocus);
      });
    };
  });*/

app.directive('eventFocus', function(focus) {
    return function(scope, elem, attr) {
      elem.on(attr.eventFocus, function() {
        console.log(attr.eventFocus);alert('a');
        //focus(attr.eventFocusId);
      });
      scope.$on('$destroy', function() {
        element.off(attr.eventFocus);
      });
    };
  });

// directive for post form in shop on home page
app.directive('storePostHomeList', function() {
  return {
      restrict: 'E',
      templateUrl: 'app/views/store_post_home.html'
  }
});

app.directive('infiniteScrollsDown', [ "$window", function ($window) {
        return {
            link:function (scope, element, attrs) {
                var offset = parseInt(attrs.cardshold) || 0;
                var e = element[0];
                element.bind('scroll', function () {
                  if(e.scrollTop + e.offsetHeight >= e.scrollHeight) {
                    scope.$apply(attrs.infiniteScrollsDown);
                  }
                });
            }
        };
}]);

//directive for search shop in map using store name
app.directive('ngsearchtext', function () {
    return function (scope, element, attrs) {
        element.bind("keyup", function (event) {
            if (event.which !== 13) {
                scope.$apply(function () {
                    scope.$eval(attrs.ngsearchtext);
                });

                event.preventDefault();
            }
        });
    };
});

/*directive to confirm from the user before the payment done*/
app.directive('confirmPayment', function() {
    return {
        link: function (scope, element, attrs) {
           
            // setup a confirmation action on the scope
            scope.confirmPayment = function(msg) {
               msg = msg || attrs.confirmPayment || scope.i18n.msg_directive.confirm_payment;
                // return true/false to continue/stop the ng-click
                return confirm(msg);
            }
        }
    }
});

/*directive to confirm from the user before the payment done*/
app.directive('styleParent', function ($document, $window) {
    return function (scope, element, attr) {
        var container = $document.find('div.post-img');
        var w = angular.element($window);
        // Get accurate measurements from that.
        var imgWidth = '';
        var imgHeight = '';
        var newValue = {};
        element.on('load', function() {
                $(this).parent().removeClass('imgHHWL');
                $(this).parent().removeClass('imgHHWH');
                $(this).parent().removeClass('imgHLWH');
                $(this).parent().removeClass('imgHLWL');
                var theImage = new Image();
                theImage.src = $(this).attr("src");
                // Get accurate measurements from that.
                imgWidth = theImage.width;
                imgHeight = theImage.height;
                newValue.h = $('div.post-img').height(); 
                newValue.w = $('div.post-img').width();
                var cls = '';
                if(imgWidth > newValue.w && imgHeight > newValue.h) {
                    cls = 'imgHHWH';
                } else if(imgWidth <= newValue.w && imgHeight >= newValue.h){
                    cls = 'imgHHWL';
                } else if(imgWidth >= newValue.w && imgHeight <= newValue.h){
                    cls = 'imgHLWH';
                } else if(imgWidth <= newValue.w && imgHeight <= newValue.h){
                    cls = 'imgHLWL';
                }
                $(this).parent().addClass(cls);
         });

        scope.$watch(function () {
            return {
                'h': container.height(), 
                'w': container.width()
            };
        }, function (newValue, oldValue) {
            if(newValue.w != oldValue.w){
                var cls = '';
                if(imgWidth > newValue.w && imgHeight > newValue.h) {
                    cls = 'imgHHWH';
                } else if(imgWidth <= newValue.w && imgHeight >= newValue.h){
                    cls = 'imgHHWL';
                } else if(imgWidth >= newValue.w && imgHeight <= newValue.h){
                    cls = 'imgHLWH';
                } else if(imgWidth <= newValue.w && imgHeight <= newValue.h){
                    cls = 'imgHLWL';
                }
                $(this).parent().addClass(cls);
            }
        }, true);

        w.bind('resize', function () {
            scope.$apply();
        });
    }
}); 

linkDirectives.directive('confirmClickMember', function() {
    return {
        link: function (scope, element, attrs) {
           
            // setup a confirmation action on the scope
            scope.confirmClick = function(msg) {
               msg = msg || attrs.confirmClick || scope.i18n.msg_directive.delete_member;
                // return true/false to continue/stop the ng-click
                return confirm(msg);
            }
        }
    }
});

linkDirectives.directive('confirmClickUnsubscribe', function() {
    return {
        link: function (scope, element, attrs) {
           
            // setup a confirmation action on the scope
            scope.confirmClick = function(msg) {
               msg = msg || attrs.confirmClick || scope.i18n.coupon.confirm_unsub;
                // return true/false to continue/stop the ng-click
                return confirm(msg);
            }
        }
    }
});

linkDirectives.directive('datePicker', function() {
    return {
        controller : 'DateController',
        templateUrl: 'app/views/date_picker.html',
        restrict: 'E'
    };
});

linkDirectives.directive('createCoupon', function() {
    return {
        controller : 'CouponController',
        templateUrl: 'app/views/create_coupon.html',
        restrict: 'E'
    };
});

app.directive('shopTransactionCustomer', function() {
    return {
        templateUrl: 'app/views/shop_transaction_customer.html',
        restrict: 'E'
    };
}); 

app.directive('shopTransactionProgress', function() {
    return {
        templateUrl: 'app/views/shop_transaction_progress.html',
        restrict: 'E'
    };
});

linkDirectives.directive('createAward', function() {
    return {
        controller : 'AwardsController',
        templateUrl: 'app/views/create_awards.html',
        restrict: 'E'
    };
});

app.directive('shopTransactionAmount', function() {
    return {
        templateUrl: 'app/views/shop_transaction_amount.html',
        restrict: 'E'
    };
});

linkDirectives.directive('campaignWork', function() {
    return {
        controller : 'WorkCampaignController',
        templateUrl: 'app/views/campaign_work.html',
        restrict: 'E'
    };
});

app.directive('shopTransactionConfirm', function() {
    return {
        templateUrl: 'app/views/shop_transaction_confirm.html',
        restrict: 'E'
    };
});

linkDirectives.directive('createCampaign', function() {
    return {
        controller : 'CreateCampaignController',
        templateUrl: 'app/views/create_campaign.html',
        restrict: 'E'
    };
});

linkDirectives.directive('offerList', function() {
    return {
        templateUrl: 'app/views/offer-list.html',
        restrict: 'E'
    };
});

linkDirectives.directive('offerGrid', function() {
    return {
        templateUrl: 'app/views/offer-grid.html',
        restrict: 'E'
    };
});

linkDirectives.directive('offerTop', function() {
    return {
        templateUrl: 'app/views/offer_top.html',
        restrict: 'E'
    };
});

app.directive('shopTransactionCancel', function() {
    return {
        templateUrl: 'app/views/shop_transaction_cancel.html',
        restrict: 'E'
    };
});
//directive to show transaction detail of approve or Rejected transactio
app.directive('shopTransactionDetail', function() {
    return {
        templateUrl: 'app/views/shop_transaction_detail.html',
        restrict: 'E'
    };
});

app.directive('shopTransactionHistoryList', function() {
    return {
        templateUrl: 'app/views/shop_transaction_history_list.html',
        restrict: 'E'
    };
});
app.directive('shopTransactionHistoryDetail', function() {
    return {
        templateUrl: 'app/views/shop_transaction_history_detail.html',
        restrict: 'E'
    };
}); 
// infinit scrolling from div not on body
app.directive('whenScrolled', function() {
    return function(scope, elm, attr) {
        var raw = elm[0];
        elm.bind('scroll', function() {
            if (raw.scrollTop + raw.offsetHeight >= raw.scrollHeight) {
                scope.$apply(attr.whenScrolled);
            }
        });
    };
});

linkDirectives.directive('confirmClickRemove', function() {
    return {
        link: function (scope, element, attrs) {
           
            // setup a confirmation action on the scope
            scope.confirmClick = function(msg) {
               msg = msg || attrs.confirmClick || scope.i18n.msg_directive.remove_club;
                // return true/false to continue/stop the ng-click
                return confirm(msg);
            };
        }
    };
});

linkDirectives.directive('couponsList', function() {
    return {
        templateUrl: 'app/views/coupons-list.html',
        restrict: 'E'
    };
});

linkDirectives.directive('couponsGrid', function() {
    return {
        templateUrl: 'app/views/coupons-grid.html',
        restrict: 'E'
    };
});

app.directive("dateRange", function () {
    return {
        restrict: 'AE',
        replace: false,
        link: function (scope, elem, attrs) {
            jQuery(elem).daterangepicker({
                opens: "left",
                format: 'MM/DD/YY',
                startDate: moment().subtract('days', 364),
                endDate: moment(),
                showDropdowns: true,
                ranges: {
                    'Last 7 Days': [moment().subtract('days', 6), moment()],
                    'Last 30 Days': [moment().subtract('days', 29), moment()],
                    'Last 90 Days': [moment().subtract('days', 89), moment()],
                    'Last 12 Months': [moment().subtract('days', 364), moment()]
                }
            });
            jQuery(elem).on('apply.daterangepicker', function (ev, picker) {
                jQuery(elem).find('#startDate').text(picker.startDate.format('MM/DD/YYYY'));
                jQuery(elem).find('#endDate').text(picker.endDate.format('MM/DD/YYYY'));
                scope[attrs.start] = picker.startDate;
                scope[attrs.end] = picker.endDate;
                scope.$apply();
            });
        }
    };
    });

app.directive('datePickers', function() {

  return {
    restrict: 'E',
    transclude: true,
    scope: {
      date: '='
    },
    link: function(scope, element, attrs) {
      element.datepicker({
        dateFormat: 'dd-mm-yy',
        onSelect: function(dateText, datepicker) {
          scope.date = dateText;
          scope.$apply();
        }
      });
    },
    template: '<input type="text" class="span2" ng-model="date"/>',
    replace: true
  }

});

linkDirectives.directive('paypalForm', ['CommerialService', 'StoreService', function(CommerialService, StoreService){
    return {
        templateUrl: 'app/views/paypal_form.html',
        restrict: 'E',
        controller: function ($scope, $timeout){
            // function to validate phone number in paypal form
            $scope.checkPno=function(pnumber){
                if(pnumber != undefined){
                    var regex=/[^a-z^A-Z]$/;
                    return regex.test(pnumber);
                }
            };

            // function to validate email in paypal form
            $scope.checkEmail=function(email){
               var regex=/^[A-Za-z0-9._-]+@[A-Za-z]+\.[A-Za-z.]{2,5}$/;
               return regex.test(email);
            };
            /* function to register the user paypal information
            * @accept user paypalform information
            * @return the status of apaypal account 0 for no paypal account 1 for paypal account created
            */
            $scope.submitPaypalForm  = function(paypal){
                $scope.inProgress = true;
                $scope.is_paypal_added = 0;
                var shop_id = StoreService.getStoreData().id;
                $scope.is_paypal_added = StoreService.getStoreData().is_paypal_added;
                var opts = {};
                opts.session_id = APP.currentUser.id;
                opts.shop_id = shop_id;
                opts.first_name = paypal.fname;
                opts.last_name = paypal.lname;
                opts.email_address = angular.lowercase(paypal.email);
                opts.mobile_number = paypal.pnumber;
                //opts.account_id = paypal.accountid; not in current use
                $scope.paypalErrMsg = '';
                $scope.paypalErrCls = '';
                
                //calling the service to send request to varify and save paypal account
                CommerialService.varifyPaypal(opts, function(data){
                    $scope.inProgress = false;
                    if(data.code == 101) {
                        $scope.is_paypal_added = 1;
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.success;
                        $scope.paypalErrCls = 'text-success';
                        if($scope.currentSubTab !== undefined && $scope.currentSubTab === 2){
                            $scope.closeForm();    
                        } else {
                            $scope.paypal = {};
                            $scope.paypalForm.$setPristine();
                            $scope.isShowForm = false;
                            $scope.isOpenBottomForm = false;
                            $scope.isOpenTopForm = false;
                        }
                        
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 500000) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.system_error;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 520002) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.internal_error;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 520003) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.username_incorrect;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 550001) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.not_allowed;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 560027) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.value_unsupported;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 560029) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.header_missing;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 580001) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.invalid_request;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 580022) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.invalid_request_param;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 580023) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.determine_status;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 580029) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.param_missing;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 100) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.missed_param;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 1053) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.already_exist;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 1054) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.access_voilation;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } else if(data.code == 1029) {
                        $scope.paypalErrMsg = $scope.i18n.Campaign_work.paypal_varify.failure;
                        $scope.paypalErrCls = 'text-red';
                        $timeout(function(){
                            $scope.paypalErrMsg = '';
                            $scope.paypalErrCls = '';
                        }, 15000);
                    } 

                });
            }
        }
    };
}]);

linkDirectives.directive('businessApp', ['StoreService', '$cookieStore', function(StoreService, $cookieStore){
    return {
        templateUrl: 'app/views/businessApp.html',
        restrict: 'E',
        controller: function ($scope, StoreService, $cookieStore){
            $scope.currentLanguage = $cookieStore.get("activeLanguage");
            $scope.businessApp     = [];
            
            $scope.myStoreList = function() {
                var opts = {};
                    opts.user_id = APP.currentUser.id;
                    opts.store_type  = 2; 
                    opts.limit_start = 0;
                    opts.limit_size  = 50;
                    opts.lang_code   = $scope.currentLanguage;
                    opts.filter_type = 1;
           
                StoreService.getStore(opts, function(data) {
                    if(data.code === 101) {
                        $scope.businessApp = data.data.stores;
                    }
                });
            };
            $scope.myStoreList();
        }       
    };
}]);

  //Displaying the post form for store detail
app.directive('friendProfilePostList',['ProfileService', '$routeParams', '$location', 'focus', function(ProfileService,$routeParams ,$location, focus) {
    return {
      restrict: 'E',
      controller: function ($scope, $timeout, $modal, $log){
        $scope.showComments = [];
        $scope.getfriendId= $routeParams.friendId;
        $scope.commentsShowLimit = [];
        $scope.commentsLength = [];
        $scope.textLimit = APP.post_charecter_limit;

        //check screen for mobile devicess to show corresponding layou
        $scope.loadMoreFunc = 'loadMore()';
        $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
            $scope.windowHeight = newValue.h;
            $scope.windowWidth = newValue.w;
            if($scope.windowWidth <= '768'){
                $scope.isSmallScreen =  true; //declare in main controller
                $scope.loadMoreFunc = '';
            } else {
                $scope.isSmallScreen =  false; //declare in main controller
                $scope.loadMoreFunc = 'loadMore()';
            }
        }, true);

        $(document).click(function(){
             $("ul.actions-drop-action").hide();
        });
        $scope.toggleEdit = function($event){
            $event.stopPropagation();
            if($($event.currentTarget).next('ul.actions-drop-action').is(':visible')){
                $($event.currentTarget).next('ul.actions-drop-action').hide();
            }else{
                $("ul.actions-drop-action").hide();
                $($event.currentTarget).next('ul.actions-drop-action').show(); 
            }
        };
        //funciton to list user post on dashboard
        //TODO: infinite scoller is remaining
        $scope.listFriendPost = function() {
            var opts = {};
            var limit_start = $scope.userPostList.length;
            opts.user_id = APP.currentUser.id;
            opts.limit_start = limit_start;
            opts.limit_size = APP.dashbord_pagination.end;
            opts.friend_id = $scope.getfriendId;
            //calling the services to get the user post list
            if ((($scope.totalSize > limit_start ) || $scope.totalSize == 0 ) && $scope.myRes == 1) {
                $scope.myRes = 0;
                ProfileService.getDashboardWallFeeds(opts, function(data){
                    if(data.code == 101) {
                        var items = data.data.post;
                        for (var i = 0; i < items.length; i++) {
                            $scope.userPostList.push(items[i]);
                        }
                        $scope.totalSize = data.data.count;
                        $scope.isLoading = false;
                    } else {
                        $scope.isLoading = false;
                        $scope.userPostList;
                    }
                    if ($scope.userPostList.length == 0){
                        $scope.noContent = true; 
                    } 
                    $scope.myRes = 1;
                });
            } else {
                $scope.isLoading = false;
                if ($scope.userPostList.length == 0){
                    $scope.noContent = true; 
                } 
                $scope.userPostList;
            }
        };

        $scope.loadMore = function() {
            if($scope.totalSize > $scope.userPostList.length){
                $scope.isLoading = true;
                $scope.listFriendPost();
            }
        };
        //funciton to delete single post
        $scope.deleteErrMsg = [];
        $scope.isDeletePost = [];
        $scope.deleteErrCls = [];
        $scope.deletePost = function(postIndx) {
            var postData = {};
            postData = $scope.userPostList[postIndx];
            $scope.isDeletePost[postIndx] = true;
            $scope.updateBody[postIndx] = '';
            $scope.activeEdit[postIndx] = false;
            $scope.editPostErrorMsg[postIndx] = '';
            var formData = {};
            formData.user_id = APP.currentUser.id;
            formData.post_id = postData.id;

            //calling the service to delete the selected post 
            ProfileService.deleteDashboardPost(formData, function(data){
                if(data.code == 101) {
                    $scope.userPostList.splice(postIndx, 1);
                    if ($scope.userPostList.length == 0){
                        $scope.noContent = true; 
                    } 
                    $scope.isDeletePost[postIndx] = false;
                } else {
                    $scope.deleteErrCls[postIndx] = 'text-red';
                    $scope.deleteErrMsg[postIndx]= $scope.i18n.dashboard.postcomment.delete_post_fail;
                    $scope.isDeletePost[postIndx] = false;
                }
                $timeout(function(){
                    $scope.deleteErrCls[postIndx] = '';
                    $scope.deleteErrMsg[postIndx] = '';
                }, 15000);
            });
        };

        //function to create post
        $scope.editPostErrorMsg = [];
        $scope.updatePostInProcess = [];
        $scope.editPostErrorCls = [];
        $scope.saveUpdatePost = function(postIndx) {
            var opts = {};
            $scope.updatePostInProcess[postIndx] = true;
            var editPostText = escapeHtmlEntities($scope.updateBody[postIndx]); 
            var post = $scope.userPostList[postIndx];

            if(editPostText == undefined || editPostText == '') {
                $scope.updatePostInProcess = false;
                $scope.editPostErrorCls[postIndx] = 'text-red';
                $scope.editPostErrorMsg[postIndx] = $scope.i18n.editprofile.no_empty_status;
                $timeout(function(){
                    $scope.editPostErrorCls[postIndx] = '';
                    $scope.editPostErrorMsg[postIndx] = '';
                }, 15000);
                return false;
            } 
            var regex = /src="([^"]+)"/;
            var src = editPostText.split(regex)[1];
            if(src != undefined && src !='' ){
               editPostText = src; 
            }
            
            opts.user_id = APP.currentUser.id;
            opts.post_id = post.id;
            opts.title = post.title; //This dummy data as currently there is no field to accept the posttitle
            opts.description = editPostText;
            opts.to_id = $routeParams.friendId; 
            opts.youtube_url = '';
            opts.post_type = '1';
            opts.privacy_setting = post.privacy_setting;
            var myFile = '';
            var friendIdList = [];
            if($scope.postTaggedFriend[postIndx].length > 0){
                angular.forEach($scope.postTaggedFriend[postIndx],function(index){
                    friendIdList.push(index.id);
                });

                opts.tagged_friends = friendIdList.join();
            }else{
                opts.tagged_friends = "";
            }
            ProfileService.updateDashboardPost(opts, function(data){
                if(data.code == 101) {
                    if($scope.postTaggedFriend[postIndx].length > 0){
                        post.tagged_friends_info = $scope.postTaggedFriend[postIndx];
                    }else{
                        post.tagged_friends_info = "";
                    }
                    $scope.editPostErrorCls[postIndx] = '';
                    $scope.editPostErrorMsg[postIndx] = '';
                    $scope.updatePostInProcess[postIndx] = false;
                    $scope.editPostErrorMsg[postIndx] = '';
                    $scope.userPostList[postIndx].description = editPostText;
                    $scope.editPostText = '';
                    $scope.activeEdit[postIndx] = false;
                } else {
                    $scope.updatePostInProcess[postIndx] = false;
                    $scope.editPostErrorCls[postIndx] = 'text-red';
                    $scope.editPostErrorMsg[postIndx] = $scope.i18n.editprofile.post_unsaved;
                }
                $timeout(function(){
                    $scope.editPostErrorCls[postIndx] = '';
                    $scope.editPostErrorMsg[postIndx] = '';
                }, 15000);
            });
        };
        $scope.editPrivacyMsg = [];
        $scope.editPrivacyCls = [];
        $scope.changePrivacy = function(post, postIndx) { 
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.post_id = post.id;
            opts.privacy_setting = post.privacy_setting;
            var myFile = '';
            ProfileService.updatePostPrivacy(opts, function(data){
                if(data.code == 101) {
                    $scope.editPrivacyCls[postIndx] = '';
                    $scope.editPrivacyMsg[postIndx] = '';                     
                } else {
                    $scope.editPrivacyCls[postIndx] = 'text-red';
                    $scope.editPrivacyMsg[postIndx] = $scope.i18n.editprofile.privacy_setting; 
                    $timeout(function(){
                        $scope.editPrivacyCls[postIndx] = '';
                        $scope.editPrivacyMsg[postIndx] = '';
                    }, 15000);
                }
            });
        };


        $scope.updateBody = [];
        $scope.activeEdit = [];
        $scope.postTaggedFriend = [];
        $scope.showTagLoading = [];
        //funtion to open form to update post
        $scope.updatePost = function(postIndx) {
            $scope.editPostErrorMsg[postIndx]='';
            var post = $scope.userPostList[postIndx];
            //for resize the textarea
            autosize(document.querySelectorAll('.editpostbox'));
            var str = $.trim(post.description.replace(/\n\n\n+/g, '\n\n'));
            var htmlstr = str.replace(/\n/g,'<br />');
            var height = $('<div style="display:block;" id="postedit-hidden-div"></div>')
            .html(htmlstr)
            .appendTo('#post_'+post.id)
            .height();     
            $('#editpost_'+post.id).css('height',height + 'px');
            str = $('#postedit-hidden-div').html(str).text();
            $('#postedit-hidden-div').remove();
            $scope.updateBody[postIndx] = str;
            $scope.activeEdit[postIndx] = true;
            //$scope.postTaggedFriend[postIndx] = post.tagged_friends_info;
            $scope.postTaggedFriend[postIndx] = [];
            angular.forEach(post.tagged_friends_info, function(val,indx){
                $scope.postTaggedFriend[postIndx].push(val);
            });
            $scope.showTagLoading[postIndx] = true;
            //set cursor start of textarea
            $timeout(function(){
                $('#editpost_'+post.id).putCursorAtStart();
            },200);
        };

        $scope.gainTextFocus = function(indx){
            focus('friendSearchField'+indx);
        };
        // close the edit form on cancel
        $scope.cancelPost = function(postIndx) {
            $('#postedit-hidden-div').remove();
            $scope.updateBody[postIndx] = '';
            $scope.activeEdit[postIndx] = false;
            $scope.editPostErrorCls[postIndx] = '';
            $scope.editPostErrorMsg[postIndx] = '';
        };

        // function to remove the tagged friend
            $scope.removePostTagFriend  = function(index, postIndex){
                $scope.postTaggedFriend[postIndex].splice(index,1);
            };

            // Add more friend in the post
            var currentTimeout = null;
            $scope.addMoreFriend = function(event, index){
                var DELAY_TIME_BEFORE_POSTING = 300;
                if(currentTimeout) {
                    $timeout.cancel(currentTimeout);
                }
                currentTimeout = $timeout(function(){
                    if(event.which != 13){ 
                        $scope.searchMoreFriend(index);
                    }
                }, DELAY_TIME_BEFORE_POSTING)
            };

            $scope.friends = [];
            $scope.showSearchFriendLoader = [];
            $scope.cancelFriendSearch = false;
            $scope.showSearchFriendList = [];
            $scope.searchMoreFriend = function(postIndx){
                $scope.searchFriend = $('.addMoreTagFriend'+postIndx).val();
                $scope.friendTagIndex[postIndx] = -1;
                $scope.cancelFriendSearch = false;
                $scope.showSearchFriendList[postIndx] = true;
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.friend_name = $scope.searchFriend;
                opts.session_id = APP.currentUser.id;
                opts.limit_start = 0;
                opts.limit_size =  APP.friend_list_pagination.end;
                $scope.showSearchFriendLoader[postIndx] = true;
                $scope.showTagLoading[postIndx] = true
                ProfileService.searchFriends(opts,function(data){
                    $scope.showSearchFriendLoader[postIndx] = false;
                    if($scope.cancelFriendSearch === false){
                        $scope.friends[postIndx] = data.data.users;
                    }
                });
            };

            // Store friend 
            $scope.postTaggedFriend = [];
            $scope.dublicate = false;
            $scope.taggedSelectFriend = function(friendInfo, postIndex){
                $scope.dublicate = false;
                angular.forEach($scope.postTaggedFriend[postIndex],function(index){
                    if(index.id === friendInfo.user_id){
                        $scope.dublicate = true;
                    }
                });

                if($scope.dublicate === false){console.log(friendInfo);console.log(postIndex);
                    $scope.postTaggedFriend[postIndex].push({"id":friendInfo.user_id, "first_name": friendInfo.user_info.first_name, "last_name": friendInfo.user_info.last_name,"profile_image": friendInfo.user_info.profile_image,"profile_image_thumb":friendInfo.user_info.profile_image_thumb});
                    $scope.friends[postIndex] = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTagIndex[postIndex] = -1;
                    angular.element('.addMoreTagFriend'+postIndex).val("");
                    $scope.showSearchFriendList[postIndex] = false;
                }else{
                    $scope.friends[postIndex] = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTagIndex[postIndex] = -1;
                    angular.element('.addMoreTagFriend'+ postIndex).val("");
                    $scope.showSearchFriendList[postIndex] = false;
                }
            };

            // stop the service for loading more service
            $scope.lostFocus = function(postIndex){
                $timeout(function(){
                    $scope.friends[postIndex] = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTagIndex[postIndex] = -1;
                    angular.element('.addMoreTagFriend'+ postIndex).val("");
                    $scope.showSearchFriendList[postIndex] = false;
                },300);
            };

            // Up down key control in search friend list
            $scope.friendTagIndex = [];
            $scope.searchNevigateControl = function(event, index){
                if(event.keyCode===40){
                    event.preventDefault();
                    if($scope.friendTagIndex[index]+1 !== $scope.friends[index].length){
                        $scope.friendTagIndex[index]++;
                    }
                }else if(event.keyCode===38){
                    event.preventDefault();
                    if($scope.friendTagIndex[index]-1 !== -1){
                        $scope.friendTagIndex[index]--;
                    }
                }else if(event.keyCode===13){console.log($scope.friends[index][$scope.friendTagIndex[index]]);
                        $scope.taggedSelectFriend($scope.friends[index][$scope.friendTagIndex[index]], index);
                }
            };
        //function to call initial loading
        $scope.showFriendPostList = function(){
            $scope.isLoading = true;
            $scope.userPostList = [];
            $scope.totalSize = 0;
            $scope.myRes = 1;
            $scope.noContent = false; 
            $scope.listFriendPost();
        };
        // function to get the post and comment of the post
         $scope.commentLoading = [];
         $scope.getComments = function(postIndx) {
            var post = $scope.userPostList[postIndx];
            $scope.userPostList[postIndx].comments = [];
            var opts = {};
            opts.post_id = post.id;
            opts.user_id = APP.currentUser.id;
            opts.limit_start = APP.dashbord_comment.start;
            opts.limit_size = APP.dashbord_comment.end;

            // This service's function returns post
            ProfileService.getDashboardComments(opts, function(data){
                if(data.code == 100)
                {
                    $scope.userPostList[postIndx].comments = data.data.comment;
                    $scope.commentLoading[postIndx] = false;
                    $scope.commentsLength[postIndx] = $scope.userPostList[postIndx].comments.length;
                    if($scope.userPostList[postIndx].comments.length  != 0 ) {
                        $scope.noComment = true;
                    }
                } else {
                    $scope.commentLoading[postIndx] = false;
                }
            });
        };
        //function to show limited comment of the post
        $scope.showLimitedComment = function(postIndx) {
            $scope.commentInProcess = true;
            var post = $scope.posts[postIndx];
            var opts = {};
            opts.post_id = post.post_id;
            opts.user_id = $scope.currentUser.id;
            $scope.getComments(opts, postIndx);
        };
        $scope.showAllComments = function(postIndx) {
          $scope.showComments[postIndx] = true;
          $scope.commentLoading[postIndx] = true;
          $scope.getComments(postIndx);
        };
        
        $scope.pageSize = 4;
        //function to delete the comment of a post
        //funciton to delete single comment
        $scope.delCommentErrMsg = [];
        $scope.delCommentErrCls = [];
        $scope.deleteComment = function(postIndx,comment) {

            var indx = $scope.userPostList[postIndx].comments.indexOf(comment);
            var commentData = {};
            commentData = $scope.userPostList[postIndx].comments[indx];
            $scope.deleteCommentIndx = commentData.id;
            var formData = {};
            formData.user_id = APP.currentUser.id;
            formData.comment_id = commentData.id;

            //calling the comment service to delete the selected comment 
            ProfileService.deleteDashboardComment(formData, function(data){
                if(data.code == 101) {
                    $scope.delCommentErrMsg[commentData.id] = '';
                    $scope.delCommentErrCls[commentData.id] = '';
                    $scope.userPostList[postIndx].comments.splice(indx, 1);
                    $scope.userPostList[postIndx].comment_count--;
                    $scope.deleteCommentIndx = '';
                }
                else {
                    $scope.delCommentErrMsg[commentData.id] = $scope.i18n.dashboard.postcomment.delete_comment_fail;
                    $scope.delCommentErrCls[commentData.id] = 'text-red';
                    $scope.deleteCommentIndx = '';
                    $scope.userPostList;
                }
                $timeout(function(){
                    $scope.delCommentErrCls[postIndx] = '';
                    $scope.delCommentErrMsg[postIndx] = '';
                }, 15000);
            });
        };
        $scope.editCommentText = [];
        $scope.activeCommentEdit = [];
        $scope.isEditComment = [];
        $scope.commentErrorMsg = [];
        $scope.commentErrorCls = [];
        $scope.commentInProcess = [];
        //funtion to open form to update comment
        $scope.updateComment = function(postIndx, comment) {
            $("#commentBoxId-"+postIndx).hide();
            $scope.commentInProcess[postIndx] = true;
            $scope.commentErrorMsg[postIndx] = '';
            var indx = $scope.userPostList[postIndx].comments.indexOf(comment);
            var comment = $scope.userPostList[postIndx].comments[indx];
            $scope.isEditComment[postIndx] = false;
            $scope.activeCommentEdit[postIndx] = comment.id
            $scope.editCommentText[postIndx]=comment.comment_text;
        };

        //function to edit a comment
        $scope.editComment = function(postIndx, comment) {
            var opts = {};
            $scope.commentErrorMsg[postIndx]= '';
            var indx = $scope.userPostList[postIndx].comments.indexOf(comment);
            var comment = $scope.userPostList[postIndx].comments[indx];
            var newText = $scope.editCommentText[postIndx];
            $scope.isEditComment[postIndx] = true;

            if(newText == undefined || newText == '') {
                $scope.isEditComment[postIndx]= false;
                $scope.commentErrorCls[postIndx] = 'text-red';
                $scope.commentErrorMsg[postIndx] = $scope.i18n.editprofile.no_empty_comment;
                $timeout(function(){
                    $scope.commentErrorCls[postIndx] = '';
                    $scope.commentErrorMsg[postIndx] = '';
                }, 15000);
                return false;
            } 

            opts.user_id = APP.currentUser.id;
            opts.comment_id = comment.id;
            opts.comment_text = newText;

            ProfileService.updateDashboardComment(opts, function(data){
                if(data.code == 101) {
                    $scope.commentInProcess[postIndx] = false;
                    $scope.activeCommentEdit[postIndx] = '';
                    $scope.commentErrorCls[postIndx] = '';
                    $scope.commentErrorMsg[postIndx] = '';
                    $scope.editCommentText[postIndx] = '';
                    $scope.userPostList[postIndx].comments[indx].comment_text = newText;
                    $scope.isEditComment[postIndx] = false;
                    $("#commentBoxId-"+postIndx).show();
                } else {
                    $scope.activeCommentEdit[postIndx] = '';
                    $scope.commentInProcess[postIndx] = false;
                    $scope.isEditComment[postIndx] = false;
                    $scope.commentErrorCls[postIndx] = 'text-red';
                    $scope.commentErrorMsg[postIndx]= $scope.i18n.editprofile.not_posted;
                    $scope.editCommentText[postIndx] = '';
                    $("#commentBoxId-"+postIndx).show();
                }
                $timeout(function(){
                    $scope.commentErrorCls[postIndx] = '';
                    $scope.commentErrorMsg[postIndx] = '';
                }, 15000);
            });
        };

        //funtion to open form to update comment
        $scope.cancelEditComment = function(postIndx, indx) {
            $scope.commentInProcess[postIndx] = false;
            $scope.activeCommentEdit[postIndx] = '';
            $scope.commentErrorMsg[postIndx] = '';
            $scope.commentErrorCls[postIndx] = '';
            $scope.editCommentText[postIndx] = '';
            $scope.isEditComment[postIndx] = false;
            $("#commentBoxId-"+postIndx).show();
        };
        $scope.showAllFriend = function(post_id, creater_info, allTagFriend){
            $scope.allTagFriends = allTagFriend;
            $scope.post_id = post_id;
            $scope.creater = creater_info
            var modalInstance = $modal.open({
                template: '<div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3><div class="modal-popup-close" ng-click="closeModal()"></div> </div><div class="modal-body tag-frnd-modal"><ul><li data-ng-repeat="friend in allTagFriends"><span class="tag-img"><img title="" style="width:30px;height:30px"  alt="No image available"  data-ng-src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a href ng-click="viewFriendProile(friend.id)">{{friend.first_name}} {{friend.last_name}}</a></span><span data-ng-if="creater.id === currentUser.id || currentUser.id === friend.id" ng-click="RemoveTagFriend(friend, creater.id)" class="rmv-tag"><a href>{{i18n.profile_post.remove_tagged_friend}}</a></span></li></ul></div><div class="modal-footer"></div>',
                controller: 'ModalController',
                size: 'lg',
                scope: $scope,
            });

            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
            $scope.RemoveTagFriend = function(friend, createrId){
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.untag_user_id = friend.id;
                opts.post_id = $scope.post_id;
                ProfileService.removeTagedFriends(opts,function(data){
                    if(data.code === 101){
                        var index = $scope.allTagFriends.indexOf(friend)
                        $scope.allTagFriends.splice(index,1);
                        if(createrId != APP.currentUser.id ){
                            modalInstance.close();
                        }
                        if($scope.allTagFriends.length === 0){
                            modalInstance.close();
                        }
                    } 
                });
            };
        };

        // checking tagged friend
        $scope.validate = false;
        $scope.checkTagUser = function(allTaggedFriend){
            $scope.tagInfo = allTaggedFriend;
            $scope.validate = false;
            angular.forEach($scope.tagInfo,function(index){
                if(index.id === APP.currentUser.id){
                    $scope.validate = true;
                }
            });

            if($scope.validate === true){
                return true;
            }
        };

        $scope.averageVoting = 0;
        $scope.vote_count = 0;
        $scope.waitRateResponse = false;
        $scope.ratePost = function(rating, post_id, index){
            var update = "";
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "dashboard_post";
            opts.type_id = post_id;
            opts.rate = rating;
            $scope.waitRateResponse = true;
            if($scope.userPostList[index].is_rated){
                update = "update";
            }else{
                update = "add";
            }
            ProfileService.rateThis(opts, update, function(data){
                if(data.code === 101 && data.message === "SUCCESS"){
                    $scope.userPostList[index].avg_rate = data.data.avg_rate;
                    $scope.userPostList[index].no_of_votes = data.data.no_of_votes;
                    $scope.userPostList[index].is_rated = true;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    //$scope.userPostList[index].avg_rate = 0;
                    //$scope.userPostList[index].no_of_votes = 0;
                    $scope.userPostList[index].is_rated = false;
                    $scope.userPostList[postIndx].current_user_rate = 0;
                }
                $scope.waitRateResponse = false;
            });
        };

        $scope.WaitDeleteResponse = false;
        $scope.removeRating = function(post_id, postIndx){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "dashboard_post";
            opts.type_id = post_id;
            if($scope.WaitDeleteResponse === false){
                $scope.WaitDeleteResponse = true;
                $scope.waitRateResponse = true;
            }else{
                return;
            }
            ProfileService.removeRating(opts,function(data){ console.log($scope.userPostList[postIndx]);
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.userPostList[postIndx].current_user_rate = 0;
                    $scope.userPostList[postIndx].is_rated = false;
                    $scope.userPostList[postIndx].no_of_votes = data.data.no_of_votes;
                    $scope.userPostList[postIndx].avg_rate =  data.data.avg_rate;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    $scope.userPostList[postIndx].current_user_rate = 0;
                    $scope.userPostList[postIndx].is_rated = false;
                    //$scope.userPostList[postIndx].no_of_votes =0;
                    //$scope.userPostList[postIndx].avg_rate =  0;
                }
                $scope.WaitDeleteResponse = false;
                $scope.waitRateResponse = false;
            });
        };

        $scope.averageRating = function(rating){
            return new Array(Math.ceil(rating));
        };

        $scope.blankStar = function(rating){
            if((5-Math.ceil(rating)) > 0){
                return new Array(5-Math.ceil(rating));
            }else{
                return 0;
            }
        };
        
        $scope.max = 5;
        $scope.isReadonly = false;

        $scope.rateThis = function(value, id, index){
            $scope.ratePost(value, id, index);
        };

        $scope.hoveringOver = function(value) {
            $scope.overStar = value;
            $scope.percent = 100 * (value / $scope.max);
        };

        $scope.ratingStates = [
            {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
        ];
        $scope.showPeopleLoader = false;
        $scope.findPeople = function(id, type, count_Vote){
            if(count_Vote === 0 ){
                return false;
            }
            var opts = {};
            $scope.ratedUsers = {};
            $scope.showPeopleLoader = true;
            var modalInstance = $modal.open({
                //template: '<style>.modal-body.tag-frnd-modal ul li{padding:8px 130px 8px 0}.modal-content .modal-body ul.rmv-tag{position:absolute;right:0;top:10px}.modal-content .modal-body ul.rmv-tag li{padding:0;display:inline-block;vertical-align:middle;border:0}.modal-content .modal-body ul.rmv-tag li span.votes-avg{width:23px;height:21px;margin-left:2px;background:url(app/assets/images/rating-star.png) no-repeat;display:block}.modal-content .modal-body ul.rmv-tag li span.votes-blank{width:23px;height:21px;margin-left:2px;background:url(app/assets/images/rating-star.png) 0 -21px no-repeat;display:block}.modal.in .modal-dialog{margin:auto;top:0;bottom:0;left:0;right:0;position:absolute}.modal-body.tag-frnd-modal{height:360px;overflow-y:auto;overflow-x:hidden;padding:0 10px}.modal .modal-content{margin:auto;height:400px;top:0;bottom:0;left:0;right:0;position:absolute;overflow:visible}@media screen and (max-width:479px){.modal.in .modal-dialog{margin:auto 20px}.modal-body.tag-frnd-modal ul li{padding:8px 70px 8px 0}.modal-content .modal-body ul.rmv-tag li span.votes-avg{width:12px;height:10px;margin-left:1px;background:url(app/assets/images/rating-star.png) 0 0/12px no-repeat}.modal-content .modal-body ul.rmv-tag li span.votes-blank{width:12px;height:10px;margin-left:1px;background:url(app/assets/images/rating-star.png) 0 -11px/12px no-repeat}}</style><div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3><div class="modal-popup-close" ng-click="closeModal()"></div></div><div class="modal-body tag-frnd-modal"><ul ng-hide="showPeopleLoader"><li data-ng-repeat="friend in ratedUsers"><span class="tag-img"><img title="" style="width:30px;height:30px" alt="No image available" src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a ng-href="#/viewfriend/{{friend.id}}">{{friend.first_name}} {{friend.last_name}}</a><span class="frnd-details"><a href>{{friend.about_me}}</a></span></span><ul class="rmv-tag"><li data-ng-repeat="avgRate in averageRating(friend.rate) track by $index"><span ng-class="friend.rate % 1 == 0 ?\'votes-avg\': ($last ? \'half-avg\':\'votes-avg\')" /></li><li ng-repeat="blank in blankStar(friend.rate) track by $index"><span class="votes-blank"/> </li></ul></li></ul> <div ng-show="showPeopleLoader"><img titile="" alt="" src="app/assets/images/proceed.gif"></div></div><div class="modal-footer"></div>',
                templateUrl: 'app/views/find_people.html',
                controller: 'ModalController',
                size: 'lg',
                scope: $scope,
            });
            opts.type = type;
            opts.type_id = id;
            opts.session_id = APP.currentUser.id;
            ProfileService.findPeople(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.showPeopleLoader = false;
                    $scope.ratedUsers = data.data.users_rated;
                    if(data.data.users_rated.length == 0){
                        $scope.message = $scope.i18n.dashboard.no_vote;
                    }
                }else{
                    $scope.showPeopleLoader = false;
                }
            });
            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
        };


      },
      link:function ($scope){
        $(".fancybox").fancybox();
        $scope.showFriendPostList();
      },
      templateUrl: 'app/views/profile_friend_post_list.html'
    }
  }]).filter('unsafe', function($sce) {
    return function(val) {
        return $sce.trustAsHtml(val);
    };
});;

  //Displaying the post form for store detail
  app.directive('friendProfilePostForm',['$timeout', 'ProfileService', 'FileUploader', '$sce', '$routeParams', 'focus' , function($timeout, ProfileService, FileUploader, $sce, $routeParams, focus) {
    return {
      restrict: 'E',
      controller: function ($scope){
        if($scope.friendProfile.user_info.friend_type == 2){
            $scope.privacySet = 3;
        } else if($scope.friendProfile.user_info.friend_type == 1){
            $scope.privacySet= 3;    
        } else {
            $scope.privacySet= 3;
        }
        //update model fo privacySet
        $scope.updatePrivacyModel = function (pindx){
            $scope.privacySet = pindx;
        }
        
        //function to create post for dashboard
        $scope.postErrMsg = '';
        $scope.postErrCls = '';
        $scope.postContentStart = false;
       
        $scope.imagePrvSrc = [];
        $scope.postProfileFiles = [];
        $scope.imgProgress = [];
        $scope.postImgLoader = [];
        $scope.progress = [];
        $scope.tempPostId = '';
        var uploader =  $scope.uploader = new FileUploader({
          url: APP.service.dashboardpost+"?access_token="+APP.accessToken,
          headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'method': 'POST'
              /*'Accept': 'text/json'*/
          },
          data:{
              'user_id': APP.currentUser.id,
              'title':"Not in use on frontend", //This dummy data as currently there is no field to accept the posttitle
              'description':'',
              'youtube_url':'',
              'to_id': $routeParams.friendId,
              'link_type':"0",
              'post_type':"0",
              'privacy_setting': $scope.privacySet
              //'post_id': $scope.tempPostId,
          },
          dataObjName:'reqObj',
          formDataName:'postfile[]'
        });
        // FILTERS
        uploader.filters.push({
            name: 'postfile[]',
            fn: function(item /*{File|FileLikeObject}*/, options) {
                var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
            }
        });
        //function to add image on user post
        $scope.isImage = false;
        $scope.imgUpload = false;
        $scope.uploadBox = false;//previously used to hide the text area in first click of photo tab 
        $scope.addImage = function() {
            var href = $('#previewUrl_lp1').html();
            if(href != ''){
                $timeout(function(){
                    $('#closePreview_lp1').click();
                }, 100);
            }
            $scope.isImage = true;
            $scope.imgUpload = false;
            $scope.uploadBox = true;
            $scope.imagePrvSrc = [];
            $scope.postProfileFiles = [];
        };
        $scope.addPost = function() { 
            $scope.isImage = false;
            $scope.imgUpload = false;
            $scope.uploadBox = false;
            $scope.isPost = true;
            $scope.imagePrvSrc = [];
            $scope.postProfileFiles = [];
        };
            //remove iamge from preview array
        $scope.removeImage = function(index) {
            var tempImg = $scope.imagePrvSrc[index];
            $scope.imagePrvSrc.splice(index, 1);
            var item = $scope.uploader.queue[index];
            item.remove();
            var formData = {};
            formData.user_id = APP.currentUser.id;
            formData.post_media_id = tempImg.media_id;

            //calling the service to delete the selected post 
            ProfileService.deletePostMedia(formData, function(data){
                if(data.code == 101) {
                    
                } else {
                    $scope.imagePrvSrc[index] = tempImg;
                    $scope.postErrCls = 'text-red';
                    $scope.postErrMsg = $scope.i18n.dashboard.postcomment.remove_img_fail;
                    $timeout(function(){
                        $scope.postErrCls = '';
                        $scope.postErrMsg = '';
                    }, 15000);
                    $scope.userPostList;
                }
            });
        };
        uploader.onAfterAddingFile = function(fileItem) {
            $scope.postContentStart = true;
            uploader.data.post_id=$scope.tempPostId;
            var queueLen = uploader.queue.length-1;
            if(uploader.queue.length != 0){
                $scope.uploadBox = false;
                $scope.imgUpload = true;
            }
            $scope.postImgLoader[queueLen] = true;
            uploader.uploadItem(fileItem);
        };

        uploader.onSuccessItem = function(fileItem, response, status, headers) {
            var index = uploader.getIndexOfItem(fileItem);
            if(response.code == 101){
                $scope.imagePrvSrc[index] = response.data;
                $scope.postImgLoader[index] = false;
                $scope.tempPostId = response.data.id;
                uploader.data.post_id=response.data.id;
            }
        };

        uploader.onCompleteAll = function() {
            $scope.postContentStart = false;
        }

        uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
            $scope.postErrMsg = $scope.i18n.editprofile.no_media_valid;
            $scope.postErrCls = 'text-red';
            $timeout(function(){
                $scope.postErrCls = '';
                $scope.postErrMsg = '';
            }, 15000);
        };
        
        $scope.createPost = function() {
            $scope.activeEdit.length = 0;
            $scope.updateBody = [];
            $scope.activeEdit = [];
            $scope.editPostErrorCls = [];
            $scope.editPostErrorMsg = [];
            var link_type;
            $scope.postContentStart = true;
            $scope.postContentLoader = true;
            var opts = {};
            $scope.postErrMsg = '';
            var filescount = $scope.imagePrvSrc.length;
            
            /*Link Preview feature*/
            var descval = $("#preview_lp1").html();
            var href = $('#previewUrl_lp1').html();
            var textarea = $('#text_lp1').val();
            var description = '';
            description = textarea;
            var regex = /src="([^"]+)"/;
            var src = description.split(regex)[1];
            if(src != undefined && src != ''){
                description = src;
            }

            description = escapeHtmlEntities(description);

            if(href == '') {
                link_type = "0";
            } else {
                description = "<p>"+description+"</p>";
                description += descval;
                link_type = "1";
            }

          if ((description == undefined || description == '') && filescount == 0) {
                $scope.postErrCls = 'text-red';
                $scope.postErrMsg = $scope.i18n.editprofile.attach_link;
                $scope.postContentStart = false;
                $scope.postContentLoader = false;
                $timeout(function(){
                    $scope.postErrCls = '';
                    $scope.postErrMsg = '';
                }, 15000);
              return false;
          }
          
          opts.user_id = APP.currentUser.id;
          opts.title = $scope.i18n.editprofile.no_use; //This dummy data as currently there is no field to accept the posttitle
          opts.description = description;
          opts.youtube_url = '';
          opts.to_id = $routeParams.friendId;
          opts.link_type = link_type;
          opts.post_id = $scope.tempPostId;
          opts.post_type = "1";
          opts.media_id = [];
          opts.privacy_setting = $scope.privacySet;
          var friendId = [];
            if($scope.storedFriend.length > 0){
                for (var i = 0; i < $scope.storedFriend.length; i++) {
                    friendId.push($scope.storedFriend[i].user_info.id);
                };

                opts.tagged_friends = friendId.join();
            }else{
                opts.tagged_friends = "";
            }
          angular.forEach($scope.imagePrvSrc, function(file) {
              opts.media_id.push(file.media_id);
          });
          ProfileService.dashboardPost(opts, function(data){
              if(data.code == 101) {
                  $scope.storedFriend = [];
                  $scope.noContent = false;
                  var targetObject = {};
                  targetObject = data.data;
                  $scope.userPostList.unshift(targetObject);
                  $scope.postErrMsg = '';
                  $scope.imagePrvSrc = [];
                  $scope.postProfileFiles = [];
                  $scope.postErrCls = '';
                    
                  uploader.data.post_id={};
                  while(uploader.queue.length) {
                     uploader.queue[0].remove();
                  }
                  $scope.tempPostId='';
                  $scope.postContentStart = false;
                  $scope.postContentLoader = false;
                  $scope.postText = '';
                  $scope.isImage = false;
                  $scope.imgUpload = false;
                  $scope.uploadBox = false;
                  $('#text_lp1').val('');
                  $('#text_lp1').attr("style", "");
                    $timeout(function(){
                            $('#closePreview_lp1').click();
                    }, 100);
                } else {
                    if($scope.userPostList.length == 0){
                        $scope.noContent = true; 
                    }
                    $scope.postErrCls = 'text-red';
                    $scope.postErrMsg = $scope.i18n.editprofile.post_unable;
                    $timeout(function(){
                        $scope.postErrCls = '';
                        $scope.postErrMsg = '';
                    }, 15000);
                  $scope.imagePrvSrc = [];
                  $scope.postContentStart = false;
                  $scope.postProfileFiles = [];
                  $scope.postText = undefined; 
                  $scope.postContentLoader = false;
                  $scope.isImage = false;
                  $scope.imgUpload = false;
                  $scope.uploadBox = false;
              }
          });
        };
        // Show Tag Column
        $scope.showTagForm = false;
        $scope.showTagCloumn = function(){
            if($scope.showTagForm === false){
                $scope.showTagForm = true;
                focus('friendSearchTagFriend');
            }else{
                $scope.showTagForm = false;
            }
        };

        $scope.focusOn = function(){
            focus('friendSearchTagFriend');
        };
    
        // Show the list of friend
        var DELAY_TIME_BEFORE_POSTING = 300;
        var currentTimeout = null;
        angular.element('#friendSearchTagFriend').keypress(function(event) {
            var model = $scope.searchText;
            if(currentTimeout) {
            $timeout.cancel(currentTimeout);
            }
            currentTimeout = $timeout(function(){
                if(event.which != 13){ 
                    $scope.tagFriendSuggestion();
                }
            }, DELAY_TIME_BEFORE_POSTING)
        });

        $scope.friends = [];
        $scope.cancelFriendSearch = false;
        $scope.showSearchLoader = false;
        $scope.tagFriendSuggestion = function(){
            $scope.cancelFriendSearch = false;
            $scope.showFriendList = true;
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.friend_name = $scope.friendName;
            opts.session_id = APP.currentUser.id;
            opts.limit_start = 0;
            opts.limit_size =  APP.friend_list_pagination.end;
            $scope.showSearchLoader = true;
            ProfileService.searchFriends(opts,function(data){
                $scope.showSearchLoader = false;
                if($scope.cancelFriendSearch === false){
                    $scope.friends = data.data.users;
                }
            })
        };

        // Store friend 
        $scope.storedFriend = [];
        $scope.dublicate = false;
        $scope.selectFriend = function(friendInfo){
            $scope.dublicate = false;
            angular.forEach($scope.storedFriend,function(index){
                if(index.user_id === friendInfo.user_id){
                    $scope.dublicate = true;
                }
            });

            if($scope.dublicate === false){
                $scope.storedFriend.push(friendInfo);
                $scope.friends = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTagIndex = -1;
                angular.element('#friendSearchTagFriend').val("");
                $scope.showFriendList = false;
            }else{
                $scope.friends = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTagIndex = -1;
                angular.element('#friendSearchTagFriend').val("");
                $scope.showFriendList = false;
            }
        };

        // stop the service for loading more service
        $scope.lostFocus = function(){
            $timeout(function(){
                $scope.friends = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTagIndex = -1;
                angular.element('#friendSearchTagFriend').val("");
                $scope.showFriendList = false;
            },300);
        };
        // Remove selected friend
        $scope.removeTagFriend = function(friendIndex){
            var index = $scope.storedFriend.indexOf(friendIndex);
            $scope.storedFriend.splice(index,1);
        };

        // Up down key control in search friend list
        $scope.friendTagIndex = -1;
        $scope.keyUpDownControl = function(event){
            if(event.keyCode===40){
                event.preventDefault();
                if($scope.friendTagIndex+1 !== $scope.friends.length){
                    $scope.friendTagIndex++;
                }
            }else if(event.keyCode===38){
                event.preventDefault();
                if($scope.friendTagIndex-1 !== -1){
                    $scope.friendTagIndex--;
                }
            }else if(event.keyCode===13){
                    $scope.selectFriend($scope.friends[$scope.friendTagIndex]);
            }
        };
     
      },
      link: function (scope, iElement, iAttrs) {
        $($('#lp1').linkPreview()).appendTo(iElement[0]);
      },
      templateUrl: 'app/views/profile_friend_post_form.html'
      }
  }]);

  
app.directive('groupGrid', function() {
  return {
    restrict: 'E',
     templateUrl: './app/views/group_grid.html'
  }
});
//Displaying the comment post form for store detail
app.directive('groupCommentForm',['CommentService', function(CommentService) {
  return {
    restrict: 'E',
    templateUrl: 'app/views/group_comment_form.html',
    scope: {
      loadComment: "&loadComment"
    },
    link : function(scope, elem, attrs){
       
        scope.addComment = function(){
        scope.postIndx = attrs.postIndx;
        scope.commentInProcess = true;
        scope.commentErrMsg = "";

        if (scope.commentText === undefined && scope.myFile === undefined) {
            scope.commentInProcess = false;
            scope.commentErrMsg = scope.i18n.groupcontrol.write_post;
            return false;
        } else if (scope.myFile !== undefined && scope.commentText === undefined) {
            scope.commentInProcess = false;
            scope.commentErrMsg = scope.i18n.groupcontrol.write_to_post;
            return false;
        } 

        var opts = {};
        opts.session_id = APP.currentUser.id;
        opts.post_id = attrs.postId;
        opts.body = scope.commentText;
        opts.youtube_url='';

        if (scope.myFile !== undefined) {
          //Allow some images types for uploading
          var imageType = scope.myFile['name'].substring(scope.myFile['name'].lastIndexOf(".") + 1);
          // Checking Extension
          if (!(imageType == "gif" || imageType == "png" || imageType == "jpg" || imageType == "jpeg")) {
              scope.postErrorMsg = scope.i18n.groupcontrol.upload_media;
              scope.commentErrMsg = false;
              return false;
          }
        opts.commentfile = scope.myFile;
        }

        CommentService.createComment(opts, scope.myFile, function(data){
          if(data.code == 101) {
            scope.commentInProcess = false;
            scope.commentErrorMsg = '';
            scope.commentText = '';
            scope.loadComment(attrs.postId);
            scope.myFile = '';
          } else {
            scope.commentInProcess = false;
            scope.commentErrorMsg = scope.i18n.groupcontrol.not_posted;
            scope.myFile = '';
          }
        });
      };
    }
  };
}]);
//Displaying the comment post form for store detail
app.directive('groupCommentForm',['CommentService', 'fileReader','FileUploader', '$timeout', function(CommentService, fileReader, FileUploader, $timeout) {
  return {
    restrict: 'E',
      templateUrl: 'app/views/group_comment_form.html',
      scope : true,
      link : function(scope, elem, attrs){
        scope.showPreview = false;
        scope.comment_id = '';
        scope.image_id = [];
        scope.imgSrc = [];
        scope.isInProgress = [];
        scope.commentFiles = [];
        scope.selectInProgress = [];
        scope.imgRes = 1;
        scope.getFile = function () {
            var tempopts = {};
            tempopts.session_id = APP.currentUser.id;
            tempopts.postid = attrs.postId;
            tempopts.body = scope.i18n.editprofile.comment_image_test;
            tempopts.comment_type = '0';
            tempopts.image_id = '';
            tempopts.comment_id = '';
            var len = scope.commentFiles.length;
            CommentService.createCommentWithImage(tempopts, scope.commentFiles[0], function(data){
                if(data.code == 101) {
                    scope.comment_id = data.data.id;
                    scope.imgSrc.push(data.data);
                    scope.image_id.push(data.data.media_id);
                    tempopts.comment_id = scope.comment_id;
                    scope.selectInProgress.splice(0,1);
                    for(j=1; j < len; j++){
                        CommentService.createCommentWithImage(tempopts, scope.commentFiles[j], function(data){
                            if(data.code == 101) {
                                scope.comment_id = data.data.id;
                                scope.imgSrc.push(data.data);
                                scope.image_id.push(data.data.media_id);
                                scope.selectInProgress.splice(0,1);
                            }else{
                              scope.commentErrCls = 'text-red';
                              scope.commentErrMsg = scope.i18n.dashboard.postcomment.upload_media_fail;
                            }
                        });
                    }
                }else{
                  scope.commentErrCls = 'text-red';
                  scope.commentErrMsg = scope.i18n.dashboard.postcomment.upload_media_fail;
                }
            });
            setTimeout(function(){
                scope.commentErrCls = '';
                scope.commentErrMsg = '';
            }, 15000);
        };

      //remove iamge from preview array
      scope.removeImage = function(index) {
          scope.imgSrc.splice(index, 1);
          scope.isInProgress.splice(index, 1);
          scope.image_id.splice(index, 1);
          if(scope.imgSrc.length == 0){
            scope.selectInProgress = [];
            scope.commentFiles == [];
            scope.file = [];
            scope.showImgSelect = true;
            scope.showPreview = false;
          }
          
      };
      
      scope.res = 0;
      scope.addComment = function(){
        scope.commentErrCls = '';
        scope.commentErrMsg = '';
        scope.finalCommentInProcess = true;
        scope.commentErrMsg = "";
        var filescount = scope.imgSrc.length;
        var postIndx = attrs.postIndx;

        if ((scope.commentText === undefined || scope.commentText === '') && filescount === 0) {
            scope.finalCommentInProcess = false;
            scope.commentErrMsg = scope.i18n.groupcontrol.write_post;
            scope.commentErrCls = 'text-red';
            $timeout(function(){
              scope.commentErrCls = '';
              scope.commentErrMsg = '';
            }, 15000);
            return false;
        }  

        var opts = {};
        opts.session_id = APP.currentUser.id;
        opts.postid = attrs.postId;
        opts.body = scope.commentText;
        opts.media_id = [];
        opts.youtube_url='';
        opts.comment_id = "";
        if(scope.image_id.length != 0){
          opts.media_id = scope.image_id;
        }
        if(scope.comment_id != ''){
          opts.comment_id = scope.comment_id;  
        }
        opts.comment_type = '1';
        
        opts.tagging = scope.taggedObject; // for taggedObject
        if(scope.res == 0){
          scope.res = 1;
          CommentService.createComment(opts, function(data){
            scope.res = 0;
            if(data.code == 101) {
              scope.finalCommentInProcess = false;
              scope.commentErrorMsg = '';
              scope.commentErrCls = '';
              scope.commentText = '';
              scope.posts[postIndx].comments.push(data.data);
              scope.posts[postIndx].comment_count++;
              scope.commentFiles = [];
              scope.imgSrc = [];
              scope.showPreview = false;
              scope.showImgSelect = true;
              scope.comment_id = '';
            } else {
              scope.finalCommentInProcess = false;
              scope.showImgSelect = true;
              scope.commentErrCls = 'text-red';
              scope.commentErrMsg = scope.i18n.groupcontrol.not_posted;
              scope.commentFiles = [];
              scope.imgSrc = [];
              scope.file = [];
              scope.showPreview = false;
              scope.showImgSelect = true;
              scope.comment_id = '';
            }
            $timeout(function(){
                scope.commentErrCls = '';
                scope.commentErrMsg = '';
            }, 15000);
          });
        }
      };
    }
  };
}]);

//Displaying the post form for store detail
app.directive('groupPostList', function() {
  return {
      restrict: 'E',
      controller: function ($scope, PostService, $location, $timeout, $routeParams, CommentService, FileUploader ,ProfileService,$modal ,$log){
        $scope.editCommentText = [];
        $scope.activeCommentEdit = [];
        $scope.isEditComment = [];
        $scope.commentEditErrMsg = [];
        $scope.commentInProcess = [];
        $scope.commentEditErrCls = [];
        $scope.isSinglePostView = false;
        $scope.temp = $routeParams.postId;
        if($routeParams.postId != undefined && $routeParams.postId != ''){
          $scope.isSinglePostView = true;
        }
        //funtion to open form to update comment
        $scope.updateComment = function(postIndx, comment) {
            var indx = $scope.posts[postIndx].comments.indexOf(comment);
            $("#commentBoxId-"+postIndx).hide();
            $scope.commentInProcess[postIndx] = true;
            $scope.commentEditErrMsg[postIndx] = '';
            $scope.commentEditErrCls[postIndx] = '';
            $scope.commentInProcess = [];
            var post = $scope.posts[postIndx];
            var comment = $scope.posts[postIndx].comments[indx];
            $scope.isEditComment[postIndx] = false;
            $scope.activeCommentEdit[postIndx]= comment.id;
            $scope.editCommentText[postIndx]=comment.comment_text;
        }

        $(document).click(function(){
             $("ul.actions-drop-action").hide();
        });

        $scope.toggleEdit = function($event){
            $event.stopPropagation();
            if($($event.currentTarget).next('ul.actions-drop-action').is(':visible')){
                $($event.currentTarget).next('ul.actions-drop-action').hide();
            }else{
                $("ul.actions-drop-action").hide();
                $($event.currentTarget).next('ul.actions-drop-action').show(); 
            }
        };
            //function to edit a comment
        $scope.editComment = function(postIndx, indx, comment) {
            var opts = {};
            var post = $scope.posts[postIndx];
            var indx = $scope.posts[postIndx].comments.indexOf(comment);
            var commentData = $scope.posts[postIndx].comments[indx];
            var newText = $scope.editCommentText[postIndx];
            $scope.isEditComment[postIndx] = true;
            
            //TODO:: image uploading on comment edit
            if(newText == undefined || newText == '') {
                $scope.isEditComment[postIndx]= false;
                $scope.commentEditErrCls[postIndx] = 'text-red';
                $scope.commentEditErrMsg[postIndx] = $scope.i18n.editprofile.no_empty_comment;
                $timeout(function(){
                    $scope.commentEditErrCls[postIndx] = '';
                    $scope.commentEditErrMsg[postIndx] = '';
                }, 15000);
                return false;
            } 
            
            opts.session_id = $scope.currentUser.id;
            opts.post_id = post.post_id;
            opts.comment_id = commentData.id;
            opts.comment_author = commentData.comment_user_info;
            opts.youtube_url = commentData.youtube_url;
            opts.body = newText;
            var myFile = '';
            //TODO:: image uploading on comment edit

            CommentService.updateComment(opts, myFile, function(data){
                if(data.code == 101) {
                    $scope.isEditComment[postIndx] = false;
                    $scope.commentInProcess[postIndx] = false;
                    $scope.commentEditErrMsg[postIndx] = '';
                    $scope.activeCommentEdit[postIndx] = '';
                    $scope.commentEditErrCls[postIndx] = '';
                    $scope.posts[postIndx].comments[indx].comment_text = $scope.editCommentText[postIndx];
                    $("#commentBoxId-"+postIndx).show();
                } else {
                    $scope.isEditComment[postIndx] = false;
                    $scope.commentInProcess[postIndx] = false;
                    $scope.commentEditErrMsg[postIndx]= $scope.i18n.editprofile.not_posted;
                    $scope.commentEditErrCls[postIndx] = 'text-red';
                }
            });
        };

        //funtion to close the edit form to cancel comment
        $scope.cancelEditComment = function(postIndx, indx) {
            $scope.commentInProcess = [];
            $scope.commentInProcess[postIndx] = false;
            $scope.activeCommentEdit[postIndx] = '';
            $scope.editCommentText[postIndx]='';
            $scope.commentEditErrMsg[postIndx] = '';
            $scope.commentEditErrCls[postIndx] = '';
            $scope.isEditComment[postIndx] = false;
            $("#commentBoxId-"+postIndx).show();
        };  

          //funciton to delete single comment
          $scope.delCommentErrMsg = [];
          $scope.delCommentErrCls = [];
          $scope.deleteComment = function(postIndx, comment) {
              var indx = $scope.posts[postIndx].comments.indexOf(comment);
              var commentData = {};
              commentData = $scope.posts[postIndx].comments[indx];
              $scope.deleteCommentIndx = commentData.id;
              
              var formData = {};
              formData.session_id = $scope.currentUser.id;
              formData.comment_id = commentData.id;

              //calling the comment service to delete the selected comment 
              CommentService.deleteComment(formData, function(data){
                  if(data.code == 101) {
                      $scope.delCommentErrMsg[commentData.id] = '';
                      $scope.delCommentErrCls[commentData.id] = '';
                      $scope.deleteCommentIndx = '';
                      $scope.posts[postIndx].comments.splice(indx,1);
                      $scope.posts[postIndx].comment_count--;
                  }else {
                      $scope.delCommentErrMsg[commentData.id] = $scope.i18n.dashboard.postcomment.delete_comment_fail;
                      $scope.delCommentErrCls[commentData.id] = 'text-red';
                      $scope.deleteCommentIndx = '';
                  }
                  $timeout(function(){
                      $scope.delCommentErrCls[commentData.id] = '';
                      $scope.delCommentErrMsg[commentData.id] = '';
                  }, 15000);
              });
            };
            //funciton to delete single comment
            $scope.deleteMediaComment = function(comment, postIndx, mediaIndx) {
                //TODO:: media index need to be come dynamic for multiple medias
                var commentData = comment;
                var post = $scope.posts[postIndx];
                $scope.deleteCommentIndx = commentData.id;
                
                var formData = {};
                formData.user_id = $scope.currentUser.id;
                formData.comment_id = commentData.id;
                formData.comment_media_id = commentData.comment_media_info[0].id;

                //calling the comment service to delete the selected comment 
                CommentService.deleteMediaComment(formData, function(data){
                    if(data.code == 101) {
                        $scope.deleteCommentIndx = -1;
                        var opts = {};
                        opts.post_id = post.post_id;
                        opts.user_id = $scope.currentUser.id;
                        $scope.getComments(opts, postIndx);
                    }
                    else {
                        $scope.deleteCommentIndx = -1;
                        $scope.posts;
                    }
                });
            };
            //function to show all comment of the post
            $scope.showAllComments = function(postIndx) {
                $scope.commentInProcess = true;
                var post = $scope.posts[postIndx];
                var opts = {};
                opts.post_id = post.post_id;
                opts.session_id = $scope.currentUser.id;
                opts.limit_size = null;
                opts.limit_start = 0;
                $scope.getComments(opts, postIndx);
            };

            // function to get the post and comment of the post
            $scope.showComments = [];
            $scope.commentLoading = [];
            $scope.getComments = function(opts, postIndx) {
                $scope.posts[postIndx].comments = [];
                $scope.showComments[postIndx] = true;
                $scope.commentLoading[postIndx] = true;
                // This service's function returns post
                CommentService.listComment(opts, function(data){
                    if(data.code == 100)
                    {   
                        $scope.posts[postIndx].comments = data.data.comments;  
                        $scope.commentLoading[postIndx] = false;
                            if($scope.posts[postIndx].comments.length != 0 ) {
                                $scope.noComment = true;
                            }
                    } else {
                        $scope.commentLoading[postIndx] = false;
                    }
                });
            }; 
      },
      templateUrl: 'app/views/group_post_list.html'
  }
});

//Displaying the post form for store detail
app.directive('groupPostForm', function() {
  return {
      restrict: 'E',
      link: function (scope, iElement, iAttrs) {
        $($('#lp1').linkPreview()).appendTo(iElement[0]);
      },
      templateUrl: 'app/views/group_post_form.html'
  }
});
app.directive('imgModalNew',['$timeout', '$location', function($timeout, $location) 
{
    return {
        restrict: 'A',
        scope : true,
        controller : function ($scope,$modal,$log, SingleMediaDetailService, ProfileService, AlbumService, $routeParams)
        {
            $scope.OpenModal = function(index, viewalbum, leng, mainId, albumtype, parenttype, supportId, ClubMember) 
            {
                var modalInstance1;
                $scope.showInLimit = true;
                $scope.max          = 5;
                $scope.isReadonly   = false;
                $scope.album_type   = albumtype;
                $scope.parent_type  = parenttype;
                $scope.parent_id    = mainId;
                $scope.media_index  = index;
                $scope.leng         = leng
                $scope.pre_visible  = true;
                $scope.next_visible = true;
                $scope.modal_loader = true;
                $scope.viewalbum    = viewalbum;
                $scope.supportId    = supportId;
                $scope.media_id     = $scope.viewalbum[$scope.media_index].id;  
                if(ClubMember != undefined){/*This is defined when modal is opening from club album*/
                    $scope.is_member = ClubMember;
                }     
                
                $scope.friendTagIndex = 0;
                $scope.tagged_Friends = [];
                $scope.UpdateTag      = false;
                $scope.TagLoader      = false;
                $scope.friends        = [];
                $scope.cancelFriendSearch = false;
                $scope.showSearchLoader   = false;
                $scope.dublicate = false;
                $scope.toBelong = false;
                $scope.tagged_collection = []
                $scope.untagg_friend = {}
                $scope.choose = false;
                
                if(index === 0) $scope.pre_visible = false;
                if((leng-1)=== index) $scope.next_visible = false;
                
                $scope.getmediainfo = function(){
                    $scope.data = [];
                    var opt = new Object();
                        opt.media_id         = $scope.media_id;
                        opt.album_type       = $scope.album_type;
                        opt.album_id         = $scope.parent_id;
                        opt.user_id          = APP.currentUser.id; 
                        opt.owner_id         = $scope.supportId; 
                    
                    SingleMediaDetailService.getMediaInfo(opt, function(data) {
                        if(data.code == 101){
                            $scope.data         = data.data;
                            $scope.modal_loader = false;
                        }
                    });    
                };
                $scope.showAllTaggedFriend = function (){
                    $scope.showInLimit = false;
                }

                $scope.putFocus = function(){
                    document.getElementById('searchTagFriend').focus();
                }
                
                $scope.getmediainfo();

                var modalInstance = $modal.open({
                    templateUrl: "app/views/img_modal_new.html",
                    controller: 'ModalController',
                    size: 'lg',
                    scope: $scope,
                });

                modalInstance.result.then(function (selectedItem) {
                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                    $scope.tagged_Friends = [];
                    $scope.UpdateTag      = false;
                });

                $scope.change_image = function (changetype){
                    $scope.pre_visible  = true;
                    $scope.modal_loader = true;
                    $scope.next_visible = true;
                    $scope.media_index  = (changetype == 'pre' ? $scope.media_index - 1 : $scope.media_index + 1);
                    if($scope.media_index === 0) $scope.pre_visible = false;
                    if(($scope.leng-1) === $scope.media_index) $scope.next_visible = false;
                    $scope.media_id = $scope.viewalbum[$scope.media_index].id;    
                    $scope.getmediainfo();
                };    

                $scope.averageRating = function(rating){
                    return new Array(Math.ceil(rating));
                };

                $scope.blankStar = function(rating){
                    if((5-Math.ceil(rating)) > 0){
                        return new Array(5-Math.ceil(rating));
                    }else{
                        return 0;
                    }
                };

                $scope.viewUserProfile = function(friendId){
                    if(friendId == APP.currentUser.id){
                        modalInstance.dismiss('cancel');
                        modalInstance1.dismiss('cancel');
                        $location.path('profiles');
                    }else{
                        modalInstance.dismiss('cancel');
                        modalInstance1.dismiss('cancel');
                        $location.path('/viewfriend/'+friendId);
                    }
                };

                $scope.Tagtoggle = function(){
                    $scope.UpdateTag = !$scope.UpdateTag;
                }

                $scope.tagFriendSuggestion = function(event, friendname){
                    if(event.keyCode===40){
                        event.preventDefault();
                        if($scope.friendTagIndex+1 !== $scope.friends.length){
                            $scope.friendTagIndex++;
                        }
                    }else if(event.keyCode===38){
                        event.preventDefault();
                        if($scope.friendTagIndex-1 !== -1){
                            $scope.friendTagIndex--;
                        }
                    }else if(event.keyCode===13){
                           if($scope.friends.length > 0  && $scope.friendTagIndex!==-1) $scope.selectFriend($scope.friends[$scope.friendTagIndex]);
                           if($scope.friends.length === 1) $scope.selectFriend($scope.friends[0]);
                    }
                    if($('#searchTagFriend').val().trim()==="") $scope.showFriendList = false;
                    if(!(event.keyCode>=65 && event.keyCode<=95)) return;
                    $scope.cancelFriendSearch = false;
                    var opts = {};
                    opts.user_id = APP.currentUser.id;
                    friendname ? opts.friend_name = friendname : opts.friend_name = "";
                    opts.session_id = APP.currentUser.id;
                    opts.limit_start = 0;
                    opts.limit_size =  APP.friend_list_pagination.end;
                    $scope.showSearchLoader = true;

                    ProfileService.searchFriends(opts,function(data){
                        $scope.showSearchLoader = false;
                        if($scope.cancelFriendSearch === false){
                            if(data.data.users.length>0) $scope.showFriendList = true;
                            else $scope.showFriendList = false;
                            $scope.friends = data.data.users;
                        }
                    })
                };

                $scope.selectFriend = function(friendInfo){
                    $scope.dublicate = false;
                    $scope.choose = false;  
                    angular.forEach($scope.data.tagged_friends_info,function(index){
                        if(index.id === friendInfo.user_id){
                            $scope.dublicate = true;
                        }
                    });

                    if($scope.dublicate === false){
                        $scope.data.tagged_friends_info.push(friendInfo.user_info);
                        $scope.friends = [];
                        $scope.cancelFriendSearch = true;
                        $scope.friendTagIndex = -1;
                        angular.element('#searchTagFriend').val("");
                        $scope.showFriendList = false;
                    }else{
                        $scope.friends = [];
                        $scope.cancelFriendSearch = true;
                        $scope.friendTagIndex = -1;
                        angular.element('#searchTagFriend').val("");
                        $scope.showFriendList = false;
                    }
                };

                $scope.taggService = function(){
                    var pre_visible_status  = $scope.pre_visible;
                    var next_visible_status = $scope.next_visible;
                    $scope.pre_visible = false;
                    $scope.next_visible = false;
                    var frnd_array = [];
                    angular.forEach($scope.data.tagged_friends_info,function(index){
                        frnd_array.push(index.id);
                    });
                    var opts = {};
                        opts.user_id   = APP.currentUser.id;
                        opts.album_id  = $scope.parent_id;
                        opts.post_type = 1;
                        opts.media_id  = [$scope.media_id];
                        opts.tagged_friends = frnd_array.join(',')
                    $scope.UpdateTag = false;
                    $scope.TagLoader = true;
                
                   AlbumService.photoTaging(opts,function(data){
                        if(data.code === 101){
                            $scope.choose = true;
                            $scope.TagLoader = false;
                        }
                        $scope.pre_visible  = pre_visible_status;
                        $scope.next_visible = next_visible_status;
                    });
                };

                $scope.removeTagFriend = function(friendIndex){
                    $scope.data.tagged_friends_info.splice(friendIndex,1);
                };

                $scope.lostFocus = function(){
                    $timeout(function(){
                        $scope.friends = [];
                        $scope.cancelFriendSearch = true;
                        $scope.friendTagIndex = -1;
                        angular.element('#searchTagFriend').val("");
                        $scope.showFriendList = false;
                    },300);
                };

                $scope.waitRateResponse = false;
                $scope.ratePicture = function(rating, picture_id, mediaIndex){
                    var update = "";
                    var opts = {};
                    opts.user_id = APP.currentUser.id;
                    opts.type_id = picture_id;
                    opts.rate    = rating;
                    if($scope.parent_type == 'friend_album'){
                        opts.type = 'user_profile_album_photo'
                    }else {
                        opts.type = $scope.parent_type;
                    }
                    if($scope.data.is_rated){
                        update = "update";
                    }else{
                        update = "add";
                    }
                    $scope.waitRateResponse = true;
                    ProfileService.rateThis(opts, update, function(data){
                        if(data.code === 101 && data.message === "SUCCESS"){
                            $scope.data.avg_rate    = data.data.avg_rate;
                            $scope.data.no_of_votes = data.data.no_of_votes;
                            $scope.data.is_rated    = true;
                            $scope.data.current_user_rate = data.data.current_user_rate;
                        }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                            $scope.data.current_user_rate   = 0;
                            $scope.data.is_rated            = true;
                        }
                        $scope.waitRateResponse = false;
                    });
                };

                $scope.removeRating = function(pictureIndex , mediaIndex){
                    var opts = {};
                    opts.user_id = APP.currentUser.id;
                    opts.type_id = pictureIndex;
                    if($scope.parent_type == 'friend_album'){
                        opts.type = 'user_profile_album_photo'
                    }else {
                        opts.type = $scope.parent_type;
                    }
                    
                    if($scope.waitRateResponse === false){
                        $scope.waitRateResponse = true;
                    }else{
                        return;
                    }
                    ProfileService.removeRating(opts,function(data){
                        if(data.code == 101 && data.message == "SUCCESS"){
                            $scope.data.current_user_rate   = 0;
                            $scope.data.avg_rate            = data.data.avg_rate;
                            $scope.data.no_of_votes         = data.data.no_of_votes;
                            $scope.data.is_rated            = false;
                        }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                            $scope.data.current_user_rate   = 0;
                            $scope.data.is_rated            = false;
                        }
                        $scope.waitRateResponse = false;
                    });
                };

                $scope.findPeopleRate = function(id, count_Vote){
                    if(count_Vote === 0 ){
                        return false;
                    }
                    var opts = {};
                    $scope.ratedUsers = {};
                    modalInstance1 = $modal.open({
                                templateUrl: 'app/views/find_people.html',
                                controller: 'ModalController',
                                size: 'lg',
                                scope: $scope,
                    });
                    $scope.showPeopleLoader = true;
                    if($scope.parent_type == 'friend_album'){
                        opts.type = 'user_profile_album_photo'
                    }else {
                        opts.type = $scope.parent_type;
                    }
                    opts.type_id = id;
                    opts.session_id = APP.currentUser.id;
                    ProfileService.findPeople(opts,function(data){
                        if(data.code == 101 && data.message == "SUCCESS"){
                            $scope.showPeopleLoader = false;
                            $scope.ratedUsers       = data.data.users_rated;
                            if(data.data.users_rated.length == 0){
                                $scope.message = $scope.i18n.dashboard.no_vote;
                            }
                        }else{
                            $scope.showPeopleLoader = false;
                        }
                    });
                    modalInstance1.result.then(function (selectedItem) {
                    }, function () {
                        $log.info('Modal dismissed at: ' + new Date());
                    });

                    $scope.viewFriendProile = function(friendId){
                        modalInstance1.dismiss('cancel');
                        modalInstance.dismiss('cancel');
                        $location.path('/viewfriend/'+friendId);
                    };
                };
            }
        }
    };
}]);


// app.directive('rateMe',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
//     return {
//             templateUrl: 'app/views/rating_star_comment.html',
//             restrict: "E",
//             scope: true,
//             controller : function($scope, $modal, $log, ProfileService){
//                 $scope.hovering = function(value) {
//                     $scope.overStar = value;
//                     $scope.percent = 100 * (value / $scope.max);
//                 };
//                 $scope.averageVoting = 0;
//                 $scope.vote_count = 0;
//                 $scope.waitRateResponse = false;
//                 $scope.findPeopleRate = function(id, type, count_Vote){
//                     if(count_Vote === 0 ){
//                         return false;
//                     }
//                     var opts = {};
//                     $scope.ratedUsers = {};
//                     var modalInstance = $modal.open({
//                                 templateUrl: 'app/views/find_people.html',
//                                 controller: 'ModalController',
//                                 size: 'lg',
//                                 scope: $scope,
//                     });
//                     $scope.showPeopleLoader = true;
//                     opts.type = type;
//                     opts.type_id = id;
//                     ProfileService.findPeople(opts,function(data){
//                         if(data.code == 101 && data.message == "SUCCESS"){
//                             $scope.showPeopleLoader = false;
//                             $scope.ratedUsers = data.data.users_rated;
//                             if(data.data.users_rated.length == 0){
//                                 $scope.message = $scope.i18n.dashboard.no_vote;
//                             }
//                         }else{
//                             $scope.showPeopleLoader = false;
//                         }
//                     });
//                     modalInstance.result.then(function (selectedItem) {
//                     }, function () {
//                         $log.info('Modal dismissed at: ' + new Date());
//                     });

//                     $scope.viewFriendProile = function(friendId){
//                         modalInstance.dismiss('cancel');
//                         $location.path('/viewfriend/'+friendId);
//                     };
//                 };

//                 $scope.rateComment = function(rating, comment_id, postIndex, commentIndex){
//                     var update = "";
//                     var opts = {};
//                     opts.user_id = APP.currentUser.id;
//                     opts.type = "dashboard_post_comment";
//                     opts.type_id = comment_id;
//                     opts.rate = rating;
//                     if($scope.userPostList[postIndex].comments[commentIndex].is_rated){
//                         update = "update";
//                     }else{
//                         update = "add";
//                     }
//                     $scope.waitRateResponse = true;
//                     ProfileService.rateThis(opts, update, function(data){
//                         if(data.code === 101 && data.message === "SUCCESS"){
//                             $scope.userPostList[postIndex].comments[commentIndex].avg_rate = data.data.avg_rate;
//                             $scope.userPostList[postIndex].comments[commentIndex].no_of_votes = data.data.no_of_votes;
//                             $scope.userPostList[postIndex].comments[commentIndex].is_rated = true;
//                         }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
//                             $scope.userPostList[postIndex].comments[commentIndex].current_user_rate = 0;
//                             $scope.userPostList[postIndex].comments[commentIndex].is_rated = true;
//                         }
//                         $scope.waitRateResponse = false;
//                     });
//                 };

//                 $scope.removeCommentRating = function(comment_id, postIndx, indx){
//                     var opts = {};
//                     opts.user_id = APP.currentUser.id;
//                     opts.type = "dashboard_post_comment";
//                     opts.type_id = comment_id;
//                     if($scope.WaitDeleteResponse === false){
//                         $scope.WaitDeleteResponse = true;
//                         $scope.waitRateResponse = true;
//                     }else{
//                         return;
//                     }
//                     ProfileService.removeRating(opts,function(data){
//                         if(data.code == 101 && data.message == "SUCCESS"){
//                             $scope.userPostList[postIndx].comments[indx].current_user_rate = 0;
//                             $scope.userPostList[postIndx].comments[indx].avg_rate = data.data.avg_rate;
//                             $scope.userPostList[postIndx].comments[indx].no_of_votes = data.data.no_of_votes;
//                             $scope.userPostList[postIndx].comments[indx].is_rated = false;
//                         }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
//                             $scope.userPostList[postIndx].comments[indx].current_user_rate = 0;
//                             $scope.userPostList[postIndx].comments[indx].is_rated = false;
//                         }
//                     $scope.WaitDeleteResponse = false;
//                     $scope.waitRateResponse = false;
//                     });
//                 };

//                 $scope.averageRating = function(rating){
//                     return new Array(Math.ceil(rating));
//                 };

//                 $scope.blankStar = function(rating){
//                     if((5-Math.ceil(rating)) > 0){
//                         return new Array(5-Math.ceil(rating));
//                     }else{
//                         return 0;
//                     }
//                 };

//                 $scope.max = 5;
//                 $scope.isReadonly = false;

//                 /*  $scope.rateThis = function(value, id, index){
//                     $scope.ratePost(value, id, index);
//                 };*/

//                 $scope.ratingStates = [
//                     {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'}
//                 ];
//             },
//             link: function (scope, element, attrs) {
//             }
//       }
// }]);
// app.directive('rateAlbumDir',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
//     return {
//         templateUrl: 'app/views/rating_star_album.html',
//         restrict: "E",
//         scope: true,
//         controller : function($scope, $modal, $log, ProfileService){
//             $scope.hovering = function(value) {
//                 $scope.overStar = value;
//                 $scope.percent = 100 * (value / $scope.max);
//             };
//             $scope.averageVoting = 0;
//             $scope.vote_count = 0;
//             $scope.waitRateResponse = false;
//             $scope.findPeopleRate = function(id, type, count_Vote){
//                 //console.log(count_Vote);
//                 if(count_Vote === 0 ){
//                     return false;
//                 }
//                 var opts = {};
//                 $scope.ratedUsers = {};
//                 var modalInstance = $modal.open({
//                             templateUrl: 'app/views/find_people.html',
//                             controller: 'ModalController',
//                             size: 'lg',
//                             scope: $scope,
//                 });
//                 $scope.showPeopleLoader = true;
//                 opts.type = type;
//                 opts.type_id = id;
//                 ProfileService.findPeople(opts,function(data){
//                     if(data.code == 101 && data.message == "SUCCESS"){
//                         $scope.showPeopleLoader = false;
//                         $scope.ratedUsers = data.data.users_rated;
//                         if(data.data.users_rated.length == 0){
//                             $scope.message = $scope.i18n.dashboard.no_vote;
//                         }
//                     }else{
//                         $scope.showPeopleLoader = false;
//                     }
//                 });
//                 modalInstance.result.then(function (selectedItem) {
//                 }, function () {
//                     $log.info('Modal dismissed at: ' + new Date());
//                 });

//                 $scope.viewFriendProile = function(friendId){
//                     modalInstance.dismiss('cancel');
//                     $location.path('/viewfriend/'+friendId);
//                 };
//             };

//             $scope.rateThisAlbum = function(rating, album_id, type){
//                 var update = "";
//                 var opts = {};
//                 opts.user_id = APP.currentUser.id;
//                 opts.type = type;
//                 opts.type_id = album_id;
//                 opts.rate = rating;
                
//                 if($scope.albumDetails.is_rated){
//                     update = "update";
//                 }else{
//                     update = "add";
//                 }
//                 $scope.waitRateResponse = true;
//                 ProfileService.rateThis(opts, update, function(data){
//                     if(data.code === 101 && data.message === "SUCCESS"){
//                         $scope.albumDetails.avg_rate = data.data.avg_rate;
//                         $scope.albumDetails.no_of_votes = data.data.no_of_votes;
//                         $scope.albumDetails.is_rated = true;
//                     }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
//                         $scope.albumDetails.current_user_rate = 0;
//                         $scope.albumDetails.is_rated = true;
//                     }
//                     $scope.waitRateResponse = false;
//                 });
//             };

//             $scope.removeAlbumRating = function(albumIndex){
//                 //console.log($scope.waitRateResponse);
//                 var opts = {};
//                 opts.user_id = APP.currentUser.id;
//                 opts.type = "user_profile_album";
//                 opts.type_id = albumIndex;
//                 if($scope.waitRateResponse === false){
//                     $scope.waitRateResponse = true;
//                 }else{
//                     return;
//                 }
//                 ProfileService.removeRating(opts,function(data){
//                     if(data.code == 101 && data.message == "SUCCESS"){
//                         $scope.albumDetails.current_user_rate = 0;
//                         $scope.albumDetails.avg_rate = data.data.avg_rate;
//                         $scope.albumDetails.no_of_votes = data.data.no_of_votes;
//                         $scope.albumDetails.is_rated = false;
//                     }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
//                         $scope.albumDetails.current_user_rate = 0;
//                         $scope.albumDetails.is_rated = false;
//                     }
//                 $scope.waitRateResponse = false;
//                 });
//             };
//             //console.log("hiiii" + rating );
//             $scope.averageRating = function(rating){
//                 return new Array(Math.ceil(rating));
//             };

//             $scope.blankStar = function(rating){
//                 if((5-Math.ceil(rating)) > 0){
//                     return new Array(5-Math.ceil(rating));
//                 }else{
//                     return 0;
//                 }
//             };

//             $scope.max = 5;
//             $scope.isReadonly = false;

// /*            $scope.rateThis = function(value, id, index){
//                 $scope.ratePost(value, id, index);
//             };*/

//             $scope.ratingStates = [
//                 {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
//             ];
//         },
//         link: function (scope, element, attrs) {
            

//         }
//     }
// }]);
// app.directive('rateMeClub',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
//     return {
//         templateUrl: 'app/views/ratingStarClub.html',
//         restrict: "E",
//         scope: true,
//         controller : function($scope, $modal, $log, ProfileService){
//             $scope.hovering = function(value) {
//                 $scope.overStar = value;
//                 $scope.percent = 100 * (value / $scope.max);
//             };
//             $scope.avg_rate = true;
//             $scope.vote_count =0
//             $scope.averageVoting = 0;
//             $scope.vote_count = 0;
//             $scope.waitRateResponse = false;
//             $scope.findPeopleRate = function(id, count_Vote){
//                 if(count_Vote === 0 ){
//                     return false;
//                 }
//                 var opts = {};
//                 $scope.ratedUsers = {};
//                 var modalInstance = $modal.open({
//                             templateUrl: 'app/views/find_people.html',
//                             controller: 'ModalController',
//                             size: 'lg',
//                             scope: $scope,
//                 });
//                 $scope.showPeopleLoader = true;
//                 opts.type = "club_post_comment";
//                 opts.type_id = id;
//                 ProfileService.findPeople(opts,function(data){
//                     if(data.code == 101 && data.message == "SUCCESS"){
//                         $scope.showPeopleLoader = false;
//                         $scope.ratedUsers = data.data.users_rated;
//                         if(data.data.users_rated.length == 0){
//                             $scope.message = $scope.i18n.dashboard.no_vote;
//                         }
//                     }else{
//                         $scope.showPeopleLoader = false;
//                     }
//                 });
//                 modalInstance.result.then(function (selectedItem) {
//                 }, function () {
//                     $log.info('Modal dismissed at: ' + new Date());
//                 });

//                 $scope.viewFriendProile = function(friendId){
//                     modalInstance.dismiss('cancel');
//                     $location.path('/viewfriend/'+friendId);
//                 };
//             };

//             $scope.rateComment = function(rating, comment_id, postIndex, commentIndex){
//                 var update = "";
//                 var opts = {};
//                 opts.user_id = APP.currentUser.id;
//                 opts.type = "club_post_comment";
//                 opts.type_id = comment_id;
//                 opts.rate = rating;
//                 if($scope.posts[postIndex].comments[commentIndex].is_rated){
//                     update = "update";
//                 }else{
//                     update = "add";
//                 }
//                 $scope.waitRateResponse = true;
//                 ProfileService.rateThis(opts, update, function(data){
//                     if(data.code === 101 && data.message === "SUCCESS"){
//                         $scope.posts[postIndex].comments[commentIndex].avg_rate = data.data.avg_rate;
//                         $scope.posts[postIndex].comments[commentIndex].no_of_votes = data.data.no_of_votes;
//                         $scope.posts[postIndex].comments[commentIndex].is_rated = true;
//                     }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
//                         $scope.posts[postIndex].comments[commentIndex].current_user_rate = 0;
//                         $scope.posts[postIndex].comments[commentIndex].is_rated = true;
//                     }
//                     $scope.waitRateResponse = false;
//                 });
//             };

//             $scope.removeCommentRating = function(comment_id, postIndx, indx){
//                 var opts = {};
//                 opts.user_id = APP.currentUser.id;
//                 opts.type = "club_post_comment";
//                 opts.type_id = comment_id;
//                 if($scope.WaitDeleteResponse === false){
//                     $scope.WaitDeleteResponse = true;
//                     $scope.waitRateResponse = true;
//                 }else{
//                     return;
//                 }
//                 ProfileService.removeRating(opts,function(data){
//                     if(data.code == 101 && data.message == "SUCCESS"){
//                         $scope.posts[postIndx].comments[indx].current_user_rate = 0;
//                         $scope.posts[postIndx].comments[indx].avg_rate = data.data.avg_rate;
//                         $scope.posts[postIndx].comments[indx].no_of_votes = data.data.no_of_votes;
//                         $scope.posts[postIndx].comments[indx].is_rated = false;
//                     }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
//                         $scope.posts[postIndx].comments[indx].current_user_rate = 0;
//                         $scope.posts[postIndx].comments[indx].is_rated = false;
//                     }
//                 $scope.WaitDeleteResponse = false;
//                 $scope.waitRateResponse = false;
//                 });
//             };

//             $scope.averageRating = function(rating){
//                 return new Array(Math.ceil(rating));
//             };

//             $scope.blankStar = function(rating){
//                 if((5-Math.ceil(rating)) > 0){
//                     return new Array(5-Math.ceil(rating));
//                 }else{
//                     return 0;
//                 }
//             };

//             $scope.max = 5;
//             $scope.isReadonly = false;

//             /*  $scope.rateThis = function(value, id, index){
//                 $scope.ratePost(value, id, index);
//             };*/

//             $scope.ratingStates = [
//                 {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
//             ];
//         },
//         link: function (scope, element, attrs) {
            

//         }
//     }
// }]);
    
// app.directive('rateShopComment',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
//     return {
//         templateUrl: 'app/views/ratingStarClub.html',
//         restrict: "E",
//         scope: true,
//         controller : function($scope, $modal, $log, ProfileService){
//             $scope.hovering = function(value) {
//                 $scope.overStar = value;
//                 $scope.percent = 100 * (value / $scope.max);
//             };
//             $scope.avg_rate = true;
//             $scope.vote_count =0
//             $scope.averageVoting = 0;
//             $scope.vote_count = 0;
//             $scope.waitRateResponse = false;
//             $scope.WaitDeleteResponse = false ;
//             $scope.findPeopleRate = function(id, count_Vote){
//                 if(count_Vote === 0 ){
//                     return false;
//                 }
//                 var opts = {};
//                 $scope.ratedUsers = {};
//                 var modalInstance = $modal.open({
//                             templateUrl: 'app/views/find_people.html',
//                             controller: 'ModalController',
//                             size: 'lg',
//                             scope: $scope,
//                 });
//                 $scope.showPeopleLoader = true;
//                 opts.type = "store_post_comment";
//                 opts.type_id = id;
//                 ProfileService.findPeople(opts,function(data){
//                     if(data.code == 101 && data.message == "SUCCESS"){
//                         $scope.showPeopleLoader = false;
//                         $scope.ratedUsers = data.data.users_rated;
//                         if(data.data.users_rated.length == 0){
//                             $scope.message = $scope.i18n.dashboard.no_vote;
//                         }
//                     }else{
//                         $scope.showPeopleLoader = false;
//                     }
//                 });
//                 modalInstance.result.then(function (selectedItem) {
//                 }, function () {
//                     $log.info('Modal dismissed at: ' + new Date());
//                 });

//                 $scope.viewFriendProile = function(friendId){
//                     modalInstance.dismiss('cancel');
//                     $location.path('/viewfriend/'+friendId);
//                 };
//             };

//             $scope.rateComment = function(rating, comment_id, postIndex, commentIndex){
//                 var update = "";
//                 var opts = {};
//                 opts.user_id = APP.currentUser.id;
//                 opts.type = "store_post_comment";
//                 opts.type_id = comment_id;
//                 opts.rate = rating;
//                 if($scope.posts[postIndex].comments[commentIndex].is_rated){
//                     update = "update";
//                 }else{
//                     update = "add";
//                 }
//                 $scope.waitRateResponse = true;
//                 ProfileService.rateThis(opts, update, function(data){
//                     if(data.code === 101 && data.message === "SUCCESS"){
//                         $scope.posts[postIndex].comments[commentIndex].avg_rate = data.data.avg_rate;
//                         $scope.posts[postIndex].comments[commentIndex].no_of_votes = data.data.no_of_votes;
//                         $scope.posts[postIndex].comments[commentIndex].is_rated = true;
//                     }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
//                         $scope.posts[postIndex].comments[commentIndex].current_user_rate = 0;
//                         $scope.posts[postIndex].comments[commentIndex].is_rated = true;
//                     }
//                     $scope.waitRateResponse = false;
//                 });
//             };

//             $scope.removeCommentRating = function(comment_id, postIndx, indx){
//                 var opts = {};
//                 opts.user_id = APP.currentUser.id;
//                 opts.type = "store_post_comment";
//                 opts.type_id = comment_id;
//                 if($scope.WaitDeleteResponse === false){
//                     $scope.WaitDeleteResponse = true;
//                     $scope.waitRateResponse = true;
//                 }else{
//                     return;
//                 }
//                 ProfileService.removeRating(opts,function(data){
//                    if(data.code == 101 && data.message == "SUCCESS"){
//                         $scope.posts[postIndx].comments[indx].current_user_rate = 0;
//                         $scope.posts[postIndx].comments[indx].avg_rate = data.data.avg_rate;
//                         $scope.posts[postIndx].comments[indx].no_of_votes = data.data.no_of_votes;
//                         $scope.posts[postIndx].comments[indx].is_rated = false;
//                     }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
//                         $scope.posts[postIndx].comments[indx].current_user_rate = 0;
//                         $scope.posts[postIndx].comments[indx].is_rated = false;
//                     }
//                 $scope.WaitDeleteResponse = false;
//                 $scope.waitRateResponse = false;
//                 });
//             };

//             $scope.averageRating = function(rating){
//                 return new Array(Math.ceil(rating));
//             };

//             $scope.blankStar = function(rating){
//                 if((5-Math.ceil(rating)) > 0){
//                     return new Array(5-Math.ceil(rating));
//                 }else{
//                     return 0;
//                 }
//             };

//             $scope.max = 5;
//             $scope.isReadonly = false;

// /*            $scope.rateThis = function(value, id, index){
//                 $scope.ratePost(value, id, index);
//             };*/

//             $scope.ratingStates = [
//                 {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
//             ];
//         },
//         link: function (scope, element, attrs) {
            

//         }
//     }
// }]);

// app.controller('rateAlbum',['$scope', '$modal', '$log', '$location', 'ProfileService', function($scope, $modal, $log, $location, ProfileService){

//         $scope.hovering = function(value) {
//             $scope.overStar = value;
//             $scope.percent = 100 * (value / $scope.max);
//         };

//         $scope.averageVoting = 0;
//         $scope.vote_count = 0;
//         $scope.waitRateResponse = false;
//         $scope.findPeopleRate = function(id, type, count_Vote){
//             if(count_Vote === 0 ){
//                 return false;
//             }
//             var opts = {};
//             $scope.ratedUsers = {};
//             var modalInstance = $modal.open({
//                         templateUrl: 'app/views/find_people.html',
//                         controller: 'ModalController',
//                         size: 'lg',
//                         scope: $scope,
//             });
//             $scope.showPeopleLoader = true;
//             opts.type = type;
//             opts.type_id = id;
//             ProfileService.findPeople(opts,function(data){
//                 if(data.code == 101 && data.message == "SUCCESS"){
//                     $scope.showPeopleLoader = false;
//                     $scope.ratedUsers = data.data.users_rated;
//                     if(data.data.users_rated.length == 0){
//                         $scope.message = $scope.i18n.dashboard.no_vote;
//                     }
//                 }else{
//                     $scope.showPeopleLoader = false;
//                 }
//             });
//             modalInstance.result.then(function (selectedItem) {
//             }, function () {
//                 $log.info('Modal dismissed at: ' + new Date());
//             });

//             $scope.viewFriendProile = function(friendId){
//                 modalInstance.dismiss('cancel');
//                 $location.path('/viewfriend/'+friendId);
//             };
//         };

//         $scope.averageRating = function(rating){
//             return new Array(Math.ceil(rating));
//         };

//         $scope.blankStar = function(rating){
//             if((5-Math.ceil(rating)) > 0){
//                 return new Array(5-Math.ceil(rating));
//             }else{
//                 return 0;
//             }
//         };

//         $scope.max = 5;
//         $scope.isReadonly = false;

//         $scope.ratingStates = [
//             {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
//         ];
// }]);
// app.directive('rateAlbumDirClub',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
//     return {
//         templateUrl: 'app/views/rating_star_album_club.html',
//         restrict: "E",
//         scope: true,
//         controller : function($scope, $modal, $log, ProfileService){
//             $scope.hovering = function(value) {
//                 $scope.overStar = value;
//                 $scope.percent = 100 * (value / $scope.max);
//             };
//             $scope.averageVoting = 0;
//             $scope.vote_count = 0;
//             $scope.waitRateResponse = false;
//             $scope.findPeopleRate = function(id, type, count_Vote){
//                 if(count_Vote === 0 ){
//                     return false;
//                 }
//                 var opts = {};
//                 $scope.ratedUsers = {};
//                 var modalInstance = $modal.open({
//                             templateUrl: 'app/views/find_people.html',
//                             controller: 'ModalController',
//                             size: 'lg',
//                             scope: $scope,
//                 });
//                 $scope.showPeopleLoader = true;
//                 opts.type = 'club_album';
//                 opts.type_id = id;
//                 ProfileService.findPeople(opts,function(data){
//                     if(data.code == 101 && data.message == "SUCCESS"){
//                         $scope.showPeopleLoader = false;
//                         $scope.ratedUsers = data.data.users_rated;
//                         if(data.data.users_rated.length == 0){
//                             $scope.message = $scope.i18n.dashboard.no_vote;
//                         }
//                     }else{
//                         $scope.showPeopleLoader = false;
//                     }
//                 });
//                 modalInstance.result.then(function (selectedItem) {
//                 }, function () {
//                     $log.info('Modal dismissed at: ' + new Date());
//                 });

//                 $scope.viewFriendProile = function(friendId){
//                     modalInstance.dismiss('cancel');
//                     $location.path('/viewfriend/'+friendId);
//                 };
//             };

//             $scope.rateThisAlbum = function(rating, album_id, type){
//                 var update = "";
//                 var opts = {};
//                 opts.user_id = APP.currentUser.id;
//                 opts.type = 'club_album';
//                 opts.type_id = album_id;
//                 opts.rate = rating;
                
//                 if($scope.albumDetails.is_rated){
//                     update = "update";
//                 }else{
//                     update = "add";
//                 }
//                 $scope.waitRateResponse = true;
//                 ProfileService.rateThis(opts, update, function(data){
//                     if(data.code === 101 && data.message === "SUCCESS"){
//                         $scope.albumDetails.avg_rate = data.data.avg_rate;
//                         $scope.albumDetails.no_of_votes = data.data.no_of_votes;
//                         $scope.albumDetails.is_rated = true;
//                     }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
//                         $scope.albumDetails.current_user_rate = 0;
//                         $scope.albumDetails.is_rated = true;
//                     }
//                     $scope.waitRateResponse = false;
//                 });
//             };

//             $scope.removeAlbumRating = function(albumIndex){
//                 var opts = {};
//                 opts.user_id = APP.currentUser.id;
//                 opts.type = "club_album";
//                 opts.type_id = albumIndex;
//                 if($scope.waitRateResponse === false){
//                     $scope.waitRateResponse = true;
//                 }else{
//                     return;
//                 }
//                 ProfileService.removeRating(opts,function(data){
//                     if(data.code == 101 && data.message == "SUCCESS"){
//                         $scope.albumDetails.current_user_rate = 0;
//                         $scope.albumDetails.avg_rate = data.data.avg_rate;
//                         $scope.albumDetails.no_of_votes = data.data.no_of_votes;
//                         $scope.albumDetails.is_rated = false;
//                     }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
//                         $scope.albumDetails.current_user_rate = 0;
//                         $scope.albumDetails.is_rated = false;
//                     }
//                 $scope.waitRateResponse = false;
//                 });
//             };
//             //console.log("hiiii" + rating );
//             $scope.averageRating = function(rating){
//                 return new Array(Math.ceil(rating));
//             };

//             $scope.blankStar = function(rating){
//                 if((5-Math.ceil(rating)) > 0){
//                     return new Array(5-Math.ceil(rating));
//                 }else{
//                     return 0;
//                 }
//             };

//             $scope.max = 5;
//             $scope.isReadonly = false;

// /*            $scope.rateThis = function(value, id, index){
//                 $scope.ratePost(value, id, index);
//             };*/
            
//             $scope.ratingStates = [
//                 {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
//             ];
//         },
//         link: function (scope, element, attrs) {
            

//         }
//     }
// }]);
// app.directive('rateAlbumDirShop',['$modal', '$log', '$location', 'ProfileService', function($modal, $log, $location, ProfileService){
//     return {
//         templateUrl: 'app/views/rating_star_album_club.html',
//         restrict: "E",
//         scope: true,
//         controller : function($scope, $modal, $log, ProfileService){
//             $scope.hovering = function(value) {
//                 $scope.overStar = value;
//                 $scope.percent = 100 * (value / $scope.max);
//             };
//             $scope.averageVoting = 0;
//             $scope.vote_count = 0;
//             $scope.waitRateResponse = false;
//             $scope.findPeopleRate = function(id, type, count_Vote){
//                 if(count_Vote === 0 ){
//                     return false;
//                 }
//                 var opts = {};
//                 $scope.ratedUsers = {};
//                 var modalInstance = $modal.open({
//                             templateUrl: 'app/views/find_people.html',
//                             controller: 'ModalController',
//                             size: 'lg',
//                             scope: $scope,
//                 });
//                 $scope.showPeopleLoader = true;
//                 opts.type = 'store_album';
//                 opts.type_id = id;
//                 ProfileService.findPeople(opts,function(data){
//                     if(data.code == 101 && data.message == "SUCCESS"){
//                         $scope.showPeopleLoader = false;
//                         $scope.ratedUsers = data.data.users_rated;
//                         if(data.data.users_rated.length == 0){
//                             $scope.message = $scope.i18n.dashboard.no_vote;
//                         }
//                     }else{
//                         $scope.showPeopleLoader = false;
//                     }
//                 });
//                 modalInstance.result.then(function (selectedItem) {
//                 }, function () {
//                     $log.info('Modal dismissed at: ' + new Date());
//                 });

//                 $scope.viewFriendProile = function(friendId){
//                     modalInstance.dismiss('cancel');
//                     $location.path('/viewfriend/'+friendId);
//                 };
//             };

//             $scope.rateThisAlbum = function(rating, album_id, type){
//                 var update = "";
//                 var opts = {};
//                 opts.user_id = APP.currentUser.id;
//                 opts.type = 'store_album';
//                 opts.type_id = album_id;
//                 opts.rate = rating;
                
//                 if($scope.albumDetails.is_rated){
//                     update = "update";
//                 }else{
//                     update = "add";
//                 }
//                 $scope.waitRateResponse = true;
//                 ProfileService.rateThis(opts, update, function(data){
//                     if(data.code === 101 && data.message === "SUCCESS"){
//                         $scope.albumDetails.avg_rate = data.data.avg_rate;
//                         $scope.albumDetails.no_of_votes = data.data.no_of_votes;
//                         $scope.albumDetails.is_rated = true;
//                     }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
//                         $scope.albumDetails.current_user_rate = 0;
//                         $scope.albumDetails.is_rated = true;
//                     }
//                     $scope.waitRateResponse = false;
//                 });
//             };

//             $scope.removeAlbumRating = function(albumIndex){
//                 var opts = {};
//                 opts.user_id = APP.currentUser.id;
//                 opts.type = "store_album";
//                 opts.type_id = albumIndex;
//                 if($scope.waitRateResponse === false){
//                     $scope.waitRateResponse = true;
//                 }else{
//                     return;
//                 }
//                 ProfileService.removeRating(opts,function(data){
//                     if(data.code == 101 && data.message == "SUCCESS"){
//                         $scope.albumDetails.current_user_rate = 0;
//                         $scope.albumDetails.avg_rate = data.data.avg_rate;
//                         $scope.albumDetails.no_of_votes = data.data.no_of_votes;
//                         $scope.albumDetails.is_rated = false;
//                     }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
//                         $scope.albumDetails.current_user_rate = 0;
//                         $scope.albumDetails.is_rated = false;
//                     }
//                 $scope.waitRateResponse = false;
//                 });
//             };
//             //console.log("hiiii" + rating );
//             $scope.averageRating = function(rating){
//                 return new Array(Math.ceil(rating));
//             };

//             $scope.blankStar = function(rating){
//                 if((5-Math.ceil(rating)) > 0){
//                     return new Array(5-Math.ceil(rating));
//                 }else{
//                     return 0;
//                 }
//             };

//             $scope.max = 5;
//             $scope.isReadonly = false;

// /*            $scope.rateThis = function(value, id, index){
//                 $scope.ratePost(value, id, index);
//             };*/
            
//             $scope.ratingStates = [
//                 {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
//             ];
//         },
//         link: function (scope, element, attrs) {
            

//         }
//     }
// }]);


app.directive('leftPanel', function() {
  return {
    restrict: 'E',
    controller : 'ProfileImageController',
    templateUrl: './app/views/left_panel.html'
  }
});

app.directive('rightPanel', function() {
  return {
    restrict: 'E',
     templateUrl: './app/views/right_panel.html'
  }
});

//Displaying the comment post form for store detail
app.directive('profileCommentForm',['ProfileService', 'fileReader', '$http', '$timeout', '$interval', function(ProfileService, fileReader, $http, $timeout, $interval) {
    return {
      restrict: 'E',
      templateUrl: 'app/views/profile_comment_form.html',
      scope : true,
      link : function(scope, elem, attrs){
        scope.showPreview = false;
        scope.comment_id = '';
        scope.image_id = [];
        scope.imgSrc = [];
        scope.isInProgress = [];
        scope.commentFiles = [];
        scope.selectInProgress = [];
        scope.imgRes = 1;
        scope.commentErrMsg = '';
        scope.commentErrCls = '';
        scope.getFile = function () {
            var tempopts = {};
            tempopts.user_id = APP.currentUser.id;
            tempopts.postid = attrs.postId;
            tempopts.body = scope.i18n.editprofile.comment_image_test;
            tempopts.comment_type = '0';
            tempopts.image_id = '';
            tempopts.comment_id = '';
            var len = scope.commentFiles.length;
            ProfileService.createDashboardCommentImage(tempopts, scope.commentFiles[0], function(data){
                if(data.code == 101) {
                    scope.comment_id = data.data.id;
                    scope.imgSrc.push(data.data);
                    scope.image_id.push(data.data.media_id);
                    tempopts.comment_id = scope.comment_id;
                    scope.selectInProgress.splice(0,1);
                    for(j=1; j < len; j++){
                        ProfileService.createDashboardCommentImage(tempopts, scope.commentFiles[j], function(data){
                            if(data.code == 101) {
                                scope.comment_id = data.data.id;
                                scope.imgSrc.push(data.data);
                                scope.image_id.push(data.data.media_id);
                                scope.selectInProgress.splice(0,1);
                            }else{
                                scope.commentErrCls = 'text-red';
                                scope.commentErrMsg = scope.i18n.dashboard.postcomment.upload_media_fail;
                            }
                        });
                    }
                }else{
                    scope.commentErrCls = 'text-red';
                    scope.commentErrMsg = scope.i18n.dashboard.postcomment.upload_media_fail;
                }
            });
            setTimeout(function(){
                scope.commentErrCls = '';
                scope.commentErrMsg = '';
            }, 15000);
        };

      //remove iamge from preview array
      scope.removeImage = function(index) {
        var tempMedia = scope.image_id[index];
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.postid = attrs.postId;
        opts.image_id = tempMedia;
        ProfileService.deleteDashboardMediaComments(opts, function(data){
          if(data.code == 101) {
            scope.imgSrc.splice(index, 1);
            scope.isInProgress.splice(index, 1);
            if(scope.imgSrc.length == 0){
                scope.commentFiles == [];
                scope.file = [];
            }
            scope.image_id.splice(index, 1);
            if(scope.imgSrc.length == 0){
              scope.selectInProgress = [];
              scope.showImgSelect = true;
              scope.showPreview = false;
            }
          } else {
            scope.showImgSelect = true;
            scope.showPreview = true;
            scope.commentErrCls = 'text-red';
            scope.commentErrMsg = scope.i18n.dashboard.postcomment.remove_img_fail;
          }
          setTimeout(function(){
            scope.commentErrCls = '';
            scope.commentErrMsg = '';
            }, 15000);
        });
      };

      scope.res = 0;
      scope.addComment = function(){
        scope.postIndx = attrs.postIndx;
        scope.comments = attrs.loadComment;
        scope.finalCommentInProcess = true;
        scope.commentErrMsg = "";
        scope.commentErrCls = '';
        var filescount = scope.imgSrc.length;
        if ((scope.commentText == undefined  || scope.commentText == '') && filescount == 0) {
            scope.finalCommentInProcess = false;
            scope.commentErrCls = 'text-red';
            scope.commentErrMsg = scope.i18n.editprofile.photo_update;
            setTimeout(function(){
                scope.commentErrCls = '';
                scope.commentErrMsg = '';
            }, 15000);
            return false;
        }
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.postid = attrs.postId;
        opts.body = scope.commentText;
        opts.media_id = [];
        opts.comment_id = "";
        if(scope.image_id.length != 0){
          opts.media_id = scope.image_id;
        }
        if(scope.comment_id != ''){
          opts.comment_id = scope.comment_id;  
        }
        opts.comment_type = '1';

        opts.tagging = scope.taggedObject;
        if(scope.res == 0){
            scope.res = 1;
            ProfileService.createDashboardCommentFinal(opts, function(data){
                scope.res = 0;
              if(data.code == 101) {
                scope.commentText = '';
                scope.post.comments.push(data.data);
                scope.post.comment_count++;
                scope.finalCommentInProcess = false;
                scope.commentErrMsg = '';
                scope.commentErrCls = '';
                scope.commentText = '';
                scope.commentFiles = [];
                scope.imgSrc = [];
                scope.file = [];
                scope.showPreview = false;
                scope.showImgSelect = true;
                scope.comment_id = '';
              } else {
                scope.finalCommentInProcess = false;
                scope.commentErrCls = 'text-red';
                scope.commentErrMsg = scope.i18n.editprofile.comment_no_post;
                scope.commentFiles = [];
                scope.imgSrc = [];
                scope.file = []
                scope.showPreview = false;
                scope.showImgSelect = true;
                scope.comment_id = '';
              }
            });
            $timeout(function(){
                scope.commentErrCls = '';
                scope.commentErrMsg = '';
            }, 15000);
        }
      };
    }
  };
}]);

//Displaying the post form for store detail

app.directive('profilePostList', function($routeParams, $modal, $log, $location, ProfileService, focus) {
    return {
      restrict: 'E',
      controller: function ($scope, $timeout,$sce, $compile){
        $scope.showComments = [];
        $scope.commentsLength = [];
        $scope.userPostList = [];
        $scope.showComments = [];
        $scope.commentsLength = [];
        $scope.noPostList = false; 
        $scope.isLoadPost = true;
        $scope.textLimit = APP.post_charecter_limit;
        $scope.isSingleProfile = false;
        if($routeParams.postId !== '' && $routeParams.postId != undefined){
            $scope.isSingleProfile = true  ;  
        }
        
        $(document).click(function(){
             $("ul.actions-drop-action").hide();
        });

        $scope.toggleEdit = function($event){
            $event.stopPropagation();
            if($($event.currentTarget).next('ul.actions-drop-action').is(':visible')){
                $($event.currentTarget).next('ul.actions-drop-action').hide();
            }else{
                $("ul.actions-drop-action").hide();
                $($event.currentTarget).next('ul.actions-drop-action').show(); 
            }
        };

        //check screen for mobile devicess to show corresponding layou
        $scope.loadMoreFunc = 'loadMorePost()';
        $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
            $scope.windowHeight = newValue.h;
            $scope.windowWidth = newValue.w;
            if($scope.windowWidth <= '768'){
                $scope.isSmallScreen =  true; //declare in main controller
                $scope.loadMoreFunc = '';
            } else {
                $scope.isSmallScreen =  false; //declare in main controller
                $scope.loadMoreFunc = 'loadMorePost()';
            }
        }, true);

        //funciton to list user post on dashboard
        //TODO: infinite scoller is remaining
        $scope.listUserPost = function() {
            var opts = {};
            var limit_start = $scope.userPostList.length;
            opts.user_id = APP.currentUser.id;
            opts.limit_start = limit_start;
            opts.limit_size = APP.dashbord_pagination.end;
            opts.friend_id = APP.currentUser.id;
            //calling the services to get the user post list
            if ((($scope.totalSize > limit_start ) || $scope.totalSize == 0 ) && $scope.myRes == 1) {
                $scope.myRes = 0;
                ProfileService.listDashboardPost(opts, function(data){
                    if(data.code == 101) {
                        $scope.isLoadPost = false; 
                        var items = data.data.post;
                        if(items != undefined){
                            $scope.userPostList = $scope.userPostList.concat(items); 
                            $scope.noPostList = false; 
                        }
                        if($scope.userPostList.length==0){
                            $scope.noPostList = true; 
                        } 
                        $scope.totalSize = data.data.count;
                    } else {
                        $scope.isLoadPost = false;
                        if ($scope.userPostList.length == 0){
                            $scope.noPostList = true; 
                        } 
                        $scope.userPostList;
                    }
                    $scope.myRes = 1;
                });
            } else {
                $scope.isLoadPost = false;
                if($scope.userPostList.length==0){
                    $scope.noPostList = true; 
                } 
                $scope.userPostList;
            }
        };
        //funciton to delete single post
        $scope.deleteErrMsg = [];
        $scope.isDeletePost = [];
        $scope.deleteErrCls = [];
        $scope.deletePost = function(postIndx) {
            var postData = {};
            postData = $scope.userPostList[postIndx];
            $scope.isDeletePost[postIndx] = true;
            $scope.updateBody[postIndx] = '';
            $scope.activeEdit[postIndx] = false;
            $scope.editPostErrorMsg[postIndx] = '';
            var formData = {};
            formData.user_id = APP.currentUser.id;
            formData.post_id = postData.id;

            //calling the service to delete the selected post 
            ProfileService.deleteDashboardPost(formData, function(data){
                if(data.code == 101) {
                    $scope.userPostList.splice(postIndx, 1);
                    if ($scope.userPostList.length == 0){
                        $scope.noPostList = true; 
                    } 
                    $scope.isDeletePost[postIndx] = false;
                } else {
                    $scope.deleteErrCls[postIndx] = 'text-red';
                    $scope.deleteErrMsg[postIndx]= $scope.i18n.dashboard.postcomment.delete_post_fail;
                    $scope.isDeletePost[postIndx] = false;
                }
                $timeout(function(){
                    $scope.deleteErrCls[postIndx] = '';
                    $scope.deleteErrMsg[postIndx] = '';
                }, 15000);
            });
        };

        //modal for remove tag when user clicked on notifications
        $scope.showAllFriend = function(post_id, creater_info, allTagFriend){
            $scope.allTagFriends = allTagFriend;
            $scope.post_id = post_id;
            $scope.creater = creater_info;
            var modalInstance = $modal.open({
                template: '<style>.modal-open .modal.in .modal-dialog{width:620px; height:400px;}</style><div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3><div class="modal-popup-close" ng-click="closeModal()"></div> </div><div class="modal-body tag-frnd-modal"><ul><li data-ng-repeat="friend in allTagFriends"><span class="tag-img"><img title="" style="width:30px;height:30px" alt="No image available" data-ng-src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a href ng-click="viewFriendProile(friend.id)">{{friend.first_name}} {{friend.last_name}}</a></span><span data-ng-if="creater.id === currentUser.id || currentUser.id === friend.id" ng-click="RemoveTagFriend(friend, creater.id)" class="rmv-tag"><a href>{{i18n.profile_post.remove_tagged_friend}}</a></span></li></ul></div><div class="modal-footer"></div>',
                controller: 'ModalController',
                size: 'lg',
                scope: $scope,
            });

            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
            $scope.RemoveTagFriend = function(friend, createrId){
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.untag_user_id = friend.id;
                opts.post_id = $scope.post_id;
                ProfileService.removeTagedFriends(opts,function(data){
                    if(data.code === 101){
                        var index = $scope.allTagFriends.indexOf(friend)
                        $scope.allTagFriends.splice(index,1);
                        if(createrId != APP.currentUser.id ){
                            modalInstance.close();
                        }
                        if($scope.allTagFriends.length === 0){
                            modalInstance.close();
                        }   
                    } 
                });
            };
        };


        //function to create post
        $scope.editPostErrorMsg = [];
        $scope.updatePostInProcess = [];
        $scope.editPostErrorCls = [];
        $scope.saveUpdatePost = function(postIndx) {
            var opts = {};
            $scope.updatePostInProcess[postIndx] = true;
            var editPostText = escapeHtmlEntities($scope.updateBody[postIndx]); 
            var post = $scope.userPostList[postIndx];

            if(editPostText == undefined || editPostText == '') {
                $scope.updatePostInProcess[postIndx] = false;
                $scope.editPostErrorCls[postIndx] = 'text-red';
                $scope.editPostErrorMsg[postIndx] = $scope.i18n.editprofile.no_empty_status;
                $timeout(function(){
                    $scope.editPostErrorCls[postIndx] = '';
                    $scope.editPostErrorMsg[postIndx] = '';
                }, 15000);
                return false;
            } 
            var regex = /src="([^"]+)"/;
            var src = editPostText.split(regex)[1];
            if(src != undefined && src !='' ){
               editPostText = src; 
            }
            
            opts.user_id = APP.currentUser.id;
            opts.post_id = post.id;
            opts.title = post.title; //This dummy data as currently there is no field to accept the posttitle
            opts.description = editPostText;
            opts.to_id = post.to_id; 
            opts.youtube_url = '';
            opts.post_type = '1';
            opts.privacy_setting = post.privacy_setting;
            var myFile = '';
            var friendIdList = [];
            if($scope.postTaggedFriend[postIndx].length > 0){
                angular.forEach($scope.postTaggedFriend[postIndx],function(index){
                    friendIdList.push(index.id);
                });

                opts.tagged_friends = friendIdList.join();
            }else{
                opts.tagged_friends = "";
            }

            ProfileService.updateDashboardPost(opts, function(data){
                if(data.code == 101) {
                    if($scope.postTaggedFriend[postIndx].length > 0){
                        post.tagged_friends_info = $scope.postTaggedFriend[postIndx];
                    }else{
                        post.tagged_friends_info = "";
                    }
                    $scope.updatePostInProcess[postIndx] = false;
                    $scope.editPostErrorMsg[postIndx] = '';
                    $scope.userPostList[postIndx].description = editPostText;
                    $scope.editPostText = '';
                    $scope.activeEdit[postIndx] = false;
                } else {
                    $scope.updatePostInProcess[postIndx] = false;
                    $scope.editPostErrorCls[postIndx] = 'text-red';
                    $scope.editPostErrorMsg[postIndx] = $scope.i18n.editprofile.post_unsaved;
                }
                $timeout(function(){
                    $scope.editPostErrorCls[postIndx] = '';
                    $scope.editPostErrorMsg[postIndx] = '';
                }, 15000);
            });
        };

        $scope.editPrivacyMsg = [];
        $scope.editPrivacyCls = [];
        $scope.changePrivacy = function(post, postIndx) { 
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.post_id = post.id;
            opts.privacy_setting = post.privacy_setting;
            var myFile = '';
            ProfileService.updatePostPrivacy(opts, function(data){
                if(data.code == 101) {
                    $scope.editPrivacyCls[postIndx] = '';
                    $scope.editPrivacyMsg[postIndx] = '';                    
                } else {
                    $scope.editPrivacyCls[postIndx] = 'text-red';
                    $scope.editPrivacyMsg[postIndx] = $scope.i18n.editprofile.privacy_setting; 
                    $timeout(function(){
                        $scope.editPrivacyCls[postIndx] = '';
                        $scope.editPrivacyMsg[postIndx] = '';
                    }, 15000);
                }
            });
        };

        $scope.gainPostFocus = function(indx){
            focus('postListTagged'+indx);
        };

        $scope.updateBody = [];
        $scope.activeEdit = [];
        $scope.postTaggedFriend = [];
        $scope.showTagLoading = [];
        //funtion to open form to update post
        $scope.updatePost = function(postIndx) {
            $scope.editPostErrorMsg[postIndx]='';
            $scope.editPostErrorCls[postIndx]='';
            var post = $scope.userPostList[postIndx];
            //for resize the textarea
            autosize(document.querySelectorAll('.editpostbox'));
            var str = $.trim(post.description.replace(/\n\n\n+/g, '\n\n'));
            var htmlstr = str.replace(/\n/g,'<br />');
            var height = $('<div style="display:block;" id="postedit-hidden-div"></div>')
            .html(htmlstr)
            .appendTo('#post_'+post.id)
            .height();     
            $('#editpost_'+post.id).css('height',height + 'px');
            str = $('#postedit-hidden-div').html(str).text();
            $('#postedit-hidden-div').remove();
            $scope.updateBody[postIndx] = str;
            
           // $scope.postTaggedFriend[postIndx] = post.tagged_friends_info;
           /* var postTaggedFriend = post.tagged_friends_info;
            $scope.postTaggedFriend[postIndx] = postTaggedFriend;*/
            $scope.postTaggedFriend[postIndx] = [];
            angular.forEach(post.tagged_friends_info, function(val,indx){
                $scope.postTaggedFriend[postIndx].push(val);
            });
            $scope.activeEdit[postIndx] = true;
            $scope.showTagLoading[postIndx] = true;
            //set cursor start of textarea
            $timeout(function(){
                $('#editpost_'+post.id).putCursorAtStart();
            },200);
        };

        // close the edit form on cancel
        $scope.cancelPost = function(postIndx) {
            $('#postedit-hidden-div').remove();
            $scope.updateBody[postIndx] = '';
            $scope.activeEdit[postIndx] = false;
            $scope.editPostErrorMsg[postIndx] = '';
            $scope.editPostErrorCls[postIndx]='';
            $scope.showTagLoading[postIndx] = false;
            $scope.postTaggedFriend = [];
        };

        // function to remove the tagged friend
        $scope.removePostTagFriend  = function(index, postIndex){
            $scope.postTaggedFriend[postIndex].splice(index,1);
        };

        // Add more friend in the post
        var currentTimeout = null;
        $scope.addMoreFriend = function(event, index){
            var DELAY_TIME_BEFORE_POSTING = 300;
            if(currentTimeout) {
                $timeout.cancel(currentTimeout);
            }
            currentTimeout = $timeout(function(){
                if(event.which != 13){ 
                    $scope.searchMoreFriend(index);
                }
            }, DELAY_TIME_BEFORE_POSTING)
        };

        $scope.friends = [];
        $scope.showSearchFriendLoader = [];
        $scope.cancelFriendSearch = false;
        $scope.showSearchFriendList = [];
        $scope.searchMoreFriend = function(postIndx){
            $scope.searchFriend = $('.addMoreTagFriend'+postIndx).val();
            $scope.cancelFriendSearch = false;
            $scope.showSearchFriendList[postIndx] = true;
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.friend_name = $scope.searchFriend;
            opts.session_id = APP.currentUser.id;
            opts.limit_start = 0;
            $scope.friendTagIndex[postIndx] = -1;
            opts.limit_size =  APP.friend_list_pagination.end;
            $scope.showSearchFriendLoader[postIndx] = true;
            $scope.showTagLoading[postIndx] = true
            ProfileService.searchFriends(opts,function(data){
                $scope.showSearchFriendLoader[postIndx] = false;
                if($scope.cancelFriendSearch === false){
                    if(data.data.users.length > 0){
                        $scope.friends[postIndx] = data.data.users;
                    }
                }
            });
        };

        // Store friend 
        $scope.postTaggedFriend = [];
        $scope.dublicate = false;
        $scope.taggedSelectFriend = function(friendInfo, postIndex){
            if(friendInfo === undefined){
                return
            }else{
                $scope.dublicate = false;
                angular.forEach($scope.postTaggedFriend[postIndex],function(index){
                    if(index.id === friendInfo.user_id){
                        $scope.dublicate = true;
                    }
                });

                if($scope.dublicate === false){
                    $scope.postTaggedFriend[postIndex].push({"id":friendInfo.user_id, "first_name": friendInfo.user_info.first_name, "last_name": friendInfo.user_info.last_name,"profile_image": friendInfo.user_info.profile_image,"profile_image_thumb":friendInfo.user_info.profile_image_thumb});
                    $scope.friends[postIndex] = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTagIndex[postIndex] = -1;
                    angular.element('.addMoreTagFriend'+postIndex).val("");
                    $scope.showSearchFriendList[postIndex] = false;
                }else{
                    $scope.friends[postIndex] = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTagIndex[postIndex] = -1;
                    angular.element('.addMoreTagFriend'+ postIndex).val("");
                    $scope.showSearchFriendList[postIndex] = false;
                }
            }
        };

        // stop the service for loading more service
        $scope.lostFocus = function(postIndex){
            $timeout(function(){
                $scope.friends[postIndex] = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTagIndex[postIndex] = -1;
                angular.element('.addMoreTagFriend'+ postIndex).val("");
                $scope.showSearchFriendList[postIndex] = false;
            },300);
        };

        // Up down key control in search friend list
        $scope.friendTagIndex = [];
        $scope.searchNevigateControl = function(event, index){
            if(event.keyCode===40){
                event.preventDefault();
                if($scope.friendTagIndex[index]+1 !== $scope.friends[index].length){
                    $scope.friendTagIndex[index]++;
                }
            }else if(event.keyCode===38){
                event.preventDefault();
                if($scope.friendTagIndex[index]-1 !== -1){
                    $scope.friendTagIndex[index]--;
                }
            }else if(event.keyCode===13){
                    $scope.taggedSelectFriend($scope.friends[index][$scope.friendTagIndex[index]], index);
            }
        };

        $scope.getUserPostDetail = function(id) {
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.post_id = id;
            //calling the services to get the user post list
            if (($scope.totalSize == 0 ) && $scope.myRes == 1) {
                $scope.myRes = 0;
                ProfileService.getDashboardPostDetail(opts, function(data){
                    if(data.code == 101) {
                        $scope.isLoadPost = false; 
                        var items = data.data.post;
                        if(items != undefined){
                            $scope.userPostList = $scope.userPostList.concat(items); 
                            $scope.noPostList = false; 
                        }
                        if($scope.userPostList.length==0){
                            $scope.noPostList = true; 
                        } 
                        $scope.totalSize = data.data.count;
                    } else {
                        $scope.isLoadPost = false;
                        if ($scope.userPostList.length == 0){
                            $scope.noPostList = true; 
                        } 
                        $scope.userPostList;
                    }
                    $scope.myRes = 1;
                });
            } else {
                $scope.isLoadPost = false;
                if($scope.userPostList.length==0){
                    $scope.noPostList = true; 
                } 
                $scope.userPostList;
            }
        };

        //function to call initial loading
        $scope.showUserPostList = function(){
            $scope.isLoadPost=true;
            $scope.totalSize = 0;
            $scope.myRes = 1;
            if($routeParams.postId ? $routeParams.postId : '') {
                $scope.getUserPostDetail($routeParams.postId);
            }
            else {
                $scope.listUserPost();
            }
        };

        // function to get the post and comment of the post
        $scope.commentLoading = [];
        $scope.getComments = function(postIndx) {
            var post = $scope.userPostList[postIndx];
            $scope.userPostList[postIndx].comments = [];
            var opts = {};
            opts.post_id = post.id;
            opts.user_id = APP.currentUser.id;
            opts.limit_start = APP.dashbord_comment.start;
            opts.limit_size = APP.dashbord_comment.end;

            // This service's function returns post
            ProfileService.getDashboardComments(opts, function(data){
                if(data.code == 100)
                {
                    $scope.userPostList[postIndx].comments = data.data.comment;
                    $scope.commentLoading[postIndx] = false;
                    $scope.commentsLength[postIndx] = $scope.userPostList[postIndx].comments.length;
                    if($scope.userPostList[postIndx].comments.length  != 0 ) {
                        $scope.noComment = true;
                    }
                } else {
                    $scope.commentLoading[postIndx] = false;
                }
            });
        };
        //function to show limited comment of the post
        $scope.showLimitedComment = function(postIndx) {
            $scope.commentInProcess = true;
            var post = $scope.posts[postIndx];
            var opts = {};
            opts.post_id = post.post_id;
            opts.user_id = $scope.currentUser.id;
            $scope.getComments(opts, postIndx);
        };
        $scope.showAllComments = function(postIndx) {
            $scope.commentLoading[postIndx] = true;
            $scope.showComments[postIndx] = true;
            $scope.getComments(postIndx);
        };
        $scope.pageSize = 4;
        //function to delete the comment of a post
        //funciton to delete single comment
        $scope.delCommentErrMsg = [];
        $scope.delCommentErrCls = [];
        $scope.deleteComment = function(postIndx,comment) {
            var indx = $scope.userPostList[postIndx].comments.indexOf(comment);
            var commentData = {};
            commentData = $scope.userPostList[postIndx].comments[indx];
            $scope.deleteCommentIndx = commentData.id;
            var formData = {};
            formData.user_id = APP.currentUser.id;
            formData.comment_id = commentData.id;

            //calling the comment service to delete the selected comment 
            ProfileService.deleteDashboardComment(formData, function(data){
                if(data.code == 101) {
                    $scope.delCommentErrMsg[commentData.id] = '';
                    $scope.delCommentErrCls[commentData.id] = '';
                    $scope.userPostList[postIndx].comments.splice(indx, 1);
                    $scope.userPostList[postIndx].comment_count--;
                    $scope.deleteCommentIndx = '';
                }
                else {
                    $scope.delCommentErrMsg[commentData.id] = $scope.i18n.dashboard.postcomment.delete_comment_fail;
                    $scope.delCommentErrCls[commentData.id] = 'text-red';
                    $scope.deleteCommentIndx = '';
                    $scope.userPostList;
                }
                $timeout(function(){
                    $scope.delCommentErrCls[commentData.id] = '';
                    $scope.delCommentErrMsg[commentData.id] = '';
                }, 15000);

            });
        };
        $scope.editCommentText = [];
        $scope.activeCommentEdit = [];
        $scope.isEditComment = [];
        $scope.commentErrorMsg = [];
        $scope.commentErrorCls = [];
        $scope.commentInProcess = [];
        //funtion to open form to update comment
        $scope.updateComment = function(postIndx, comment) {
            $("#commentBoxId-"+postIndx).hide();
            $scope.commentInProcess[postIndx] = true;
            $scope.commentErrorMsg[postIndx] = '';
            $scope.commentErrorCls[postIndx]= '';
            var indx = $scope.userPostList[postIndx].comments.indexOf(comment);
            var comment = $scope.userPostList[postIndx].comments[indx];
            $scope.isEditComment[postIndx] = false;
            $scope.activeCommentEdit[postIndx] = comment.id
            $scope.editCommentText[postIndx]=comment.comment_text;
        };

        //function to edit a comment
        $scope.editComment = function(postIndx, comment) {
            var opts = {};
            $scope.commentErrorMsg[postIndx]= '';
            var indx = $scope.userPostList[postIndx].comments.indexOf(comment);
            var comment = $scope.userPostList[postIndx].comments[indx];
            var newText = $scope.editCommentText[postIndx];
            $scope.isEditComment[postIndx] = true;

            if(newText == undefined || newText == '') {
                $scope.isEditComment[postIndx]= false;
                $scope.commentErrorCls[postIndx] = 'text-red';
                $scope.commentErrorMsg[postIndx] = $scope.i18n.editprofile.no_empty_comment;
                $timeout(function(){
                    $scope.commentErrorCls[postIndx] = '';
                    $scope.commentErrorMsg[postIndx] = '';
                }, 15000);
                return false;
            } 
            opts.user_id = APP.currentUser.id;
            opts.comment_id = comment.id;
            opts.comment_text = newText;
            opts.tagging = $('.taggedObject' + postIndx).val();
            ProfileService.updateDashboardComment(opts, function(data){
                if(data.code == 101) {
                    $scope.commentInProcess[postIndx] = false;
                    $scope.activeCommentEdit[postIndx] = '';
                    $scope.commentErrorCls[postIndx] = '';
                    $scope.commentErrorMsg[postIndx] = '';
                    $scope.editCommentText[postIndx] = '';
                    $scope.userPostList[postIndx].comments[indx].comment_text = newText;
                    $scope.isEditComment[postIndx] = false;
                    $("#commentBoxId-"+postIndx).show();
                } else {
                    $scope.commentInProcess[postIndx] = false;
                    $scope.isEditComment[postIndx] = false;
                    $scope.commentErrorCls[postIndx] = 'text-red';
                    $scope.commentErrorMsg[postIndx]= $scope.i18n.editprofile.not_posted;
                    $("#commentBoxId-"+postIndx).show();
                }
                $timeout(function(){
                    $scope.commentErrorCls[postIndx] = '';
                    $scope.commentErrorMsg[postIndx] = '';
                }, 15000);
            });
        };

        //funtion to open form to update comment
        $scope.cancelEditComment = function(postIndx, indx) {
            $scope.commentInProcess[postIndx] = false;
            $scope.activeCommentEdit[postIndx] = '';
            $scope.commentErrorCls[postIndx] = '';
            $scope.commentErrorMsg[postIndx] = '';
            $scope.editCommentText[postIndx] = '';
            $scope.isEditComment[postIndx] = false;
            $("#commentBoxId-"+postIndx).show();
        };

        $scope.loadMorePost = function() {
            if($scope.totalSize > $scope.userPostList.length){
                $scope.isLoadPost = true;
                $scope.listUserPost();
            }
        };
        //calling function to load postlist
        $scope.showUserPostList();
        $scope.averageVoting = 0;
        $scope.vote_count = 0;
        $scope.waitRateResponse = false;
        $scope.ratePost = function(rating, post_id, index){
            var update = "";
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "dashboard_post";
            opts.type_id = post_id;
            opts.rate = rating;
            $scope.waitRateResponse = true;
            if($scope.userPostList[index].is_rated){
                update = "update";
            }else{
                update = "add";
            }
            ProfileService.rateThis(opts, update, function(data){
                if(data.code === 101 && data.message === "SUCCESS"){
                    $scope.userPostList[index].avg_rate = data.data.avg_rate;
                    $scope.userPostList[index].no_of_votes = data.data.no_of_votes;
                    $scope.userPostList[index].is_rated = true;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    //$scope.userPostList[index].avg_rate = 0;
                    //$scope.userPostList[index].no_of_votes = 0;
                    $scope.userPostList[index].is_rated = false;
                    $scope.userPostList[index].current_user_rate = 0;
                }
                $scope.waitRateResponse = false;
            });
        };

        $scope.WaitDeleteResponse = false;
        $scope.removeRating = function(post_id, postIndx){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "dashboard_post";
            opts.type_id = post_id;
            if($scope.WaitDeleteResponse === false){
                $scope.WaitDeleteResponse = true;
                $scope.waitRateResponse = true;
            }else{
                return;
            }
            ProfileService.removeRating(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.userPostList[postIndx].current_user_rate = 0;
                    $scope.userPostList[postIndx].is_rated = false;
                    $scope.userPostList[postIndx].no_of_votes = data.data.no_of_votes;
                    $scope.userPostList[postIndx].avg_rate =  data.data.avg_rate;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    $scope.userPostList[postIndx].current_user_rate = 0;
                    $scope.userPostList[postIndx].is_rated = false;
                    //$scope.userPostList[postIndx].no_of_votes =0;
                    //$scope.userPostList[postIndx].avg_rate =  0;
                }
                $scope.WaitDeleteResponse = false;
                $scope.waitRateResponse = false;
            });
        };
        /*
        $scope.rateComment = function(rating, comment_id, postIndex, commentIndex){
            var update = "";
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "dashboard_post_comment";
            opts.type_id = comment_id;
            opts.rate = rating;
            if($scope.userPostList[postIndex].comments[commentIndex].is_rated){
                update = "update";
            }else{
                update = "add";
            }
            ProfileService.rateThis(opts, update, function(data){
                if(data.code === 101 && data.message === "SUCCESS"){
                    $scope.userPostList[postIndex].comments[commentIndex].avg_rate = data.data.avg_rate;
                    $scope.userPostList[postIndex].comments[commentIndex].no_of_votes = data.data.no_of_votes;
                    $scope.userPostList[postIndex].comments[commentIndex].is_rated = true;
                }
            });
        };

        $scope.removeCommentRating = function(comment_id, postIndx, indx){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "dashboard_post_comment";
            opts.type_id = comment_id;
            ProfileService.removeRating(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.userPostList[postIndx].current_user_rate = 0;
                    $scope.userPostList[postIndx].is_rated = false;
                    $scope.userPostList[postIndx].no_of_votes = data.data.no_of_votes;
                    $scope.userPostList[postIndx].avg_rate =  data.data.avg_rate;
                }
            });
        };
        */
        $scope.stars = [];

        $scope.averageRating = function(rating){
            return new Array(Math.ceil(rating));
        };

        $scope.blankStar = function(rating){
            if((5-Math.ceil(rating)) > 0){
                return new Array(5-Math.ceil(rating));
            }else{
                return 0;
            }
        };

        $scope.max = 5;
        $scope.isReadonly = false;

        $scope.rateThis = function(value, id, index){
            $scope.ratePost(value, id, index);
        };

        $scope.hoveringOver = function(value) {
            $scope.overStar = value;
            $scope.percent = 100 * (value / $scope.max);
        };

        $scope.ratingStates = [
            {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
        ];

        $scope.showPeopleLoader = false;
        $scope.findPeople = function(id, type, count_Vote){
            if(count_Vote === 0 ){
                return false;
            }
            var opts = {};
            $scope.ratedUsers = {};
            $scope.showPeopleLoader = true;

            var modalInstance = $modal.open({
                //template: '<style>.modal-body.tag-frnd-modal ul li{padding:8px 130px 8px 0}.modal-content .modal-body ul.rmv-tag{position:absolute;right:0;top:10px}.modal-content .modal-body ul.rmv-tag li{padding:0;display:inline-block;vertical-align:middle;border:0}.modal-content .modal-body ul.rmv-tag li span.votes-avg{width:23px;height:21px;margin-left:2px;background:url(app/assets/images/rating-star.png) no-repeat;display:block}.modal-content .modal-body ul.rmv-tag li span.votes-blank{width:23px;height:21px;margin-left:2px;background:url(app/assets/images/rating-star.png) 0 -21px no-repeat;display:block}.modal.in .modal-dialog{margin:auto;top:0;bottom:0;left:0;right:0;position:absolute; height: 400px;}.modal-body.tag-frnd-modal{height:360px;overflow-y:auto;overflow-x:hidden;padding:0 10px}.modal .modal-content{margin:auto;top:0;bottom:0;left:0;right:0;position:absolute;overflow:visible}@media screen and (max-width:479px){.modal.in .modal-dialog{margin:auto 20px}.modal-body.tag-frnd-modal ul li{padding:8px 70px 8px 0}.modal-content .modal-body ul.rmv-tag li span.votes-avg{width:12px;height:10px;margin-left:1px;background:url(app/assets/images/rating-star.png) 0 0/12px no-repeat}.modal-content .modal-body ul.rmv-tag li span.votes-blank{width:12px;height:10px;margin-left:1px;background:url(app/assets/images/rating-star.png) 0 -11px/12px no-repeat}}</style><div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3><div class="modal-popup-close" ng-click="closeModal()"></div></div><div class="modal-body tag-frnd-modal"><ul ng-hide="showPeopleLoader"><li data-ng-repeat="friend in ratedUsers"><span class="tag-img"><img title="" style="width:30px;height:30px" alt="No image available" src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a ng-href="#/viewfriend/{{friend.id}}">{{friend.first_name}} {{friend.last_name}}</a><span class="frnd-details"><a href>{{friend.about_me}}</a></span></span><ul class="rmv-tag"><li data-ng-repeat="avgRate in averageRating(friend.rate) track by $index"><span ng-class="friend.rate % 1 == 0 ?\'votes-avg\': ($last ? \'half-avg\':\'votes-avg\')" /></li><li ng-repeat="blank in blankStar(friend.rate) track by $index"><span class="votes-blank"/> </li></ul></li></ul> <div ng-show="showPeopleLoader"><img titile="" alt="" src="app/assets/images/proceed.gif"></div></div><div class="modal-footer"></div>',
                templateUrl: 'app/views/find_people.html',
                controller: 'ModalController',
                size: 'lg',
                scope: $scope,
            });
            opts.type = type;
            opts.type_id = id;
            opts.session_id = APP.currentUser.id;
            ProfileService.findPeople(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.showPeopleLoader = false;
                    $scope.ratedUsers = data.data.users_rated;
                    if(data.data.users_rated.length == 0){
                        $scope.message = $scope.i18n.dashboard.no_vote;
                    }
                }else{
                    $scope.showPeopleLoader = false;
                }
            });
            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
        };

      },
      link:function ($scope){
        $(".fancybox").fancybox();
      },
      templateUrl: 'app/views/profile_post_list.html'
    }
  }).filter('unsafe', function($sce) {
    return function(val) {
        return $sce.trustAsHtml(val);
    };
});

  //Displaying the post form for store detail
app.directive('profilePostForm', function($timeout, ProfileService, FileUploader, $sce, focus) {
    return {
      restrict: 'E',
      controller: function ($scope, $timeout){
        $scope.postErrCls = '';// add dynamic class for success and fail
        $scope.privacySet = 3;
        //function to create post for dashboard
        $scope.postErrMsg = '';
        $scope.postErrCls = '';
        $scope.postContentStart = false;
       
        $scope.imagePrvSrc = [];
        $scope.postProfileFiles = [];
        $scope.imgProgress = [];
        $scope.postImgLoader = [];
        $scope.progress = [];
        $scope.tempPostId = '';
        var uploader =  $scope.uploader = new FileUploader({
          url: APP.service.dashboardpost+"?access_token="+APP.accessToken,
          headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'method': 'POST'
              /*'Accept': 'text/json'*/
          },
          data:{
              'user_id': APP.currentUser.id,
              'title':"Not in use on frontend", //This dummy data as currently there is no field to accept the posttitle
              'description':'',
              'youtube_url':'',
              'to_id': APP.currentUser.id,
              'link_type':"0",
              'post_type':"0",
              'privacy_setting': $scope.privacySet
          },
          dataObjName:'reqObj',
          formDataName:'postfile[]'
        });
        // FILTERS
        uploader.filters.push({
            name: 'postfile[]',
            fn: function(item /*{File|FileLikeObject}*/, options) {
                var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
            }
        });
        //function to add image on user post
        $scope.isImage = false;
        $scope.imgUpload = false;
        $scope.uploadBox = false;//previously used to hide the text area in first click of photo tab 
        $scope.addImage = function() { 
            var href = $('#previewUrl_lp1').html();
            if(href != ''){
                $timeout(function(){
                    $('#closePreview_lp1').click();
                },100);
            }
            $scope.isImage = true;
            $scope.imgUpload = false;
            $scope.uploadBox = true;
            $scope.imagePrvSrc = [];
            uploader.queue = [];
            $scope.postProfileFiles = [];
        };
        $scope.addPost = function() { 
            $scope.isImage = false;
            $scope.imgUpload = false;
            $scope.uploadBox = false;
            $scope.isPost = true;
            $scope.imagePrvSrc = [];
            uploader.queue = [];
            $scope.postProfileFiles = [];
        };
            //remove iamge from preview array
        $scope.removeImage = function(index) {
            //$('#progress-'+ index).css('display','none');
            //$('#bkground-'+ index).css('display','none');
            var item = $scope.uploader.queue[index];
            item.remove();
            var tempImg = $scope.imagePrvSrc[index];
            $scope.imagePrvSrc.splice(index, 1);
            var formData = {};
            formData.user_id = APP.currentUser.id;
            formData.post_media_id = tempImg.media_id;

            //calling the service to delete the selected post 
            ProfileService.deletePostMedia(formData, function(data){
                if(data.code == 101) {
                    //$('#progress-'+ index).css('display','block');
                    //$('#bkground-'+ index).css('display','block');
                } else {
                    $scope.imagePrvSrc[index] = tempImg;
                    $scope.postErrCls = 'text-red';
                    $scope.postErrMsg = $scope.i18n.dashboard.postcomment.remove_img_fail;
                    $timeout(function(){
                        $scope.postErrCls = '';
                        $scope.postErrMsg = '';
                    }, 15000);
                    $scope.userPostList;
                }
            });
        };
        uploader.onAfterAddingFile = function(fileItem) {
            $scope.postContentStart = true;
            uploader.data.post_id=$scope.tempPostId;
            var queueLen = uploader.queue.length-1;
            if(uploader.queue.length != 0){
                $scope.uploadBox = false;
                $scope.imgUpload = true;
            }
            $scope.postImgLoader[queueLen] = true;
           // $timeout(function() {
                uploader.uploadItem(fileItem);
            //}, 5000);
        };

        uploader.onSuccessItem = function(fileItem, response, status, headers) {
            var index = uploader.getIndexOfItem(fileItem);
            if(response.code == 101){
                $scope.imagePrvSrc[index] = response.data;
                $scope.postImgLoader[index] = false;
                $scope.tempPostId = response.data.id;
                uploader.data.post_id=response.data.id;
            }
        };

        uploader.onCompleteAll = function() {
            $timeout(function(){
                $scope.postContentStart = false;
            }, 1000);
            
        }

        uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
            $scope.postErrMsg = $scope.i18n.editprofile.no_media_valid;
            $scope.postErrCls = 'text-red';
            $timeout(function(){
                $scope.postErrCls = '';
                $scope.postErrMsg = '';
            }, 15000);
        };
        
        $scope.createPost = function() {
            $scope.noContent = false; 
            $scope.updateBody = [];
            $scope.activeEdit = [];
            $scope.editPostErrorMsg = [];
            var link_type;
            $scope.postContentStart = true;
            $scope.postContentLoader = true;
            var opts = {};
            $scope.postErrMsg = '';
            var filescount = $scope.imagePrvSrc.length;
            var description = '';
            var src = '';

            /*Link Preview feature*/
            var descval = $("#preview_lp1").html();
            var href = $('#previewUrl_lp1').html();
            var textarea = $('#text_lp1').val();
            description = textarea;
            var regex = /src="([^"]+)"/;
            src = description.split(regex)[1];
            if(src != undefined && src != ''){
                description = src;
            }

            description = escapeHtmlEntities(description);

            if(href == '') {
                link_type = "0";
            } else {
                description = "<p>"+description+"</p>";
                description += descval;
                link_type = "1";
            }
            
            if ((description == undefined || description == '') && filescount == 0) {
                $scope.postErrCls = 'text-red';
                $scope.postErrMsg = $scope.i18n.editprofile.attach_link;
                $scope.postContentStart = false;
                $scope.postContentLoader = false;
                $timeout(function(){
                    $scope.postErrCls = '';
                    $scope.postErrMsg = '';
                }, 15000);
                return false;
            }
            

            opts.user_id = APP.currentUser.id;
            opts.title = $scope.i18n.editprofile.no_use; //This dummy data as currently there is no field to accept the posttitle
            opts.description = description;
            opts.youtube_url = '';
            opts.to_id = APP.currentUser.id;
            opts.link_type = link_type;
            opts.post_id = $scope.tempPostId;
            opts.post_type = "1";
            opts.media_id = [];
            opts.privacy_setting = $scope.privacySet;
            var friendId = [];
            if($scope.storedFriend.length > 0){
                for (var i = 0; i < $scope.storedFriend.length; i++) {
                    friendId.push($scope.storedFriend[i].user_info.id);
                };

                opts.tagged_friends = friendId.join();
            }else{
                opts.tagged_friends = "";
            }
            angular.forEach($scope.imagePrvSrc, function(file) {
              opts.media_id.push(file.media_id);
            });

            ProfileService.dashboardPost(opts, function(data){
                if(data.code == 101) {
                    $scope.storedFriend = [];
                    $scope.showTagForm = false;
                    var targetObject = {};
                    targetObject = data.data;
                    $scope.userPostList.unshift(targetObject);
                    $scope.postErrMsg = '';
                    $scope.imagePrvSrc = [];
                    $scope.postProfileFiles = [];
                    $timeout(function(){
                        $scope.postErrCls = '';
                        $scope.postErrMsg = '';
                    }, 15000);
                    uploader.data.post_id={};
                    while(uploader.queue.length) {
                     uploader.queue[0].remove();
                    }
                    if ($scope.userPostList.length == 0){
                        $scope.noPostList = true; 
                    } 
                    $scope.noPostList = false; 
                    $scope.tempPostId='';
                    $scope.postContentStart = false;
                    $scope.postContentLoader = false;
                    $scope.postText = '';
                    $scope.isImage = false;
                    $scope.imgUpload = false;
                    $scope.uploadBox = false;
                    $('#text_lp1').val('');
                    $('#text_lp1').attr("style", "");
                    $timeout(function(){
                        $('#closePreview_lp1').trigger('click');
                    }, 100);
                } else {
                    $scope.postErrCls = 'text-red';
                    $scope.postErrMsg = $scope.i18n.editprofile.post_unable;
                    $timeout(function(){
                        $scope.postErrCls = '';
                        $scope.postErrMsg = '';
                    }, 15000);
                    $scope.imagePrvSrc = [];
                    $scope.postProfileFiles = [];
                    $scope.postText = undefined; 
                    $scope.postContentLoader = false;
                    $scope.isImage = false;
                    $scope.imgUpload = false;
                    $scope.uploadBox = false;
                }
            });
        };


        // Show Tag Column
        $scope.showTagForm = false;
        $scope.showTagCloumn = function(){
            if($scope.showTagForm === false){
                $scope.showTagForm = true;
                focus('searchTagFriend');
            }else{
                $scope.showTagForm = false;
            }
        };

        // focus on click
        $scope.gainFocus = function(){
            focus('searchTagFriend');
        };
        
        // Show the list of friend
        var DELAY_TIME_BEFORE_POSTING = 300;
        var currentTimeout = null;
        angular.element('#searchTagFriend').keypress(function(event) {
            var model = $scope.searchText;
            if(currentTimeout) {
            $timeout.cancel(currentTimeout);
            }
            currentTimeout = $timeout(function(){
                if(event.which != 13){ 
                    $scope.tagFriendSuggestion();
                }
            }, DELAY_TIME_BEFORE_POSTING)
        });

        $scope.friends = [];
        $scope.cancelFriendSearch = false;
        $scope.showSearchLoader = false;
        $scope.tagFriendSuggestion = function(){
            $scope.cancelFriendSearch = false;
            $scope.showFriendList = true;
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.friend_name = $scope.friendName;
            opts.session_id = APP.currentUser.id;
            opts.limit_start = 0;
            opts.limit_size =  APP.friend_list_pagination.end;
            $scope.showSearchLoader = true;
            ProfileService.searchFriends(opts,function(data){
                $scope.showSearchLoader = false;
                if($scope.cancelFriendSearch === false){
                    $scope.friends = data.data.users;
                }
            })
        };

        // Store friend 
        $scope.storedFriend = [];
        $scope.dublicate = false;
        $scope.selectFriend = function(friendInfo){
            if(friendInfo === undefined){
                return;
            }else{
                $scope.dublicate = false;
                angular.forEach($scope.storedFriend,function(index){
                    if(index.user_id === friendInfo.user_id){
                        $scope.dublicate = true;
                    }
                });

                if($scope.dublicate === false){
                    $scope.storedFriend.push(friendInfo);
                    $scope.friends = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTaggIndex = -1;
                    angular.element('#searchTagFriend').val("");
                    $scope.showFriendList = false;
                }else{
                    $scope.friends = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTaggIndex = -1;
                    angular.element('#searchTagFriend').val("");
                    $scope.showFriendList = false;
                }
            }
        };

        // stop the service for loading more service
        $scope.lostFormFocus = function(){
            $timeout(function(){
                $scope.friends = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTaggIndex = -1;
                angular.element('#searchTagFriend').val("");
                $scope.showFriendList = false;
            },300);
        };

        // Remove selected friend
        $scope.removeTagFriend = function(friendIndex){
            //var index = $scope.storedFriend.indexOf(friendIndex);
            $scope.storedFriend.splice(friendIndex,1);
        };

        // Up down key control in search friend list
        $scope.friendTaggIndex = -1;
        $scope.keyUpDownControl = function(event){console.log($scope.friendTaggIndex);
            if(event.keyCode===40){
                event.preventDefault();
                if($scope.friendTaggIndex+1 !== $scope.friends.length){
                    $scope.friendTaggIndex++;
                }
            }else if(event.keyCode===38){
                event.preventDefault();
                if($scope.friendTaggIndex-1 !== -1){
                    $scope.friendTaggIndex--;
                }
            }else if(event.keyCode===13){
                    $scope.selectFriend($scope.friends[$scope.friendTaggIndex]);
            }
        };
     
      },
      link: function (scope, iElement, iAttrs) {
        $($('#lp1').linkPreview()).appendTo(iElement[0]);
      },
      templateUrl: 'app/views/profile_post_form.html'
      }
  });

  //Displaying the loading image form for store detail
  app.directive('showProgress', function() {
    return {
      restrict: 'E',
      template: '<img src="app/assets/images/proceed.gif" alt="processing..." />'
    }
  });

    
  //Displaying the comment post form for store detail
  app.directive('profileCommentForm',['ProfileService', 'fileReader', '$http', '$timeout', '$interval', function(ProfileService, fileReader, $http, $timeout, $interval) {
    return {
      restrict: 'E',
      templateUrl: 'app/views/profile_comment_form.html',
      scope : true,
      link : function(scope, elem, attrs){
        scope.showPreview = false;
        scope.comment_id = '';
        scope.image_id = [];
        scope.imgSrc = [];
        scope.isInProgress = [];
        scope.commentFiles = [];
        scope.selectInProgress = [];
        scope.imgRes = 1;
        scope.commentErrMsg = '';
        scope.commentErrCls = '';
        scope.getFile = function () {
            var tempopts = {};
            tempopts.user_id = APP.currentUser.id;
            tempopts.postid = attrs.postId;
            tempopts.body = scope.i18n.editprofile.comment_image_test;
            tempopts.comment_type = '0';
            tempopts.image_id = '';
            tempopts.comment_id = '';
            var len = scope.commentFiles.length;
            ProfileService.createDashboardCommentImage(tempopts, scope.commentFiles[0], function(data){
                if(data.code == 101) {
                    scope.comment_id = data.data.id;
                    scope.imgSrc.push(data.data);
                    scope.image_id.push(data.data.media_id);
                    tempopts.comment_id = scope.comment_id;
                    scope.selectInProgress.splice(0,1);
                    for(j=1; j < len; j++){
                        ProfileService.createDashboardCommentImage(tempopts, scope.commentFiles[j], function(data){
                            if(data.code == 101) {
                                scope.comment_id = data.data.id;
                                scope.imgSrc.push(data.data);
                                scope.image_id.push(data.data.media_id);
                                scope.selectInProgress.splice(0,1);
                            }else{
                                scope.commentErrCls = 'text-red';
                                scope.commentErrMsg = scope.i18n.dashboard.postcomment.upload_media_fail;
                            }
                        });
                    }
                }else{
                    scope.commentErrCls = 'text-red';
                    scope.commentErrMsg = scope.i18n.dashboard.postcomment.upload_media_fail;
                }
            });
            setTimeout(function(){
                scope.commentErrCls = '';
                scope.commentErrMsg = '';
            }, 15000);
        };

      //remove iamge from preview array
      scope.removeImage = function(index) {
        var tempMedia = scope.image_id[index];
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.postid = attrs.postId;
        opts.image_id = tempMedia;
        ProfileService.deleteDashboardMediaComments(opts, function(data){
          if(data.code == 101) {
            scope.imgSrc.splice(index, 1);
            scope.isInProgress.splice(index, 1);
            if(scope.imgSrc.length == 0){
                scope.commentFiles == [];
                scope.file = [];
            }
            scope.image_id.splice(index, 1);
            if(scope.imgSrc.length == 0){
              scope.selectInProgress = [];
              scope.showImgSelect = true;
              scope.showPreview = false;
            }
          } else {
            scope.showImgSelect = true;
            scope.showPreview = true;
            scope.commentErrCls = 'text-red';
            scope.commentErrMsg = scope.i18n.dashboard.postcomment.remove_img_fail;
          }
          setTimeout(function(){
            scope.commentErrCls = '';
            scope.commentErrMsg = '';
            }, 15000);
        });
      };

      scope.addComment = function(){
        scope.postIndx = attrs.postIndx;
        scope.comments = attrs.loadComment;
        scope.finalCommentInProcess = true;
        scope.commentErrMsg = "";
        scope.commentErrCls = '';
        var filescount = scope.imgSrc.length;
        if ((scope.commentText == undefined  || scope.commentText == '') && filescount == 0) {
            scope.finalCommentInProcess = false;
            scope.commentErrCls = 'text-red';
            scope.commentErrMsg = scope.i18n.editprofile.photo_update;
            setTimeout(function(){
                scope.commentErrCls = '';
                scope.commentErrMsg = '';
            }, 15000);
            return false;
        }
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.postid = attrs.postId;
        opts.body = scope.commentText;
        opts.media_id = [];
        opts.comment_id = "";
        if(scope.image_id.length != 0){
          opts.media_id = scope.image_id;
        }
        if(scope.comment_id != ''){
          opts.comment_id = scope.comment_id;  
        }
        opts.comment_type = '1';

        ProfileService.createDashboardCommentFinal(opts, function(data){
          if(data.code == 101) {
            scope.commentText = '';
            scope.post.comments.push(data.data);
            scope.finalCommentInProcess = false;
            scope.commentErrMsg = '';
            scope.commentErrCls = '';
            scope.commentText = '';
            scope.commentFiles = [];
            scope.imgSrc = [];
            scope.file = [];
            scope.showPreview = false;
            scope.showImgSelect = true;
            scope.comment_id = '';
          } else {
            scope.finalCommentInProcess = false;
            scope.commentErrCls = 'text-red';
            scope.commentErrMsg = scope.i18n.editprofile.comment_no_post;
            scope.commentFiles = [];
            scope.imgSrc = [];
            scope.file = []
            scope.showPreview = false;
            scope.showImgSelect = true;
            scope.comment_id = '';
          }
        });
        $timeout(function(){
            scope.commentErrCls = '';
            scope.commentErrMsg = '';
        }, 15000);
      };
    }
  };
}]);

//Displaying the post form for store detail
app.directive('profilePostList', function($routeParams, $modal, $log, ProfileService) {
    return {
      restrict: 'E',
      controller: function ($scope, $timeout,$sce, $compile){
        $scope.showComments = [];
        $scope.commentsLength = [];
        $scope.userPostList = [];
        $scope.showComments = [];
        $scope.commentsLength = [];
        $scope.noPostList = false; 
        $scope.isLoadPost = true;
        $scope.textLimit = APP.post_charecter_limit;

        //function to close the see more link
        $(document).on({click: function () {
                var that = $(this);
                var postType = that.attr("postType");
                if(postType == 1)
                {
                    var fullText = that.parent().parent().attr("fullText");
                    that.parent().parent().html(fullText.replace(/\n/g, "<br />"));
                }else {
                    var fullText = that.parent().attr("fullText");
                    that.parent().html(fullText.replace(/\n/g, "<br />"));
                }
                return false;
            }
        }, '.morelink');

        //check screen for mobile devicess to show corresponding layou
        $scope.loadMoreFunc = 'loadMorePost()';
        $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
            $scope.windowHeight = newValue.h;
            $scope.windowWidth = newValue.w;
            if($scope.windowWidth <= '768'){
                $scope.isSmallScreen =  true; //declare in main controller
                $scope.loadMoreFunc = '';
            } else {
                $scope.isSmallScreen =  false; //declare in main controller
                $scope.loadMoreFunc = 'loadMorePost()';
            }
        }, true);

        //funciton to list user post on dashboard
        //TODO: infinite scoller is remaining
        $scope.listUserPost = function() {
            var opts = {};
            var limit_start = $scope.userPostList.length;
            opts.user_id = APP.currentUser.id;
            opts.limit_start = limit_start;
            opts.limit_size = APP.dashbord_pagination.end;
            opts.friend_id = APP.currentUser.id;
            //calling the services to get the user post list
            if ((($scope.totalSize > limit_start ) || $scope.totalSize == 0 ) && $scope.myRes == 1) {
                $scope.myRes = 0;
                ProfileService.listDashboardPost(opts, function(data){
                    if(data.code == 100) {
                        $scope.isLoadPost = false; 
                        var items = data.data.post;
                        if(items != undefined){
                            $scope.userPostList = $scope.userPostList.concat(items); 
                            $scope.noPostList = false; 
                        }
                        if($scope.userPostList.length==0){
                            $scope.noPostList = true; 
                        } 
                        $scope.totalSize = data.data.count;
                    } else {
                        $scope.isLoadPost = false;
                        if ($scope.userPostList.length == 0){
                            $scope.noPostList = true; 
                        } 
                        $scope.userPostList;
                    }
                    $scope.myRes = 1;
                });
            } else {
                $scope.isLoadPost = false;
                if($scope.userPostList.length==0){
                    $scope.noPostList = true; 
                } 
                $scope.userPostList;
            }
        };
        //funciton to delete single post
        $scope.deleteErrMsg = [];
        $scope.isDeletePost = [];
        $scope.deleteErrCls = [];
        $scope.deletePost = function(postIndx) {
            var postData = {};
            postData = $scope.userPostList[postIndx];
            $scope.isDeletePost[postIndx] = true;
            $scope.updateBody[postIndx] = '';
            $scope.activeEdit[postIndx] = false;
            $scope.editPostErrorMsg[postIndx] = '';
            var formData = {};
            formData.user_id = APP.currentUser.id;
            formData.post_id = postData.id;

            //calling the service to delete the selected post 
            ProfileService.deleteDashboardPost(formData, function(data){
                if(data.code == 101) {
                    $scope.userPostList.splice(postIndx, 1);
                    if ($scope.userPostList.length == 0){
                        $scope.noPostList = true; 
                    } 
                    $scope.isDeletePost[postIndx] = false;
                } else {
                    $scope.deleteErrCls[postIndx] = 'text-red';
                    $scope.deleteErrMsg[postIndx]= $scope.i18n.dashboard.postcomment.delete_post_fail;
                    $scope.isDeletePost[postIndx] = false;
                }
                $timeout(function(){
                    $scope.deleteErrCls[postIndx] = '';
                    $scope.deleteErrMsg[postIndx] = '';
                }, 15000);
            });
        };

        //function to create post
        $scope.editPostErrorMsg = [];
        $scope.updatePostInProcess = [];
        $scope.editPostErrorCls = [];
        $scope.saveUpdatePost = function(postIndx) {
            var opts = {};
            $scope.updatePostInProcess[postIndx] = true;
            var editPostText = $scope.updateBody[postIndx]; 
            var post = $scope.userPostList[postIndx];

            if(editPostText == undefined || editPostText == '') {
                $scope.updatePostInProcess[postIndx] = false;
                $scope.editPostErrorCls[postIndx] = 'text-red';
                $scope.editPostErrorMsg[postIndx] = $scope.i18n.editprofile.no_empty_status;
                $timeout(function(){
                    $scope.editPostErrorCls[postIndx] = '';
                    $scope.editPostErrorMsg[postIndx] = '';
                }, 15000);
                return false;
            } 
            opts.user_id = APP.currentUser.id;
            opts.post_id = post.id;
            opts.title = post.title; //This dummy data as currently there is no field to accept the posttitle
            opts.description = editPostText;
            opts.to_id = post.to_id; 
            opts.youtube_url = '';
            opts.post_type = '1';
            opts.privacy_setting = post.privacy_setting;
            var myFile = '';
            var friendIdList = [];
            if($scope.postTaggedFriend[postIndx].length > 0){
                angular.forEach($scope.postTaggedFriend[postIndx],function(index){
                    friendIdList.push(index.id);
                });

                opts.tagged_friends = friendIdList.join();
            }else{
                opts.tagged_friends = "";
            }

            ProfileService.updateDashboardPost(opts, function(data){
                if(data.code == 101) {
                    $scope.updatePostInProcess[postIndx] = false;
                    $scope.editPostErrorMsg[postIndx] = '';
                    $scope.userPostList[postIndx].description = editPostText;
                    $scope.editPostText = '';
                    $scope.activeEdit[postIndx] = false;
                } else {
                    $scope.updatePostInProcess[postIndx] = false;
                    $scope.editPostErrorCls[postIndx] = 'text-red';
                    $scope.editPostErrorMsg[postIndx] = $scope.i18n.editprofile.post_unsaved;
                }
                $timeout(function(){
                    $scope.editPostErrorCls[postIndx] = '';
                    $scope.editPostErrorMsg[postIndx] = '';
                }, 15000);
            });
        };

        $scope.editPrivacyMsg = [];
        $scope.editPrivacyCls = [];
        $scope.changePrivacy = function(post, postIndx) { 
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.post_id = post.id;
            opts.title = post.title; //This dummy data as currently there is no field to accept the posttitle
            opts.description = post.description;
            opts.to_id = post.to_id; 
            opts.youtube_url = '';
            opts.post_type = '1';
            opts.privacy_setting = post.privacy_setting;
            var myFile = '';
            ProfileService.updateDashboardPost(opts, function(data){
                if(data.code == 101) {
                    $scope.editPrivacyCls[postIndx] = '';
                    $scope.editPrivacyMsg[postIndx] = '';                    
                } else {
                    $scope.editPrivacyCls[postIndx] = 'text-red';
                    $scope.editPrivacyMsg[postIndx] = $scope.i18n.editprofile.privacy_setting; 
                    $timeout(function(){
                        $scope.editPrivacyCls[postIndx] = '';
                        $scope.editPrivacyMsg[postIndx] = '';
                    }, 15000);
                }
            });
        };

        $scope.updateBody = [];
        $scope.activeEdit = [];
        $scope.postTaggedFriend = [];
        $scope.showTagLoading = [];
        //funtion to open form to update post
        $scope.updatePost = function(postIndx) {
            $scope.editPostErrorMsg[postIndx]='';
            $scope.editPostErrorCls[postIndx]='';
            var post = $scope.userPostList[postIndx];
            $scope.updateBody[postIndx] = post.description;
            $scope.postTaggedFriend[postIndx] = post.tagged_friends_info;
            $scope.activeEdit[postIndx] = true;
            $scope.showTagLoading[postIndx] = true;
        };

        // close the edit form on cancel
        $scope.cancelPost = function(postIndx) {
            $scope.updateBody[postIndx] = '';
            $scope.activeEdit[postIndx] = false;
            $scope.editPostErrorMsg[postIndx] = '';
            $scope.editPostErrorCls[postIndx]='';
            $scope.showTagLoading[postIndx] = false;
            $scope.postTaggedFriend = [];
        };

        // function to remove the tagged friend
        $scope.removePostTagFriend  = function(index, postIndex){
            $scope.postTaggedFriend[postIndex].splice(index,1);
        };

        // Add more friend in the post
        var currentTimeout = null;
        $scope.addMoreFriend = function(event, index){
            var DELAY_TIME_BEFORE_POSTING = 300;
            if(currentTimeout) {
                $timeout.cancel(currentTimeout);
            }
            currentTimeout = $timeout(function(){
                if(event.which != 13){ 
                    $scope.searchMoreFriend(index);
                }
            }, DELAY_TIME_BEFORE_POSTING)
        };

        $scope.friends = [];
        $scope.showSearchFriendLoader = [];
        $scope.cancelFriendSearch = false;
        $scope.showSearchFriendList = [];
        $scope.searchMoreFriend = function(postIndx){
            $scope.searchFriend = $('.addMoreTagFriend'+postIndx).val();
            $scope.cancelFriendSearch = false;
            $scope.showSearchFriendList[postIndx] = true;
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.friend_name = $scope.searchFriend;
            opts.limit_start = 0;
            $scope.friendTagIndex[postIndx] = -1;
            opts.limit_size =  APP.friend_list_pagination.end;
            $scope.showSearchFriendLoader[postIndx] = true;
            $scope.showTagLoading[postIndx] = true
            ProfileService.searchFriends(opts,function(data){
                $scope.showSearchFriendLoader[postIndx] = false;
                if($scope.cancelFriendSearch === false){
                    if(data.data.users.length > 0){
                        $scope.friends[postIndx] = data.data.users;
                    }
                }
            });
        };

        // Store friend 
        $scope.postTaggedFriend = [];
        $scope.dublicate = false;
        $scope.taggedSelectFriend = function(friendInfo, postIndex){
            if(friendInfo === undefined){
                return
            }else{
                $scope.dublicate = false;
                angular.forEach($scope.postTaggedFriend[postIndex],function(index){
                    if(index.id === friendInfo.user_id){
                        $scope.dublicate = true;
                    }
                });

                if($scope.dublicate === false){console.log(friendInfo);console.log(postIndex);
                    $scope.postTaggedFriend[postIndex].push({"id":friendInfo.user_id, "first_name": friendInfo.user_info.first_name, "last_name": friendInfo.user_info.last_name,"profile_image": friendInfo.user_info.profile_image,"profile_image_thumb":friendInfo.user_info.profile_image_thumb});
                    $scope.friends[postIndex] = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTagIndex[postIndex] = -1;
                    angular.element('.addMoreTagFriend'+postIndex).val("");
                    $scope.showSearchFriendList[postIndex] = false;
                }else{
                    $scope.friends[postIndex] = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTagIndex[postIndex] = -1;
                    angular.element('.addMoreTagFriend'+ postIndex).val("");
                    $scope.showSearchFriendList[postIndex] = false;
                }
            }
        };

        // stop the service for loading more service
        $scope.lostFocus = function(postIndex){
            $timeout(function(){
                $scope.friends[postIndex] = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTagIndex[postIndex] = -1;
                angular.element('.addMoreTagFriend'+ postIndex).val("");
                $scope.showSearchFriendList[postIndex] = false;
            },300);
        };

        // Up down key control in search friend list
        $scope.friendTagIndex = [];
        $scope.searchNevigateControl = function(event, index){
            if(event.keyCode===40){
                event.preventDefault();
                if($scope.friendTagIndex[index]+1 !== $scope.friends[index].length){
                    $scope.friendTagIndex[index]++;
                }
            }else if(event.keyCode===38){
                event.preventDefault();
                if($scope.friendTagIndex[index]-1 !== -1){
                    $scope.friendTagIndex[index]--;
                }
            }else if(event.keyCode===13){
                    $scope.taggedSelectFriend($scope.friends[index][$scope.friendTagIndex[index]], index);
            }
        };

        $scope.getUserPostDetail = function(id) {
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.post_id = id;
            //calling the services to get the user post list
            if (($scope.totalSize == 0 ) && $scope.myRes == 1) {
                $scope.myRes = 0;
                ProfileService.getDashboardPostDetail(opts, function(data){
                    if(data.code == 101) {
                        $scope.isLoadPost = false; 
                        var items = data.data.post;
                        if(items != undefined){
                            $scope.userPostList = $scope.userPostList.concat(items); 
                            $scope.noPostList = false; 
                        }
                        if($scope.userPostList.length==0){
                            $scope.noPostList = true; 
                        } 
                        $scope.totalSize = data.data.count;
                    } else {
                        $scope.isLoadPost = false;
                        if ($scope.userPostList.length == 0){
                            $scope.noPostList = true; 
                        } 
                        $scope.userPostList;
                    }
                    $scope.myRes = 1;
                });
            } else {
                $scope.isLoadPost = false;
                if($scope.userPostList.length==0){
                    $scope.noPostList = true; 
                } 
                $scope.userPostList;
            }
        };

        //function to call initial loading
        $scope.showUserPostList = function(){
            $scope.isLoadPost=true;
            $scope.totalSize = 0;
            $scope.myRes = 1;
            if($routeParams.postId ? $routeParams.postId : '') {
                $scope.getUserPostDetail($routeParams.postId);
            }
            else {
                $scope.listUserPost();
            }
        };

        // function to get the post and comment of the post
        $scope.commentLoading = [];
        $scope.getComments = function(postIndx) {
            var post = $scope.userPostList[postIndx];
            $scope.userPostList[postIndx].comments = [];
            var opts = {};
            opts.post_id = post.id;
            opts.limit_start = APP.dashbord_comment.start;
            opts.limit_size = APP.dashbord_comment.end;

            // This service's function returns post
            ProfileService.getDashboardComments(opts, function(data){
                if(data.code == 100)
                {
                    $scope.userPostList[postIndx].comments = data.data.comment;
                    $scope.commentLoading[postIndx] = false;
                    $scope.commentsLength[postIndx] = $scope.userPostList[postIndx].comments.length;
                    if($scope.userPostList[postIndx].comments.length  != 0 ) {
                        $scope.noComment = true;
                    }
                } else {
                    $scope.commentLoading[postIndx] = false;
                }
            });
        };
        //function to show limited comment of the post
        $scope.showLimitedComment = function(postIndx) {
            $scope.commentInProcess = true;
            var post = $scope.posts[postIndx];
            var opts = {};
            opts.post_id = post.post_id;
            opts.user_id = $scope.currentUser.id;
            $scope.getComments(opts, postIndx);
        };
        $scope.showAllComments = function(postIndx) {
            $scope.commentLoading[postIndx] = true;
            $scope.showComments[postIndx] = true;
            $scope.getComments(postIndx);
        };
        $scope.pageSize = 4;
        //function to delete the comment of a post
        //funciton to delete single comment
        $scope.delCommentErrMsg = [];
        $scope.delCommentErrCls = [];
        $scope.deleteComment = function(postIndx,comment) {
            var indx = $scope.userPostList[postIndx].comments.indexOf(comment);
            var commentData = {};
            commentData = $scope.userPostList[postIndx].comments[indx];
            $scope.deleteCommentIndx = commentData.id;
            var formData = {};
            formData.user_id = APP.currentUser.id;
            formData.comment_id = commentData.id;

            //calling the comment service to delete the selected comment 
            ProfileService.deleteDashboardComment(formData, function(data){
                if(data.code == 101) {
                    $scope.delCommentErrMsg[commentData.id] = '';
                    $scope.delCommentErrCls[commentData.id] = '';
                    $scope.userPostList[postIndx].comments.splice(indx, 1);
                    $scope.deleteCommentIndx = '';
                }
                else {
                    $scope.delCommentErrMsg[commentData.id] = $scope.i18n.dashboard.postcomment.delete_comment_fail;
                    $scope.delCommentErrCls[commentData.id] = 'text-red';
                    $scope.deleteCommentIndx = '';
                    $scope.userPostList;
                }
                $timeout(function(){
                    $scope.delCommentErrCls[commentData.id] = '';
                    $scope.delCommentErrMsg[commentData.id] = '';
                }, 15000);

            });
        };
        $scope.editCommentText = [];
        $scope.activeCommentEdit = [];
        $scope.isEditComment = [];
        $scope.commentErrorMsg = [];
        $scope.commentErrorCls = [];
        $scope.commentInProcess = [];
        //funtion to open form to update comment
        $scope.updateComment = function(postIndx, comment) {
            $("#commentBoxId-"+postIndx).hide();
            $scope.commentInProcess[postIndx] = true;
            $scope.commentErrorMsg[postIndx] = '';
            $scope.commentErrorCls[postIndx]= '';
            var indx = $scope.userPostList[postIndx].comments.indexOf(comment);
            var comment = $scope.userPostList[postIndx].comments[indx];
            $scope.isEditComment[postIndx] = false;
            $scope.activeCommentEdit[postIndx] = comment.id
            $scope.editCommentText[postIndx]=comment.comment_text;
        };

        //function to edit a comment
        $scope.editComment = function(postIndx, comment) {
            var opts = {};
            $scope.commentErrorMsg[postIndx]= '';
            var indx = $scope.userPostList[postIndx].comments.indexOf(comment);
            var comment = $scope.userPostList[postIndx].comments[indx];
            var newText = $scope.editCommentText[postIndx];
            $scope.isEditComment[postIndx] = true;

            if(newText == undefined || newText == '') {
                $scope.isEditComment[postIndx]= false;
                $scope.commentErrorCls[postIndx] = 'text-red';
                $scope.commentErrorMsg[postIndx] = $scope.i18n.editprofile.no_empty_comment;
                $timeout(function(){
                    $scope.commentErrorCls[postIndx] = '';
                    $scope.commentErrorMsg[postIndx] = '';
                }, 15000);
                return false;
            } 

            opts.user_id = APP.currentUser.id;
            opts.comment_id = comment.id;
            opts.comment_text = newText;

            ProfileService.updateDashboardComment(opts, function(data){
                if(data.code == 101) {
                    $scope.commentInProcess[postIndx] = false;
                    $scope.activeCommentEdit[postIndx] = '';
                    $scope.commentErrorCls[postIndx] = '';
                    $scope.commentErrorMsg[postIndx] = '';
                    $scope.editCommentText[postIndx] = '';
                    $scope.userPostList[postIndx].comments[indx].comment_text = newText;
                    $scope.isEditComment[postIndx] = false;
                    $("#commentBoxId-"+postIndx).show();
                } else {
                    $scope.commentInProcess[postIndx] = false;
                    $scope.isEditComment[postIndx] = false;
                    $scope.commentErrorCls[postIndx] = 'text-red';
                    $scope.commentErrorMsg[postIndx]= $scope.i18n.editprofile.not_posted;
                    $("#commentBoxId-"+postIndx).show();
                }
                $timeout(function(){
                    $scope.commentErrorCls[postIndx] = '';
                    $scope.commentErrorMsg[postIndx] = '';
                }, 15000);
            });
        };

        //funtion to open form to update comment
        $scope.cancelEditComment = function(postIndx, indx) {
            $scope.commentInProcess[postIndx] = false;
            $scope.activeCommentEdit[postIndx] = '';
            $scope.commentErrorCls[postIndx] = '';
            $scope.commentErrorMsg[postIndx] = '';
            $scope.editCommentText[postIndx] = '';
            $scope.isEditComment[postIndx] = false;
            $("#commentBoxId-"+postIndx).show();
        };

        $scope.loadMorePost = function() {
            if($scope.totalSize !=0){
                $scope.isLoadPost = true;
                $scope.listUserPost();
            }
        };
        //calling function to load postlist
        $scope.showUserPostList();
        $scope.averageVoting = 0;
        $scope.vote_count = 0;
        $scope.waitRateResponse = false;
        $scope.ratePost = function(rating, post_id, index){
            var update = "";
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "dashboard_post";
            opts.type_id = post_id;
            opts.rate = rating;
            $scope.waitRateResponse = true;
            if($scope.userPostList[index].is_rated){
                update = "update";
            }else{
                update = "add";
            }
            waitRequest = ProfileService.rateThis(opts, update, function(data){
                if(data.code === 101 && data.message === "SUCCESS"){
                    $scope.userPostList[index].avg_rate = data.data.avg_rate;
                    $scope.userPostList[index].no_of_votes = data.data.no_of_votes;
                    $scope.userPostList[index].is_rated = true;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    //$scope.userPostList[index].avg_rate = 0;
                    //$scope.userPostList[index].no_of_votes = 0;
                    $scope.userPostList[index].is_rated = false;
                    $scope.userPostList[index].current_user_rate = 0;
                }
                $scope.waitRateResponse = false;
            });
        };

        $scope.WaitDeleteResponse = false;
        $scope.removeRating = function(post_id, postIndx){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "dashboard_post";
            opts.type_id = post_id;
            if($scope.WaitDeleteResponse === false){
                $scope.WaitDeleteResponse = true;
                $scope.waitRateResponse = true;
            }else{
                return;
            }
            ProfileService.removeRating(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.userPostList[postIndx].current_user_rate = 0;
                    $scope.userPostList[postIndx].is_rated = false;
                    $scope.userPostList[postIndx].no_of_votes = data.data.no_of_votes;
                    $scope.userPostList[postIndx].avg_rate =  data.data.avg_rate;
                }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                    $scope.userPostList[postIndx].current_user_rate = 0;
                    $scope.userPostList[postIndx].is_rated = false;
                    //$scope.userPostList[postIndx].no_of_votes =0;
                    //$scope.userPostList[postIndx].avg_rate =  0;
                }
                $scope.WaitDeleteResponse = false;
                $scope.waitRateResponse = false;
            });
        };

        $scope.rateComment = function(rating, comment_id, postIndex, commentIndex){
            var update = "";
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "dashboard_post_comment";
            opts.type_id = comment_id;
            opts.rate = rating;
            if($scope.userPostList[postIndex].comments[commentIndex].is_rated){
                update = "update";
            }else{
                update = "add";
            }
            ProfileService.rateThis(opts, update, function(data){
                if(data.code === 101 && data.message === "SUCCESS"){
                    $scope.userPostList[postIndex].comments[commentIndex].avg_rate = data.data.avg_rate;
                    $scope.userPostList[postIndex].comments[commentIndex].no_of_votes = data.data.no_of_votes;
                    $scope.userPostList[postIndex].comments[commentIndex].is_rated = true;
                }
            });
        };

        $scope.removeCommentRating = function(comment_id, postIndx, indx){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.type = "dashboard_post_comment";
            opts.type_id = comment_id;
            ProfileService.removeRating(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.userPostList[postIndx].current_user_rate = 0;
                    $scope.userPostList[postIndx].is_rated = false;
                    $scope.userPostList[postIndx].no_of_votes = data.data.no_of_votes;
                    $scope.userPostList[postIndx].avg_rate =  data.data.avg_rate;
                }
            });
        };

        $scope.stars = [];

        $scope.averageRating = function(rating){
            return new Array(Math.ceil(rating));
        };

        $scope.blankStar = function(rating){
            if((5-Math.ceil(rating)) > 0){
                return new Array(5-Math.ceil(rating));
            }else{
                return 0;
            }
        };

        $scope.max = 5;
        $scope.isReadonly = false;

        $scope.rateThis = function(value, id, index){
            $scope.ratePost(value, id, index);
        };

        $scope.hoveringOver = function(value) {
            $scope.overStar = value;
            $scope.percent = 100 * (value / $scope.max);
        };

        $scope.ratingStates = [
            {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
        ];

        $scope.showPeopleLoader = false;
        $scope.findPeople = function(id, type, count_Vote){
            if(count_Vote === 0 ){
                return false;
            }
            var opts = {};
            $scope.ratedUsers = {};
            $scope.showPeopleLoader = true;

            var modalInstance = $modal.open({
                        template: '<style>.modal-body.tag-frnd-modal ul li{padding:8px 130px 8px 0}.modal-content .modal-body ul.rmv-tag{position:absolute;right:0;top:10px}.modal-content .modal-body ul.rmv-tag li{padding:0;display:inline-block;vertical-align:middle;border:0}.modal-content .modal-body ul.rmv-tag li span.votes-avg{width:23px;height:21px;margin-left:2px;background:url(app/assets/images/rating-star.png) no-repeat;display:block}.modal-content .modal-body ul.rmv-tag li span.votes-blank{width:23px;height:21px;margin-left:2px;background:url(app/assets/images/rating-star.png) 0 -21px no-repeat;display:block}.modal.in .modal-dialog{margin:auto;top:0;bottom:0;left:0;right:0;position:absolute}.modal-body.tag-frnd-modal{height:360px;overflow-y:auto;overflow-x:hidden;padding:0 10px}.modal .modal-content{margin:auto;height:400px;top:0;bottom:0;left:0;right:0;position:absolute;overflow:visible}@media screen and (max-width:479px){.modal.in .modal-dialog{margin:auto 20px}.modal-body.tag-frnd-modal ul li{padding:8px 70px 8px 0}.modal-content .modal-body ul.rmv-tag li span.votes-avg{width:12px;height:10px;margin-left:1px;background:url(app/assets/images/rating-star.png) 0 0/12px no-repeat}.modal-content .modal-body ul.rmv-tag li span.votes-blank{width:12px;height:10px;margin-left:1px;background:url(app/assets/images/rating-star.png) 0 -11px/12px no-repeat}}</style><div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3><div class="modal-popup-close" ng-click="closeModal()"></div></div><div class="modal-body tag-frnd-modal"><ul ng-hide="showPeopleLoader"><li data-ng-repeat="friend in ratedUsers"><span class="tag-img"><img title="" style="width:30px;height:30px" alt="No image available" data-ng-src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a ng-href="#/viewfriend/{{friend.id}}">{{friend.first_name}} {{friend.last_name}}</a><span class="frnd-details"><a href>{{friend.about_me}}</a></span></span><ul class="rmv-tag"><li data-ng-repeat="avgRate in averageRating(friend.rate) track by $index"><span ng-class="friend.rate % 1 == 0 ?\'votes-avg\': ($last ? \'half-avg\':\'votes-avg\')" /></li><li ng-repeat="blank in blankStar(friend.rate) track by $index"><span class="votes-blank"/> </li></ul></li></ul> <div ng-show="showPeopleLoader"><img titile="" alt="" src="app/assets/images/proceed.gif"></div></div><div class="modal-footer"></div>',
                        controller: 'ModalController',
                        size: 'lg',
                        scope: $scope,
            });
            opts.type = type;
            opts.type_id = id;
            ProfileService.findPeople(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.showPeopleLoader = false;
                    $scope.ratedUsers = data.data.users_rated;
                    if(data.data.users_rated.length == 0){
                        $scope.message = $scope.i18n.dashboard.no_vote;
                    }
                }else{
                    $scope.showPeopleLoader = false;
                }
            });
            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };

      },
      link:function ($scope){
        $(".fancybox").fancybox();
      },
      templateUrl: 'app/views/profile_post_list.html'
    }
  }).filter('unsafe', function($sce) {
    return function(val) {
        return $sce.trustAsHtml(val);
    };
});

  //Displaying the post form for store detail
  app.directive('profilePostForm', function($timeout, ProfileService, FileUploader, $sce) {
    return {
      restrict: 'E',
      controller: function ($scope, $timeout){
        $scope.postErrCls = '';// add dynamic class for success and fail
        $scope.privacySet = 1;
        //function to create post for dashboard
        $scope.postErrMsg = '';
        $scope.postErrCls = '';
        $scope.postContentStart = false;
       
        $scope.imagePrvSrc = [];
        $scope.postProfileFiles = [];
        $scope.imgProgress = [];
        $scope.postImgLoader = [];
        $scope.progress = [];
        $scope.tempPostId = '';
        var uploader =  $scope.uploader = new FileUploader({
          url: APP.service.dashboardpost+"?access_token="+APP.accessToken,
          headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'method': 'POST'
              /*'Accept': 'text/json'*/
          },
          data:{
              'user_id': APP.currentUser.id,
              'title':"Not in use on frontend", //This dummy data as currently there is no field to accept the posttitle
              'description':'',
              'youtube_url':'',
              'to_id': APP.currentUser.id,
              'link_type':"0",
              'post_type':"0",
              'privacy_setting': $scope.privacySet
          },
          dataObjName:'reqObj',
          formDataName:'postfile[]'
        });
        // FILTERS
        uploader.filters.push({
            name: 'postfile[]',
            fn: function(item /*{File|FileLikeObject}*/, options) {
                var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
            }
        });
        //function to add image on user post
        $scope.isImage = false;
        $scope.imgUpload = false;
        $scope.uploadBox = false;//previously used to hide the text area in first click of photo tab 
        $scope.addImage = function() { 
            var href = $('#previewUrl_lp1').html();
            if(href != ''){
                $timeout(function(){
                    $('#closePreview_lp1').click();
                },100);
            }
            $scope.isImage = true;
            $scope.imgUpload = false;
            $scope.uploadBox = true;
            $scope.imagePrvSrc = [];
            uploader.queue = [];
            $scope.postProfileFiles = [];
        };
        $scope.addPost = function() { 
            $scope.isImage = false;
            $scope.imgUpload = false;
            $scope.uploadBox = false;
            $scope.isPost = true;
            $scope.imagePrvSrc = [];
            uploader.queue = [];
            $scope.postProfileFiles = [];
        };
            //remove iamge from preview array
        $scope.removeImage = function(index) {
            //$('#progress-'+ index).css('display','none');
            //$('#bkground-'+ index).css('display','none');
            var item = $scope.uploader.queue[index];
            item.remove();
            var tempImg = $scope.imagePrvSrc[index];
            $scope.imagePrvSrc.splice(index, 1);
            var formData = {};
            formData.user_id = APP.currentUser.id;
            formData.post_media_id = tempImg.media_id;

            //calling the service to delete the selected post 
            ProfileService.deletePostMedia(formData, function(data){
                if(data.code == 101) {
                    //$('#progress-'+ index).css('display','block');
                    //$('#bkground-'+ index).css('display','block');
                } else {
                    $scope.imagePrvSrc[index] = tempImg;
                    $scope.postErrCls = 'text-red';
                    $scope.postErrMsg = $scope.i18n.dashboard.postcomment.remove_img_fail;
                    $timeout(function(){
                        $scope.postErrCls = '';
                        $scope.postErrMsg = '';
                    }, 15000);
                    $scope.userPostList;
                }
            });
        };
        uploader.onAfterAddingFile = function(fileItem) {
            $scope.postContentStart = true;
            uploader.data.post_id=$scope.tempPostId;
            var queueLen = uploader.queue.length-1;
            if(uploader.queue.length != 0){
                $scope.uploadBox = false;
                $scope.imgUpload = true;
            }
            $scope.postImgLoader[queueLen] = true;
           // $timeout(function() {
                uploader.uploadItem(fileItem);
            //}, 5000);
        };

        uploader.onSuccessItem = function(fileItem, response, status, headers) {
            var index = uploader.getIndexOfItem(fileItem);
            if(response.code == 101){
                $scope.imagePrvSrc[index] = response.data;
                $scope.postImgLoader[index] = false;
                $scope.tempPostId = response.data.id;
                uploader.data.post_id=response.data.id;
            }
        };

        uploader.onCompleteAll = function() {
            $timeout(function(){
                $scope.postContentStart = false;
            }, 1000);
            
        }

        uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
            $scope.postErrMsg = $scope.i18n.editprofile.no_media_valid;
            $scope.postErrCls = 'text-red';
            $timeout(function(){
                $scope.postErrCls = '';
                $scope.postErrMsg = '';
            }, 15000);
        };
        
        $scope.createPost = function() {
            $scope.noContent = false; 
            $scope.updateBody = [];
            $scope.activeEdit = [];
            $scope.editPostErrorMsg = [];
            var link_type;
            $scope.postContentStart = true;
            $scope.postContentLoader = true;
            var opts = {};
            $scope.postErrMsg = '';
            var filescount = $scope.imagePrvSrc.length;
            var description = '';

            /*Link Preview feature*/
            var descval = $("#preview_lp1").html();
            var href = $('#previewUrl_lp1').html();
            var textarea = $('#text_lp1').val();
            //URLs starting with http://, https://, file:// or ftp://
            replacePattern1 = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
            description = textarea.replace(replacePattern1, '<a class="sitelink" href=\"$1\" target=\"_blank\">$1</a>');

            //URLs starting with "www." (without // before it, or it'd re-link the ones done above).
            replacePattern2 = /(^|[^\/f])(www\.[\S]+(\b|$))/gim;
            description = description.replace(replacePattern2, '$1 <a class="sitelink" href=\"http://$2\" target=\"_blank\">$2</a>');

            if(href == '') {
                link_type = "0";
            } else {
                description = "<p>"+description+"</p>";
                description += descval;
                link_type = "1";
            }
            
            if ((description == undefined || description == '') && filescount == 0) {
                $scope.postErrCls = 'text-red';
                $scope.postErrMsg = $scope.i18n.editprofile.attach_link;
                $scope.postContentStart = false;
                $scope.postContentLoader = false;
                $timeout(function(){
                    $scope.postErrCls = '';
                    $scope.postErrMsg = '';
                }, 15000);
                return false;
            }
            

            opts.user_id = APP.currentUser.id;
            opts.title = $scope.i18n.editprofile.no_use; //This dummy data as currently there is no field to accept the posttitle
            opts.description = description;
            opts.youtube_url = '';
            opts.to_id = APP.currentUser.id;
            opts.link_type = link_type;
            opts.post_id = $scope.tempPostId;
            opts.post_type = "1";
            opts.media_id = [];
            opts.privacy_setting = $scope.privacySet;
            var friendId = [];
            if($scope.storedFriend.length > 0){
                for (var i = 0; i < $scope.storedFriend.length; i++) {
                    friendId.push($scope.storedFriend[i].user_info.id);
                };

                opts.tagged_friends = friendId.join();
            }else{
                opts.tagged_friends = "";
            }
            angular.forEach($scope.imagePrvSrc, function(file) {
              opts.media_id.push(file.media_id);
            });
            ProfileService.dashboardPost(opts, function(data){
                if(data.code == 101) {
                    $scope.storedFriend = [];
                    $scope.showTagForm = false;
                    var targetObject = {};
                    targetObject = data.data;
                    $scope.userPostList.unshift(targetObject);
                    $scope.postErrMsg = '';
                    $scope.imagePrvSrc = [];
                    $scope.postProfileFiles = [];
                    $timeout(function(){
                        $scope.postErrCls = '';
                        $scope.postErrMsg = '';
                    }, 15000);
                    uploader.data.post_id={};
                    while(uploader.queue.length) {
                     uploader.queue[0].remove();
                    }
                    if ($scope.userPostList.length == 0){
                        $scope.noPostList = true; 
                    } 
                    $scope.noPostList = false; 
                    $scope.tempPostId='';
                    $scope.postContentStart = false;
                    $scope.postContentLoader = false;
                    $scope.postText = '';
                    $scope.isImage = false;
                    $scope.imgUpload = false;
                    $scope.uploadBox = false;
                    $('#text_lp1').val('');
                    $('#text_lp1').autoResize();
                    $timeout(function(){
                        $('#closePreview_lp1').trigger('click');
                    }, 100);
                } else {
                    $scope.postErrCls = 'text-red';
                    $scope.postErrMsg = $scope.i18n.editprofile.post_unable;
                    $timeout(function(){
                        $scope.postErrCls = '';
                        $scope.postErrMsg = '';
                    }, 15000);
                    $scope.imagePrvSrc = [];
                    $scope.postProfileFiles = [];
                    $scope.postText = undefined; 
                    $scope.postContentLoader = false;
                    $scope.isImage = false;
                    $scope.imgUpload = false;
                    $scope.uploadBox = false;
                }
            });
        };
        // Show Tag Column
        $scope.showTagForm = false;
        $scope.showTagCloumn = function(){
            if($scope.showTagForm === false){
                $scope.showTagForm = true;
            }else{
                $scope.showTagForm = false;
            }
        };
        
        // Show the list of friend
        var DELAY_TIME_BEFORE_POSTING = 300;
        var currentTimeout = null;
        angular.element('#searchTagFriend').keypress(function(event) {
            var model = $scope.searchText;
            if(currentTimeout) {
            $timeout.cancel(currentTimeout);
            }
            currentTimeout = $timeout(function(){
                if(event.which != 13){ 
                    $scope.tagFriendSuggestion();
                }
            }, DELAY_TIME_BEFORE_POSTING)
        });

        $scope.friends = [];
        $scope.cancelFriendSearch = false;
        $scope.showSearchLoader = false;
        $scope.tagFriendSuggestion = function(){
            $scope.cancelFriendSearch = false;
            $scope.showFriendList = true;
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.friend_name = $scope.friendName;
            opts.limit_start = 0;
            opts.limit_size =  APP.friend_list_pagination.end;
            $scope.showSearchLoader = true;
            ProfileService.searchFriends(opts,function(data){
                $scope.showSearchLoader = false;
                if($scope.cancelFriendSearch === false){
                    $scope.friends = data.data.users;
                }
            })
        };

        // Store friend 
        $scope.storedFriend = [];
        $scope.dublicate = false;
        $scope.selectFriend = function(friendInfo){
            if(friendInfo === undefined){
                return;
            }else{
                $scope.dublicate = false;
                angular.forEach($scope.storedFriend,function(index){
                    if(index.user_id === friendInfo.user_id){
                        $scope.dublicate = true;
                    }
                });

                if($scope.dublicate === false){
                    $scope.storedFriend.push(friendInfo);
                    $scope.friends = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTaggIndex = -1;
                    angular.element('#searchTagFriend').val("");
                    $scope.showFriendList = false;
                }else{
                    $scope.friends = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTaggIndex = -1;
                    angular.element('#searchTagFriend').val("");
                    $scope.showFriendList = false;
                }
            }
        };

        // stop the service for loading more service
        $scope.lostFormFocus = function(){
            $timeout(function(){
                $scope.friends = [];
                $scope.cancelFriendSearch = true;
                $scope.friendTaggIndex = -1;
                angular.element('#searchTagFriend').val("");
                $scope.showFriendList = false;
            },300);
        };

        // Remove selected friend
        $scope.removeTagFriend = function(friendIndex){
            //var index = $scope.storedFriend.indexOf(friendIndex);
            $scope.storedFriend.splice(friendIndex,1);
        };

        // Up down key control in search friend list
        $scope.friendTaggIndex = -1;
        $scope.keyUpDownControl = function(event){console.log($scope.friendTaggIndex);
            if(event.keyCode===40){
                event.preventDefault();
                if($scope.friendTaggIndex+1 !== $scope.friends.length){
                    $scope.friendTaggIndex++;
                }
            }else if(event.keyCode===38){
                event.preventDefault();
                if($scope.friendTaggIndex-1 !== -1){
                    $scope.friendTaggIndex--;
                }
            }else if(event.keyCode===13){
                    $scope.selectFriend($scope.friends[$scope.friendTaggIndex]);
            }
        };
     
      },
      link: function (scope, iElement, iAttrs) {
        $($('#lp1').linkPreview()).appendTo(iElement[0]);
      },
      templateUrl: 'app/views/profile_post_form.html'
      }
  });

  //Displaying the loading image form for store detail
  app.directive('showProgress', function() {
    return {
      restrict: 'E',
      template: '<img src="app/assets/images/proceed.gif" alt="processing..." />'
    }
  });

    
  //Displaying the comment post form for store detail
  app.directive('profileWallCommentForm',['ProfileService', 'fileReader', '$http', '$timeout', '$interval', function(ProfileService, fileReader, $http, $timeout, $interval) {
    return {
      restrict: 'E',
      templateUrl: 'app/views/profile_wall_comment_form.html',
      scope : true,
      link : function(scope, elem, attrs){
        scope.showPreview = false;
        scope.comment_id = '';
        scope.image_id = [];
        scope.imgSrc = [];
        scope.isInProgress = [];
        scope.selectInProgress = [];
        scope.commentFiles = [];
        scope.imgRes = 1;
        scope.commentErrMsg = '';
        scope.commentErrCls = '';
        scope.getFile = function () {
            var tempopts = {};
            tempopts.user_id = APP.currentUser.id;
            tempopts.postid = attrs.postId;
            tempopts.body = scope.i18n.editprofile.comment_image_test;
            tempopts.comment_type = '0';
            tempopts.image_id = '';
            tempopts.comment_id = '';
            var len = scope.commentFiles.length;
            ProfileService.createDashboardCommentImage(tempopts, scope.commentFiles[0], function(data){
                if(data.code == 101) {
                    scope.comment_id = data.data.id;
                    scope.imgSrc.push(data.data);
                    scope.image_id.push(data.data.media_id);
                    tempopts.comment_id = scope.comment_id;
                    scope.selectInProgress.splice(0,1);
                    for(j=1; j < len; j++){
                        ProfileService.createDashboardCommentImage(tempopts, scope.commentFiles[j], function(data){
                            if(data.code == 101) {
                                scope.comment_id = data.data.id;
                                scope.imgSrc.push(data.data);
                                scope.image_id.push(data.data.media_id);
                                scope.selectInProgress.splice(0,1);
                            }else{
                                scope.commentErrCls = 'text-red';
                                scope.commentErrMsg = scope.i18n.dashboard.postcomment.upload_media_fail;
                            }
                        });
                    }
                }else{
                    scope.commentErrCls = 'text-red';
                    scope.commentErrMsg = scope.i18n.dashboard.postcomment.upload_media_fail;
                }
            });
            setTimeout(function(){
                scope.commentErrCls = '';
                scope.commentErrMsg = '';
            }, 15000);
            
        };

      //remove iamge from preview array
      scope.removeImage = function(index) {
        var tempMedia = scope.image_id[index];
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.postid = attrs.postId;
        opts.image_id = tempMedia;
        ProfileService.deleteDashboardMediaComments(opts, function(data){
          if(data.code == 101) {
            scope.imgSrc.splice(index, 1);
            scope.isInProgress.splice(index, 1);
            if(scope.imgSrc.length == 0){
                scope.commentFiles == [];
                scope.file = [];
            }
            scope.image_id.splice(index, 1);
            if(scope.imgSrc.length == 0){
                scope.selectInProgress = [];
                scope.showImgSelect = true;
                scope.showPreview = false;
            }
          } else {
            scope.showImgSelect = true;
            scope.showPreview = true;
            scope.commentErrCls = 'text-red';
            scope.commentErrMsg = scope.i18n.dashboard.postcomment.remove_img_fail;
          }
            setTimeout(function(){
            scope.commentErrCls = '';
            scope.commentErrMsg = '';
            }, 15000);
        });
      };

      scope.res = 0;
      scope.addComment = function(){
        scope.postIndx = attrs.postIndx;
        scope.comments = attrs.loadComment;
        scope.finalCommentInProcess = true;
        scope.commentErrMsg = "";
        scope.commentErrCls = '';
        var filescount = scope.imgSrc.length;
        if ((scope.commentText == undefined  || scope.commentText == '') && filescount == 0) {
            scope.finalCommentInProcess = false;
            scope.commentErrCls = 'text-red';
            scope.commentErrMsg = scope.i18n.editprofile.photo_update;
            setTimeout(function(){
                scope.commentErrCls = '';
                scope.commentErrMsg = '';
            },15000);
            return false;
        }
        var opts = {};
        opts.user_id = APP.currentUser.id;
        opts.postid = attrs.postId;
        opts.body = scope.commentText;
        opts.media_id = [];
        opts.comment_id = "";
        if(scope.image_id.length != 0){
          opts.media_id = scope.image_id;
        }
        if(scope.comment_id != ''){
          opts.comment_id = scope.comment_id;  
        }
        opts.comment_type = '1';

        opts.tagging = scope.taggedObject;
        if(scope.res == 0){
            scope.res = 1;
            ProfileService.createDashboardCommentFinal(opts, function(data){
                scope.res = 0;
                if(data.code == 101) {
                    scope.commentText = '';
                    scope.post.comments.push(data.data);
                    scope.post.comment_count++;
                    scope.finalCommentInProcess = false;
                    scope.commentErrMsg = '';
                    scope.commentErrCls = '';
                    scope.commentText = '';
                    scope.commentFiles = [];
                    scope.imgSrc = [];
                    scope.file = [];
                    scope.showPreview = false;
                    scope.showImgSelect = true;
                    scope.comment_id = '';
                } else {
                    scope.finalCommentInProcess = false;
                    scope.commentErrCls = 'text-red';
                    scope.commentErrMsg = scope.i18n.editprofile.comment_no_post;
                    scope.commentFiles = [];
                    scope.imgSrc = [];
                    scope.file = []
                    scope.showPreview = false;
                    scope.showImgSelect = true;
                    scope.comment_id = '';
                }
                setTimeout(function(){
                    scope.commentErrCls = '';
                    scope.commentErrMsg = '';
                }, 15000);
            });
        }
      };
    }
  };
}]);
//Displaying the post form for store detail
app.directive('wallProfilePostList', function(ProfileService) {
    return {
        restrict: 'E',
        controller: function ($scope, $timeout, $modal, $log, $location, focus){
            $scope.showComments = [];
            $scope.commentsLength = [];
            $scope.userPostList = [];
            $scope.myRes = 1;
            $scope.showComments = [];
            $scope.commentsLength = [];
            $scope.textLimit = APP.post_charecter_limit;
            $scope.noContent = false;

            $(document).click(function(){
                 $("ul.actions-drop-action").hide();
            });

            $scope.toggleEdit = function($event){
                $event.stopPropagation();
                if($($event.currentTarget).next('ul.actions-drop-action').is(':visible')){
                    $($event.currentTarget).next('ul.actions-drop-action').hide();
                }else{
                    $("ul.actions-drop-action").hide();
                    $($event.currentTarget).next('ul.actions-drop-action').show(); 
                }
            };

            
            //check screen for mobile devicess to show corresponding layou
            $scope.loadMoreFunc = 'loadMore()';
            $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
                $scope.windowHeight = newValue.h;
                $scope.windowWidth = newValue.w;
                if($scope.windowWidth <= '768'){
                    $scope.isSmallScreen =  true; //declare in main controller
                    $scope.loadMoreFunc = '';
                } else {
                    $scope.isSmallScreen =  false; //declare in main controller
                    $scope.loadMoreFunc = 'loadMore()';  
                }
            }, true);
            //funciton to list user post on dashboard
            //TODO: infinite scoller is remaining
            $scope.listUserWallPost = function() {
                var opts = {};
                var limit_start = $scope.userPostList.length;
                opts.user_id = APP.currentUser.id;
                opts.limit_start = limit_start;
                opts.limit_size = APP.dashbord_pagination.end;
                opts.friend_id = APP.currentUser.id;
                $scope.isLoading = true;

                //calling the services to get the user post list
                if ((($scope.totalSize > limit_start ) || $scope.totalSize == 0 ) && $scope.myRes == 1) {
                    $scope.myRes = 0;
                    ProfileService.getDashboardWallFeeds(opts, function(data){
                        if(data.code == 101) {
                                var items = data.data.post;
                                if(items != undefined){
                                    $scope.userPostList = $scope.userPostList.concat(items);    
                                }
                                $scope.totalSize = data.data.count;
                                if ($scope.userPostList.length == 0){
                                    $scope.noContent = true; 
                                }
                                $timeout(function(){
                                    $scope.isLoading = false;
                                },400)
                                $scope.myRes = 1;
                        } else {
                            $timeout(function(){
                                $scope.isLoading = false;
                                $scope.userPostList;
                                if ($scope.userPostList.length == 0){
                                    $scope.noContent = true; 
                                }
                            },400)
                        }
                    });
                } else {
                    $timeout(function(){
                        $scope.isLoading = false;
                    },5000)
                    $scope.userPostList;
                }
            };
            //funciton to delete single post
            $scope.deleteErrMsg = [];
            $scope.isDeletePost = [];
            $scope.deleteErrCls = [];
            $scope.deletePost = function(postIndx) {
                var postData = {};
                postData = $scope.userPostList[postIndx];
                $scope.isDeletePost[postIndx] = true;
                $scope.updateBody[postIndx] = '';
                $scope.activeEdit[postIndx] = false;
                $scope.editPostErrorMsg[postIndx] = '';
                var formData = {};
                formData.user_id = APP.currentUser.id;
                formData.post_id = postData.id;

                //calling the service to delete the selected post 
                ProfileService.deleteDashboardPost(formData, function(data){
                    if(data.code == 101) {
                        $scope.userPostList.splice(postIndx, 1);
                        if ($scope.userPostList.length == 0){
                            $scope.noContent = true; 
                        } 
                        $scope.isDeletePost[postIndx] = false;
                    } else {
                        $scope.deleteErrCls[postIndx] = 'text-red';
                        $scope.deleteErrMsg[postIndx]= $scope.i18n.dashboard.postcomment.delete_post_fail;
                        $scope.isDeletePost[postIndx] = false;
                    }
                    $timeout(function(){
                        $scope.deleteErrCls[postIndx] = '';
                        $scope.deleteErrMsg[postIndx] = '';
                    }, 15000);
                });
            };

            //function to create post
            $scope.editPostErrorMsg = [];
            $scope.updatePostInProcess = [];
            $scope.editPostErrorCls = [];
            $scope.saveUpdatePost = function(postIndx) {
                var opts = {};
                $scope.updatePostInProcess[postIndx] = true;
                var editPostText = escapeHtmlEntities($scope.updateBody[postIndx]); 
                var post = $scope.userPostList[postIndx];

                if(editPostText == undefined || editPostText == '') {
                    $scope.updatePostInProcess[postIndx] = false;
                    $scope.editPostErrorCls[postIndx] = 'text-red';
                    $scope.editPostErrorMsg[postIndx] = $scope.i18n.editprofile.no_empty_status;
                    $timeout(function(){
                        $scope.editPostErrorCls[postIndx] = '';
                        $scope.editPostErrorMsg[postIndx] = '';
                    }, 15000);
                    return false;
                } 
                opts.user_id = APP.currentUser.id;
                opts.post_id = post.id;
                opts.title = post.title; //This dummy data as currently there is no field to accept the posttitle
                opts.description = editPostText;
                opts.to_id = post.to_id; 
                opts.youtube_url = '';
                opts.post_type = '1';
                opts.privacy_setting = post.privacy_setting;
                var myFile = '';
                var friendIdList = [];
                if($scope.postTaggedFriend[postIndx].length > 0){
                    angular.forEach($scope.postTaggedFriend[postIndx],function(index){
                        friendIdList.push(index.id);
                    });

                    opts.tagged_friends = friendIdList.join();
                }else{
                    opts.tagged_friends = "";
                }
                ProfileService.updateDashboardPost(opts, function(data){
                    if(data.code == 101) {
                        if($scope.postTaggedFriend[postIndx].length > 0){
                            post.tagged_friends_info = $scope.postTaggedFriend[postIndx];
                        }else{
                            post.tagged_friends_info = "";
                        }
                        $scope.updatePostInProcess[postIndx] = false;
                        $scope.editPostErrorMsg[postIndx] = '';
                        $scope.userPostList[postIndx].description = editPostText;
                        $scope.editPostText = '';
                        $scope.activeEdit[postIndx] = false;
                    } else {
                        $scope.updatePostInProcess[postIndx] = false;
                        $scope.editPostErrorCls[postIndx] = 'text-red';
                        $scope.editPostErrorMsg[postIndx] = $scope.i18n.editprofile.post_unsaved;
                    }
                    $timeout(function(){
                        $scope.editPostErrorCls[postIndx] = '';
                        $scope.editPostErrorMsg[postIndx] = '';
                    }, 15000);
                });
            };

            $scope.editPrivacyMsg = [];
            $scope.editPrivacyCls = [];
            $scope.changePrivacy = function(post, postIndx) { 
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.post_id = post.id;
                opts.privacy_setting = post.privacy_setting;
                var myFile = '';
                ProfileService.updatePostPrivacy(opts, function(data){
                    if(data.code == 101) {
                        $scope.editPrivacyCls[postIndx] = '';
                        $scope.editPrivacyMsg[postIndx] = '';                    
                    } else {
                        $scope.editPrivacyCls[postIndx] = 'text-red';
                        $scope.editPrivacyMsg[postIndx] = $scope.i18n.editprofile.privacy_setting; 
                    }
                    $timeout(function(){
                        $scope.editPrivacyCls[postIndx] = '';
                        $scope.editPrivacyMsg[postIndx] = '';
                    }, 15000);
                });
            };

            //
            $scope.updateBody = [];
            $scope.activeEdit = [];
            $scope.postTaggedFriend = [];
            $scope.showTagLoading = [];
            //funtion to open form to update post
            $scope.updatePost = function(postIndx) {
                $scope.editPostErrorMsg[postIndx]='';
                $scope.editPostErrorCls[postIndx]='';
                var post = $scope.userPostList[postIndx];
                //for resize the textarea
                autosize(document.querySelectorAll('.editpostbox'));
                var str = $.trim(post.description.replace(/\n\n\n+/g, '\n\n'));
                var htmlstr = str.replace(/\n/g,'<br />');
                var height = $('<div style="display:block;" id="postedit-hidden-div"></div>')
                .html(htmlstr)
                .appendTo('#post_'+post.id)
                .height();     
                $('#editpost_'+post.id).css('height',height + 'px');
                str = $('#postedit-hidden-div').html(str).text();
                $('#postedit-hidden-div').remove();
                $scope.updateBody[postIndx] = str;
                $scope.activeEdit[postIndx] = true;
               //$scope.postTaggedFriend[postIndx] = post.tagged_friends_info;
                $scope.postTaggedFriend[postIndx] = [];
                angular.forEach(post.tagged_friends_info, function(val,indx){
                    $scope.postTaggedFriend[postIndx].push(val);
                });
                $scope.showTagLoading[postIndx] = true;
                //set cursor start of textarea
                $timeout(function(){
                    $('#editpost_'+post.id).putCursorAtStart();
                },200);
            };

            //Focus on input field
            $scope.focusWallTag = function(indx){
                focus('wallPostListTag'+indx);
            };

            // close the edit form on cancel
            $scope.cancelPost = function(postIndx) {
                $('#postedit-hidden-div').remove();
                $scope.updateBody[postIndx] = '';
                $scope.activeEdit[postIndx] = false;
                $scope.editPostErrorMsg[postIndx] = '';
                $scope.editPostErrorCls[postIndx]='';
            };

            // function to remove the tagged friend
            $scope.removePostTagFriend  = function(index, postIndex){
                $scope.postTaggedFriend[postIndex].splice(index,1);
            };

            // Add more friend in the post
            var currentTimeout = null;
            $scope.addMoreFriend = function(event, index){
                var DELAY_TIME_BEFORE_POSTING = 300;
                if(currentTimeout) {
                    $timeout.cancel(currentTimeout);
                }
                currentTimeout = $timeout(function(){
                    if(event.which != 13){ 
                        $scope.searchMoreFriend(index);
                    }
                }, DELAY_TIME_BEFORE_POSTING)
            };

            $scope.friends = [];
            $scope.showSearchFriendLoader = [];
            $scope.cancelFriendSearch = false;
            $scope.showSearchFriendList = [];
            $scope.searchMoreFriend = function(postIndx){
                $scope.searchFriend = $('.addMoreTagFriend'+postIndx).val();
                $scope.friendTagIndex[postIndx] = -1;
                $scope.cancelFriendSearch = false;
                $scope.showSearchFriendList[postIndx] = true;
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.friend_name = $scope.searchFriend;
                opts.session_id = APP.currentUser.id;
                opts.limit_start = 0;
                opts.limit_size =  APP.friend_list_pagination.end;
                $scope.showSearchFriendLoader[postIndx] = true;
                $scope.showTagLoading[postIndx] = true
                ProfileService.searchFriends(opts,function(data){
                    $scope.showSearchFriendLoader[postIndx] = false;
                    if($scope.cancelFriendSearch === false){
                        $scope.friends[postIndx] = data.data.users;
                    }
                });
            };

            // Store friend 
            $scope.postTaggedFriend = [];
            $scope.dublicate = false;
            $scope.taggedSelectFriend = function(friendInfo, postIndex){
                $scope.dublicate = false;
                angular.forEach($scope.postTaggedFriend[postIndex],function(index){
                    if(index.id === friendInfo.user_id){
                        $scope.dublicate = true;
                    }
                });

                if($scope.dublicate === false){
                    $scope.postTaggedFriend[postIndex].push({"id":friendInfo.user_id, "first_name": friendInfo.user_info.first_name, "last_name": friendInfo.user_info.last_name,"profile_image": friendInfo.user_info.profile_image,"profile_image_thumb":friendInfo.user_info.profile_image_thumb});
                    $scope.friends[postIndex] = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTagIndex[postIndex] = -1;
                    angular.element('.addMoreTagFriend'+postIndex).val("");
                    $scope.showSearchFriendList[postIndex] = false;
                }else{
                    $scope.friends[postIndex] = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTagIndex[postIndex] = -1;
                    angular.element('.addMoreTagFriend'+ postIndex).val("");
                    $scope.showSearchFriendList[postIndex] = false;
                }
            };

            // stop the service for loading more service
            $scope.lostFocus = function(postIndex){
                $timeout(function(){
                    $scope.friends[postIndex] = [];
                    $scope.cancelFriendSearch = true;
                    $scope.friendTagIndex[postIndex] = -1;
                    angular.element('.addMoreTagFriend'+ postIndex).val("");
                    $scope.showSearchFriendList[postIndex] = false;
                },300);
            };

            // Up down key control in search friend list
            $scope.friendTagIndex = [];
            $scope.searchNevigateControl = function(event, index){
                if(event.keyCode===40){
                    event.preventDefault();
                    if($scope.friendTagIndex[index]+1 !== $scope.friends[index].length){
                        $scope.friendTagIndex[index]++;
                    }
                }else if(event.keyCode===38){
                    event.preventDefault();
                    if($scope.friendTagIndex[index]-1 !== -1){
                        $scope.friendTagIndex[index]--;
                    }
                }else if(event.keyCode===13){
                        $scope.taggedSelectFriend($scope.friends[index][$scope.friendTagIndex[index]], index);
                }
            };
            //function to call initial loading
            $scope.showUserWallPostList = function(){
                $scope.userPostList = [];
                $scope.totalSize = 0;
                $scope.myRes = 1;
                $scope.noContent = false; 
                $scope.listUserWallPost();
            };

            // function to get the post and comment of the post
            $scope.commentLoading = [];
            $scope.getComments = function(postIndx) {
                var post = $scope.userPostList[postIndx];
                $scope.userPostList[postIndx].comments = [];
                var opts = {};
                opts.post_id = post.id;
                opts.user_id = APP.currentUser.id;
                opts.limit_start = APP.dashbord_comment.start;
                opts.limit_size = APP.dashbord_comment.end;

                // This service's function returns post
                ProfileService.getDashboardComments(opts, function(data){
                    if(data.code == 100)
                    {
                        $scope.userPostList[postIndx].comments = data.data.comment;
                        $scope.commentLoading[postIndx] = false;
                        $scope.commentsLength[postIndx] = $scope.userPostList[postIndx].comments.length;
                        if($scope.userPostList[postIndx].comments.length  != 0 ) {
                            $scope.noComment = true;
                        }
                    } else {
                        $scope.commentLoading[postIndx] = false;
                    }
                });
            };
            //function to show limited comment of the post
            $scope.showLimitedComment = function(postIndx) {
                $scope.commentInProcess = true;
                var post = $scope.posts[postIndx];
                var opts = {};
                opts.post_id = post.post_id;
                opts.user_id = $scope.currentUser.id;
                $scope.getComments(opts, postIndx);
            };
            $scope.showAllComments = function(postIndx) {
                $scope.commentLoading[postIndx] = true;
                $scope.showComments[postIndx] = true;
                $scope.getComments(postIndx);
            };
            $scope.pageSize = 4;
            //function to delete the comment of a post
            //funciton to delete single comment
            $scope.delCommentErrMsg = [];
            $scope.delCommentErrCls = [];
            $scope.deleteComment = function(postIndx,comment) {
                var indx = $scope.userPostList[postIndx].comments.indexOf(comment);
                var commentData = {};
                commentData = $scope.userPostList[postIndx].comments[indx];
                $scope.deleteCommentIndx = commentData.id;
                var formData = {};
                formData.user_id = APP.currentUser.id;
                formData.comment_id = commentData.id;

                //calling the comment service to delete the selected comment 
                ProfileService.deleteDashboardComment(formData, function(data){
                    if(data.code == 101) {
                        $scope.delCommentErrMsg[commentData.id] = '';
                        $scope.delCommentErrCls[commentData.id] = '';
                        $scope.userPostList[postIndx].comments.splice(indx, 1);
                        $scope.userPostList[postIndx].comment_count--;
                        scope.post.comment_count--;
                        $scope.deleteCommentIndx = '';
                    }
                    else {
                        $scope.delCommentErrMsg[commentData.id] = $scope.i18n.dashboard.postcomment.delete_comment_fail;
                        $scope.delCommentErrCls[commentData.id] = 'text-red';
                        $scope.deleteCommentIndx = '';
                        $scope.userPostList;
                    }
                });
            };

            $scope.editCommentText = [];
            $scope.activeCommentEdit = [];
            $scope.isEditComment = [];
            $scope.commentErrorMsg = [];
            $scope.commentErrorCls = [];
            $scope.commentInProcess = [];
            //funtion to open form to update comment
            $scope.updateComment = function(postIndx, comment) {
                $("#commentBoxId-"+postIndx).hide();
                $scope.commentInProcess[postIndx] = true;
                $scope.commentErrorMsg[postIndx] = '';
                $scope.commentErrorCls[postIndx]= '';
                var indx = $scope.userPostList[postIndx].comments.indexOf(comment);
                var comment = $scope.userPostList[postIndx].comments[indx];
                $scope.isEditComment[postIndx] = false;
                $scope.activeCommentEdit[postIndx] = comment.id
                $scope.editCommentText[postIndx]=comment.comment_text;
            };

            //function to edit a comment
            $scope.editComment = function(postIndx, comment) {
                var opts = {};
                $scope.commentErrorMsg[postIndx]= '';
                var indx = $scope.userPostList[postIndx].comments.indexOf(comment);
                var comment = $scope.userPostList[postIndx].comments[indx];
                var newText = $scope.editCommentText[postIndx];
                $scope.isEditComment[postIndx] = true;

                if(newText == undefined || newText == '') {
                    $scope.commentErrorCls[postIndx] = 'text-red';
                    $scope.isEditComment[postIndx]= false;
                    $scope.commentErrorMsg[postIndx] = $scope.i18n.editprofile.no_empty_comment;
                    $timeout(function(){
                        $scope.commentErrorCls[postIndx] = '';
                        $scope.commentErrorMsg[postIndx] = '';
                    }, 15000);
                    return false;
                } 

                opts.user_id = APP.currentUser.id;
                opts.comment_id = comment.id;
                opts.comment_text = newText;

                ProfileService.updateDashboardComment(opts, function(data){
                    if(data.code == 101) {
                        $scope.commentInProcess[postIndx] = false;
                        $scope.activeCommentEdit[postIndx] = '';
                        $scope.commentErrorCls[postIndx] = '';
                        $scope.commentErrorMsg[postIndx] = '';
                        $scope.editCommentText[postIndx] = '';
                        $scope.userPostList[postIndx].comments[indx].comment_text = newText;
                        $scope.isEditComment[postIndx] = false;
                        $("#commentBoxId-"+postIndx).show();
                    } else {
                        $scope.commentInProcess[postIndx] = false;
                        $scope.isEditComment[postIndx] = false;
                        $scope.commentErrorCls[postIndx] = 'text-red';
                        $scope.commentErrorMsg[postIndx]= $scope.i18n.editprofile.not_posted;
                        $("#commentBoxId-"+postIndx).show();
                    }
                    $timeout(function(){
                        $scope.commentErrorCls[postIndx] = '';
                        $scope.commentErrorMsg[postIndx] = '';
                    }, 15000);
                });
            };

            //funtion to open form to update comment
            $scope.cancelEditComment = function(postIndx, indx) {
                $scope.commentInProcess[postIndx] = false;
                $scope.activeCommentEdit[postIndx] = '';
                $scope.commentErrorCls[postIndx] = '';
                $scope.commentErrorMsg[postIndx] = '';
                $scope.editCommentText[postIndx] = '';
                $scope.isEditComment[postIndx] = false;
                $("#commentBoxId-"+postIndx).show();
            };

            $scope.loadMore = function() {
                if($scope.totalSize > $scope.userPostList.length){
                    $scope.listUserWallPost();
                }
            };
            $scope.showAllFriend = function(post_id, creater_info, allTagFriend){
            $scope.allTagFriends = allTagFriend;
            $scope.post_id = post_id;
            $scope.creater = creater_info;
            var modalInstance = $modal.open({
                template: '<style>.modal-open .modal.in .modal-dialog{width:620px; height:400px;}</style><div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3><div class="modal-popup-close" ng-click="closeModal()"></div> </div><div class="modal-body tag-frnd-modal"><ul><li data-ng-repeat="friend in allTagFriends"><span class="tag-img"><img title="" style="width:30px;height:30px" alt="No image available" data-ng-src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a href ng-click="viewFriendProile(friend.id)">{{friend.first_name}} {{friend.last_name}}</a></span><span data-ng-if="creater.id === currentUser.id || currentUser.id === friend.id" ng-click="RemoveTagFriend(friend, creater.id)" class="rmv-tag"><a href>{{i18n.profile_post.remove_tagged_friend}}</a></span></li></ul></div><div class="modal-footer"></div><style type="text/css">.modal.in .modal-dialog{height:100%;margin:0 auto}.modal.in .modal-dialog .modal-content{position:absolute;width:100%;top:0;bottom:0;left:0;right:0;max-height:80%;margin:auto}.modal-body.tag-frnd-modal{padding:0 10px;overflow:auto;height:86%}</style>',
                controller: 'ModalController',
                size: 'lg',
                scope: $scope,
            });

            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
            $scope.RemoveTagFriend = function(friend, createrId){
            var opts = {};
            opts.user_id = APP.currentUser.id;
            opts.untag_user_id = friend.id;
            opts.post_id = $scope.post_id;
            ProfileService.removeTagedFriends(opts,function(data){
                if(data.code === 101){
                    var index = $scope.allTagFriends.indexOf(friend)
                    $scope.allTagFriends.splice(index,1);
                    if(createrId != APP.currentUser.id ){
                        modalInstance.close();
                    } 
                    if($scope.allTagFriends.length === 0){
                        modalInstance.close();
                    } 
                } 
            });
        };
        };

    
        // checking tagged friend
        $scope.validate = false;
        $scope.checkTagUser = function(allTaggedFriend){
            $scope.tagInfo = allTaggedFriend;
            $scope.validate = false;
            angular.forEach($scope.tagInfo,function(index){
                if(index.id === APP.currentUser.id){
                    $scope.validate = true;
                }
            });

            if($scope.validate === true){
                return true;
            }
        };

        $scope.rateSetData = function(data,update,index){
            if(data.code === 101 && data.message === "SUCCESS"){
                $scope.userPostList[index].avg_rate    = data.data.avg_rate;
                $scope.userPostList[index].no_of_votes = data.data.no_of_votes;
                if(update){
                    $scope.userPostList[index].current_user_rate = data.data.current_user_rate;
                    $scope.userPostList[index].is_rated = true;
                } else{
                    $scope.userPostList[index].current_user_rate = 0;
                    $scope.userPostList[index].is_rated = false;
                } 
            }else if(data.code === 100 && data.message === "ERROR_OCCURED"){
                //$scope.userPostList[index].avg_rate = 0;
                //$scope.userPostList[index].no_of_votes = 0;
                $scope.userPostList[index].is_rated = false;
                $scope.userPostList[index].current_user_rate = 0;
            }
        };

        $scope.waitRateResponse = false;
        $scope.ratePost = function(rating, post_id, index){
            var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.type    = "dashboard_post";
                opts.type_id = post_id;
                opts.rate    = rating;
            $scope.waitRateResponse = true;
            var update;    
            if($scope.userPostList[index].is_rated){
                update = "update";
            }else{
                update = "add";
            } 
            ProfileService.rateThis(opts,update,function(data){
                $scope.waitRateResponse = false;
                $scope.rateSetData(data,true,index);
            });
        };

        $scope.WaitDeleteResponse = false;
        $scope.removeRating = function(post_id, postIndex){
            var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.type    = "dashboard_post";
                opts.type_id = post_id;
                if($scope.WaitDeleteResponse === false){
                    $scope.WaitDeleteResponse = true;
                    $scope.waitRateResponse = true;
                }else{
                    return;
                }
            ProfileService.removeRating(opts,function(data){
                $scope.WaitDeleteResponse = false;
                $scope.waitRateResponse = false;
                $scope.rateSetData(data,false,postIndex);
            });
        };

        $scope.averageRating = function(rating){
            return new Array(Math.ceil(rating));
        };

        $scope.blankStar = function(rating){
            if((5-Math.ceil(rating)) > 0){
                return new Array(5-Math.ceil(rating));
            }else{
                return 0;
            }
        };

        $scope.max = 5;
        $scope.isReadonly = false;

        $scope.rateThis = function(value, id, index){
            $scope.ratePost(value, id, index);
        };

        $scope.hoveringOver = function(value) {
            $scope.overStar = value;
            $scope.percent = 100 * (value / $scope.max);
        };

        $scope.ratingStates = [
            {stateOn: 'glyphicon-star', stateOff: 'glyphicon-star-empty'},
        ];
        $scope.showPeopleLoader = false;
        $scope.findPeople = function(id, type, count_Vote){
            if(count_Vote === 0 ){
                return false;
            }
            var opts = {};
            $scope.ratedUsers = {};
            $scope.showPeopleLoader = true;
            var modalInstance = $modal.open({
                        //template: '<style>.modal-body.tag-frnd-modal ul li{padding:8px 130px 8px 0}.modal-content .modal-body ul.rmv-tag{position:absolute;right:0;top:10px}.modal-content .modal-body ul.rmv-tag li{padding:0;display:inline-block;vertical-align:middle;border:0}.modal-content .modal-body ul.rmv-tag li span.votes-avg{width:23px;height:21px;margin-left:2px;background:url(app/assets/images/rating-star.png) no-repeat;display:block}.modal-content .modal-body ul.rmv-tag li span.votes-blank{width:23px;height:21px;margin-left:2px;background:url(app/assets/images/rating-star.png) 0 -21px no-repeat;display:block}.modal.in .modal-dialog{margin:auto;top:0;bottom:0;left:0;right:0;position:absolute}.modal-body.tag-frnd-modal{height:360px;overflow-y:auto;overflow-x:hidden;padding:0 10px}.modal .modal-content{margin:auto;height:400px;top:0;bottom:0;left:0;right:0;position:absolute;overflow:visible}@media screen and (max-width:479px){.modal.in .modal-dialog{margin:auto 20px}.modal-body.tag-frnd-modal ul li{padding:8px 70px 8px 0}.modal-content .modal-body ul.rmv-tag li span.votes-avg{width:12px;height:10px;margin-left:1px;background:url(app/assets/images/rating-star.png) 0 0/12px no-repeat}.modal-content .modal-body ul.rmv-tag li span.votes-blank{width:12px;height:10px;margin-left:1px;background:url(app/assets/images/rating-star.png) 0 -11px/12px no-repeat}}</style><div id="friendModal" class="modal-header"> <h3 class="modal-title">People</h3><div class="modal-popup-close" ng-click="closeModal()"></div></div><div class="modal-body tag-frnd-modal"><ul ng-hide="showPeopleLoader"><li data-ng-repeat="friend in ratedUsers"><span class="tag-img"><img title="" style="width:30px;height:30px" alt="No image available" src="{{friend.profile_image_thumb}}" data-ng-if="friend.profile_image_thumb != null  && friend.profile_image_thumb != \'\'"><img title="" alt="No image available" src="app/assets/images/dummy32X32.jpg" data-ng-if="friend.profile_image_thumb == null || friend.profile_image_thumb == \'\'"></span><span class="tag-frnd-name"><a ng-href="#/viewfriend/{{friend.id}}">{{friend.first_name}} {{friend.last_name}}</a><span class="frnd-details"><a href>{{friend.about_me}}</a></span></span><ul class="rmv-tag"><li data-ng-repeat="avgRate in averageRating(friend.rate) track by $index"><span ng-class="friend.rate % 1 == 0 ?\'votes-avg\': ($last ? \'half-avg\':\'votes-avg\')" /></li><li ng-repeat="blank in blankStar(friend.rate) track by $index"><span class="votes-blank"/> </li></ul></li></ul> <div ng-show="showPeopleLoader"><img titile="" alt="" src="app/assets/images/proceed.gif"></div></div><div class="modal-footer"></div>',
                        templateUrl: 'app/views/find_people.html',
                        controller: 'ModalController',
                        size: 'lg',
                        scope: $scope,
            });
            opts.type = type;
            opts.type_id = id;
            opts.session_id = APP.currentUser.id;
            ProfileService.findPeople(opts,function(data){
                if(data.code == 101 && data.message == "SUCCESS"){
                    $scope.showPeopleLoader = false;
                    $scope.ratedUsers = data.data.users_rated;
                    if(data.data.users_rated.length == 0){
                        $scope.message = $scope.i18n.dashboard.no_vote;
                    }
                }else{
                    $scope.showPeopleLoader = false;
                }
            });
            modalInstance.result.then(function (selectedItem) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
            $scope.viewFriendProile = function(friendId){
                modalInstance.dismiss('cancel');
                $location.path('/viewfriend/'+friendId);
            };
        };
        },
        link:function ($scope){
            $(".fancybox").fancybox();
            $scope.showUserWallPostList();
        },
        templateUrl: 'app/views/profile_wall_post_list.html'
        }
    }).filter('unsafe', function($sce) {
        return function(val) {
            return $sce.trustAsHtml(val);
    };
});
/**
* List the pulic post for unauth user 
*/
app.directive('publicPostList', function() {
	return {
		restrict: 'E',
		templateUrl: './app/views/public_post_list.html'
	}
});

app.directive('publicShopPostList', function() {
	return {
		restrict: 'E',
		templateUrl: './app/views/public_shop_post_list.html'
	}
});
app.directive('scroller', function () {
    return {
        restrict: 'A',
        scope: {
            loadingMethod: "&"
        },
        link: function (scope, elem, attrs) {
            rawElement = elem[0];
            elem.bind('scroll', function () {
                if((rawElement.scrollTop + rawElement.offsetHeight+5) >= rawElement.scrollHeight){
                    scope.$apply(scope.loadingMethod); 
                }
            });
        }
    };
});
app.directive('dynamic', function ($compile) {
  return {
    restrict: 'A',
    replace: true,
    link: function (scope, ele, attrs) {
      scope.$watch(attrs.dynamic, function(value) {
        ele.html(value);
        $compile(ele.contents())(scope);
      });
    }
  };
});
//Displaying the profile notfication
app.directive('shopWalletTab', function() {
  return {
    restrict: 'E',
     templateUrl: 'app/views/shop_wallet_tab.html'
  }
});

//Displaying the profile notfication
app.directive('shopWalletPayment', function() {
  return {
    restrict: 'E',
     templateUrl: 'app/views/shop_wallet_payment.html'
  }
});

//Displaying the profile notfication
app.directive('shopWalletSale', function() {
  return {
    restrict: 'E',
     templateUrl: 'app/views/shop_wallet_sale.html'
  }
});

//Display the shop wallet shopping card
app.directive('shopWalletShoppingCard', function() {
  return {
    restrict: 'E',
     templateUrl: 'app/views/shop_wallet_shopping_card.html'
  }
});

//Display the shop wallet coupon
app.directive('shopWalletCoupon', function() {
  return {
    restrict: 'E',
     templateUrl: 'app/views/shop_wallet_coupon.html'
  }
});

//Display the shop wallet history
app.directive('shopWalletHistory', ['$http', 'StoreWalletService', '$routeParams', 'DateToMongoDate', function($http, StoreWalletService, $routeParams, DateToMongoDate) {
  return {
    restrict: 'E',
    templateUrl: 'app/views/shop_wallet_history.html',
    controller: function ($scope) {
      $('.dateInput').datepicker({dateFormat: 'dd-mm-yy'});
      $scope.predicate = 'date';
      $scope.shopId = $routeParams.id;
      $scope.reverse = false;
      $scope.loadingShopHistory = true;
      $scope.nothingFound = false;
      $scope.searchStart = false;
      $scope.firstPage = APP.walletItemPerPage.perPage;
      $scope.itemsPerPage = APP.walletItemPerPage.perPage;
      $scope.currentPage = 1;
      $scope.range = [];
      $scope.totalHitory = 0;
      $scope.totalItems = 0;
      $scope.shopWalletHistories = [];
      $scope.filterObject = {
        "discount_details.card_no":{
          "$exists":true
        },
        "status":"Approved",
        //Fixed for applane request they managed at their end
        "transaction_type_id": {
          "$in": [
          "553209267dfd81072b176bba",
          "553209267dfd81072b176bbc",
          "553209267dfd81072b176bb6",
          "553209267dfd81072b176bb8"
          ]
        },
        "shop_id":$scope.shopId
      };

      $scope.changePageMore = function(pageNo) {
          $scope.currentPage = pageNo;
          $scope.loadMore();
      };

      $scope.prevPage = function() {
          if ($scope.currentPage > 1) {
              $scope.currentPage--;
          }
          $scope.loadMore();
      };

      $scope.prevPageDisabled = function() {
          return $scope.currentPage === 1 ? "disabled" : "";
      };

      $scope.nextPage = function() {
          if ($scope.currentPage < $scope.totalItems) {
              $scope.currentPage++;
          }
         $scope.loadMore();
      };

      $scope.nextPageDisabled = function() {
          return $scope.currentPage === $scope.totalItems ? "disabled" : "";
      };
      
      $scope.loadMore = function(){
        $scope.searchStart = true;
        var limit_start = ($scope.currentPage-1)*$scope.itemsPerPage;
        var query = {
          "shop_wallet_history":{
            "$collection":(APP.applaneTables.sixc_transactions),
            "$fields":{
              "date":1,
              "discount_details.amount":1,
              "discount_details.type":1,
              "discount_details.card_id":1,
              "citizen_id":1
            },
            "$filter":$scope.filterObject,
            "$unwind":["discount_details"],
            "$sort":{
              "date": -1
            },
            "$limit":$scope.itemsPerPage,
            "$skip":limit_start
          },
          "shop_wallet_history_count":{
            "$collection":(APP.applaneTables.sixc_transactions),
            "$group":{
              "count":{
                "$sum":1
              },
              "_id":null,
              "$fields":false
            },
            "$filter":$scope.filterObject,
            "$unwind":["discount_details"]
          }
        };

        StoreWalletService.getShopWalletHistory(query, function(data) {
          $scope.loadingShopHistory = false;
          $scope.searchStart = false;
          if(data.status === 'ok' && data.code === 200) {
            if((data.response.shop_wallet_history.result).length) {
              $scope.shopWalletHistories = data.response.shop_wallet_history.result;
              $scope.totalHitory = data.response.shop_wallet_history_count.result[0].count;
              $scope.totalItems = Math.ceil($scope.totalHitory/$scope.itemsPerPage); 
              $scope.range = [];  
              for (var i=1; i<=$scope.totalItems; i++) {
                  $scope.range.push(i);
              }
            } else {
              $scope.shopWalletHistories = [];
              $scope.totalHitory = 0;
              $scope.totalItems = 0; 
              $scope.range = [];  
            }
          } else {
            $scope.shopWalletHistories = [];
            $scope.nothingFound = true;
          }
        });
      }  

      $scope.loadMore(); 

      $scope.searchCitizen = function() {
        if($scope.searchText !== undefined && $scope.searchText.length > 0) {
          $scope.filterObject['$or'] = [{"citizen_id.name":{$regex: $scope.searchText, $options: 'i'}},{"citizen_id._id":{$regex: $scope.searchText, $options: 'i'}}];
        } else {
          $scope.filterObject['$or'] = undefined;
        }
        if(($scope.fromDate !== undefined && $scope.fromDate.length > 0) && ($scope.toDate !== undefined && $scope.toDate.length > 0)) {
          $scope.filterObject["date"] = {"$gte":DateToMongoDate.dateToIso($scope.fromDate), "$lte":DateToMongoDate.dateToIso($scope.toDate)};
        } else if(($scope.fromDate !== undefined && $scope.fromDate.length > 0) && ($scope.toDate === undefined || $scope.toDate.length === 0) && $scope.fromDate.length>0) {
          $scope.filterObject["date"] = {"$gte":DateToMongoDate.dateToIso($scope.fromDate)};
        } else if(($scope.toDate !== undefined && $scope.toDate.length > 0) && ($scope.fromDate === undefined || $scope.fromDate.length === 0) && $scope.toDate.length>0) {
          $scope.filterObject["date"] = {"$lte":DateToMongoDate.dateToIso($scope.toDate)};
        } else {
          $scope.filterObject["date"] = undefined;
        }

        $scope.currentPage = 1;
        $scope.range = [];
        $scope.loadMore(); 
      } 

      $scope.clearSearch = function() {
        $scope.filterObject = {};
        $scope.searchText = undefined;
        $scope.fromDate = undefined;
        $scope.toDate = undefined;
        $scope.filterObject = {
          "discount_details.card_no":{
            "$exists":true
          },
          "status":"Approved",
          //Fixed for applane request they managed at their end
          "transaction_type_id": {
            "$in": [
            "553209267dfd81072b176bba",
            "553209267dfd81072b176bbc",
            "553209267dfd81072b176bb6",
            "553209267dfd81072b176bb8"
            ]
          },
          "shop_id":$scope.shopId
        };
        $scope.currentPage = 1;
        $scope.range = [];
        $scope.loadMore();
      }

    }
  }
}]);

//Display the shop wallet sale history
app.directive('shopWalletSaleHistory', function() {
  return {
    restrict: 'E',
    templateUrl: 'app/views/shop_wallet_sale_history.html'
  }
});

//Display the shop wallet credit card listing
app.directive('shopWalletCreditCards', function() {
  return {
    restrict: 'E',
     templateUrl: 'app/views/shop_wallet_credit_cards.html'
  }
});

//Display the shop wallet paypal account listing
app.directive('shopWalletPaypalAccounts', function() {
  return {
    restrict: 'E',
     templateUrl: 'app/views/shop_wallet_paypal_accounts.html'
  }
});
app.directive("contenteditable", function() {
    return {
        restrict: "A",
        require: "ngModel",
        link: function(scope, element, attrs, ngModel) {

        function read() {
            var html = element.html();
            // When we clear the content editable the browser leaves a <br> behind
            // If strip-br attribute is provided then we strip this out
            html = html.replace('<br>', '');
            if( attrs.stripBr && html == '<br>' ) {
                html = '';
            }
            ngModel.$setViewValue(html);
        }

        ngModel.$render = function() {
            element.html(ngModel.$viewValue || '');
        };

        // $(element).keydown(function (e) {
        //     if(e.keyCode == 8) {
        //         $(this).prev(".selected-tagg").remove();
        //     }
        // });

        element.bind("keyup change", function() {
            scope.$apply(read);
        });
        }
    };
});

//Search tagging elements 
app.directive('searchTagging', ['$http', function($http){
    return {
        restrict: 'EA',
        templateUrl: 'app/views/tagg_list.html',
        controller: function($scope, $element, $sce, $compile, $timeout, ProfileService){
            $scope.commentText = '';
            $scope.allTaggs = {};
            $scope.taggedObject = {};
            var user = [];
            var club = [];
            var shop = [];
            $scope.taggedObject.user = user;
            $scope.taggedObject.club = club;
            $scope.taggedObject.shop = shop;
            var len = 0;
            $scope.$watch('commentText', function() {
                if ($scope.commentText.indexOf("@") !=-1){
                    len++;
                    var s1 = $scope.commentText;
                    var s2 = s1.substring(s1.indexOf("@")+1, ($scope.commentText.length)) 
                    var s3 = s2.trim();
                    s3 = s3.substr(0, len-1);
                    var res = 1; 
                    if (s3.length > 2){
                        var searchType = 'all_friends';
                        var privacy = $scope.privacy ? $scope.privacy : 4;
                        switch(privacy) {
                            case 1:
                                searchType = 'personal_friends';break;
                            case 2: 
                                searchType = 'professional_friends';break;
                            case 3:
                               searchType = 'all_friends';break;
                            case 4: {
                                searchType = ($scope.clubType == 1)?'all_friends':'club_members';
                            }
                        }
                        $scope.searchTags(s3, searchType, $scope.clubId, function(data){
                            res = 0;
                            $scope.allTaggs = data.data;
                        });
                    } else {
                        $scope.allTaggs = {};
                    }
                }else {
                    len = 0;
                    $scope.allTaggs = {}; 

                }
            }); 

            $scope.clearSearchedTagg = function () {
                $scope.allTaggs = {};
            }
            
            $scope.searchTags = function(text, search_type, club_id, callback) {
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.search_keyword = text;
                opts.search_type = search_type; //all_friends, personal_friends, professional_friends club_members
                opts.club_id = club_id;
                opts.limit_start = APP.user_list_pagination.start;
                opts.limit_size = APP.user_list_pagination.end; 
                ProfileService.searchAllFriend(opts, function(data) {
                    callback(data);
                });
            };
            $scope.getFirstText = function(text) {
                var s1 = text.split('@');
                return s1[0];
            };
            $scope.getSecondText = function(text) {
                var s1 = text.split('@');
                return s1[1].substr(len, s1[1].length);
            };

            $scope.tagUser = function(item) {
                var s = $scope.getFirstText($scope.commentText);
                var l = $scope.getSecondText($scope.commentText);
                //var linkHtml  = '<a contentEditable="false" class="selected-tagg" href="#/viewfriend/'+item.id+'">'+item.firstname+' '+item.last_name+'</a>'; 
                var linkHtml  = '<a class="selected-tagg" href="#/viewfriend/'+item.id+'">'+item.firstname+' '+item.last_name+'</a>'; 
                var finalText = s +' '+ linkHtml +' '+l+'<br/>';
                $scope.commentText = finalText; 
                $scope.taggedObject.user.push(item.id);
                $timeout(function(){
                    $element.focus();
                },0);
                $scope.allTaggs = {};
            };
            $scope.tagShop = function(item) {
                var s = $scope.getFirstText($scope.commentText);
                var l = $scope.getSecondText($scope.commentText);
                //var linkHtml  = '<a contentEditable="false" class="selected-tagg" href="#/shop/view/'+item.id+'">'+(item.business_name?item.business_name:item.name)+'</a>'; 
                var linkHtml  = '<a class="selected-tagg" href="#/shop/view/'+item.id+'">'+(item.name?item.name:item.business_name)+'</a>'; 
                var finalText = s +' '+ linkHtml +' '+l+'<br/>';
                $scope.commentText = finalText; 
                $scope.taggedObject.shop.push(item.id);
                $timeout(function(){
                    $element.focus();
                },0);
                $scope.allTaggs = {};
            }
            $scope.tagClub = function(item) {
                var s = $scope.getFirstText($scope.commentText);
                var l = $scope.getSecondText($scope.commentText);
                //var linkHtml  = '<a contentEditable="false" class="selected-tagg" href="#/club/view/'+item.id+'/'+item.status+'">'+item.name+'</a>'; 
                var linkHtml  = '<a class="selected-tagg" href="#/club/view/'+item.id+'/'+item.status+'">'+item.name+'</a>'; 
                var finalText = s +' '+ linkHtml +' '+l+'<br/>';
                $scope.commentText = finalText;
                $scope.taggedObject.club.push(item.id); 
                $timeout(function(){
                    $element.focus();
                },0);
                $scope.allTaggs = {};
            }
        }
    }
}]);    

//Search tagging elements 
app.directive('searchEditTagging', ['$parse', function($parse){
    return {
        restrict: 'EA',
        require: "ngModel",
        templateUrl: 'app/views/tagg_list.html',
        controller: function($scope, $element, $sce, $compile, $attrs, $timeout, ProfileService){
            $scope.allTaggs = {};
            $scope.taggedObject = {};
            var user = [];
            var club = [];
            var shop = [];
            $scope.taggedObject.user = user;
            $scope.taggedObject.club = club;
            $scope.taggedObject.shop = shop;
            var len = 0;
            var modelGetter = $parse($attrs['ngModel']);
            $scope.$watch($attrs.ngModel, function() {
                if (($scope.$eval($attrs.ngModel)).indexOf("@") !=-1){
                    len++;
                    var s1 = $scope.$eval($attrs.ngModel);
                    var s2 = s1.substring(s1.indexOf("@")+1, ($scope.$eval($attrs.ngModel)).length); 
                    var s3 = s2.trim();
                    s3 = s3.substr(0, len-1);
                    var res = 1; 
                    if (s3.length > 2){
                        var searchType = 'all_friends';
                        var privacy = $scope.privacy ? $scope.privacy : 4;
                        switch(privacy) {
                            case 1:
                                searchType = 'personal_friends';break;
                            case 2: 
                                searchType = 'professional_friends';break;
                            case 3:
                               searchType = 'all_friends';break;
                            case 4: {
                                searchType = ($scope.clubType == 1)?'all_friends':'club_members';
                            }
                        }
                        $scope.searchTags(s3, searchType, $scope.clubId, function(data){
                            res = 0;
                            $scope.allTaggs = data.data;
                        });
                    } else {
                        $scope.allTaggs = {};
                    }
                }else {
                    len = 0;
                    $scope.allTaggs = {}; 

                }
            });  

            $scope.clearSearchedTagg = function() {
                $scope.allTaggs = {};
            }

            $scope.searchTags = function(text, search_type, club_id, callback) {
                var opts = {};
                opts.user_id = APP.currentUser.id;
                opts.search_keyword = text;
                opts.search_type = search_type; //all_friends, personal_friends, professional_friends club_members
                opts.club_id = club_id;
                opts.limit_start = APP.user_list_pagination.start;
                opts.limit_size = APP.user_list_pagination.end; 
                ProfileService.searchAllFriend(opts, function(data) {
                    callback(data);
                });
            };
            $scope.getFirstText = function(text) {
                var s1 = text.split('@');
                return s1[0];
            };
            $scope.getSecondText = function(text) {
                var s1 = text.split('@');
                return s1[1].substr(len, s1[1].length);
            };
            $scope.tagUser = function(item) {
                var s = $scope.getFirstText($scope.$eval($attrs.ngModel));
                var l = $scope.getSecondText($scope.$eval($attrs.ngModel));
                //var linkHtml  = '<a contentEditable="false" class="selected-tagg" href="#/viewfriend/'+item.id+'"><span contentEditable="false">'+item.firstname+'</span>'+' '+'<span contentEditable="false">'+item.last_name+'</a>'; 
                var linkHtml  = '<a class="selected-tagg" href="#/viewfriend/'+item.id+'">'+item.firstname+' '+item.last_name+'</a>';
                var finalText = s +' '+ linkHtml +' '+l+'<br/>';
                var modelSetter = modelGetter.assign;
                modelSetter($scope, finalText);
                $scope.taggedObject.user.push(item.id);
                $timeout(function(){
                    $element.focus();
                },0);
                $scope.allTaggs = {};
            };
            $scope.tagShop = function(item) {
                var s = $scope.getFirstText($scope.$eval($attrs.ngModel));
                var l = $scope.getSecondText($scope.$eval($attrs.ngModel));
                //var linkHtml  = '<a contentEditable="false" class="selected-tagg" href="#/shop/view/'+item.id+'"><span contentEditable="false">'+(item.business_name?item.business_name:item.name)+'</a>'; 
                var linkHtml  = '<a class="selected-tagg" href="#/shop/view/'+item.id+'">'+(item.name?item.name:item.business_name)+'</a>'; 
                var finalText = s +' '+ linkHtml +' '+l+'<br/>';
                var modelSetter = modelGetter.assign;
                modelSetter($scope, finalText); 
                $scope.taggedObject.shop.push(item.id);
                $timeout(function(){
                    $element.focus();
                },0);
                $scope.allTaggs = {};
            }
            $scope.tagClub = function(item) {
                var s = $scope.getFirstText($scope.$eval($attrs.ngModel));
                var l = $scope.getSecondText($scope.$eval($attrs.ngModel));
                var linkHtml  = '<a class="selected-tagg" href="#/club/view/'+item.id+'/'+item.status+'">'+item.name+'</a>'; 
                var finalText = s +' '+ linkHtml +' '+l+'<br/>';
                var modelSetter = modelGetter.assign;
                modelSetter($scope, finalText);
                $scope.taggedObject.club.push(item.id);
                $timeout(function(){
                    $element.focus();
                },0);
                $scope.allTaggs = {};
            }    
        }
    }
}]);
app.directive("ngFileSelect",function(){

  return {
    link: function($scope,el){
      el.bind("change", function(e){
      	$scope.file = (e.srcElement || e.target).files[0];
        $scope.getFile();
      })
      
    }
    
  }
})
//Displaying the post form for store detail
app.directive('userBrokerProfile',['ProfileImageService', function(ProfileImageService) {
  return {
      restrict: 'E',
      link: function (scope){
        scope.brokerProfileLoader = true; 
      	var brokerOpts = {};
        brokerOpts.user_id = APP.currentUser.id;
        brokerOpts.profile_type = APP.profileType.brokerProfile; 
        ProfileImageService.viewmultiprofiles(brokerOpts, function(data){
            if(data.code == 101) {
            	scope.brokerProfileLoader = false; 
              scope.brokerProfile = data.data;
            } else {                
              scope.brokerProfileLoader = false;
            }
        });
      },
      templateUrl: 'app/views/user_about_broker.html'
  }
}]);

//Displaying the post form for store detail
app.directive('userCitizenProfile',['ProfileImageService', function(ProfileImageService) {
  return {
      restrict: 'E',
      link: function (scope){
        },
      templateUrl: 'app/views/user_about_citizen.html'
  }
}]);
app.directive('userProfesstionalProfile',['ProfileImageService', function(ProfileImageService) {
  return {
      restrict: 'E',
      link: function (scope){
      },
      templateUrl: 'app/views/user_about_professtional.html'
  }
}]);
app.directive('friendViewProfile',['ProfileImageService', function(ProfileImageService) {
  return {
      restrict: 'E',
      link: function (scope){
      },
      templateUrl: 'app/views/friend_view_profile.html'
  }
}]);
app.directive('showErrors', function() {
  return {
    restrict: 'A',
    require: "ngModel",
    link: function (scope, el, attrs, formCtrl) {
      el.bind('focusout', function() {
        if(scope.$eval(attrs.ngModel) && scope.$eval(attrs.ngModel) != undefined) {
          el.removeClass('has-error');
        } else {
          el.addClass('has-error');
        }
      });
      el.bind('focusin', function() {
        if(scope.$eval(attrs.ngModel) && scope.$eval(attrs.ngModel) != undefined) {
          el.addClass('has-error');
        } else {
          el.removeClass('has-error');
        }
      });
    }
  }
});

/**
* Disable the copy, cut and paste on the html input box
*/
app.directive('stopccp', function(){
  return {
    scope: {},
    link:function(scope,element){
      element.on('cut copy paste', function (event) {
        event.preventDefault();
      });
    }
  };
});

app.directive('creditDetail', ['$http', 'CitizenWallet', '$rootScope', function($http, CitizenWallet, $rootScope) {
  return {
    restrict: 'E',
    templateUrl: 'app/views/citizen_credit_detail.html',
    scope: true,
    link: function (scope){
      
    },
    controller: function ($scope){
      $scope.total_income_loader =true;
      $scope.total_credit_loader =true;
      $scope.total_creditAc_loader =true;
      $scope.total_creditBal_loader =true;
      $rootScope.citizenAvailableBalance = 0.00;
      var query = {
        "my_citizen_income": {
            "$collection": "sixc_bucks",
            "$filter": {
                "citizen_id": (APP.currentUser.id).toString(),
            },
            "$group": {
                "_id": null,
                "amount": {
                    "$sum": "$amount"
                },
                "debit": {
                    "$sum": "$debit"
                },
                "credit": {
                    "$sum": "$credit"
                }
            }
        },
        "my_income": {
            "$collection": "sixc_wallet",
            "$group": {
                "credit": {
                    "$sum": "$credit"
                },
                "debit": {
                    "$sum": "$debit"
                },
                "amount": {
                    "$sum": "$amount"
                },
                "_id": null,
                "$fields": false
            },
            "$filter": {
                "citizen_id": (APP.currentUser.id).toString(),
                "discount_type_id.name": {
                    "$in": [
                        //"Shot",
                        "Dp"
                    ]
                }
            }
        }
      }

      CitizenWallet.getCitizenCredits(query,function(data){
        if(data.status === 'ok' && data.code === 200){
          $scope.total_income_loader =false;
          $scope.total_credit_loader =false;
          $scope.total_creditAc_loader =false;
          $scope.total_creditBal_loader =false;
          var my_citizen_income = data.response.my_citizen_income.result[0]
          var my_income = data.response.my_income.result[0]
          if(my_citizen_income){
            $scope.total_income = my_citizen_income.amount
            $scope.total_credit = my_citizen_income.credit
            $rootScope.citizenAvailableBalance = 0.00;
            $rootScope.citizenAvailableBalance = my_citizen_income.amount;
          }else{
             $scope.total_income = 0;
            $scope.total_credit = 0;
          }if(my_income){
            $scope.credit_active = my_income.credit
            $scope.credit_balance = my_income.credit - my_income.debit
          }else{
            $scope.credit_active = 0;
            $scope.credit_balance = 0;
          }
          
        }
      })
    }
  }
}]);

app.directive('shopCard', ['$http', '$rootScope', 'StoreService', 'CitizenWallet', 'focus', '$filter', 'DateToMongoDate', function($http, $rootScope, StoreService, CitizenWallet, focus, $filter, DateToMongoDate) {
  return {
    restrict: 'E',
    templateUrl: 'app/views/citizen_shop_card.html',
    scope: true,
    link: function (scope){
      
    },
    controller: function ($scope){
      $('.dateInput').datepicker({dateFormat: 'dd-mm-yy'});
      $scope.totalCardItemss50 = 0;
      $scope.totalCardItemss100 = 0;
      $scope.totalCards50 = 0;
      $scope.totalCards100 = 0;
      $scope.range50 = [];
      $scope.range100 = [];
      $scope.firstPage50 = 6;
      $scope.firstPage100 = 6;
      $scope.itemsPerPage = 6;
      $scope.currentPage50 = 1;
      $scope.currentPage100 = 1;
      $scope.shopingCardLoad1 = true;
      $scope.shopingCardLoad2 = true;

      $scope.startDate = $scope.i18n.citizen_wallet.from;
      $scope.endDate = $scope.i18n.citizen_wallet.to;
      $scope.filterObject = {
        "citizen_id":(APP.currentUser.id).toString(),
        "balance":{
          "$gt":0
        }
      };
        
      var currentDate = new Date();
      var defaultDate = new Date(parseInt(currentDate.getFullYear())+50,9,27);

      $scope.changePageMore50 = function(pageNo) {
        $scope.shopingCardLoad2 = true;
        $scope.currentPage50 = pageNo;
        $scope.loadMore();
      };

      $scope.prevPage50 = function() {
          if ($scope.currentPage50 > 1) {
              $scope.currentPage50--;
          }
          $scope.shopingCardLoad2 = true;
          $scope.loadMore();
      };

      $scope.prevPageDisabled50 = function() {
          return $scope.currentPage50 === 1 ? "disabled" : "";
      };

      $scope.nextPage50 = function() {
          if ($scope.currentPage50 < $scope.totalCards50) {
              $scope.currentPage50++;
          }
          $scope.shopingCardLoad2 = true;
         $scope.loadMore();
      };

      $scope.nextPageDisabled50 = function() {
          return $scope.currentPage50 === $scope.totalCards50 ? "disabled" : "";
      };

      $scope.changePageMore100 = function(pageNo) {
        $scope.shopingCardLoad1 = true;
        $scope.currentPage100 = pageNo;
        $scope.loadMore();
      };

      $scope.prevPage100 = function() {
          if ($scope.currentPage100 > 1) {
              $scope.currentPage100--;
          }
          $scope.shopingCardLoad1 = true;
          $scope.loadMore();
      };

      $scope.prevPageDisabled100 = function() {
          return $scope.currentPage100 === 1 ? "disabled" : "";
      };

      $scope.nextPage100 = function() {
          if ($scope.currentPage100 < $scope.totalCards100) {
              $scope.currentPage100++;
          }
          $scope.shopingCardLoad1 = true;
         $scope.loadMore();
      };

      $scope.nextPageDisabled100 = function() {
          return $scope.currentPage100 === $scope.totalCards100 ? "disabled" : "";
      };

      $scope.loadMore = function() {
        var limit_start50 = ($scope.currentPage50-1)*$scope.itemsPerPage;
        var limit_start100 = ($scope.currentPage100-1)*$scope.itemsPerPage;
        var query = {
          "my_wallet_upto100": {
              "$collection": APP.applaneTables.citizenWalletCards,
              "$fields": {
                  "credit": 1,
                  "card_no": 1,
                  "card_code": 1,
                  "shop_id.name": 1,
                  "shop_id.address_l1": 1,
                  "shop_id.address_l2": 1,
                  "shop_id.city": 1,
                  "shop_id.country": 1,
                  "shop_id.average_anonymous_rating": 1,
                  "shop_id.latitude": 1,
                  "shop_id.longitude": 1,
                  "shop_id.mobile_no": 1,
                  "shop_id.region": 1,
                  "shop_id.province": 1,
                  "shop_id.zip": 1,
                  "shop_id.streetaddress": 1,
                  "shop_id.email_address": 1,
                  "shop_id.web_address": 1,
                  "from_date": 1,
                  "to_date": 1,
                  "balance": 1
              },
              "$filter":$scope.filterObject,
              "$sort": {
                  "to_date": 1
              },
              "$limit": $scope.itemsPerPage,
              "$skip": limit_start100
          },
          "my_wallet_upto100_count": {
              "$collection": APP.applaneTables.citizenWalletCards,
              "$group": {
                  "count": {
                      "$sum": 1
                  },
                  "_id": null,
                  "$fields": false
              },
              "$filter":$scope.filterObject
          },
          "my_wallet_upto50": {
              "$collection": APP.applaneTables.citizenWalletCards,
              "$fields": {
                  "credit": 1,
                  "card_no": 1,
                  "card_code": 1,
                  "shop_id.name": 1,
                  "shop_id.address_l1": 1,
                  "shop_id.address_l2": 1,
                  "shop_id.city": 1,
                  "shop_id.country": 1,
                  "shop_id.average_anonymous_rating": 1,
                  "shop_id.latitude": 1,
                  "shop_id.longitude": 1,
                  "shop_id.mobile_no": 1,
                  "shop_id.region": 1,
                  "shop_id.province": 1,
                  "shop_id.zip": 1,
                  "shop_id.streetaddress": 1,
                  "shop_id.email_address": 1,
                  "shop_id.web_address": 1,
                  "from_date": 1,
                  "to_date": 1,
                  "balance": 1
              },
              "$filter": $scope.filterObject,
              "$sort": {
                  "to_date": 1
              },
              "$limit": $scope.itemsPerPage,
              "$skip": limit_start50
          },
          "my_wallet_upto50_count": {
              "$collection": APP.applaneTables.citizenWalletCards,
              "$group": {
                  "count": {
                      "$sum": 1
                  },
                  "_id": null,
                  "$fields": false
              },
              "$filter": $scope.filterObject
          }
        };
        if(query.my_wallet_upto100){
          var for100obj = JSON.parse(JSON.stringify(query.my_wallet_upto100.$filter))
          for100obj.type = "551ce49e2aa8f00f20d93295";
          query.my_wallet_upto100.$filter = for100obj;

          var for100objCount = JSON.parse(JSON.stringify(query.my_wallet_upto100_count.$filter))
          for100objCount.type = "551ce49e2aa8f00f20d93295";
          query.my_wallet_upto100_count.$filter = for100objCount;
          query.my_wallet_upto100_count.$filter = for100objCount;
        }
        if(query.my_wallet_upto50){
          var for50obj = JSON.parse(JSON.stringify(query.my_wallet_upto50.$filter))
          for50obj.type = "551ce49e2aa8f00f20d93293";
          query.my_wallet_upto50.$filter = for50obj;

          var for50objCount = JSON.parse(JSON.stringify(query.my_wallet_upto50_count.$filter))
          for50objCount.type = "551ce49e2aa8f00f20d93293";
          query.my_wallet_upto50_count.$filter = for50objCount;
          query.my_wallet_upto50_count.$filter = for50objCount;
        }
        CitizenWallet.getCitizenDetails(query,function(data){
            $scope.shopingCardLoad1 = false;
            $scope.shopingCardLoad2 = false;
          if(data.status === 'ok' && data.code === 200) {
            $scope.totalCardItemss50 = data.response.my_wallet_upto50_count.result[0] ? data.response.my_wallet_upto50_count.result[0].count : 0;
            $scope.totalCardItemss100 = data.response.my_wallet_upto100_count.result[0] ? data.response.my_wallet_upto100_count.result[0].count : 0;
            $scope.totalCards50 = Math.ceil($scope.totalCardItemss50/$scope.itemsPerPage); 
            $scope.totalCards100 = Math.ceil($scope.totalCardItemss100/$scope.itemsPerPage); 
            $scope.range50 = []; 
            $scope.range100 = [];  
            for (var i=1; i<=$scope.totalCards50; i++) {
                $scope.range50.push(i);
            }
            for (var i=1; i<=$scope.totalCards100; i++) {
                $scope.range100.push(i);
            }
            $scope.shopCards100 = data.response.my_wallet_upto100.result;
            $scope.shopCards50 = data.response.my_wallet_upto50.result;
          } else {
            $scope.shopCards100 = [];
            $scope.shopCards50 = [];
            $scope.totalCardItemss50 = 0;
            $scope.totalCardItemss100 = 0;
          }
          
        });
      }

      $scope.loadMore();

      for (var i=1; i <= $scope.paging; i++) {
        $scope.range.push(i);
      }

      $scope.ratingConvert = function(rate,count){
        var rateArray = []
        if (count){
          rate = rate ? rate : 0;
          if(rate-Math.floor(rate)>0) count-=1;

          for(var i=0;i<count-Math.floor(rate);i++){
            rateArray.push(i);
          }
          return rateArray;
        }
        if(rate){
          rate = Math.floor(rate);
          for(var i=0;i<rate;i++){
            rateArray.push(i);
          }
          return rateArray;
        }
      }

      $scope.convertToInt =function(floatVal){
        return Math.floor(floatVal);
      }

      $scope.cardSearch = function() {

        if($scope.searchValue !== undefined && $scope.searchValue !== ''){
          $scope.filterObject['shop_id.name'] =  {
              "$regex": $scope.searchValue,
              "$options": "$i"
          }
        }else{
          $scope.filterObject['shop_id.name'] = undefined;
        } 
        $scope.filterObject["to_date"] = {};
        for( var i=0; i<$('.form-control').length;i++){
          if(angular.element('.form-control')[i].getAttribute('is-open') === 'opened1' && angular.element(angular.element('.form-control')[i]).val().length > 0){
            $scope.filterObject.to_date['$gte'] = DateToMongoDate.dateToIso(angular.element(angular.element('.form-control')[i]).val());
          }
          if(angular.element('.form-control')[i].getAttribute('is-open') === 'opened2' && angular.element(angular.element('.form-control')[i]).val().length > 0){
            $scope.filterObject.to_date['$lte'] = DateToMongoDate.dateToIso(angular.element(angular.element('.form-control')[i]).val());
          }
        }
        if($scope.filterObject.to_date['$gte'] === undefined && $scope.filterObject.to_date['$lte'] === undefined){
          $scope.filterObject["to_date"] = undefined;
        }
        // console.log(angular.element('.form-control'),'---',angular.element(angular.element('.form-control')[0]).val())
        // if(($scope.searchFrom !== undefined && $scope.searchFrom.length > 0) && ($scope.searchTo !== undefined && $scope.searchTo.length > 0)) {
        //   $scope.filterObject.to_date = {"$gte":DateToMongoDate.dateToIso($scope.searchFrom), "$lte":DateToMongoDate.dateToIso($scope.searchTo)};
        // } else if(($scope.searchFrom !== undefined && $scope.searchFrom.length > 0) && ($scope.searchTo === undefined || $scope.searchTo.length === 0) && $scope.searchFrom.length>0) {
        //   $scope.filterObject["to_date"] = {"$gte":DateToMongoDate.dateToIso($scope.searchFrom)};
        //   //$scope.filterObject["to_date"] = {"$lte": undefined};
        // } else if(($scope.searchFrom !== undefined && $scope.searchTo.length > 0) && ($scope.searchFrom === undefined || $scope.searchFrom.length === 0) && $scope.searchTo.length>0) {
        //   $scope.filterObject["to_date"] = {"$lte":DateToMongoDate.dateToIso($scope.searchTo)};
        //   //$scope.filterObject["to_date"] = {"$gte": undefined};
        // } else {
        //   $scope.filterObject["to_date"] = undefined;
        // }

        // if($scope.searchFrom !== undefined && $scope.searchFrom !== ''){
        //   $scope.searchFrom = ($scope.searchFrom).split("-").reverse().join("-");
        //   if($scope.filterObject['to_date']){
        //     $scope.filterObject['to_date']["$gte"] = DateToMongoDate.dateToIso($scope.searchFrom)
        //   }else{
        //     $scope.filterObject['to_date'] = {
        //       "$gte" : DateToMongoDate.dateToIso($scope.searchFrom)
        //     }
        //   }
        // }else if($scope.searchFrom === '' && $scope.filterObject['to_date'] && $scope.filterObject['to_date']["$gte"]){
        //   $scope.filterObject['to_date']["$gte"] = undefined;
        // }

        // if($scope.searchTo !== undefined && $scope.searchTo !== ''){
        //   $scope.searchTo = ($scope.searchTo).split("-").reverse().join("-");
        //   if($scope.filterObject['to_date']){
        //     $scope.filterObject['to_date']["$lte"] = DateToMongoDate.dateToIso($scope.searchTo);
        //   }else{
        //     $scope.filterObject['to_date'] = {
        //       "$lte" : DateToMongoDate.dateToIso($scope.searchTo)
        //     }
        //   }
        // }else if($scope.searchTo === '' && $scope.filterObject['to_date'] && $scope.filterObject['to_date']["$lte"]){
        //   $scope.filterObject['to_date']["$lte"] = undefined;
        // } 

        // if($scope.filterObject['to_date'] && $scope.filterObject['to_date']["$gte"] === undefined && $scope.filterObject['to_date']["$lte"] === undefined){
        //   $scope.filterObject['to_date'] = undefined
        // }

        $scope.shopingCardLoad1 = true;
        $scope.shopingCardLoad2 = true;
        $scope.totalCardItemss50 = 0;
        $scope.totalCardItemss100 = 0;
        $scope.totalCards50 = 0;
        $scope.totalCards100 = 0;
        $scope.range50 = [];
        $scope.range100 = [];
        $scope.firstPage50 = 6;
        $scope.firstPage100 = 6;
        $scope.itemsPerPage = 6;
        $scope.currentPage50 = 1;
        $scope.currentPage100 = 1;
        $scope.loadMore();
      }

      $scope.clearSearch = function() {
        $scope.searchValue = "";
        $scope.searchFrom = "";
        $scope.searchTo = "";
        angular.element('.form-control').val('')
        $scope.shopingCardLoad1 = true;
        $scope.shopingCardLoad2 = true;
        $scope.totalCardItemss50 = 0;
        $scope.totalCardItemss100 = 0;
        $scope.totalCards50 = 0;
        $scope.totalCards100 = 0;
        $scope.range50 = [];
        $scope.range100 = [];
        $scope.firstPage50 = 6;
        $scope.firstPage100 = 6;
        $scope.itemsPerPage = 6;
        $scope.currentPage50 = 1;
        $scope.currentPage100 = 1;
        $scope.filterObject = {
          "citizen_id":(APP.currentUser.id).toString(),
          "balance":{
            "$gt":0
          }
        };
        $scope.loadMore();
      }
    }
  }
}]);

app.directive('coupon', ['$http', 'CitizenWallet', 'focus', 'DateToMongoDate', function($http, CitizenWallet, focus, DateToMongoDate) {
  return {
    restrict: 'E',
    templateUrl: 'app/views/citizen_coupon.html',
    scope : true,
    link: function (scope){
      
    },
    controller : function ($scope){
      $('.dateInput').datepicker({dateFormat: 'dd-mm-yy'});
      $scope.predicate = 'to_date';
      $scope.reverse = false;
      $scope.citizenCouponLoader = true;
      $scope.noCitizenCouponFound = true;
      $scope.firstPage = APP.walletItemPerPage.perPage;
      $scope.itemsPerPage = APP.walletItemPerPage.perPage;
      $scope.currentPage = 1;
      $scope.range = [];
      $scope.totalCoupon = 0;
      $scope.fiveStar = [1,2,3,4,5];
      $scope.loadingCitizenCouon = false;
      $scope.startDate = $scope.i18n.citizen_wallet.from;
      $scope.endDate = $scope.i18n.citizen_wallet.to;
      $scope.filterObject = {
        "credit":{
        "$gt":0
        },
        "balance":{
        "$gt":0
        },
        "citizen_id":(APP.currentUser.id).toString(),
        "type":"551ce49e2aa8f00f20d9328f" //Fixed for citizen wallet
      }

      $scope.changePageMore = function(pageNo) {
          $scope.currentPage = pageNo;
          $scope.loadMore();
      };

      $scope.prevPage = function() {
          if ($scope.currentPage > 1) {
              $scope.currentPage--;
          }
          $scope.loadMore();
      };

      $scope.prevPageDisabled = function() {
          return $scope.currentPage === 1 ? "disabled" : "";
      };

      $scope.nextPage = function() {
          if ($scope.currentPage < $scope.totalItems) {
              $scope.currentPage++;
          }
         $scope.loadMore();
      };

      $scope.nextPageDisabled = function() {
          return $scope.currentPage === $scope.totalItems ? "disabled" : "";
      };

      $scope.loadMore = function(){
        var limit_start = ($scope.currentPage-1)*$scope.itemsPerPage;
        $scope.loadingCitizenCouon = true;
        //prepare query for getting the coupons list
        var query = {
          "my_wallet_coupons":{
            "$collection":(APP.applaneTables.citizenWallet),
            "$fields":{
              "credit":1,
              "discount":1,
              "shop_id.name":1,
              "shop_id.address_l1":1,
              "shop_id.address_l2":1,
              "shop_id.city":1,
              "shop_id.country":1,
              "shop_id.average_anonymous_rating":1,
              "shop_id.latitude":1,
              "shop_id.longitude":1,
              "shop_id.mobile_no":1,
              "shop_id.region":1,
              "shop_id.province":1,
              "shop_id.zip":1,
              "shop_id.streetaddress":1,
              "shop_id.email_address":1,
              "shop_id.web_address":1,
              "from_date":1,
              "to_date":1,
              "balance":1
            },
            "$filter":$scope.filterObject,
            "$sort":{
              "to_date":1
            },
            "$limit":$scope.itemsPerPage,
            "$skip":limit_start
          },
          "my_wallet_coupons_count":{
            "$collection":(APP.applaneTables.citizenWallet),
            "$group":{
              "count":{
                "$sum":1
              },
              "_id":null,
              "$fields":false
            },
            "$filter":$scope.filterObject
          }
        };

        CitizenWallet.getCitizenWalletCoupons(query, function(data) {
          $scope.loadingCitizenCouon = false;
          $scope.citizenCouponLoader = false;
          if(data.status === 'ok' && data.code === 200) {
            if((data.response.my_wallet_coupons.result).length) {
              $scope.shopCoupons = data.response;
              $scope.totalCoupon = data.response.my_wallet_coupons_count.result[0].count;
              $scope.totalItems = Math.ceil($scope.totalCoupon/$scope.itemsPerPage); 
              $scope.range = [];  
              for (var i=1; i<=$scope.totalItems; i++) {
                  $scope.range.push(i);
              }
            } else {
              $scope.shopCoupons = [];
              $scope.totalCoupon = 0;
              $scope.totalItems = 0; 
              $scope.range = [];  
            }
            $scope.noCitizenCouponFound = false;
          } else {
            $scope.noCitizenCouponFound = true;
            $scope.shopCoupons = [];
          }
        }); 
      }; 

      $scope.loadMore();

      $scope.searchCoupons = function() {
        if($scope.searchText !== undefined && $scope.searchText.length > 0) {
          $scope.filterObject['$or'] = [{"shop_id.name":{$regex: $scope.searchText, $options: 'i'}},{"offer_id.keywords.name":{$regex: $scope.searchText, $options: 'i'}}];
        } else {
          $scope.filterObject['$or'] = undefined;
        }

        $scope.filterObject["to_date"] = {};
        for( var i=0; i<$('.form-control').length;i++){
          if(angular.element('.form-control')[i].getAttribute('is-open') === 'opened1' && angular.element(angular.element('.form-control')[i]).val().length > 0){
            $scope.filterObject.to_date['$gte'] = DateToMongoDate.dateToIso(angular.element(angular.element('.form-control')[i]).val());
          }
          if(angular.element('.form-control')[i].getAttribute('is-open') === 'opened2' && angular.element(angular.element('.form-control')[i]).val().length > 0){
            $scope.filterObject.to_date['$lte'] = DateToMongoDate.dateToIso(angular.element(angular.element('.form-control')[i]).val());
          }
        }
        if($scope.filterObject.to_date['$gte'] === undefined && $scope.filterObject.to_date['$lte'] === undefined){
          $scope.filterObject["to_date"] = undefined;
        }

        // if(($scope.fromDate !== undefined && $scope.fromDate.length > 0) && ($scope.toDate !== undefined && $scope.toDate.length > 0)) {
        //   $scope.filterObject.to_date = {"$gte":DateToMongoDate.dateToIso($scope.fromDate), "$lte":DateToMongoDate.dateToIso($scope.toDate)};
        // } else if(($scope.fromDate !== undefined && $scope.fromDate.length > 0) && ($scope.toDate === undefined || $scope.toDate.length === 0) && $scope.fromDate.length>0) {
        //   $scope.filterObject["to_date"] = {"$gte":DateToMongoDate.dateToIso($scope.fromDate)};
        //   //$scope.filterObject["to_date"] = {"$lte": undefined};
        // } else if(($scope.toDate !== undefined && $scope.toDate.length > 0) && ($scope.fromDate === undefined || $scope.fromDate.length === 0) && $scope.toDate.length>0) {
        //   $scope.filterObject["to_date"] = {"$lte":DateToMongoDate.dateToIso($scope.toDate)};
        //   //$scope.filterObject["to_date"] = {"$gte": undefined};
        // } else {
        //   $scope.filterObject["to_date"] = undefined;
        // }

        $scope.currentPage = 1;
        $scope.range = [];
        $scope.loadMore();          
      };

      $scope.clearSearch = function() {
        $scope.filterObject = {};
        $scope.searchText = undefined;
        $scope.fromDate = undefined;
        $scope.toDate = undefined;
        angular.element('.form-control').val('')
        $scope.filterObject = {
          "credit":{
          "$gt":0
          },
          "balance":{
          "$gt":0
          },
          "citizen_id":(APP.currentUser.id).toString(),
          "type":"551ce49e2aa8f00f20d9328f" //Fixed for citizen wallet
        }
        $scope.currentPage = 1;
        $scope.range = [];
        $scope.loadMore();
      };

      $scope.ratingConvert = function(rate, count){
        var rateArray = []
        if (count){
          rate = rate ? rate : 0;
          if(rate-Math.floor(rate)>0) count-=1;
          for(var i=0;i<count-Math.floor(rate);i++){
            rateArray.push(i);
          }
          return rateArray;
        }

        if(rate){
          rate = Math.floor(rate);
          for(var i=0;i<rate;i++){
            rateArray.push(i);
          }
          return rateArray;
        }
      }

      $scope.convertToInt =function(floatVal){
        return Math.floor(floatVal);
      }
    }
  }
}]);

//Directive to manage the citizen wallet history
app.directive('transactionHistory', ['$http', 'CitizenWallet', '$rootScope', function($http, CitizenWallet, $rootScope) {
  return {
    restrict: 'E',
    templateUrl: 'app/views/citizen_transaction_history.html',
    scope : true,
    link: function (scope){
      
    },
    controller : function ($scope){
      $scope.oneAtATime = true;
      $scope.trans_history = [
        {
          date : new Date(2011,6,20).toDateString(),
          credit_recevied : 10000,
          credit_used : 100,
          credit_type :" a Credito sixth continent",
        },
         {
          date : new Date(2002,7,31).toDateString(),
          credit_recevied : 1000,
          credit_used : 200,
          credit_type :" b Credito sixth continent",
        },
         {
          date : new Date(2002,9,31).toDateString(),
          credit_recevied : 100000,
          credit_used : 10,
          credit_type :"a Credito sixth continent",
        },
         {
          date : new Date(2102,7,31).toDateString(),
          credit_recevied : 100,
          credit_used : 10000,
          credit_type :"bb Credito sixth continent",
        },
         {
          date : new Date(2002,7,6).toDateString(),
          credit_recevied : 1000000,
          credit_used : 100,
          credit_type :"cc Credito sixth continent",
        },
      ]
      //open the content of the lable 
      $scope.openContnetDetail = function() {
        $scope.detailContent = "Hello Guys";
      }

      $scope.getIncome = function(){
          var incomeReq =  {
            "$collection": "sixc_bucks",
            "$filter": {
                "citizen_id": (APP.currentUser.id).toString(),
            },
            "$group": {
                "_id": null,
                "amount": {
                    "$sum": "$amount"
                },
                "debit": {
                    "$sum": "$debit"
                },
                "credit": {
                    "$sum": "$credit"
                }
            }
          };
          CitizenWallet.getCitizenIncome(incomeReq,function(data){
              if(data.response.result.length > 0){
                $rootScope.citizenAvailableBalance = data.response.result[0].amount;
              }else{
                $rootScope.citizenAvailableBalance = 0.00;
              }
          });
      };

      if(!$rootScope.citizenAvailableBalance){
          $scope.getIncome();
      }
      
      $scope.historyLoader = false;
      $scope.historyLimit = 10;
      $scope.skip = 0;
      $scope.firstLoad = true;
      $scope.getCitizenHistory = function() {
        if($scope.firstLoad === true){
          $scope.historyLoader = true;
          $scope.firstLoad = false;
        }else{
          $scope.paginationLoader = true;
        }
        var historyReq = {
          "citizenWalletHistoryRecord":{
            "$collection":APP.applaneTables.sixc_bucks_wallet,
            "$group":{
              "_id": {
                "record_from": "$record_from",
                "group_column": "$group_column",
                 "date":{"date":{"$dayOfMonth":"$date"},
                  "month":{"$month":"$date"},
                  "year":{"$year":"$date"}},
              },
              "$filter": {
                "credit": {
                  "$gt": 0
                }
              },
              "record_from": {
                "$first": "$record_from"
              },
              "group_column": {
                "$first": "$group_column"
              },
              "citizen_transaction_id": {
                "$first": "$citizen_transaction_id"
              },
              "credit": {
                "$sum": "$credit"
              },
              "transaction_value": {
                "$sum": "$transaction_value"
              },
              "date": {"$first": "$date"},
              "$fields": false,
               "$sort":{
                    "date":-1
                }
            },
            "$filter":{
              "group_column":{"$nin":["Shopping Card Upto 50%",
                "Shopping Card Upto 100%","Coupon"]
              },
              "record_from":{
                "$exists":true
              },
              "citizen_id": APP.currentUser.id.toString()
            },
            "$limit" : $scope.historyLimit,
            "$skip":$scope.skip
         },
          /*
          "citizenWalletHistoryCount":{
            "$collection": APP.applaneTables.sixc_bucks_wallet,
              "$group":[
                 {
                  "_id":{
                    "record_from":"$record_from",
                    "group_column":"$group_column",
                     "date":{"date":{"$dayOfMonth":"$date"},
                  "month":{"$month":"$date"},
                  "year":{"$year":"$date"}},
                  },
                  "$filter":{
                    "credit":{
                      "$gt":0
                    }
                  },
                  "record_from":{
                    "$first":"$record_from"
                  },
                  "group_column":{
                    "$first":"$group_column"
                  },
                  "citizen_transaction_id":{
                    "$first":"$citizen_transaction_id"
                  },
                  "credit":{
                    "$sum":"$credit"
                  },
                  "transaction_value":{
                    "$sum":"$transaction_value"
                  },
                   "date": {"$first": "$date"},
                    "$fields":false
                },
                {
                  "_id":null,
                  "count":{
                    "$sum":1
                  }
                }
              ],
              "$filter":{
                "group_column":{"$nin":["Shopping Card Upto 50%25",
                  "Shopping Card Upto 100%25","Coupon"]
                },
                "record_from":{
                  "$exists":true
                },
              "citizen_id":APP.currentUser.id.toString()
              }
            }*/
            "citizenWalletHistoryCount" : {
              "$collection": APP.applaneTables.sixc_bucks_wallet,
              "$group":[{
                "_id": {
                  "record_from": "$record_from",
                  "group_column": "$group_column",
                  "date":{
                    "date":{
                      "$dayOfMonth":"$date"
                    },
                    "month":{
                      "$month":"$date"
                    },
                    "year":{
                      "$year":"$date"
                    }
                  }
                },
                "$filter": {
                  "credit": {
                    "$gt": 0
                  }
                },
                "record_from": {
                  "$first": "$record_from"
                },
                "group_column": {
                  "$first": "$group_column"
                },
                "citizen_transaction_id": {
                  "$first": "$citizen_transaction_id"
                },
                "credit": {
                  "$sum": "$credit"
                },
                "transaction_value": {
                  "$sum": "$transaction_value"
                },
                "date": {
                  "$first": "$date"
                },
                "$fields": false
              },
              {
                "_id":null,
                "count":{
                  "$sum":1
                }
              }
              ],
              "$filter":{
                "group_column":{
                  "$nin":["Shopping Card Upto 50%","Shopping Card Upto 100%","Coupon"]
                },
                "record_from":{
                  "$exists":true
                },
                "citizen_id":APP.currentUser.id.toString()
              }
            }
        };

        CitizenWallet.getCitizenWalletHistory(historyReq, function(data) {
          if(data.status === "ok" && data.code == 200){
            $scope.citizenHistory = data.response.citizenWalletHistoryRecord.result;
            $scope.historyLoader = false;
            /*if(data.response.result.length > 0){
                $scope.list = 0;
                $scope.range = [];                
            }*/
            
            if(data.response.citizenWalletHistoryCount.result.length > 0){
              if(data.response.citizenWalletHistoryCount.result[0].count > $scope.itemsPerPage){
                $scope.list = 0;
                $scope.range = [];
                $scope.pagination = true;
                $scope.paginationLoader = false;
                $scope.list = data.response.citizenWalletHistoryCount.result[0].count - 1;
                for (var i = 0; i < $scope.list/$scope.itemsPerPage; i++) {
                  $scope.range.push(i);
                };
              }
            }
          }else{
            $scope.pagination  = false;
            $scope.list = 0;
            $scope.range = [];
            $scope.historyLoader = false;
          }
        });
        
      };
      $scope.getCitizenHistory();

      $scope.currentDate = new Date();

      $scope.itemsPerPage = 10;
      $scope.currentPage = 0;
      $scope.pagination = false;
      $scope.list = 0;
      $scope.range = [];
      $scope.historyLimit = 10;
      $scope.skip = 0;
      $scope.prevPage = function(page) {
        if ($scope.currentPage > 0) {
          $scope.currentPage--;
          $scope.loadMoreHistory($scope.currentPage);
        }
      };

      $scope.loadMoreHistory = function(index){
        if(index !== 0){
          $scope.skip = (index - 1) * $scope.itemsPerPage;
        }else{
          $scope.skip = 0;
        }
        $scope.historyLimit = $scope.itemsPerPage;
        $scope.getCitizenHistory();
      };

      $scope.prevPageDisabled = function() {
          return $scope.currentPage === 0 ? "disabled" : "";
      };

      $scope.pageCount = function() {
          if ($scope.list !== undefined) {
              return Math.ceil($scope.list/$scope.itemsPerPage)-1;
          }
      };

      $scope.nextPage = function(page) {
          if ($scope.currentPage < $scope.pageCount()) {
              $scope.currentPage++;
              $scope.loadMoreHistory($scope.currentPage + 1);
          }
      };

      $scope.nextPageDisabled = function() {
          return $scope.currentPage === $scope.pageCount() ? "disabled" : "";
      };

      $scope.setPage = function(n) {
          $scope.currentPage = n;
      };

    }
  }
}]);
app.factory('focus', function($timeout) {
    return function(id) {
      $timeout(function() {
        var element = document.getElementById(id);
        if(element){
          element.focus();
        }
      },400);
    };
});

//It requires dd-mm-yyyy and converts to mongoDb date with GMT format standard
app.factory('DateToMongoDate', function() {
	return {
    dateToIso: function(sourceDate) {
    	if(!sourceDate) return '';
    	var now = new Date();
    	var currentData = sourceDate.split("-");
		var dateObj = new Date(currentData[2],currentData[1]-1,currentData[0]);
		return (dateObj.toISOString()); 
	    }
	};
});

//Refresh the page on same link hit 
app.factory('LandURL', ['$location', '$route', function($location, $route) {
  return {
    sendTo: function(targetUrl) {
      if($location.path() !== targetUrl){
        $location.path(targetUrl);
      } else {
        $route.reload();
      }
    }
  };
}]);
app.filter('newlines', function() {
	var text = '';
	return function(text, length, postType, seeText, postId) {
		var splitTxt = [];
		var tempStr = '';
		var tempPrev = '';
    	var tempText = text;
		if(text !== '' && text != undefined ) {
			if(postType ==1){
	    		var arr = text.split('<div id=\"previewImages_lp1\" ');
	    		var regex = /src="([^"]+)"/;
	    		var tempVal = arr[0];
	            var src = tempVal.split(regex)[1];
	            tempVal = tempVal.replace(/(<iframe[^>]+>)|(<\/iframe>)/gi,src); 
	    		var tempText = tempVal;

	    		if(arr[1] != undefined){
	    			var imgArr = text.indexOf('<div id=\"previewImages_lp1\" ');
		    		var tempPrev = '<p></p><div id=\"previewImages_lp1\" '+arr[1];
	    		}
	    	}
	    	
            tempRmLink = tempText.replace(/(<a[^>]+>)|(<\/a>)/gi,""); 
			var str = $.trim(tempRmLink.replace(/\n\n\n+/g, '\n\n'));
			splitTxt = str.split(/\n/g);
			tempStr = splitTxt.shift() + '\n';
			if(tempStr !== '' && splitTxt.length > 4 ){
				for (i = 0; i < 4; i++) {
        			tempStr += '<br />' + splitTxt.shift();
        		} 
			} else {
				tempStr = str.replace(/\n/g,'<br />');
			}
			if (isNaN(length))
            length = 10;

			
        	end = "<a class='morelink' href='javascript:void(0);' postid='"+postId+"' postType='"+postType+"'>"+seeText+"</a>";	
        	
        	if ((tempStr.length <= length || tempStr.length - end.length <= length) && splitTxt.length < 3) {
        		//URLs starting with http://, https://, file:// or ftp://
				replacePattern1 = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
				tempStr = tempStr.replace(replacePattern1, '<a class="sitelink" href=\"$1\" target=\"_blank\">$1</a>');

				//URLs starting with "www." (without // before it, or it'd re-link the ones done above).
				replacePattern2 = /(^|[^\/f])(www\.[\S]+(\b|$))/gim;
				tempStr = tempStr.replace(replacePattern2, '$1 <a class="sitelink" href=\"http://$2\" target=\"_blank\">$2</a>');
				return HTMLtoXML(tempStr + tempPrev) ;
	        }
	        else {
	        	//URLs starting with http://, https://, file:// or ftp://
				replacePattern1 = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
				tempStr = tempStr.replace(replacePattern1, '<a class="sitelink" href=\"$1\" target=\"_blank\">$1</a>');

	            // //URLs starting with "www." (without // before it, or it'd re-link the ones done above).
				replacePattern2 = /(^|[^\/f])(www\.[\S]+(\b|$))/gim;
				tempStr = tempStr.replace(replacePattern2, '$1 <a class="sitelink" href=\"http://$2\" target=\"_blank\">$2</a>');
	        	return HTMLtoXML(String(tempStr).substring(0, length-end.length) + end + tempPrev);
	        }	
		} else {
			return tempStr;
		}
	};
});

app.filter('dateFormat', function($filter)
{
	return function(datetext)
	{
		if(datetext == null){ return ""; } 
		var _date = $filter('date')(new Date(datetext.replace(/-/g, '/')), 'dd-MM-yyyy');
		return _date.toUpperCase();
	};
});

app.filter('panFormat', function()
{
	return function(panNumber)
	{
		if(panNumber == null){ return ""; } 
		return panNumber.substr(-4, 4);
	};
});

app.filter('expirationPanFormat', function()
{
	return function(expirDate)
	{
		if(expirDate == null){ return ""; } 
		var month = expirDate.substr(-2, 2);
		var year = expirDate.substring(0, expirDate.length - 2);
		var formatPan = month + '/' + year;
		return formatPan;
	};
});
// filter is for comment anchor link
app.filter('activateLink', function () {
    return function (text) {
    	var tempText = text;
		tempText = tempText.replace(/ /g, '\u00a0');
		//URLs starting with http://, https://, file:// or ftp://
		replacePattern1 = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
		tempText = tempText.replace(replacePattern1, '<a class="sitelink" href=\"$1\" target=\"_blank\">$1</a>');

		//URLs starting with "www." (without // before it, or it'd re-link the ones done above).
		replacePattern2 = /(^|[^\/f])(www\.[\S]+(\b|$))/gim;
		tempText = tempText.replace(replacePattern2, '$1 <a class="sitelink" href=\"http://$2\" target=\"_blank\">$2</a>');
		return tempText ;
	};	
});


/* filter to format date of post*/
app.filter('postDateFormat', function($filter)
{
	return function(input)
	{
		if(input == null){ return ""; } 
		var date1 = input.trim().split(" ");
		var finaldate = date1[0] + "T" + date1[1];
		var _pdate = $filter('date')(finaldate,'dd MMM | HH:mm');
		return _pdate;
	};
});

app.filter('monthYearDateFormat', function(){
	return function(dateText){
		var monthName = [ "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December" ];
    	return monthName[parseInt(dateText.substring(5,7))-1] + "-" + dateText.substring(0,4);
	}
});

app.filter('reverse', function() {
	return function(items) {
		return items.slice().reverse();
	};
});
app.filter('formatNum', function() {
	return function(num) {
		return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1.");
	};
});
app.filter('truncateNum', function() {
	return function(trunnumber) {
		if( !trunnumber || trunnumber  === undefined ) return 0;
		var num = trunnumber.toString();
	        if(num.indexOf(".") > 0){ 
	            num = num.slice(0, (num.indexOf("."))+3);
	        }
        return  num;
	};
});
app.filter('hobbyList', function() {
  return function(text) {
  if(text != undefined && text != '') {
  return text.split(",");  
  } else {
   return text;
  }
   };
});

/* filter to format date of distory detail page*/
app.filter('historyDetailDate', function($filter)
{
	return function(input)
	{
		if(input == null){ return ""; } 
		
		var _pdate = $filter('date')(new Date(input),'dd/mm/yy:HH:mm');
		return _pdate;
	};
});

/* filter to format date of history list page and txn in progress*/
app.filter('historyListDate', function($filter)
{
	return function(input)
	{
		if(input == null){ return ""; } 
		
		var _pdate = $filter('date')(new Date(input),'dd-MM-yyyy');
		return _pdate;
	};
});

app.filter('dateFormat', function($filter){
	return function(input)
	{
		if(input == null){ return ""; } 
		var _pdate = input.substring(8,10)  + input.substring(4,7) + '-' + input.substring(0,4) ;
		return _pdate;
	};
});

app.filter('discountFilter', function($filter){
	return function(input)
	{
		if(input == null){
			return "0%"; 
		} else{
			return input + "%";
		}
	};
});

/* filter to format date of history list page and txn in progress*/
app.filter('txnPrgsDate', function($filter)
{
	return function(input)
	{
		if(input == null){ return ""; } 
		
		var _pdate = $filter('date')(new Date(input),'hh:mm a dd MMM yyyy');
		return _pdate;
	};
});

/* filter to format date of paypal account listing in shop wallet*/
app.filter('paypalDate', function($filter)
{
	return function(input)
	{
		if(input == null){ return ""; } 
		
		var _pdate = $filter('date')(new Date(input),'dd-MM-yyyy');
		return _pdate;
	};
});

app.filter('paginationFilter', function() {
  return function(input, start) {
    start = start || 0;
    input = input || '';
    start = parseInt(start, 10);
    if (start !== undefined && input !== undefined) {
        return input.slice(start);
    } else {
        return '';
    }
  };
});

app.filter('spliceChar', function() {
  return function(input, limit) {
  	var limit = 4;
    if (limit !== undefined && input !== undefined) {
        return input.substr(input.length - limit);
    } else {
        return '';
    }
  };
});

app.filter('setDecimal', function ($filter) {
    return function (input) {
        if (isNaN(input)) return input;
        else
        return input.toFixed(3);
    };
});

app.service('SingleMediaDetailService', function ($http, $timeout) {
    return {
        getMediaInfo : function(opt, callback) { 
            var url = APP.service.singlephotomediadetails+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        addImgModalComment : function(opt, callback) { 
            var url = APP.service.addComment+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        DeleteImgModalComment : function(opt, callback) { 
            var url = APP.service.DeleteComment+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        ModifyImgModalComment : function(opt, callback) { 
            var url = APP.service.ModifyComment+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    }
});
app.service('AffiliatedkService',['$http', '$timeout', function ($http, $timeout) {
    return {
        getCitizenAffiliates : function(opt, callback) { 
            var url = APP.service.getCitizenAffiliates+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getBrokerAffiliates : function(opt, callback) { 
            var url = APP.service.getBrokerAffiliates+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getShopAffiliates : function(opt, callback) { 
            var url = APP.service.getShopAffiliates+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getCitizenAffiliateCount : function(opt, callback) {
            var url = APP.service.getCitizenAffiliateCount+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getShopAffiliateCount : function(opt, callback) {
            var url = APP.service.getShopAffiliateCount+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getBrokerAffiliateCount : function(opt, callback) {
            var url = APP.service.getBrokerAffiliateCount+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getAllcounts : function(opt, callback) {
            var url = APP.service.getAllcounts+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    }
}]);
app.service('AlbumService',['$http', '$q', function ($http, $q) {
    return {        
        createAlbum: function(opt, callback){
            var url = APP.service.createAlbum + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        uploadmediaAlbum: function(opt, file, callback){
            var url = APP.service.uploadmediaAlbum + "?access_token=" + APP.accessToken;
            doPostUploadWithMedia($http, url, opt, file, function(data) {
                callback(data);
            });
        },
        finalMediaAlbum: function(opt, callback){
            var url = APP.service.uploadmediaAlbum + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        albumListing: function(opt, callback){
            var url = APP.service.albumListing + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteAlbum: function(opt, callback){
            var url = APP.service.deleteAlbum + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        viewAlbum: function(opt, callback){
            var url = APP.service.viewAlbum + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        countPhoto: function(opt, callback){
            var url = APP.service.countPhoto + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteMediaAlbum: function(opt, callback){
            var url = APP.service.deleteMediaAlbum + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
         setuserprofileimages: function(opt, callback){
            var url = APP.service.setuserprofileimages + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        friendSuggest: function(opt,callback){
           var url = APP.service.searchFriends + "?access_token=" + APP.accessToken; 
           doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        photoTaging: function(opt,callback){
            var url = APP.service.tagAblumPhoto + "?access_token=" + APP.accessToken; 
           doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getTaggedPhoto: function(opt,callback){
            var url = APP.service.getTaggedPhoto + "?access_token=" + APP.accessToken; 
           doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        removeTaggedPhoto: function(opt,callback){
            var url = APP.service.removeTaggedPhoto + "?access_token=" + APP.accessToken; 
           doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updateAlbum: function(opt, callback){
            var url = APP.service.updateAlbum + "?access_token=" + APP.accessToken; 
           doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);
	

 

app.service('BLShopService',['$http', function ($http) {
    return {
    	getPublicShops: function(opt, callback) { 
            var url = APP.service.getblShops;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        } ,
         getShopsDetail: function(opt, callback) { 
            var url = APP.service.getblDetailShops;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        } , 
         getShopAlbumDetail: function(opt, callback) { 
            var url = APP.service.getblAlbumDetailShops;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        } ,
         getShopPostDetail: function(opt, callback) { 
            var url = APP.service.getblPostDetailShops;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }  ,     
        getShopPicturesDetail: function(opt, callback) { 
            var url = APP.service.getblPicturesList;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        } ,
        getSearchStoreDetail: function(opt, callback) { 
            var url = APP.service.getSearchStoreDetail;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        } ,
        getCommentsStoreDetail: function(opt, callback) { 
            var url = APP.service.getCommentsStoreDetail;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        } ,
        getMapPublicDetail: function(opt, callback) { 
            var url = APP.service.getMapPublicDetail;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        } 
    };
}]);
app.service('BrokerProfileService',['$http', '$q', function ($http, $q) {
    return {        
        brokerMultiprofile: function(opt, callback){
            var url = APP.service.brokerMultiprofile + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);
	

 

app.service('CitizenWallet', ['$http', '$q', function ($http, $q) {
    return {        
        getCitizenCredits: function(opt, callback){
            var url = APP.service.batchApplane + "?access_token=" + APP.accessToken + "&session_id=" + APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getCitizenDetails: function(opt, callback){
            var url = APP.service.batchApplane + "?access_token=" + APP.accessToken + "&session_id=" + APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getCitizenWalletCoupons: function(opt, callback){
            var url = APP.service.batchApplane + "?access_token=" + APP.accessToken + "&session_id=" + APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getCitizenWalletHistory: function(opt, callback){
            var url = APP.service.batchApplane + "?access_token=" + APP.accessToken + "&session_id=" + APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getCitizenIncome: function(opt, callback){
            var url = APP.service.getApplaneData + "?access_token=" + APP.accessToken + "&session_id=" + APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);


app.service('storeHistorySelection', ['$location', function($location){
    var storage = false;
    return {
        storeTodayYouGain: function(){
            storage = true;
            $location.path('/wallets')
        },
        getStoreage: function(){
            return storage;
        },
        clearStorage : function(){
            storage = false;
        }
    } 
}]);
	

 

app.service('CommerialService', ['$http', '$timeout', function($http, $timeout) {
//functions to call the service from the third party api
    return {
    	launchCoupens : function(formData, callback) { 
            var url = APP.service.getUserGroups+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        varifyPaypal : function(formData, callback) { 
            var url = APP.service.verifiePaypals+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getSubscription : function(formData, callback) { 
            var url = APP.service.getSubscriptionpaymentUrl+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        unSubscribes : function(formData, callback) { 
            var url = APP.service.unSubscribes+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        returnPaymentCancel : function(formData, callback) { 
            var url = APP.service.returnPaymentCancel+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    }
    
}]);
app.service('GroupService',['$http', '$timeout', function ($http, $timeout) {
//functions to call the service from the third party api
    return {
        getUserGroups : function(formData, callback) { 
            var url = APP.service.getUserGroups+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getInviteGroups : function(formData, callback) { 
            var url = APP.service.getInviteGroups+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        createGroup : function(opt, file, callback) {
            var url = APP.service.createGroup+"?access_token="+APP.accessToken;
            doPostWithFile($http, url, opt, file, function(data) {
                callback(data);
            });
        },
        updateGroup : function(opt, file, callback) {
            var url = APP.service.updateGroup+"?access_token="+APP.accessToken;
            doPostWithFile($http, url, opt, file, function(data) {
                callback(data);
            });
        },
        deleteGroup : function(formData, callback) {
            var url = APP.service.deleteGroup+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getGroupDetail : function(opt, callback) {
            var url = APP.service.getGroupDetail+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchGroup : function(formData, callback) {
            var url = APP.service.searchGroup+"?access_token="+APP.accessToken;
            var opt = formData;
            var response = doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getAllClubNotifications : function(opt, callback) {
            var url = APP.service.getPublicGroupNotification+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        responseClubNotification : function(opt, callback) {
            var url = APP.service.responseClubNotification+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getGroupNotifications : function(opt,callback) {
            var url = APP.service.getSpecificClubNotication+"?access_token="+APP.accessToken;
            var response = doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        responseGroupJoin : function(formData, callback) {
            var url = APP.service.responseGroupJoin+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
             });
        },
        assignRoleToGroup : function(formData, callback) {
            var url = APP.service.assignRoleToGroup+"?access_token="+APP.accessToken;
            var opt = formData;
             doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        joinPublicGroup : function(formData, callback) {
            var url = APP.service.joinPublicGroup+"?access_token="+APP.accessToken;
            var opt = formData;
             doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        joinPrivateGroups : function(formData, callback) {
            var url = APP.service.joinPrivateGroups+"?access_token="+APP.accessToken;
            var opt = formData;
             doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        /** Club Album service */
        createClubAlbum: function(opt, callback) {
            var url = APP.service.createClubAlbum + "?access_token=" + APP.accessToken;
             doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getClubAlbum: function(opt, callback) {
            var url = APP.service.getClubAlbums + "?access_token=" + APP.accessToken;
             doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteClubAlbum: function(opt, callback) {
            var url = APP.service.deleteClubAlbum + "?access_token=" + APP.accessToken;
             doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteClubAlbumMedia: function(opt, callback) {
            var url = APP.service.deleteClubAlbumMedia + "?access_token=" + APP.accessToken;
             doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        viewClubAlbum: function(opt, callback) {
            var url = APP.service.viewClubAlbum + "?access_token=" + APP.accessToken;
             doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        uploadMediaInClubAlbumFinal: function(opt, callback) {
            var url = APP.service.uploadMediaInClubAlbum + "?access_token=" + APP.accessToken;
             doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        uploadMediaInClubAlbum: function(opt, file, callback) {
            var url = APP.service.uploadMediaInClubAlbum + "?access_token=" + APP.accessToken;
             doPostWithClubAlbumMedia($http, url, opt, file, function(data) {
                callback(data);
            });
        },
         setClubProfileImage: function(opt, callback){
            var url = APP.service.setClubProfileImage + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
         uploadClubCover: function(opt, file, callback){
            var url = APP.service.uploadClubCover + "?access_token=" + APP.accessToken;
            doPostWithFile($http, url, opt, file, function(data) {
                callback(data);
            });
        },
        unjoinclubs : function(opt, callback) {
            var url = APP.service.unjoinclubs+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteClubMember : function(opt, callback) {
            var url = APP.service.deleteClubMember+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getUserFriendGroups : function(formData, callback) { 
            var url = APP.service.getUserFriendGroups+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        cancelGroup : function(formData, callback) { 
            var url = APP.service.cancelinvitationlink+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getClubPostDetail : function(formData, callback) { 
            var url = APP.service.getClubPostDetail+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        setClubMediaCoordinate : function(opt, callback) {
            var url = APP.service.getClubMediaCoordinate + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
    };
}]);
	
app.service('PostService',['$http', function($http) {

    return {
        createPost : function(opt, callback) {
            var url = APP.service.createGroupPost+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        listPost : function(opt, callback) {
            var url = APP.service.listGroupPosts+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updatePost : function(opt, file, callback) {
            var url = APP.service.updateGroupPost+"?access_token="+APP.accessToken;
            doPostPostOnGroupWithFile($http, url, opt, file, function(data) {
                callback(data);
            });
        },
        deletePost : function(opt, callback) {
            var url = APP.service.deleteGroupPost+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deletePostMedia : function(opt, callback) {
            var url = APP.service.deleteGroupPostMedia+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    }
}]);


app.service('CommentService',['$http', function($http) {
    //function to call the third party api
    return {
        createCommentWithImage : function(opt, file, callback) {
            var url = APP.service.createGroupComment+"?access_token="+APP.accessToken;
            doPostCommentOnGroupWithFile($http, url, opt, file, function(data){
                callback(data);
            });
        },
        createComment : function(opt, callback) {
            var url = APP.service.createGroupComment+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data){
                callback(data);
            });
        },
        listComment : function(opt, callback) {
            var url = APP.service.listGroupComments+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updateComment : function(opt, file, callback) {
            var url = APP.service.updateGroupComment+"?access_token="+APP.accessToken;
            doPostCommentOnGroupWithFile($http, url, opt, file, function(data){
                callback(data);
            });
        },
        deleteComment : function(opt, callback) {
            var url = APP.service.deleteGroupComment+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);

app.service('MediaService',['$http', '$q', function ($http, $q) {
    return {        
        uploadmedia: function(opt, callback){
            var url = APP.service.uploadmedia;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        listmedia: function(opt, callback){
            var url = APP.service.listmedia;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deletemedia: function(opt, callback){
            var url = APP.service.deletemedia;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchmedia: function(opt, callback){
            var url = APP.service.searchmedia;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }  
        
    };
}]);
	

 

app.service('MessageService',['$http', '$q', function ($http, $q) {
    
    return {        
        createMessage: function(opt, file, callback){
            var url = APP.service.createMessage + "?access_token=" + APP.accessToken;
            doPostReplyWithMedia($http, url, opt, file, function(data) {
                callback(data);
            });
        },
        groupMessageSends: function(opt, file, callback){
            var url = APP.service.groupMessageSends + "?access_token=" + APP.accessToken;
            doPostReplyWithMedia($http, url, opt, file, function(data) {
                callback(data);
            });
        },
        deleteMessage: function(opt, callback){
            var url = APP.service.deleteMessage + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteGroupMessages: function(opt, callback){
            var url = APP.service.deleteGroupMessages + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        messageListing: function(opt, callback){
            var url = APP.service.messageListing + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        listGroupMessages: function(opt, callback){
            var url = APP.service.listGroupMessages + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        readMessage: function(opt, callback){
            var url = APP.service.readMessage + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        readGroupMessages: function(opt, callback){
            var url = APP.service.readGroupMessages + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        replyMessage: function(opt, file, callback){
            var url = APP.service.replyMessage + "?access_token=" + APP.accessToken;
            doPostReplyWithMedia($http, url, opt, file, function(data) {
                callback(data);
            });
        },
        searchMessage: function(opt, callback){
            var url = APP.service.searchMessage + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updateMessage: function(opt, callback){
            var url = APP.service.updateMessage + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        sendemailMessage: function(opt, callback){
            var url = APP.service.sendemailMessage + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchFriends: function(opt, callback){
            var url = APP.service.searchFriends + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        messageInbox: function(opt, callback){
            var url = APP.service.messageInbox + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        listGroupInbox: function(opt, callback){
            var url = APP.service.listGroupInbox + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchUserThread: function(opt, callback){
            var url = APP.service.searchUserThread + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        listusermessages: function(opt, callback){
            var url = APP.service.listusermessages + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        listUnReadMessages: function(opt, callback){
            var url = APP.service.listunreadmessages + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        markReadAllMessages: function(opt, callback){
            var url = APP.service.markreadallmessages + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getCurrentUserMessage: function() {
            return APP.currentUser;
        },
        listGroupUnreadMessages: function(opt, callback){
            var url = APP.service.listGroupUnreadMessages + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        listGroups: function(opt, callback){
            var url = APP.service.listgroups + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        listGroupMessages: function(opt, callback){
            var url = APP.service.listGroupMessages + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchThreadMessages: function(opt, callback){
            var url = APP.service.searchThreadMessages + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        removeGroupUsers: function(opt, callback){
            var url = APP.service.removeGroupUsers + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);
app.service('saveFriendId', function() {

    var thisFriendId = 0;
    var thisThreadList = 0;
    return {
        saveFriend : function(friendId){
            thisFriendId = friendId;

        },
        getFriendId : function(){
            return thisFriendId;
        },
        saveTreadId : function(thread){
            thisThreadList = thread;
        },
        getThreadId : function(){
            return thisThreadList;
        },
    };
});

app.service('saveFriendDate', function() {

    var friendData = {};
    return {
        saveFriendObject : function(friendObject){
            friendData = friendObject;
        },
        getFriendIdObject : function(){
            return friendData;
        },
        clearFrindObject : function(){
            friendData = {};   
        }

    };
});
app.service('threadAndPass', function() {
    var thisThreadId = 0;
    var thisFriend = 0;
    return {
        saveThreadAndFriend: function(threadId, friendId){
            thisThreadId = threadId;
            thisFriend = friendId;
        },
        getThread : function(){
            return thisThreadId;
        },
        getFriend : function(){
            return thisFriend;
        },
        clearThreadAndFriend : function(){
            thisThreadId = 0;
            thisFriend = 0;
        }
    };
});

	

 

app.service('NotificationService',['$http', '$q', function ($http, $q) {
//functions to call the service from the third party api
    return {
        sendEmailNotification : function(formData, callback) { 
            var url = APP.service.sendEmailNotification+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getEmailNotification : function(formData, callback) { 
            var url = APP.service.getEmailNotification+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        readUnreadEmailNotifications : function(formData, callback) { 
            var url = APP.service.readUnreadEmailNotifications+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteEmailNotifications : function(formData, callback) { 
            var url = APP.service.deleteEmailNotifications+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchEmailNotifications : function(formData, callback) { 
            var url = APP.service.searchEmailNotifications+"?access_token="+APP.accessToken;
            var opt = formData;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);

app.service('OfferService', ['$http', function ($http) {
    return {
        getApplaneData: function(opt, callback) {
            var url = APP.service.getApplaneData + "?access_token=" + APP.accessToken + "&session_id=" + APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
        addUpdateApplaneData: function(opt, callback) {
            var url = APP.service.addUpdateApplaneData + "?access_token=" + APP.accessToken + "&session_id=" + APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteShopOfferMedias: function(opt, callback) {
            var url = APP.service.deleteShopOfferMedias + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchstoreondimensions : function(opt , callback){
            var url = APP.service.searchstoreondimensions+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getApplaneInvoke: function(opt, callback) { 
            var url = APP.service.getApplaneInvoke+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
        buyshoppingcard : function(opt, callback) { 
            var url = APP.service.buyshoppingcard+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        responsebuycards : function(opt, callback) { 
            var url = APP.service.responsebuycards+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);


app.service('ProfileService',['$http', function ($http) {
    return {
        getProfile: function(opt, callback) { 
            var url = APP.service.getProfile+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchSuggestion: function(opt , callback){
            var url = APP.service.suggestionmultiprofiles+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        viewMultiProfile: function(opt, callback) { 
            var url = APP.service.viewMultiProfile+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updateProfileDetail: function(opt, idcard, ssn, callback) { 
            var url = APP.service.updatemultiprofiles+"?access_token="+APP.accessToken;
            updateProfileWithFiles($http, url, opt, idcard, ssn, function(data) {
                callback(data);
            });
        },
        deleteProfile: function(opt, callback) { 
            var url = APP.service.deleteProfile+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchUser: function(opt, callback) { 
            var url = APP.service.searchUser+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchFriend: function(opt, callback) { 
            var url = APP.service.searchFriend+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        friendProfileView: function(opt, callback) { 
            var url = APP.service.friendProfile+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        dashboardPost: function(opt, callback) { 
            var url = APP.service.dashboardpost+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getPendingFreindReq: function(opt, callback) {
            var url = APP.service.getPendingFriendRequest + "?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        acceptFriendRequest: function(opt, callback) {
            var url = APP.service.acceptDenyFriendReq + "?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        rejectFriendRequest: function(opt, callback) {
            var url = APP.service.acceptDenyFriendReq + "?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        sendFriendRequests : function(opt, callback) {
            var url = APP.service.sendFriendRequests + "?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        listDashboardPost: function(opt, callback) { 
            var url = APP.service.listDashboardPost+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteDashboardPost: function(opt, callback) { 
            var url = APP.service.deleteDashboardPost+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updateDashboardPost: function(opt, callback) {
            var url = APP.service.updateDashboardPost+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        createDashboardCommentImage: function(opt,file, callback) { 
            var url = APP.service.createDashboardComment+"?access_token="+APP.accessToken;
            doPostCommentOnDashboardWithFile($http, url, opt, file, function(data) {
                callback(data);
            });
        },
        createDashboardCommentFinal: function(opt, callback) { 
            var url = APP.service.createDashboardComment+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        changePassword : function(opt,callback){
            var url = APP.service.changePassword+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteDashboardComment: function(opt, callback) { 
            var url = APP.service.deleteDashboardComment+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updateDashboardComment: function(opt, callback) { 
            var url = APP.service.updateDashboardComment+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deletePostMedia: function(opt, callback) { 
            var url = APP.service.deletePostMedia+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteDashboardMediaComments: function(opt, callback) { 
            var url = APP.service.dashboardMediaDeleteComments+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        friendAlbumListing: function(opt, callback) { 
            var url = APP.service.albumListing+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        friendAlbumImage: function(opt, callback){
            var url = APP.service.viewAlbum + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        listUnReadMessages: function(opt, callback){
            var url = APP.service.listGroupUnreadMessages + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getDashboardComments: function(opt, callback) { 
            var url = APP.service.getDashboardComments+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        readMessage: function(opt, callback){
            var url = APP.service.readMessage + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        uploadCoverPhoto: function(opt, file, callback){
            var url = APP.service.setUserProfileCover + "?access_token=" + APP.accessToken;
            doPostUploadProfileMedia($http, url, opt, file, function(data) {
                callback(data);
            });
        },
        getFollowers: function(opt, callback) {
            var url = APP.service.getFollowers + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getFollowings: function(opt, callback) {
            var url = APP.service.getFollowings + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        checkfollowUser: function(opt, callback) {
            var url = APP.service.getCheckFollows + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        followUser: function(opt, callback) {
            var url = APP.service.getFollowUser + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        unFollowUser: function(opt, callback) {
            var url = APP.service.getUnFollowUser + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getClientInformation: function(opt, callback) {
            var url = APP.service.getClientInformation + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getConnectedProfil: function(opt, callback) {
            var url = APP.service.getConnectedProfile + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getIfFriendRequestAccepted: function(opt, callback) {
            var url = APP.service.getFriendAcceptedNotification + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getIfClubRequestAccepted: function(opt, callback) {
            var url = APP.service.getClubAcceptedNotification + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getIfShopRequestAccepted: function(opt, callback) {
            var url = APP.service.getIfShopRequestAccepted + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getIfBrokerRequestAccepted: function(opt, callback) {
            var url = APP.service.getIfBrokerRequestAccepted + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        markReadNotification: function(opt, callback) {
            var url = APP.service.markReadNotification + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getShopAprovalRejectNoti: function(opt, callback) {
            var url = APP.service.getShopAprovalRejectNoti + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getAllTypeNotification: function(opt, callback) {
            var url = APP.service.getAllTypeNotification + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getDashboardWallFeeds: function(opt, callback) { 
            var url = APP.service.getDashboardWallFeeds+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchAllProfile: function(opt, callback) { 
            var url = APP.service.getAllProfiles+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        saveUserEducation: function(opt, callback) {
            var url = APP.service.saveUserEducation+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        saveUserProfession: function(opt, callback) { 
            var url = APP.service.saveUserProfession+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        saveRelative: function(opt, callback) { 
            var url = APP.service.saveRelative+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        selectFriend: function(opt, callback) { 
            var url = APP.service.selectFriend+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchCatagory: function(opt, callback) { 
            var url = APP.service.searchCatagory+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchCatagoryKeyword: function(opt, callback) { 
            var url = APP.service.searchCatagoryKeyword+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        saveCategory: function(opt, callback) { 
            var url = APP.service.saveCategory+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getCategories: function(opt, callback) { 
            var url = APP.service.getCategory+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteCategory: function(opt, callback){
             var url = APP.service.deleteusercategorykeywords+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteProfession: function(opt, callback){
             var url = APP.service.deleteProfession+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteEducation: function(opt, callback){
             var url = APP.service.deleteEducation+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteRelative: function(opt, callback){
             var url = APP.service.deleteRelative+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getrelationtype: function(opt, callback){
            var url = APP.service.getrelationtype+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        addUserSkills: function(opt, callback){
            var url = APP.service.addUserSkills+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getUserSkills: function(opt, callback){
            var url = APP.service.getUserSkills+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updateEducationVisibility : function(opt, callback){
            var url = APP.service.updateEducationVisibility+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updateProfessionVisibility : function(opt, callback){
            var url = APP.service.updateProfessionaVisibility+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchFriends: function(opt, callback){
            var url = APP.service.searchFriends + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        removeTagedFriends : function(opt, callback){
            var url = APP.service.removeTaggedFriends + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        rateThis : function(opt, urlOption, callback){
            var url;
            if(urlOption === "add"){
                url = APP.service.rateThis + "?access_token=" + APP.accessToken;
            }else if(urlOption === "update"){
                url = APP.service.updateRating + "?access_token=" + APP.accessToken;
            }
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        removeRating : function(opt, callback){
            var url = APP.service.removeRating + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getDashboardPostDetail : function(opt, callback){
            var url = APP.service.getDashboardPostDetail + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        findPeople : function(opt, callback){
            var url = APP.service.findPeople + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        notificationCount : function(opt, callback){
            var url = APP.service.getAllTypeNotiCount + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getAllGroupNotification : function(opt, callback){
            var url = APP.service.getAllGroupNotification + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchAllFriend : function(opt, callback) {
            var url = APP.service.getTaggingFriend + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        markAsDelete : function(opt, callback) {
            var url = APP.service.markDeleteNotification + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getAllsearchProfiles : function(opt, callback) {
            var url = APP.service.searchAllProfiles + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        friendRequestStatus : function(opt, callback) {
            var url = APP.service.friendRequestStatus + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        sendMediaCoordinate : function(opt, callback) {
            var url = APP.service.getMediaCoordinates + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        addKeywords : function(opt, callback) {
            var url = APP.service.addKeywords + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updateFbAccessToken: function(opt, callback) {
            var url = APP.service.updateFbAccessToken + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updatePostPrivacy: function(opt, callback) {
            var url = APP.service.updateDashboardPostACLs + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getTodayCredit: function(opts, callback) { 
            var url = APP.service.getApplaneData+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opts, function(data) {
                callback(data);
            });
        }
    };
}]);

app.service('ProfileImageService',['$http', '$q', function ($http, $q) {
    return {        
        uploaduserprofileimages: function(opt, file, callback){
            var url = APP.service.uploaduserprofileimages + "?access_token=" + APP.accessToken;
            doPostUploadProfileMedia($http, url, opt, file, function(data) {
                callback(data);
            });
        },
        viewmultiprofiles: function(opt, callback){
            var url = APP.service.viewmultiprofiles + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }       
    };
}]);
	

 

app.service('PublicService', ['$http', '$timeout', function ($http, $timeout) {
    return {
        getPublicPost : function(opt, callback) { 
            var url = APP.service.getPublicPost;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    }
}]);

//common function to call the post services
function callLogServiceOnError($http, actionUrl, resCode, reqObj, reqContentType, resObj, config){
    var opt = {};
    opt.response_code = '';
    opt.page_name = window.location.href; 
    opt.action_name = actionUrl; 
    opt.request_object = JSON.stringify(reqObj);
    opt.response_object = JSON.stringify(resObj);
    opt.request_content_type = JSON.stringify(reqContentType);
    opt.response_content_type = JSON.stringify(config.headers);
    opt.header_str = resCode;
    var url = APP.service.saveLogToServer;
    $http({
        method: "POST",
        url: url,
        data    : {reqObj: opt},
        headers : { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }
    })
    .success( function(data){
        //Log saved on the server side
    })
    .error(function(data, status, headers, config){
        if(status === 401) {
            //Something wnet wrong
        }
    });
}

//common function to call the post services
function doPost($http, url, opt, callback){
    $http({
        method: "POST",
        url: url,
        data    : {reqObj: opt},
        headers : { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }
    })
    .success( function(data, status, headers, config){      
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, {reqObj: opt}, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);   
        if(status === 403) { // Check if the request is valid not by hacker 
            if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
                if(TrailExpiredModal){
                    angular.element(document.getElementById('AppController')).scope().checkTrialExpired();
                }    
            }else{
                notAuthorizedThisRequest();
            }
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });
};

//common function to call the post services with file object
function updateProfileWithFiles($http, url, opt, idcard, ssnfile, callback){
    var fd = new FormData();
    fd.append('idcard', idcard);
    fd.append('ssn', ssnfile);
    fd.append('reqObj', angular.toJson(opt));
    
    $http({
        method: "POST",
        url: url,
        data    : fd,
        headers: {'Content-Type': undefined},                 
        transformRequest: angular.identity,
    })
    .success( function(data){
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, {reqObj: opt}, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);
        if(status === 403) { // Check if the request is valid not by hacker 
            if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
                if(TrailExpiredModal){
                    angular.element(document.getElementById('AppController')).scope().checkTrialExpired();
                }
            }else{
                notAuthorizedThisRequest();
            }
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });
}

//common function to call the post services with file object
function doPostWithFile($http, url, opt, file, callback){
    var fd = new FormData();
    fd.append('group_media', file);
    fd.append('reqObj', angular.toJson(opt));
    
    $http({
        method: "POST",
        url: url,
        data    : fd,
        headers: {'Content-Type': undefined},                 
        transformRequest: angular.identity,
    })
    .success( function(data){
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, {reqObj: opt}, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);
        if(status === 403) { // Check if the request is valid not by hacker 
            if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
                if(TrailExpiredModal){
                    angular.element(document.getElementById('AppController')).scope().checkTrialExpired();
                }
            }else{
                notAuthorizedThisRequest();
            }
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });
}

//common function to call the post services with file object
function doPostUploadWithMedia($http, url, opt, files, callback) {
    var fd = new FormData();
    angular.forEach(files, function(file) {
        fd.append('user_media[]', file);
    });
    fd.append('reqObj', angular.toJson(opt));
    
    $http({
        method: "POST",
        url: url,
        data    : fd,
        headers: {'Content-Type': undefined},                 
        transformRequest: angular.identity,
    })
    .success( function(data){
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, {reqObj: opt}, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);
        if(status === 403) { // Check if the request is valid not by hacker 
            if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
                if(TrailExpiredModal){
                    angular.element(document.getElementById('AppController')).scope().checkTrialExpired();
                }
            }else{
                notAuthorizedThisRequest();
            }
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });

}

//common function to call the post services with file object
function doPostUploadProfileMedia($http, url, opt, file, callback) {
    var fd = new FormData();
    fd.append('user_media', file);
    fd.append('reqObj', angular.toJson(opt));
    
    $http({
        method: "POST",
        url: url,
        data    : fd,
        headers: {'Content-Type': undefined},                 
        transformRequest: angular.identity,
    })
    .success( function(data){
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, {reqObj: opt}, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);
        if(status === 403) { // Check if the request is valid not by hacker 
            if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
                if(TrailExpiredModal){
                    angular.element(document.getElementById('AppController')).scope().checkTrialExpired();
                }
            }else{
                notAuthorizedThisRequest();
            }
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });

}

//common function to call the post services with file object for store album and store post with image
function doPostUploadWithStoreMedia($http, url, opt, file, callback) {
    var fd = new FormData();
    fd.append('store_media[]', file);
    fd.append('reqObj', angular.toJson(opt));
    
    $http({
        method: "POST",
        url: url,
        data    : fd,
        headers: {'Content-Type': undefined},                 
        transformRequest: angular.identity,
    })
    .success( function(data){
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, {reqObj: opt}, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);
        if(status === 403) { // Check if the request is valid not by hacker 
            if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
                if(TrailExpiredModal){
                    angular.element(document.getElementById('AppController')).scope().checkTrialExpired();
                }
            }else{
                notAuthorizedThisRequest();
            }
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });

}

//common function to call the post services with file object
function doPostReplyWithMedia($http, url, opt, file, callback){
    var fd = new FormData();
    fd.append('commentfile[]', file);
    fd.append('reqObj', angular.toJson(opt));
    
    $http({
        method: "POST",
        url: url,
        data    : fd,
        headers: {'Content-Type': undefined},                 
        transformRequest: angular.identity,
    })
    .success( function(data){
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, {reqObj: opt}, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);
        if(status === 403) { // Check if the request is valid not by hacker 
            if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
                if(TrailExpiredModal){
                    angular.element(document.getElementById('AppController')).scope().checkTrialExpired();
                }
            }else{
                notAuthorizedThisRequest();
            }
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });
}

//common function to call the group post services with file object
function doPostPostOnGroupWithFile($http, url, opt, files, callback){
    var fd = new FormData();
    angular.forEach(files, function(file) {
        fd.append('post_media[]', file);
    });
    fd.append('reqObj', angular.toJson(opt));
    
    $http({
        method: "POST",
        url: url,
        data    : fd,
        headers: {'Content-Type': undefined},                 
        transformRequest: angular.identity,
    })
    .success( function(data){
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, {reqObj: opt}, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);
        if(status === 403) { // Check if the request is valid not by hacker 
            if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
                if(TrailExpiredModal){
                    angular.element(document.getElementById('AppController')).scope().checkTrialExpired();
                }
            }else{
                notAuthorizedThisRequest();
            }
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });
}

//common function to call the group comment services with file object
function doPostCommentOnGroupWithFile($http, url, opt, file, callback){
    var fd = new FormData();
    fd.append('commentfile[]', file);
    fd.append('reqObj', angular.toJson(opt));
    
    $http({
        method: "POST",
        url: url,
        data    : fd,
        headers: {'Content-Type': undefined},                 
        transformRequest: angular.identity,
    })
    .success( function(data){
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, {reqObj: opt}, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);
        if(status === 403) { // Check if the request is valid not by hacker 
            if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
                if(TrailExpiredModal){
                    angular.element(document.getElementById('AppController')).scope().checkTrialExpired();
                }
            }else{
                notAuthorizedThisRequest();
            }
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });
}

//function to call the post media file for store profile
function doUploadStoreProfilePost($http, url, opt, file, callback){
    var fd = new FormData();
    fd.append('store_media', file);
    fd.append('reqObj', angular.toJson(opt));
    $http({
        method: "POST",
        url: url,
        data    : fd,
        headers: {'Content-Type': undefined},                 
        transformRequest: angular.identity,
    })
    .success( function(data){
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, {reqObj: opt}, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);
        if(status === 403) { // Check if the request is valid not by hacker 
            if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
                if(TrailExpiredModal){
                    angular.element(document.getElementById('AppController')).scope().checkTrialExpired();
                }
            }else{
                notAuthorizedThisRequest();
            }
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });
}

//function to call the comment media
//common function to call the store comment services with file object
function doPostCommentOnStoreWithFile($http, url, opt, file, callback){
    var fd = new FormData();
    fd.append('commentfile[]', file);
    fd.append('reqObj', angular.toJson(opt));
    $http({
        method: "POST",
        url: url,
        data    : fd,
        headers: {'Content-Type': undefined},                 
        transformRequest: angular.identity,
    })
    .success( function(data){
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, {reqObj: opt}, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);
        if(status === 403) { // Check if the request is valid not by hacker 
            if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
                if(TrailExpiredModal){
                    angular.element(document.getElementById('AppController')).scope().checkTrialExpired();
                }
            }else{
                notAuthorizedThisRequest();
            }
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });
}

function doPostWithClubAlbumMedia($http, url, opt, files, callback) {
    var fd = new FormData();
    fd.append('group_media[]', file);
    fd.append('reqObj', angular.toJson(opt));
    
    $http({
        method: "POST",
        url: url,
        data    : fd,
        headers: {'Content-Type': undefined},                 
        transformRequest: angular.identity,
    })
    .success( function(data){
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, {reqObj: opt}, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);
        if(status === 403) { // Check if the request is valid not by hacker 
            if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
                if(TrailExpiredModal){
                    angular.element(document.getElementById('AppController')).scope().checkTrialExpired();
                }
            }else{
                 notAuthorizedThisRequest();
            }
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });
}

//function to call the comment media
//common function to call the store comment services with file object
function doPostCommentOnDashboardWithFile($http, url, opt, file, callback){
    var fd = new FormData();
    fd.append('commentfile[]', file);
    fd.append('reqObj', angular.toJson(opt));
    $http({
        method: "POST",
        url: url,
        data    : fd,
        headers: {'Content-Type': undefined},                 
        transformRequest: angular.identity,
    })
    .success( function(data){
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, {reqObj: opt}, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);
        if(status === 403) { // Check if the request is valid not by hacker 
            if(data.code == 1045 && data.message == "TRIAL_EXPIRED"){
                if(TrailExpiredModal){
                    angular.element(document.getElementById('AppController')).scope().checkTrialExpired();
                }
            }else{
                notAuthorizedThisRequest();
            }
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });
}

//Logout User when accessToken Expired
function accessTokenExpiredLogout() {
    angular.element(document.getElementById('AppController')).scope().logoutWithoutService();
}

function checkTokenNotExpired(data) {
   if( data.hasOwnProperty('error') ) {
      angular.element(document.getElementById('AppController')).scope().wentWrong();
    } else {
        return false;
    }
   //return false;
}

function notAuthorizedThisRequest() {
    angular.element(document.getElementById('AppController')).scope().logoutWithoutService();
    //angular.element(document.getElementById('AppController')).scope().notAuthorisedUser();
};

function doApplanePost($http, url, opt, callback){
   $http({
       method: "POST",
       url: url,
       data    : JSON.stringify(opt),
       headers : { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }
   })
   .success( function(data, status, headers, config){      
       callback(data);
   })
   .error(function(data, status, headers, config){
       callLogServiceOnError($http, url, status, opt, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);  
       if(status === 403) { // Check if the request is valid not by hacker
           notAuthorizedThisRequest();
       } else if(status === 401) {
           accessTokenExpiredLogout();
       }else if(!checkTokenNotExpired(data)) {
           callback(data);
       }
   });
};

function doApplaneUpdatePost($http, url, opt, callback){
    $http({
        method: "POST",
        url: url,
        data    : JSON.stringify(opt),
        headers : { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }
    })
    .success( function(data, status, headers, config){      
        callback(data);
    })
    .error(function(data, status, headers, config){
        callLogServiceOnError($http, url, status, opt, 'application/x-www-form-urlencoded; charset=UTF-8', data, config);   
        if(status === 403) { // Check if the request is valid not by hacker 
            notAuthorizedThisRequest();
        } else if(status === 401) {
            accessTokenExpiredLogout();
        }else if(!checkTokenNotExpired(data)) {
            callback(data);
        }
    });
};
app.service('StoreService',['$http', function ($http) {
    var stId = "";
    var _stData = "";
    return {
    	getStore: function(opt, callback) { 
            var url = APP.service.getStore+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getAllStoreWithChild: function(opt, callback) { 
            var url = APP.service.getStoreWithChild+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        createStore: function(opt, callback) { 
            var url = APP.service.createStore+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        createChildStore: function(opt, callback) { 
            var url = APP.service.createChildStore+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updateStore: function(opt, callback) { 
            var url = APP.service.updateStore+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getCountryList: function(opt, callback) { 
            var url = APP.service.getCountryList;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteStore: function(opt, callback) { 
            var url = APP.service.deleteStore+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        searchStore: function(opt, callback) { 
            var url = APP.service.searchStore+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getStoreDetail: function(opt, callback) { 
            var url = APP.service.storeDetail+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getStoreNotifications: function(opt, callback) { 
            var url = APP.service.getStoreNotification+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        acceptDenyToStoreNotification: function(opt, callback) { 
            var url = APP.service.responseToStoreNoti+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getStoreOwnerId : function(opt) { 
           return stId;
        },
        setStoreOwnerId : function(opt) { 
            stId = opt.storeId;
        },
        setStoreProfileImage: function(opt, callback) { 
            var url = APP.service.setStoreProfileImage+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        uploadStoreProfileimage: function(opt, file, callback) { 
            var url = APP.service.uploadStoreProfileimage+"?access_token="+APP.accessToken;
            doUploadStoreProfilePost($http, url, opt, file, function(data) {
                callback(data);
            });
        },
        searchUser: function(opt, callback) { 
            var url = APP.service.searchUser+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        inviteUserOnStore: function(opt, callback) { 
            var url = APP.service.inviteUserOnStore+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getMobileAppUrl: function(opt, callback) { 
            var url = APP.service.linkMobileApp+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getmapstores: function(opt, callback) { 
            var url = APP.service.getmapstores+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        } ,
        getStoreHistory: function(opt, callback) { 
            var url = APP.service.getStoreHistory+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }, 
        searchshoponmaps: function(opt, callback) { 
            var url = APP.service.searchshoponmaps+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getSubCategoryList: function(opt, callback) { 
            var url = APP.service.getBusinessCategoryList+"?session_id="+APP.currentUser.id;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getLatestAlbumList: function(opt, callback) { 
            var url = APP.service.getLatestAlbumList+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getStorePostDetail : function(opt, callback) { 
            var url = APP.service.getShopPostDetail+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        setStoreMediaCoordinate : function(opt, callback) {
            var url = APP.service.getStoreCoverMediaCoordinates + "?access_token=" + APP.accessToken;
                        doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getShops : function(opt, callback) { 
            var url = APP.service.getShops+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        favouritestores  : function(opt, callback) { 
            var url = APP.service.favouritestores+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        myfavouritestores : function(opt, callback) { 
            var url = APP.service.myfavouritestores+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        unfavouritestores: function(opt, callback) { 
            var url = APP.service.unfavouritestores+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        listcustomersreviews: function(opt, callback) { 
            var url = APP.service.listcustomersreviews+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        removeShopTagg: function(opt, callback) { 
            var url = APP.service.removeShopTagg+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },

        followshops: function(opt, callback) { 
            var url = APP.service.followshops+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        unfollowshops: function(opt, callback) { 
            var url = APP.service.unfollowshops+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        userfollowingshops: function(opt, callback) { 
            var url = APP.service.userfollowingshops+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getfriendboughtonstores: function(opt, callback) { 
            var url = APP.service.getfriendboughtonstores+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        frindboughtcount: function(opt, callback) { 
            var url = APP.service.getApplaneInvoke+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
        SetStoreData: function(opt) {
            _stData = opt;
        },
        getStoreData: function() { 
           return _stData;
        },
        getstorecredit: function(opt, callback) { 
            var url = APP.service.getApplaneInvoke+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getReportTransacation: function(opt, callback) { 
            var url = APP.service.getApplaneData+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);

app.service('StoreCreditCard',['$http', '$q', function ($http, $q) {
    return {        
        getCreditCardLists: function(opt, callback){
            var url = APP.service.creditCardLists + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        setDefaultCard: function(opt, callback){
        	var url = App.service.markDefaultCard + "?access_token=" + APP.accessToken;
        	doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteCard: function(opt, callback){
        	var url = App.service.digitalDeleteCard + "?access_token=" + APP.accessToken;
        	doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        
    };
}]);
	

 

app.service('StoreCreditCard',['$http', '$q', function ($http, $q) {
    return {        
        getCreditCardLists: function(opt, callback){
            var url = APP.service.creditCardLists + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        setDefaultCard: function(opt, callback){
        	var url = APP.service.markDefaultCard + "?access_token=" + APP.accessToken;
        	doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteCard: function(opt, callback){
        	var url = APP.service.digitalDeleteCard + "?access_token=" + APP.accessToken;
        	doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getOnClickRecurringPayments: function(opt, callback){
            var url = APP.service.getOnClickRecurringPayments + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getOneClickPaymentUrls: function(opts, callback) { 
            var url = APP.service.createOneClickPaymentUrls+"?access_token="+APP.accessToken;
            doPost($http, url, opts, function(data) {
                callback(data);
            });
        },
        getPaypalAccounts: function(opt, callback) { 
            var url = APP.service.getPaypalAccounts+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deletePaypalAccounts: function(opt, callback) { 
            var url = APP.service.deletePaypalAccount+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        setDefaultPaypalAccounts: function(opt, callback) { 
            var url = APP.service.setDefaultPaypalAccount+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);
	

 

app.service('StorePaymentService',['$http', function ($http) {
    return {
    	getOneClickPaymentUrls: function(opts, callback) { 
            var url = APP.service.createOneClickPaymentUrls+"?access_token="+APP.accessToken;
            doPost($http, url, opts, function(data) {
                callback(data);
            });
        }
    };
}]);
app.service('StorePostService',['$http', function ($http) {
    return {        
        createPost: function(opt, callback){
            var url = APP.service.createStorePost + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        listPost: function(opt, callback){
            var url = APP.service.listStorePost + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updatePost: function(opt, file, callback){
            var url = APP.service.updateStorePost + "?access_token=" + APP.accessToken;
            doPostUploadWithStoreMedia($http, url, opt, file, function(data){
                callback(data);
            });
        },
        deletePost: function(opt, callback){
            var url = APP.service.deleteStorePost + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteMediaPost: function(opt, callback){
            var url = APP.service.deleteStoreMediasPost + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    }
}]);

//services for the comment of store post

app.service('StoreCommentService',['$http', function ($http) {
    return {        
        createCommentWithImage: function(opt, file, callback){
            var url = APP.service.createStoreComment + "?access_token=" + APP.accessToken;
            doPostCommentOnStoreWithFile($http, url, opt, file, function(data){
                callback(data);
            });
        },
        createComment: function(opt, callback){
            var url = APP.service.createStoreComment + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        listComment: function(opt, callback){
            var url = APP.service.listStoreComment + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updateComment: function(opt, callback){
            var url = APP.service.updateStoreComment + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteComment: function(opt, callback){
            var url = APP.service.deleteStoreComment + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deleteMediaComment: function(opt, callback){
            var url = APP.service.deleteStoreMediaComment + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    }
}]);
	

 

app.service('ShopTransactionService',['$http', function ($http) {
    var _shopTxnTab = {};
    return {
    	getTransactions: function(opts, callback) { 
            var url = APP.service.getApplaneData+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opts, function(data) {
                callback(data);
            });
        },
        getTransactionDetail: function(opts, callback) { 
            var url = APP.service.getApplaneData+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opts, function(data) {
                callback(data);
            });
        },
        updateTransactionObject: function(opts, callback) { 
            var url = APP.service.addUpdateApplaneData+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opts, function(data) {
                callback(data);
            });
        },
        setTransactionTab: function(opts){
            _shopTxnTab = opts;
        },
        getTransactionTab: function(){
            return _shopTxnTab;
        }
    };
}]);
app.service('StoreWalletService',['$http', function ($http) {
    var stId = "";
    return {
    	getStoreWallet: function(opt, callback) { 
            var url = APP.service.getStoreWallet+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getPaymentHistory : function(opt, callback){
        	var url = APP.service.getPaymentHistory+"?access_token="+APP.accessToken;
        	doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getStoreWalletApplane: function(opt, callback) { 
            var url = APP.service.batchApplane+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getPaymentHistoryApplane : function(opt, callback){
            var url = APP.service.addUpdateApplaneData+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getShopPreniumHistoryApplane : function(opt, callback){
            var url = APP.service.getApplaneData+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
         getStoreWalletShoppingCard: function(opt, callback) { 
            var url = APP.service.batchApplane+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getStoreWalletCouponApplane: function(opt, callback) { 
            var url = APP.service.batchApplane+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getShopWalletHistory: function(opt, callback) { 
            var url = APP.service.batchApplane+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        },    
        getStoreWalletHistoryApplane: function(opt, callback) { 
            var url = APP.service.batchApplane+"?access_token="+APP.accessToken+"&session_id="+APP.currentUser.id;
            doApplanePost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);


app.service('storeShopHistorySelection', ['$location', function($location){
    var storage = false;
    return {
        storeHistoryTab: function(shopId){
            storage = true;
            $location.path('/shop/wallet/'+shopId)
        },
        getStorage: function(){
            return storage;
        },
        clearStorage : function(){
            storage = false;
        }
    } 
}]);
app.service('StoreAlbumService',['$http', '$q', function ($http, $q) {
    return {        
        createstorealbums: function(opt, callback){
            var url = APP.service.createstorealbums + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        uploadstoremediaalbums: function(opt, file, callback){
            var url = APP.service.uploadstoremediaalbums + "?access_token=" + APP.accessToken;
            doPostUploadWithStoreMedia($http, url, opt, file, function(data) {
                callback(data);
            });
        },
        uploadstoremediaalbumsfinal: function(opt, callback){
            var url = APP.service.uploadstoremediaalbums + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        storealbumlists: function(opt, callback){
            var url = APP.service.storealbumlists + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deletestorealbums: function(opt, callback){
            var url = APP.service.deletestorealbums + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        viewstorealbums: function(opt, callback){
            var url = APP.service.viewstorealbums + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        deletealbummedias: function(opt, callback){
            var url = APP.service.deletealbummedias + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);
	

 

app.service('TopLinkService',['$http', '$timeout', function ($http, $timeout) {
    var _affilate = {};
    var _noReferral = false;
    var _isAlreadyUserLogin = {};
    return {
        getTopLinkedCitizen : function(opt, callback) { 
            var url = APP.service.getTopLinkedCitizen;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getTopCitizenPerIncome : function(opt, callback) { 
            var url = APP.service.getTopCitizenPerIncome;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getTopShopPerRevenue : function(opt, callback) { 
            var url = APP.service.getTopShopPerRevenue;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        inviteAffiliation : function(opt, callback) { 
            var url = APP.service.inviteAffiliation + "?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        setAffiliationObject : function(opt) {
            _affilate = opt;
        },
        getAffiliationObject : function() {
            return _affilate;
        },
        setNoAffiliated : function(opt) {
            _noReferral = opt;
        },
        getNoAffiliated : function() {
            return _noReferral;
        },
        setIsAlreadyUserLogin : function(opt) {
            _isAlreadyUserLogin = opt;
        },
        getIsAlreadyUserLogin : function() {
            return _isAlreadyUserLogin;
        },
        checkIsValidAffiliation : function(opt, callback) { 
            var url = APP.service.checkValidUser;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    }
}]);
app.service('UserService',['$http', '$q', function ($http, $q) {
    var _hitUrl = '';
    return {
        getAccessToken: function(opts) {
            return $http({
				method: 'POST',
				url: APP.service.getAccessToken,
				data: opts,
				headers : { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' } 
				}).then(function(response) {
                if (typeof response.data === 'object') {
                    return response.data;
                } else {
                    return $q.reject(response.data);
                }
                }, function(response) {
                    return $q.reject(response.data);
            	});
        },
        getLoginUser: function(opt, callback){
            var url = APP.service.logins + "?access_token=" + APP.accessToken;;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getCurrentUser: function() {
        	return APP.currentUser;
        },
        isAuthenticated: function() {
        	return (Object.keys(APP.currentUser).length != 0 ) ? true : false;
        },
        logout: function(opt, callback){
            var url = APP.service.logout + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        forgotPassword: function(opt, callback){
            var url = APP.service.forgotPassword;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        resetPassword: function(opt, callback){
            var url = APP.service.resetPassword;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        registration: function(opt, callback){
            var url = APP.service.registration;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getFacebookRegister: function(opt, callback){
            var url = APP.service.getFacebookRegister;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        mapfacebookuser: function(opt, callback){
            var url = APP.service.mapfacebookuser;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        registerMultiProfile: function(opt, callback){
            var url = APP.service.registerMultiProfile + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getBasicProfile: function(opt, callback) {
            var url = APP.service.viewMultiProfile + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        setCurrentLang: function(opt, callback) {
            var url = APP.service.changeCurrentLanguages + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        updateFbAccessToken: function(opt, callback) {
            var url = APP.service.updateFbAccessToken + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getTotalEconomyShifted: function(opt, callback) {
            var url = APP.service.getTotalEconomy;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getCreditAndIncome: function(opt, callback) {
            var url = APP.service.getCreditAndIncome;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        setHitUrl: function(opt) {
            _hitUrl = opt;
        },
        getHitUrl: function() {
            return _hitUrl;
        },
        verifyAccount: function(opt, callback) {
            var url = APP.service.verifyAccount;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        resendverificationmail: function(opt, callback) {
            var url = APP.service.resendverificationmail;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);

app.service('CreateBrokerService',['$http', function($http) {

    //function to call the third party api
    return {
        createBroker: function(opt, callback){
            var url = APP.service.brokerMultiprofile + "?access_token=" + APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);
	

app.service('saveUserPass', function() {
    var thisusername = "";
    var thispassword = "";
    return {
        saveUserPassword: function(username, password){
            thisusername = username;
            thispassword = password;
        },
        getUsername : function(){
            return thisusername;
        },
        getPassword : function(){
            return thispassword;
        },
        clearUserPass : function(){
            var thisusername = "";
            var thispassword = "";
        },
    };
});

app.factory('$remember', function() {
    function fetchValue(name) {
        var gCookieVal = document.cookie.split("; ");
        for (var i=0; i < gCookieVal.length; i++)
        {
            // a name/value pair (a crumb) is separated by an equal sign
            var gCrumb = gCookieVal[i].split("=");
            if (name === gCrumb[0])
            {
                var value = '';
                try {
                    value = angular.fromJson(gCrumb[1]);
                } catch(e) {
                    value = unescape(gCrumb[1]);
                }
                return value;
            }
        }
            // a cookie with the requested name does not exist
            return null;
    }
    return function(name, values) {
        if(arguments.length === 1) return fetchValue(name);
        var cookie = name + '=';
        if(typeof values === 'object') {
            var expires = '';
            cookie += (typeof values.value === 'object') ? angular.toJson(values.value) + ';' : values.value + ';';
            if(values.expires) {
                var date = new Date();
                date.setTime( date.getTime() + (values.expires * 24 *60 * 60 * 1000));
                expires = date.toGMTString();
            }
            cookie += (!values.session) ? 'expires=' + expires + ';' : '';
            cookie += (values.path) ? 'path=' + values.path + ';' : '';
            cookie += (values.secure) ? 'secure;' : '';
        } else {
            cookie += values + ';';
        }
        document.cookie = cookie;
    }
});

app.service('UserWalletService',['$http', function ($http) {
    var stId = "";
    return {
    	getCitizenWallet: function(opt, callback) { 
            var url = APP.service.getCitizenWallets+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        },
        getCitizenIncomes: function(opt, callback) { 
            var url = APP.service.getCitizenIncomes+"?access_token="+APP.accessToken;
            doPost($http, url, opt, function(data) {
                callback(data);
            });
        }
    };
}]);
app.service('verifyUser',['$modal', function ($modal) {
    return {
        check: function(){
            
            TrailExpiredModal = false;
        
            var modalInstance = $modal.open({
                templateUrl: "app/views/verify_modal.html",
                size: 'lg',
                controller:'VerifyModal'
            });

            modalInstance.result.then(function () {
            }, function () {
                angular.element(document.getElementById('AppController')).scope().logoutWithoutService();
            });
        }
    };
}]);
